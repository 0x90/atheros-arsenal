# Atheros AR9344 MIPS 74Kc SoC.
# tested on DB120 (WASP SoC) reference board (Compex WPJ344)
# Board    : WPJ344 with Atheros AR9344
# Purpose  : Reset cpu, init PLL and DRAM, load u-boot-jtag,
#            for flashing u-boot
# Usage    : Power up board,
#            press any key to stop the autoboot,
#            start OpenOCD with this configuration file and configuration file of your JTAG-adapter,
#            telnet on 127.0.0.1:4444, then enter "reset", "halt", "reset init"
#
# configure file for AR9344 board
# this settings format for OpenOCD was changed/taken from source of settings for OCD Commander
# source: http://www.cpx.cz/dls/CompexWRT_firmware/recover.rar
#

adapter_nsrst_delay 100
jtag_ntrst_delay 100

reset_config trst_only separate		;# or use only "reset_config none"

set CHIPNAME ar9344

jtag newtap $CHIPNAME cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 1

set TARGETNAME $CHIPNAME.cpu
target create $TARGETNAME mips_m4k -endian big -chain-position $TARGETNAME

$TARGETNAME configure -event reset-init {
	#
	# full chip reset using watchdog
	#
	mmw 0xB806000C 0x1312d00
	mmw 0xB8060008 0x3
	sleep 1000
	halt
	reset
	mdw 0xB8060008

	#
	# PLL init
	#
	mmw 0xB81161C4 0x13210f00
	mmw 0xB81161C8 0x03000000
	mmw 0xB8116244 0x13210f00
	mmw 0xB8116248 0x03000000
	mmw 0xB8116188 0x03000000

	mmw 0xB8050008 0x0130001C
	mmw 0xB8050008 0x0130001C
	mmw 0xB8050008 0x0130001C

	mmw 0xB8050000 0x40021380
	mmw 0xB8050004 0x40815800
	mmw 0xB8050008 0x0130801C

	mmw 0xB81161C4 0x10810F00
	mmw 0xB81161C0 0x41C00000
	mmw 0xB81161C4 0xD0810F00
	mmw 0xB81161C8 0x03000000
	mmw 0xB81161C4 0xD0800F00

	mmw 0xB81161C8 0x03000000
	mmw 0xB81161C8 0x43000000
	mmw 0xB81161C8 0x030003E8

	mmw 0xb8116244 0x10810F00
	mmw 0xb8116240 0x41680000
	mmw 0xb8116244 0xD0810F00
	mmw 0xb8116248 0x03000000
	mmw 0xb8116244 0xD0800F00

	mmw 0xb8116248 0x03000000
	mmw 0xb8116248 0x43000000
	mmw 0xb8116248 0x03000718

	mmw 0xB8050008 0x01308018
	mmw 0xB8050008 0x01308010
	mmw 0xB8050008 0x01308000
	mmw 0xB8050044 0x78180200
	mmw 0xB8050048 0x41C00000

	sleep 100

	#
	# flash remap
	#
	mmw 0xBF000004 0x43

	#
	# DDR init
	#
	mmw 0xB8000108 0x40
	mmw 0xB8000018 0xFF
	mmw 0xB80000C4 0x74444444
	mmw 0xB80000C8 0x0222
	mmw 0xB80000CC 0xFFFFF

	mmw 0xB8000000 0xC7D48CD0
	mmw 0xB8000004 0x9DD0E6A8

	mmw 0xB80000B8 0x0E59
	mmw 0xB8000004 0x9DD0E6A8

	mmw 0xB8000010 0x08
	mmw 0xB8000010 0x08
	mmw 0xB8000010 0x10
	mmw 0xB8000010 0x20
	mmw 0xB800000C 0x02
	mmw 0xB8000010 0x02

	mmw 0xB8000008 0x0133
	mmw 0xB8000010 0x1
	mmw 0xB8000010 0x8
	mmw 0xB8000010 0x8
	mmw 0xB8000010 0x4
	mmw 0xB8000010 0x4

	mmw 0xB8000008 0x33
	mmw 0xB8000010 0x1

	mmw 0xB800000C 0x0382
	mmw 0xB8000010 0x2
	mmw 0xB800000C 0x0402
	mmw 0xB8000010 0x2

	mmw 0xB8000014 0x4270

	mmw 0xB800001C 0x0e
	mmw 0xB8000020 0x0e
	mmw 0xB8000024 0x0e
	mmw 0xB8000028 0x0e

	sleep 100

	#
	# set correct info starting in location 0xa0001000
	#     word 0: magic, must be 0x20140109
	#     word 1: flash offset to write
	#     word 2: length of data to write
	# download u-boot to location 0xa0001010
	# Note: OCD Commander only support download of SREC file, so tuboot.bin
	#       needs to be converted to SREC format. i.e.
	#       objcopy -I binary -O srec --change-addresses 0xa0001010 --srec-forceS3 tuboot.bin tuboot.srec
	#
	mmw 0xa0001000 0x20140109
	mmw 0xa0001004 0x0
	mmw 0xa0001008 0x10000
	load_image tuboot.srec 0xa0001010

	#
	# Download JTAG u-boot flashing utility
	# Note: OCD Commander only support download of SREC file, so u-boot-jtag.bin
	#       needs to be converted to SREC format. i.e.
	#       objcopy -I binary -O srec --change-addresses 0x80100000 --srec-forceS3 u-boot-jtag.bin u-boot-jtag.srec
	#
	load_image u-boot-jtag.srec 0x80100000

	#
	# run the flashing utility
	#
	resume 0x80100000
}

# setup working area somewhere in RAM
$TARGETNAME configure -work-area-phys 0xa0600000 -work-area-size 0x20000

# serial SPI capable flash
# flash bank <driver> <base> <size> <chip_width> <bus_width>