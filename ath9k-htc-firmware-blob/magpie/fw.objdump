
../ath9k-htc-firmware-blob/magpie/fw.elf:     Dateiformat elf32-xtensa-be
../ath9k-htc-firmware-blob/magpie/fw.elf
Architektur: xtensa, Flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
Startadresse 0x00906000

Xtensa header:

Machine     = Base
Insn tables = true
Literal tables = true

Programm-Header:
    LOAD off    0x00501000 vaddr 0x00501000 paddr 0x00501000 align 2**29
         filesz 0x00001ae8 memsz 0x00001ae8 flags r--
    LOAD off    0x00510d00 vaddr 0x00510d00 paddr 0x00510d00 align 2**29
         filesz 0x00001f68 memsz 0x00002210 flags rw-
    LOAD off    0x00906000 vaddr 0x00906000 paddr 0x00906000 align 2**29
         filesz 0x00009211 memsz 0x00009211 flags r-x

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .lit4         00019000  004e8000  004e8000  00000000  2**0
                  ALLOC
  1 .rodata       000012bc  00501000  00501000  00501000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .literals     0000082c  005022bc  005022bc  005022bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dport0.bss   00000000  00510d00  00510d00  0090f211  2**0
                  CONTENTS
  4 .data         00001f68  00510d00  00510d00  00510d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002a8  00512c68  00512c68  00512c68  2**2
                  ALLOC
  6 .boot         00000270  00906000  00906000  00906000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text         00008fa1  00906270  00906270  00906270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .debug_aranges 00000348  00000000  00000000  0090f211  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00060024  00000000  00000000  0090f559  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006524  00000000  00000000  0096f57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012f87  00000000  00000000  00975aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001fb8  00000000  00000000  00988a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00009246  00000000  00000000  0098a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d0e9  00000000  00000000  00993c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .xt.prop      0000504c  00000000  00000000  009a0d0f  2**0
                  CONTENTS, READONLY
 16 .debug_ranges 00000f58  00000000  00000000  009a5d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000006d  00000000  00000000  009a6cb3  2**0
                  CONTENTS, READONLY
 18 .xtensa.info  00000038  00000000  00000000  009a6d20  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
004e8000 l    d  .lit4	00000000 .lit4
00501000 l    d  .rodata	00000000 .rodata
005022bc l    d  .literals	00000000 .literals
00510d00 l    d  .dport0.bss	00000000 .dport0.bss
00510d00 l    d  .data	00000000 .data
00512c68 l    d  .bss	00000000 .bss
00906000 l    d  .boot	00000000 .boot
00906270 l    d  .text	00000000 .text
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .xt.prop	00000000 .xt.prop
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .xtensa.info	00000000 .xtensa.info
00000000 l    df *ABS*	00000000 magpie.c
00501000 l     O .rodata	0000000d __FUNCTION__$3904
00000000 l    df *ABS*	00000000 adf_nbuf.c
005010d7 l     O .rodata	00000010 __FUNCTION__$4939
005010bb l     O .rodata	0000001c __FUNCTION__$4944
0050109f l     O .rodata	0000001c __FUNCTION__$4949
0050108d l     O .rodata	00000012 __FUNCTION__$4955
00501068 l     O .rodata	00000010 __FUNCTION__$4984
00501055 l     O .rodata	00000013 __FUNCTION__$4989
00501041 l     O .rodata	00000014 __FUNCTION__$5002
00501026 l     O .rodata	0000001b __FUNCTION__$5059
0050100d l     O .rodata	00000019 __FUNCTION__$5072
00501078 l     O .rodata	00000015 __FUNCTION__$4979
00000000 l    df *ABS*	00000000 dbg_api.c
00906dc0 l     F .text	00000011 db_incorect_format
00906dd4 l     F .text	00000028 zf_debug_init
00906dfc l     F .text	0000006a db_ascii_to_hex
00906e68 l     F .text	00000038 db_hex_to_ascii
00906ea0 l     F .text	00000035 db_help_cmd
00906ed8 l     F .text	00000013 db_cmd_starthtc
00906eec l     F .text	0000005c db_cmd_memcmp
00906f48 l     F .text	0000009c db_cmd_memdump
00906fe4 l     F .text	000000bc db_str_cmd
009070a0 l     F .text	00000088 db_ldr_cmd
00907128 l     F .text	000000d9 db_intr_cmd
00907204 l     F .text	00000146 db_wdt_cmd
0090734c l     F .text	00000036 db_usb_cmd
00907384 l     F .text	00000024 db_info_cmd
009073a8 l     F .text	00000243 zf_debug_task
00907628 l     F .text	0000006c db_clock_cmd
00000000 l    df *ABS*	00000000 usb_api_main_patch.c
00510d02 l     O .data	00000002 cmd_is_new$5398
00512c94 l     O .bss	00000004 evntbuf$5396
00512c90 l     O .bss	00000004 regaddr$5397
00512c8c l     O .bss	00000002 buf_len$5395
00510d00 l     O .data	00000002 cmd_is_new$5417
00512c88 l     O .bss	00000004 buf$5415
00512c84 l     O .bss	00000002 cmd_len$5414
005011b4 l     O .rodata	00000012 __func__$5418
00512c80 l     O .bss	00000004 regaddr$5413
00000000 l    df *ABS*	00000000 if_ath.c
00907ae4 l     F .text	00000014 __adf_os_mem_alloc
00907af8 l     F .text	00000013 __adf_os_mem_copy
00907b0c l     F .text	00000013 __adf_os_mem_set
00907b20 l     F .text	00000005 tgt_HTCRecv_uapsdhandler
0050124e l     O .rodata	00000019 __FUNCTION__$7815
00907b28 l     F .text	0000001c dispatch_magpie_sys_cmds
00907b44 l     F .text	00000005 htc_setup_comp
00908084 l     F .text	0000010a tgt_HTCSendCompleteHandler
00907f78 l     F .text	00000074 tgt_ServiceConnect
00907b4c l     F .text	0000002e tgt_reg_service
00501234 l     O .rodata	0000001a __FUNCTION__$7379
00907b7c l     F .text	000000a6 tgt_HTCRecvMessageHandler
00907c24 l     F .text	00000010 tgt_HTCRecv_mgmthandler
00907c34 l     F .text	00000098 ath_descdma_cleanup
00907ccc l     F .text	00000014 __adf_os_init_bh$isra$5
00907ce0 l     F .text	00000010 __adf_os_sched_bh$isra$6
00907cf0 l     F .text	000000b7 ath_tgt_rx_tasklet
00907da8 l     F .text	00000198 ath_rxdesc_init
00512c9c l     O .bss	00000001 reset_pll$7628
00907f40 l     F .text	00000036 ath_pll_reset_ones$isra$12
0050120d l     O .rodata	00000013 __FUNCTION__$7855
00907fec l     F .text	0000005c ath_reg_read_filter
00908048 l     F .text	0000003b tgt_HTCRecv_cabhandler
00908190 l     F .text	0000004c ath_desc_free
005011ec l     O .rodata	00000012 __FUNCTION__$7416
009081dc l     F .text	000000b4 ath_descdma_setup$isra$22$constprop$28
00510e08 l     O .data	00000004 ath_numrxbufs
0050129d l     O .rodata	0000001a __FUNCTION__$7249
00908940 l     F .text	00000012 ath_fatal_tasklet
00908954 l     F .text	00000012 ath_bmiss_tasklet
005012b7 l     O .rodata	0000000c __FUNCTION__$7192
009089c4 l     F .text	0000006a ath_hal_reg_rmw_tgt
00908a30 l     F .text	00000088 ath_rc_mask_tgt
00908ab8 l     F .text	00000023 ath_rx_stats_tgt
00908adc l     F .text	00000042 ath_tx_stats_tgt
00908b20 l     F .text	00000032 ath_int_stats_tgt
00908b54 l     F .text	0000006f ath_node_update_tgt
00908bc4 l     F .text	0000002a ath_detach_tgt
00501289 l     O .rodata	00000014 __FUNCTION__$7552
00908bf0 l     F .text	000000ab ath_enable_aggr_tgt
00908c9c l     F .text	0000002c ath_ic_update_tgt
00908cc8 l     F .text	0000005a handle_rc_rate_update_cmd
00908d24 l     F .text	00000052 handle_rc_state_change_cmd
00908d78 l     F .text	0000004a ath_hal_reg_write_tgt
00908dc4 l     F .text	00000042 ath_hal_reg_read_tgt
00501276 l     O .rodata	00000013 __FUNCTION__$7573
00908e08 l     F .text	0000007a ath_vap_create_tgt
00908e84 l     F .text	00000052 ath_vap_delete_tgt
00908ed8 l     F .text	00000030 ath_node_cleanup_tgt
00908f08 l     F .text	000000af ath_node_create_tgt
00501267 l     O .rodata	0000000f __FUNCTION__$7171
00908fb8 l     F .text	00000080 ath_setcurmode_tgt
00909038 l     F .text	00000050 ath_flushrecv_tgt
00909088 l     F .text	0000003a ath_stoprecv_tgt
009090c4 l     F .text	00000086 ath_startrecv_tgt
0090914c l     F .text	000000c6 ath_draintxq_tgt
00909214 l     F .text	0000002e ath_tx_draintxq_tgt
00909244 l     F .text	00000023 ath_aborttx_dma_tgt
00909268 l     F .text	00000026 ath_stop_tx_dma_tgt
00909290 l     F .text	00000040 ath_aborttxq_tgt
009092d0 l     F .text	0000004e ath_init_tgt
00909320 l     F .text	00000054 ath_enable_intr_tgt
00909374 l     F .text	00000026 ath_disable_intr_tgt
0090939c l     F .text	0000001e ath_get_tgt_version
009093bc l     F .text	00000013 handle_echo_command
00501220 l     O .rodata	00000014 __FUNCTION__$7307
009093e8 l     F .text	000001d4 tgt_HTCRecv_beaconhandler
00510d04 l     O .data	00000100 Magpie_Sys_DispatchEntries
00510e04 l     O .data	00000004 ath_numrxdescs
005011fe l     O .rodata	0000000f __FUNCTION__$7439
00000000 l    df *ABS*	00000000 htc.c
005012c3 l     O .rodata	00000018 __FUNCTION__$4106
00000000 l    df *ABS*	00000000 wmi_svc.c
0090a354 l     F .text	0000000b WMIServiceConnect
0090a360 l     F .text	00000007 _WMI_GetPendingEventsCount
0090a368 l     F .text	00000007 _WMI_GetControlEp
0090a370 l     F .text	00000014 _WMI_RegisterDispatchTable
0090a384 l     F .text	00000005 _WMI_Shutdown
005012db l     O .rodata	00000016 __FUNCTION__$3905
0090a38c l     F .text	0000009b WMIRecvMessageHandler
0090a428 l     F .text	00000024 _WMI_SendCompleteHandler
0090a44c l     F .text	00000030 _WMI_AllocEvent
0090a47c l     F .text	00000036 _WMI_SendEvent
0090a4b4 l     F .text	0000006f _WMI_Init
00000000 l    df *ABS*	00000000 ar5416_hw.c
005012f4 l     O .rodata	000000d4 ar5416hal_10
00000000 l    df *ABS*	00000000 ratectrl_11n_ln.c
0090c08c l     F .text	000000bc rcRateSetseries
0090c148 l     F .text	00000058 rcIsValidPhyRate
0090c1a0 l     F .text	00000401 rcSibUpdate_ht$constprop$6
0090c5a4 l     F .text	0000002a ath_rate_newassoc_11n
005013c8 l     O .rodata	00000028 nRetry2PerLookup$7259
0090c5d0 l     F .text	0000020e rcUpdate_ht$constprop$5
0090c7e0 l     F .text	00000062 rcRateGetIndex$constprop$9
00000000 l    df *ABS*	00000000 if_owl.c
0090cddc l     F .text	00000013 __adf_os_mem_copy
0090cdf0 l     F .text	0000004d ieee80211_anyhdrsize
0090ce40 l     F .text	0000004c owl_tgt_tid_init
00501455 l     O .rodata	00000016 __FUNCTION__$7248
0090ce8c l     F .text	0000008a ath_tgt_txq_add_ucast
0090cf18 l     F .text	0000005f ath_tx_update_baw
0090cf78 l     F .text	00000060 ath_update_stats$isra$1
0090cfd8 l     F .text	00000024 ath_tgt_tx_enqueue$isra$3
0090cffc l     F .text	00000076 ath_update_aggr_stats$isra$5
0090d074 l     F .text	00000014 ath_dma_unmap$isra$6
0090d088 l     F .text	00000026 ath_tgt_skb_free$isra$7
0090d0b0 l     F .text	0000009e ath_filltxdesc$isra$9
0090d150 l     F .text	0000004e ath_tx_tgt_setds
0090d1a0 l     F .text	00000013 __adf_os_mem_set$constprop$19
005014b4 l     O .rodata	00000040 bits_per_symbol
0090d1b4 l     F .text	00000212 ath_buf_set_rate
0090d3c8 l     F .text	00000016 ath_dma_map$isra$8
005014a5 l     O .rodata	0000000f __FUNCTION__$7057
0090d3e0 l     F .text	00000111 ath_buf_toggle
0090d4f4 l     F .text	0000003c ath_buf_comp
0090d530 l     F .text	00000083 ath_tx_freebuf
0090ef4c l     F .text	00000107 ath_bar_tx_comp
0090d5b4 l     F .text	0000016a ath_bar_tx
0090d920 l     F .text	00000010 ATH_SKB2_WH
0090d930 l     F .text	0000002f ath_tx_set_retry$isra$12
0090d960 l     F .text	000000e7 ath_tx_retry_subframe$isra$14
0090da48 l     F .text	000000b7 ath_tx_comp_aggr_error
0050146b l     O .rodata	00000011 __FUNCTION__$7213
0050147c l     O .rodata	00000013 __FUNCTION__$7222
00501444 l     O .rodata	00000011 __FUNCTION__$7329
0050142e l     O .rodata	00000016 __FUNCTION__$7350
0090ea30 l     F .text	0000005a ath_tgt_tx_comp_normal
0050141a l     O .rodata	00000014 __FUNCTION__$7373
00501405 l     O .rodata	00000015 __FUNCTION__$7439
0050148f l     O .rodata	00000016 __FUNCTION__$7402
0090e67c l     F .text	00000214 ath_tgt_txq_schedule
0090e99c l     F .text	00000046 ath_aggr_resume_tid
0090e9e4 l     F .text	0000004b owl_tgt_tid_cleanup
005013f0 l     O .rodata	00000015 __FUNCTION__$7476
00000000 l    df *ABS*	00000000 app_start.c
0090f120 l     F .text	00000029 io32_rmw
00000000 l    df *ABS*	00000000 init.c
00906270 l     F .text	00000029 io32_rmw
00512c70 l     O .bss	00000004 loop_high
00512c74 l     O .bss	00000004 loop_low
00000000 l    df *ABS*	00000000 ah_osdep.c
00000000 l    df *ABS*	00000000 wlan_pci.c
00000000 l    df *ABS*	00000000 usb_api_magpie_patch.c
0090a55c l     F .text	00000029 io32_rmw
0090a588 l     F .text	00000068 _fw_restore_dma_fifo
0090a5f0 l     F .text	00000377 _fw_reset_dma_fifo
00000000 l    df *ABS*	00000000 if_ath_pci.c
0090f054 l     F .text	00000005 ath_pci_suspend
0090f05c l     F .text	00000005 ath_pci_resume
0090f064 l     F .text	00000010 ath_pci_remove
00511bc0 l     O .data	00000020 ath_drv_info
0090f084 l     F .text	0000007e ath_pci_probe
00511be0 l     O .data	00000160 ath_pci_id_table
00000000 l    df *ABS*	00000000 buf_pool_static.c
00000000 l    df *ABS*	00000000 cmnos_clock_patch.c
00512cbc l     O .bss	00000004 last_tick$3816
00000000 l    df *ABS*	00000000 HIF_usb_patch.c
00000000 l    df *ABS*	00000000 adf_os_dma.c
00000000 l    df *ABS*	00000000 adf_os_irq_pvt.c
00000000 l    df *ABS*	00000000 ah.c
00000000 l    df *ABS*	00000000 ar5416_phy.c
00000000 l    df *ABS*	00000000 adf_net.c
00000000 l    df *ABS*	00000000 ar5416Phy.c
00000000 l    df *ABS*	00000000 ieee80211_output.c
00500abc g       *ABS*	00000000 u16TxRxCounter
00906728 g     F .text	00000035 init_mem
00511388 g     O .data	000002bc ar5416_11g_table
008e37e8 g       *ABS*	00000000 HIFusb_DescTraceDump
0090cd5c g     F .text	00000036 ath_rate_tx_complete
004e8000 g       *ABS*	00000000 _rom_literal_start
0090654c g     F .text	00000054 zfGenWrongEpidEvent
00906a90 g     F .text	0000002b __adf_nbuf_dmamap_info
00512cf4 g     O .bss	000000a0 cmd_str
00510e0c g     O .data	00000002 bEepromExist
009079dc g     F .text	00000079 bGet_descriptor_patch
0090db00 g     F .text	0000002d ath_tgt_tid_drain
00906bc8 g     F .text	00000011 __adf_nbuf_last
00500ad0 g       *ABS*	00000000 u8UsbInterfaceValue
00906984 g     F .text	00000020 __adf_nbuf_copy
00512cc0 g     O .bss	00000004 _assfail_ori
00906a70 g     F .text	00000009 __adf_nbuf_map
005022bc g       *ABS*	00000000 _bss_table_end
0090f200 g     F .text	0000000c __adf_net_register_drv
00512ca0 g     O .bss	00000004 g_wlan_intr
00906a54 g     F .text	0000001c __adf_nbuf_dmamap_create
0090ad28 g     F .text	0000004f ath_hal_get_curmode
00511d40 g     O .data	0000073c ar5416_11naRateTable
0090a068 g     F .text	00000098 HTCControlSvcProcessMsg
0051247c g     O .data	000007ec ar5416_11ngRateTable
00512d94 g     O .bss	00000002 gvLen
00909a40 g     F .text	0000000f wlan_pci_module_init
00500000 g       *ABS*	00000000 _indir_tbl
0090ac6c g     F .text	00000010 ath_hal_attach_tgt
00906d9c g     F .text	00000023 buf_pool_module_install
00501000 g       *ABS*	00000000 _lit4_end
00906c80 g     F .text	00000007 __adf_nbuf_is_cloned
0090780c g     F .text	000000ff usb_reg_out_patch
00906abc g     F .text	00000005 __adf_nbuf_set_rx_cksum
0090bdc4 g     F .text	000000bc ar5416AbortTxDma
00512d98 g     O .bss	00000004 cmd_buf_ptr
0090f211 g       *ABS*	00000000 _text_end
0090ea8c g     F .text	00000408 ath_tgt_tx_comp_aggr
0090ab8c g     F .text	00000013 _HIFusb_isr_handler_patch
0090ccfc g     F .text	0000002e ath_rate_attach
0090bce0 g     F .text	00000044 ar5416Set11nBurstDuration_20
00907950 g     F .text	00000022 vUsbFIFO_EPxCfg_FS_patch
00906acc g     F .text	0000009a __adf_nbuf_create_frm_frag
009076e8 g     F .text	00000022 cold_reboot
00501000 g       *ABS*	00000000 _lit4_start
00907694 g     F .text	0000000f cmnos_dbg_module_install
00502ae8 g       *ABS*	00000000 _dram0_literal_end
0090a100 g     F .text	0000003c AdjustCreditThreshold
00502ae8 g       *ABS*	00000000 _dram0_literal_start
0090ad78 g     F .text	00000029 ath_hal_wait
0090f211 g       .text	00000000 _etext
0090bd24 g     F .text	0000006f ar5416Set11nVirtualMoreFrag_20
008e4f60 g       *ABS*	00000000 vbuf_module_install
00512c68 g     O .bss	00000004 idle_cnt
0090d720 g     F .text	00000043 owl_tgt_node_init
0090770c g     F .text	000000ff usb_status_in_patch
00909a50 g     F .text	0000000a wlan_pci_register_drv
0090692c g     F .text	0000002a __adf_nbuf_push_head
009076a4 g     F .text	00000022 _fw_usbfifo_recv_command
0090f110 g     F .text	0000000f ar5416AttachRateTables
00909bf4 g     F .text	000000bf _HTC_Init
009068cc g     F .text	0000001e __adf_nbuf_realloc_headroom
0090bb10 g     F .text	00000089 ar5416Set11nAggrFirst_20
00906a88 g     F .text	00000005 __adf_nbuf_dmamap_destroy
0090de48 g     F .text	0000043b ath_tgt_send_mgt
0090c058 g     F .text	00000033 ar5416GetRateTable
00906ca0 g     F .text	0000000d __adf_nbuf_queue_init
008e6b64 g       *ABS*	00000000 memcpy
0090cd94 g     F .text	00000012 ath_rate_newassoc
005022bc g       *ABS*	00000000 _rodata_end
00906ac4 g     F .text	00000007 __adf_nbuf_get_vlan_info
0090cac4 g     F .text	00000196 rcUpdate_11n
0090acb4 g     F .text	00000073 ath_hal_computetxtime
00500ad8 g       *ABS*	00000000 u8UsbDeviceDescriptor
0090cc5c g     F .text	0000009e ath_tx_status_update_rate
00906cb8 g     F .text	00000007 __adf_nbuf_queue_first
00512cc4 g     O .bss	00000004 htc_handle
0090d920 g     F .text	00000010 ATH_SKB_2_WH
0090f14c g     F .text	000000b3 ieee80211_tgt_crypto_encap
008e6a4c g       *ABS*	00000000 __udivsi3
00909d44 g     F .text	00000057 _HTC_Ready
00907a58 g     F .text	00000010 ath_hal_getuptime
00906c04 g     F .text	0000003b __adf_nbuf_trim_tail
00512c68 g       *ABS*	00000000 _bss_start
00510d00 g       *ABS*	00000000 _dram0_data_end
00511900 g     O .data	000002bc ar5416_11a_table
00909e04 g     F .text	00000066 ReturnBuffers
0090ddc0 g     F .text	00000088 ath_tgt_tx_send_normal
00500ad2 g       *ABS*	00000000 u8UsbInterfaceAlternateSetting
00512c68 g       *ABS*	00000000 __XT_EXCEPTION_DESCS__
0090e340 g     F .text	000000c6 ath_tgt_handle_aggr
005010e8 g     O .rodata	000000cc command_table
00906270 g       *ABS*	00000000 _text_start
009076c8 g     F .text	00000020 _fw_usbfifo_init
0090e890 g     F .text	0000009a owltgt_tx_processq
009068ec g     F .text	0000001e __adf_nbuf_realloc_tailroom
0090e284 g     F .text	00000070 ath_tgt_handle_normal
0090b170 g     F .text	00000015 ar5416StartTxDma
0090bf88 g     F .text	00000055 ar5416SetRxFilter
00907ac4 g     F .text	00000005 ath_hal_free
0090a13c g     F .text	0000014e _HTC_SendMsg
0090bfe0 g     F .text	00000077 ar5416Attach
00906c78 g     F .text	00000005 __adf_nbuf_cat
0090b15c g     F .text	00000014 ar5416SetTxDP
0090cda8 g     F .text	00000012 ath_rate_node_update
008e1548 g       *ABS*	00000000 generic_hif_module_install
00906c4c g     F .text	00000019 __adf_nbuf_tailroom
00906c70 g     F .text	00000007 __adf_nbuf_clone
008e4934 g       *ABS*	00000000 mUsbFIFOConfig
0090ab08 g     F .text	0000000a cmnos_clock_init_patch
008e36e4 g       *ABS*	00000000 _HIFusb_isr_handler
00906cf8 g     F .text	00000057 _buf_pool_static_create_pool
00512d9c g     O .bss	00000028 raw_cmd
00906cb0 g     F .text	00000007 __adf_nbuf_queue_len
00501000 g       *ABS*	00000000 _dport0_literal_start
0090f104 g     F .text	0000000b exit_ath_pci
00512f10 g       *ABS*	00000000 _bss_end
00906cf0 g     F .text	00000005 _buf_pool_static_shutdown
0090b0f8 g     F .text	00000061 ar5416UpdateTxTrigLevel
00512cb4 g     O .bss	00000002 bJumptoFlash
00512cc8 g     O .bss	0000002c g_poolCtx
009069ec g     F .text	00000020 __adf_nbuf_get_priv
00512cb0 g     O .bss	00000004 gpio_func
00909fec g     F .text	0000007b HTCProcessConfigPipeMsg
00906d50 g     F .text	00000024 _buf_pool_static_alloc_buf
0090bd94 g     F .text	0000000a ar5416Detach
0090ae7c g     F .text	0000000f ar5416EnableReceive
00500aa4 g       *ABS*	00000000 usbFifoConf
00500ab8 g       *ABS*	00000000 pu8DescriptorEX
0090ab14 g     F .text	0000000a cmnos_refclk_speed_get_patch
0090b7a4 g     F .text	00000108 ar5416Set11nTxDesc_20
00510d00 g       *ABS*	00000000 _dram0_data_start
0090f074 g     F .text	0000000d init_ath_pci
00511644 g     O .data	000002bc ar5416_11b_table
008e3a9c g       *ABS*	00000000 bGet_descriptor
0090b188 g     F .text	0000002e ar5416NumTxPending
009095bc g     F .text	0000045c ath_tgt_attach
00909b98 g     F .text	00000013 _HTC_GetReservedHeadroom
00906834 g     F .text	0000003c Magpie_init
00512c68 g       *ABS*	00000000 __XT_EXCEPTION_DESCS_END__
00906470 g     F .text	0000005e zfGenExceptionEvent
00906b68 g     F .text	00000060 __adf_nbuf_split_to_frag
0090a524 g     F .text	00000037 WMI_service_module_install
00906d74 g     F .text	00000010 _buf_pool_static_alloc_buf_align
00501000 g       *ABS*	00000000 _dport0_rodata_start
00510d00 g       *ABS*	00000000 _dport0_data_start
008e6958 g       *ABS*	00000000 xthal_get_ccount
0090690c g     F .text	0000001e __adf_nbuf_expand
0090adbc g     F .text	00000085 ar5416SetInterrupts
009062e4 g     F .text	00000066 change_magpie_clk
0090ae6c g     F .text	0000000d ar5416SetRxDP
0090d764 g     F .text	00000010 ath_tx_status_clear
00512ca4 g     O .bss	00000004 g_wlan_drv_handle
00909bac g     F .text	0000002e HTCSendDoneHandler
0090a968 g     F .text	00000072 _fw_usb_suspend_reboot
008e497c g       *ABS*	00000000 mUsbEPMxPtSzLow
0090ae44 g     F .text	00000026 ar5416GetTsf64
00512cb8 g     O .bss	00000004 ref_clk
00909d9c g     F .text	00000066 HTCCheckAndSendCreditReport
00500a98 g       *ABS*	00000000 ControlCmd
00510d00 g       *ABS*	00000000 _data_start
00500ace g       *ABS*	00000000 u8UsbConfigValue
00907aa0 g     F .text	00000022 ath_hal_malloc
0090bda0 g     F .text	00000021 ar5416StopDmaReceive
00909cb4 g     F .text	00000005 _HTC_PauseRecv
0090f20c g     F .text	00000005 __adf_net_unregister_drv
0090ac24 g     F .text	0000002e __adf_os_dmamem_alloc
008e48f8 g       *ABS*	00000000 mUsbEPMap
00906958 g     F .text	0000002b __adf_nbuf_pull_head
0090ac54 g     F .text	0000000c __adf_os_setup_intr
00512c7c g     O .bss	00000004 m_origUsbfifoRecvCmd
0090ab3c g     F .text	0000002b cmnos_tick_patch
00906a0c g     F .text	0000001e __adf_nbuf_queue_add
00908968 g     F .text	0000005b wmi_cmd_rsp
009069a4 g     F .text	00000020 __adf_nbuf_unshare
00512ec0 g     O .bss	00000012 UsbDeviceDescriptorPatch
00906d84 g     F .text	00000018 _buf_pool_static_free_buf
00906cc8 g     F .text	00000010 __adf_nbuf_is_queue_empty
0090ada4 g     F .text	00000017 ar5416IsInterruptPending
00907acc g     F .text	00000015 ath_hal_memcpy
008e6348 g       *ABS*	00000000 _xtos_set_exception_handler
00906000 g     F .boot	00000270 app_start
0090b1b8 g     F .text	000001e6 ar5416SetupTxDesc_20
0050095c g       *ABS*	00000000 cticks
008e5010 g       *ABS*	00000000 vdesc_module_install
0090d774 g     F .text	000000c3 ath_tx_status_update
00512c68 g       *ABS*	00000000 _data_end
0090f211 g       *ABS*	00000000 _iram0_text_end
0090e408 g     F .text	00000273 ath_tgt_tx_form_aggr
005022ab g       *ABS*	00000000 __XT_EXCEPTION_TABLE__
0090e2f4 g     F .text	0000004a ath_tx_addto_baw
00906a2c g     F .text	00000026 __adf_nbuf_queue_remove
00909a18 g     F .text	00000028 ath_detach
00906760 g     F .text	0000005d wlan_task
005022bc g       *ABS*	00000000 _literals_start
00512dc4 g     O .bss	000000f0 cmd_buffer
00906cd8 g     F .text	00000018 _buf_pool_static_init
00512c6c g     O .bss	00000001 htc_complete_setup
00906c68 g     F .text	00000008 __adf_nbuf_len
0090be80 g     F .text	0000003d ar5416StopTxDma
00909b68 g     F .text	00000016 wlan_pci_isr
008e6e48 g       *ABS*	00000000 memset
00502ae8 g       *ABS*	00000000 _literals_end
00909b80 g     F .text	00000005 _HTC_Shutdown
0090ac7c g     F .text	00000037 ath_hal_getcapability
009069c4 g     F .text	00000027 __adf_nbuf_frag_info
00501000 g       *ABS*	00000000 _dport0_rodata_end
0090ab20 g     F .text	0000001c cmnos_delay_us_patch
00500ac4 g       *ABS*	00000000 eUsbCxFinishAction
00512c98 g     O .bss	00000004 init_htc_handle
00909d08 g     F .text	00000016 HTCFreeMsgBuffer
0090bb9c g     F .text	00000083 ar5416Set11nAggrMiddle_20
00906c88 g     F .text	00000015 __adf_nbuf_peek_header
009065d4 g     F .text	00000153 HTCMsgRecvHandler_patch
00906444 g     F .text	0000002a reset_EP4_FIFO
008e6998 g       *ABS*	00000000 __divsi3
008e6560 g       *ABS*	00000000 strcmp
0090af1c g     F .text	000001dc ar5416ProcRxDescFast_20
00501000 g       *ABS*	00000000 _dram0_rodata_start
0090a9dc g     F .text	000000da zfTurnOffPower_patch
00501000 g       *ABS*	00000000 _rom_literal_end
00908290 g     F .text	0000005b wmi_event
00512c78 g     O .bss	00000004 delay
00909a8c g     F .text	0000003c wlan_pci_config_read
009082ec g     F .text	00000654 ath_intr
00909e6c g     F .text	00000010 _HTC_ReturnBuffers
008e1574 g       *ABS*	00000000 athos_indirection_table_install
008e6980 g       *ABS*	00000000 xthal_get_intenable
0090e92c g     F .text	00000070 owl_tgt_tx_tasklet
008e4954 g       *ABS*	00000000 mUsbEPMxPtSzHigh
00907a90 g     F .text	00000010 ath_hal_delay
00500ac0 g       *ABS*	00000000 u8ConfigDescriptorEX
00906870 g     F .text	0000003e __adf_nbuf_alloc
0090aba0 g     F .text	00000083 _HIFusb_start_patch
00906cc0 g     F .text	00000007 __adf_nbuf_queue_next
009075ec g     F .text	0000003c db_ascii_to_int
0090a28c g     F .text	000000be HTCMsgRecvHandler
0090d838 g     F .text	000000a0 ath_tx_status_update_aggr
009068b0 g     F .text	0000001c __adf_nbuf_free
00512eb4 g     O .bss	00000004 cmd_not_found
008e4914 g       *ABS*	00000000 mUsbFIFOMap
009067c0 g     F .text	00000005 htc_setup_comp
005022ac g       *ABS*	00000000 _bss_table_start
005110cc g     O .data	000002bc ar5416_11ng_table
00906a7c g     F .text	00000009 __adf_nbuf_unmap
00906c40 g     F .text	0000000a __adf_nbuf_headroom
0090ee94 g     F .text	000000b6 ath_tgt_tx_cleanup
008e3e64 g       *ABS*	00000000 bStandardCommand
008e3b54 g       *ABS*	00000000 bSet_configuration
00909ac8 g     F .text	000000a0 wlan_pci_probe
009064d0 g     F .text	0000007c AR6002_fatal_exception_handler_patch
00909cc4 g     F .text	00000041 htc_module_install
00510d00 g       *ABS*	00000000 _dport0_data_end
0090ab68 g     F .text	0000000d cmnos_milliseconds_patch
00512cac g     O .bss	00000004 gpio
00501000 g       *ABS*	00000000 _rodata_start
009093d0 g     F .text	00000018 ath_get_minrateidx
00512f10 g       .bss	00000000 _end
008e34a0 g       *ABS*	00000000 _HIFusb_start
0090ab78 g     F .text	00000011 _HIFusb_get_max_msg_len_patch
0090aab8 g     F .text	0000004f zfResetUSBFIFO_patch
0090d8d8 g     F .text	00000046 ath_tx_status_send
00512eb8 g     O .bss	00000004 cmd_buf_full
0090f211 g       *ABS*	00000000 _iram0_text_start
0090bc20 g     F .text	0000007d ar5416Set11nAggrLast_20
00909ec8 g     F .text	00000043 HTCControlSvcProcessSendComplete
00909d20 g     F .text	00000021 HTCAllocMsgBuffer
00511bbc g     O .data	00000004 g_pci_init_func
00909b88 g     F .text	0000000d _HTC_RegisterService
00907a68 g     F .text	00000026 _ath_hal_attach_tgt
00909f0c g     F .text	000000e0 HTCProcessConnectMsg
0090bca0 g     F .text	0000003e ar5416Clr11nAggr_20
0090c844 g     F .text	0000027e rcRateFind_11n
00906bdc g     F .text	00000026 __adf_nbuf_put_tail
0090cd2c g     F .text	0000002f ath_rate_findrate
00512ca8 g     O .bss	00000004 g_wlan_drv
0090634c g     F .text	000000f6 exception_reset
0090b3a0 g     F .text	00000136 ar5416FillTxDesc_20
00909bdc g     F .text	00000017 HTC_AssembleBuffers
00510e10 g     O .data	000002bc ar5416_11na_table
00512f10 g       *ABS*	00000000 _fw_image_end
00909cbc g     F .text	00000005 _HTC_ResumeRecv
0090db30 g     F .text	0000028e ath_tgt_tx_prepare
00906270 g       .text	00000000 _stext
00907974 g     F .text	00000023 bSet_configuration_patch
0090ac60 g     F .text	0000000c __adf_os_free_intr
0090b4d8 g     F .text	00000021 ar5416FillKeyTxDesc_20
009067c8 g     F .text	0000006b _wmi_cmd_rsp
00512ebc g     O .bss	00000004 pressed_time
00909a5c g     F .text	00000030 wlan_pci_config_write
0090629c g     F .text	00000046 fatal_exception_func
00909e7c g     F .text	0000004a _HTC_ReturnBuffersList
0090aea4 g     F .text	00000077 ar5416SetupRxDesc_20
009065a0 g     F .text	00000032 HTCControlSvcProcessMsg_patch
008e49a0 g       *ABS*	00000000 mUsbEPinHighBandSet
0090cdbc g     F .text	0000001e ath_rate_newstate
00510d00 g       *ABS*	00000000 _dport0_bss_start
00501000 g       *ABS*	00000000 _dram0_rodata_end
0090b4fc g     F .text	000002a8 ar5416ProcTxDesc_20
0090a34c g     F .text	00000005 RedistributeCredit
0090790c g     F .text	00000042 vUSBFIFO_EP6Cfg_FS_patch
00510d00 g       *ABS*	00000000 _dport0_bss_end
00907998 g     F .text	00000044 bStandardCommand_patch
00512ed2 g     O .bss	0000003c ConfigDescriptorPatch
0090bec0 g     F .text	000000c7 ar5416GetPendingInterrupts
00501000 g       *ABS*	00000000 _dport0_literal_end
0090b8ac g     F .text	00000264 ar5416Set11nRateScenario_20
0090ae8c g     F .text	00000017 ar5416StopPcuReceive



Disassembly of section .boot:

00906000 <app_start>:

extern BOOLEAN bJumptoFlash;
extern BOOLEAN bEepromExist;

void __section(boot) __noreturn __visible app_start(void)
{
  906000:	6c1004        	entry	a1, 32
#if defined(PROJECT_MAGPIE)
	T_EEP_RET retEEP;
#endif

	/* Zero BSS segment & dynamic memory section. */
	init_mem();
  906003:	5801c9        	call8	906728 <init_mem>

#if defined(PROJECT_MAGPIE)
	fatal_exception_func();
  906006:	5800a5        	call8	90629c <fatal_exception_func>
#endif

	if( IS_FLASHBOOT() ) {
  906009:	1268b1        	l32r	a2, 8e02d0 <_bss_end+0x3cd3c0>
  90600c:	1568b2        	l32r	a5, 8e02d4 <_bss_end+0x3cd3c4>
  90600f:	0c0200        	memw
  906012:	232200        	l32i	a3, a2, 0
  906015:	1468b3        	l32r	a4, 8e02e4 <_bss_end+0x3cd3d4>
  906018:	03035f        	extui	a3, a3, 16, 16
  90601b:	1268b5        	l32r	a2, 8e02f0 <_bss_end+0x3cd3e0>
  90601e:	753937        	bne	a3, a5, 906059 <app_start+0x59>
		athos_indirection_table_install();
  906021:	5b6d54        	call8	8e1574 <athos_indirection_table_install>
		DBG_MODULE_INSTALL();
  906024:	da40      	mov.n	a10, a4
  906026:	58059b        	call8	907694 <cmnos_dbg_module_install>
		A_CLOCK_INIT(SYSTEM_CLK);
  906029:	1a68b4        	l32r	a10, 8e02fc <_bss_end+0x3cd3ec>
  90602c:	232238        	l32i	a3, a2, 224
  90602f:	0b3000        	callx8	a3
		A_UART_INIT();
  906032:	2a2213        	l32i	a10, a2, 76
  906035:	0ba000        	callx8	a10
		A_PRINTF_INIT();
  906038:	232211        	l32i	a3, a2, 68
  90603b:	0b3000        	callx8	a3
		A_DBG_INIT();
  90603e:	23226e        	l32i	a3, a2, 0x1b8
  906041:	0b3000        	callx8	a3
		A_EEP_INIT();
  906044:	23225f        	l32i	a3, a2, 0x17c
  906047:	0b3000        	callx8	a3
		A_TASKLET_INIT();
  90604a:	232269        	l32i	a3, a2, 0x1a4
  90604d:	0b3000        	callx8	a3
		_indir_tbl.cmnos.timer._timer_init();
  906050:	232241        	l32i	a3, a2, 0x104
  906053:	600005        	j	90605c <app_start+0x5c>
  906056:	000000        	ill
		u8UsbInterfaceAlternateSetting = u8UsbConfigValue = u8UsbInterfaceValue = 0;
#endif
	}
#ifdef ROM_VER_1_1
	else
		A_EEP_INIT(); /*Required for 1_1*/
  906059:	23225f        	l32i	a3, a2, 0x17c
  90605c:	0b3000        	callx8	a3
#endif

#if defined(PROJECT_MAGPIE)
	retEEP = A_EEP_IS_EXIST();
  90605f:	2a2262        	l32i	a10, a2, 0x188
	bJumptoFlash = FALSE;
  906062:	250a00        	movi	a5, 0
	retEEP = A_EEP_IS_EXIST();
  906065:	0ba000        	callx8	a10
	bJumptoFlash = FALSE;
  906068:	1368b6        	l32r	a3, 8e0340 <_bss_end+0x3cd430>
  90606b:	253500        	s16i	a5, a3, 0
  90606e:	1368b7        	l32r	a3, 8e034c <_bss_end+0x3cd43c>
	if ( RET_SUCCESS == retEEP ) {
  906071:	cca0      	bnez.n	a10, 906075 <app_start+0x75>
		bEepromExist = TRUE;
  906073:	c051      	movi.n	a5, 1
	} else {
		bEepromExist = FALSE;
	}
#endif

	hostif = A_IS_HOST_PRESENT();
  906075:	8a2e      	l32i.n	a10, a2, 56
		bEepromExist = FALSE;
  906077:	253500        	s16i	a5, a3, 0
	hostif = A_IS_HOST_PRESENT();
  90607a:	0ba000        	callx8	a10
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90607d:	1368b8        	l32r	a3, 8e0360 <_bss_end+0x3cd450>
  906080:	d5a0      	mov.n	a5, a10
  906082:	0c0200        	memw
  906085:	263200        	l32i	a6, a3, 0
#elif defined(PROJECT_K2)
	rst_status = ioread32(MAGPIE_REG_RST_STATUS_ADDR);
#endif /* #if defined(PROJECT_MAGPIE) */


	A_PRINTF(" A_WDT_INIT()\n\r");
  906088:	1a68b9        	l32r	a10, 8e036c <_bss_end+0x3cd45c>
  90608b:	232212        	l32i	a3, a2, 72
  90608e:	0b3000        	callx8	a3
		_indir_tbl.cmnos.usb._usb_fw_task = _fw_usb_fw_task;
		_indir_tbl.cmnos.usb._usb_reset_fifo = _fw_usb_reset_fifo;
#endif
	}

	if( rst_status == WDT_MAGIC_PATTERN ) {
  906091:	1768ba        	l32r	a7, 8e037c <_bss_end+0x3cd46c>
  906094:	232212        	l32i	a3, a2, 72
  906097:	77691a        	bne	a6, a7, 9060b5 <app_start+0xb5>
		A_PRINTF(" ==>WDT reset<==\n");
  90609a:	1a68bb        	l32r	a10, 8e0388 <_bss_end+0x3cd478>
  90609d:	0b3000        	callx8	a3
#if defined(PROJECT_MAGPIE)
		reset_EP4_FIFO();
  9060a0:	5800e8        	call8	906444 <reset_EP4_FIFO>
#endif
		*((volatile uint32_t*)WATCH_DOG_RESET_COUNTER_ADDR)+=1;
  9060a3:	1668bc        	l32r	a6, 8e0394 <_bss_end+0x3cd484>
  9060a6:	0c0200        	memw
  9060a9:	8360      	l32i.n	a3, a6, 0
  9060ab:	b133      	addi.n	a3, a3, 1
  9060ad:	0c0200        	memw
  9060b0:	9360      	s32i.n	a3, a6, 0
  9060b2:	60000e        	j	9060c4 <app_start+0xc4>
	} else if (rst_status == SUS_MAGIC_PATTERN) {
  9060b5:	1768bd        	l32r	a7, 8e03ac <_bss_end+0x3cd49c>
		A_PRINTF(" ==>warm start<==\n");
  9060b8:	1a68be        	l32r	a10, 8e03b0 <_bss_end+0x3cd4a0>
	} else if (rst_status == SUS_MAGIC_PATTERN) {
  9060bb:	776102        	beq	a6, a7, 9060c1 <app_start+0xc1>
	} else
		A_PRINTF(" ==>cold start<==\n");
  9060be:	1a68bf        	l32r	a10, 8e03bc <_bss_end+0x3cd4ac>
  9060c1:	0b3000        	callx8	a3

#if defined(PROJECT_MAGPIE)
	*((volatile uint32_t*)WATCH_DOG_MAGIC_PATTERN_ADDR)=WDT_MAGIC_PATTERN;
  9060c4:	1668ba        	l32r	a6, 8e03ac <_bss_end+0x3cd49c>
  9060c7:	1368b8        	l32r	a3, 8e03a8 <_bss_end+0x3cd498>
#endif /* #if defined(PROJECT_MAGPIE) */

	/* intr enable would left for firmware */
	/* athos_interrupt_init(); */

	DBG_MODULE_INSTALL();
  9060ca:	da40      	mov.n	a10, a4
	*((volatile uint32_t*)WATCH_DOG_MAGIC_PATTERN_ADDR)=WDT_MAGIC_PATTERN;
  9060cc:	0c0200        	memw
  9060cf:	9630      	s32i.n	a6, a3, 0
	DBG_MODULE_INSTALL();
  9060d1:	580570        	call8	907694 <cmnos_dbg_module_install>
	SFLASH_MODULE_INSTALL();
	A_SFLASH_INIT();
#endif
#endif

	HIF_MODULE_INSTALL();
  9060d4:	1a68c0        	l32r	a10, 8e03d4 <_bss_end+0x3cd4c4>
  9060d7:	5b6d1c        	call8	8e1548 <generic_hif_module_install>
	HTC_MODULE_INSTALL();
  9060da:	1a68c1        	l32r	a10, 8e03e0 <_bss_end+0x3cd4d0>
  9060dd:	580ef9        	call8	909cc4 <htc_module_install>
	WMI_SERVICE_MODULE_INSTALL();
  9060e0:	1a68c2        	l32r	a10, 8e03e8 <_bss_end+0x3cd4d8>
  9060e3:	581110        	call8	90a524 <WMI_service_module_install>
	BUF_POOL_MODULE_INSTALL();
  9060e6:	1a68c3        	l32r	a10, 8e03f4 <_bss_end+0x3cd4e4>
  9060e9:	58032c        	call8	906d9c <buf_pool_module_install>
	VBUF_MODULE_INSTALL();
  9060ec:	1a68c4        	l32r	a10, 8e03fc <_bss_end+0x3cd4ec>
  9060ef:	5b7b9c        	call8	8e4f60 <vbuf_module_install>
	VDESC_MODULE_INSTALL();
  9060f2:	1a68c5        	l32r	a10, 8e0408 <_bss_end+0x3cd4f8>
  9060f5:	5b7bc6        	call8	8e5010 <vdesc_module_install>

	//init each module, should be put together..
	A_PRINTF("ALLOCRAM start 0x%x size %d\n", ALLOCRAM_START, ALLOCRAM_SIZE);
  9060f8:	1468c6        	l32r	a4, 8e0410 <_bss_end+0x3cd500>
  9060fb:	1668c7        	l32r	a6, 8e0418 <_bss_end+0x3cd508>
  9060fe:	282212        	l32i	a8, a2, 72
  906101:	b443      	addi.n	a3, a4, 4
  906103:	04670c        	sub	a7, a6, a4
  906106:	1a68c8        	l32r	a10, 8e0428 <_bss_end+0x3cd518>
  906109:	dc70      	mov.n	a12, a7
  90610b:	db30      	mov.n	a11, a3
  90610d:	0b8000        	callx8	a8
	A_ALLOCRAM_INIT(ALLOCRAM_START, ALLOCRAM_SIZE);
  906110:	c78c      	movi.n	a8, -4
  906112:	78410b        	beq	a4, a8, 906121 <app_start+0x121>
  906115:	da30      	mov.n	a10, a3
  906117:	1b68b0        	l32r	a11, 8e03d8 <_bss_end+0x3cd4c8>
  90611a:	764906        	bne	a4, a6, 906124 <app_start+0x124>
  90611d:	600005        	j	906126 <app_start+0x126>
  906120:	001a68        	excw
  906123:	afdb      	add.n	a11, a13, a15
  906125:	702322        	bltu	a2, a0, 90614b <app_start+0x14b>
  906128:	510b30        	call0	948dec <_iram0_text_end+0x39bdb>
  90612b:	006550        	extui	a5, a0, 22, 1

	if( hostif == HIF_USB ) {
  90612e:	c513      	movi.n	a1, 83
		_indir_tbl.hif._get_max_msg_len = _HIFusb_get_max_msg_len_patch;
  906130:	68c923        	beqi	a12, 10, 906157 <app_start+0x157>
  906133:	267913        	l16si	a6, a7, 38
		_indir_tbl.cmnos.usb._usb_reg_out = usb_reg_out_patch;
  906136:	68ca23        	beqi	a12, 12, 90615d <app_start+0x15d>
  906139:	263313        	excw
		_indir_tbl.hif._isr_handler = _HIFusb_isr_handler_patch;
  90613c:	68cb23        	beqi	a12, 16, 906163 <app_start+0x163>
  90613f:	267b13        	l32ai	a6, a7, 76
		_indir_tbl.cmnos.usb._usb_set_configuration = bSet_configuration_patch;
  906142:	68cc23        	beqi	a12, 32, 906169 <app_start+0x169>
  906145:	262613        	s32i	a6, a2, 76
		_indir_tbl.cmnos.usb._usb_status_in = usb_status_in_patch;
  906148:	68cd23        	beqi	a12, 64, 90616f <app_start+0x16f>
  90614b:	263413        	s8i	a6, a3, 19
		_indir_tbl.cmnos.usb._usb_get_descriptor = bGet_descriptor_patch;
  90614e:	68ce23        	beqi	a12, 128, 906175 <app_start+0x175>
  906151:	263013        	l8ui	a6, a3, 19
		_indir_tbl.cmnos.usb._usb_standard_cmd = bStandardCommand_patch;
  906154:	68cf23        	beqi	a12, 0x100, 90617b <app_start+0x17b>
  906157:	262713        	excw
		_indir_tbl.usbfifo_api._init = _fw_usbfifo_init;
  90615a:	68d023        	beqi	a13, -1, 906181 <app_start+0x181>
  90615d:	269613        	s32i	a6, a9, 76

#if defined(PROJECT_MAGPIE)
		_indir_tbl.cmnos.usb._usb_power_off = zfTurnOffPower_patch;
  906160:	68d123        	beqi	a13, 1, 906187 <app_start+0x187>
  906163:	262913        	l16si	a6, a2, 38
		_indir_tbl.cmnos.usb._usb_reset_fifo = zfResetUSBFIFO_patch;
  906166:	68d223        	beqi	a13, 2, 90618d <app_start+0x18d>
  906169:	262a13        	movi	a6, 0x213
		_indir_tbl.hif._start = _HIFusb_start_patch;
  90616c:	68d323        	beqi	a13, 3, 906193 <app_start+0x193>
  90616f:	267413        	s8i	a6, a7, 19
		_indir_tbl.htc._HTC_MsgRecvHandler = HTCMsgRecvHandler_patch;
  906172:	68d423        	beqi	a13, 4, 906199 <app_start+0x199>
  906175:	268613        	s32i	a6, a8, 76
		_indir_tbl.htc._HTC_ControlSvcProcessMsg = HTCControlSvcProcessMsg_patch;
  906178:	68d523        	beqi	a13, 5, 90619f <app_start+0x19f>
  90617b:	268813        	excw
	return *(const volatile uint8_t *) addr;
  90617e:	68d623        	beqi	a13, 6, 9061a5 <app_start+0x1a5>
  906181:	300079        	excw
#endif

		if (!(ioread8_usb(ZM_MAIN_CTRL_OFFSET) & BIT6))
  906184:	3f0258        	excw
			vUSBFIFO_EP6Cfg_FS_patch();
  906187:	05e113        	srai	a1, a5, 30
	return *(const volatile uint32_t *) addr;
  90618a:	68d724        	beqi	a13, 7, 9061b2 <app_start+0x1b2>

#ifdef FUSION_USB_ENABLE_TX_STREAM
		// For K2, enable tx stream mode
		A_PRINTF("Enable Tx Stream mode: 0x%x\r\n",
  90618d:	22120c        	l32i	a2, a1, 48
  906190:	02008b        	excw
  906193:	301a68        	excw
  906196:	d80b      	excw
  906198:	4000da        	excw
			ioread32_usb(ZM_SOC_USB_MODE_CTRL_OFFSET));

		/* Patch for K2 USB STREAM mode */
		/* disable down stream DMA mode */
		io32_rmw_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT6, BIT0);
  90619b:	302c0a        	excw
  90619e:	01c4b0        	excw
  9061a1:	5823df        	call8	90f120 <io32_rmw>
#if SYSTEM_MODULE_HP_EP5
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT8);
  9061a4:	da30      	mov.n	a10, a3
  9061a6:	c0c0      	movi.n	a12, 0
  9061a8:	2b1a00        	movi	a11, 0x100
  9061ab:	5823dd        	call8	90f120 <io32_rmw>
#endif

#if SYSTEM_MODULE_HP_EP6
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT9);
  9061ae:	da30      	mov.n	a10, a3
  9061b0:	2c0a00        	movi	a12, 0
  9061b3:	2b2a00        	movi	a11, 0x200
  9061b6:	5823da        	call8	90f120 <io32_rmw>
#endif
		/* enable down stream DMA mode */
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT0);
  9061b9:	da30      	mov.n	a10, a3
  9061bb:	c0c0      	movi.n	a12, 0
  9061bd:	c0b1      	movi.n	a11, 1
  9061bf:	5823d8        	call8	90f120 <io32_rmw>
#endif

#ifdef FUSION_USB_ENABLE_RX_STREAM
		/* Patch for K2 USB STREAM mode */
		/* disable upstream DMA mode and enable upstream stream mode */
		io32_clr_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT1 | BIT3);
  9061c2:	da30      	mov.n	a10, a3
  9061c4:	c0ca      	movi.n	a12, 10
  9061c6:	2b0a00        	movi	a11, 0
  9061c9:	5823d5        	call8	90f120 <io32_rmw>

		/* K2, Set maximum IN transfer to 8K */
		io32_rmw_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, 0x20, 0x30);
  9061cc:	da30      	mov.n	a10, a3
  9061ce:	c3c0      	movi.n	a12, 48
  9061d0:	2b0a20        	movi	a11, 32
  9061d3:	5823d3        	call8	90f120 <io32_rmw>

		/* enable upstream DMA mode */
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT1);
  9061d6:	da30      	mov.n	a10, a3
  9061d8:	2c0a00        	movi	a12, 0
  9061db:	c0b2      	movi.n	a11, 2
  9061dd:	5823d0        	call8	90f120 <io32_rmw>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9061e0:	1368d9        	l32r	a3, 8e0544 <_bss_end+0x3cd634>
  9061e3:	240aa0        	movi	a4, 160
  9061e6:	0c0200        	memw
  9061e9:	9430      	s32i.n	a4, a3, 0
  9061eb:	1368da        	l32r	a3, 8e0554 <_bss_end+0x3cd644>
  9061ee:	c049      	movi.n	a4, 9
  9061f0:	0c0200        	memw
  9061f3:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint32_t *) addr;
  9061f5:	1368db        	l32r	a3, 8e0564 <_bss_end+0x3cd654>
	}
#if defined(PROJECT_MAGPIE) && !defined(ROM_VER_1_1)
	else if (hostif == HIF_PCI )
		hif_pci_patch_install(&_indir_tbl.hif);
#endif
	A_PRINTF("USB mode: 0x%x\r\n", ioread32_usb(0x100));
  9061f8:	1a68dc        	l32r	a10, 8e0568 <_bss_end+0x3cd658>
  9061fb:	0c0200        	memw
  9061fe:	8b30      	l32i.n	a11, a3, 0
  906200:	232212        	l32i	a3, a2, 72
  906203:	0b3000        	callx8	a3

	// patch the clock function
	if(1) {
		_indir_tbl.cmnos.clock._clock_init = cmnos_clock_init_patch;
  906206:	1368dd        	l32r	a3, 8e057c <_bss_end+0x3cd66c>
		_indir_tbl.cmnos.clock._delay_us = cmnos_delay_us_patch;
		_indir_tbl.cmnos.clock._clock_tick = cmnos_tick_patch;
		_indir_tbl.cmnos.clock._milliseconds = cmnos_milliseconds_patch;

		//default clock, setup initial variable, SYSTEM_FREQ=40
		A_CLOCK_INIT(SYSTEM_FREQ);
  906209:	c2a8      	movi.n	a10, 40
		_indir_tbl.cmnos.clock._clock_init = cmnos_clock_init_patch;
  90620b:	232638        	s32i	a3, a2, 224
		_indir_tbl.cmnos.clock._refclk_speed_get = cmnos_refclk_speed_get_patch;
  90620e:	1368de        	l32r	a3, 8e0588 <_bss_end+0x3cd678>
  906211:	23263d        	s32i	a3, a2, 244
		_indir_tbl.cmnos.clock._delay_us = cmnos_delay_us_patch;
  906214:	1368df        	l32r	a3, 8e0590 <_bss_end+0x3cd680>
  906217:	23263b        	s32i	a3, a2, 236
		_indir_tbl.cmnos.clock._clock_tick = cmnos_tick_patch;
  90621a:	1368e0        	l32r	a3, 8e059c <_bss_end+0x3cd68c>
  90621d:	232640        	s32i	a3, a2, 0x100
		_indir_tbl.cmnos.clock._milliseconds = cmnos_milliseconds_patch;
  906220:	1368e1        	l32r	a3, 8e05a4 <_bss_end+0x3cd694>
  906223:	23263e        	s32i	a3, a2, 248
		A_CLOCK_INIT(SYSTEM_FREQ);
  906226:	581238        	call8	90ab08 <cmnos_clock_init_patch>
	}

	Magpie_init();
  906229:	580182        	call8	906834 <Magpie_init>

#if MAGPIE_ENABLE_WLAN == 1
	io32_clr(MAGPIE_REG_RST_RESET_ADDR, BIT10 | BIT8 | BIT7 | BIT6);
  90622c:	1a68e2        	l32r	a10, 8e05b4 <_bss_end+0x3cd6a4>
  90622f:	2c5ac0        	movi	a12, 0x5c0
  906232:	2b0a00        	movi	a11, 0
  906235:	5823ba        	call8	90f120 <io32_rmw>
#if defined(PROJECT_MAGPIE)
	io32_set(MAGPIE_REG_AHB_ARB_ADDR, BIT1);
  906238:	1a68e3        	l32r	a10, 8e05c4 <_bss_end+0x3cd6b4>
  90623b:	2c0a00        	movi	a12, 0
  90623e:	2b0a02        	movi	a11, 2
  906241:	5823b7        	call8	90f120 <io32_rmw>
#endif

	wlan_pci_module_init();
  906244:	580dfe        	call8	909a40 <wlan_pci_module_init>
	wlan_pci_probe();
  906247:	580e20        	call8	909ac8 <wlan_pci_probe>
#endif


	A_PRINTF("Tgt running\n\r");
  90624a:	1a68e4        	l32r	a10, 8e05dc <_bss_end+0x3cd6cc>
  90624d:	232212        	l32i	a3, a2, 72
  906250:	0b3000        	callx8	a3

#if defined(PROJECT_MAGPIE)
	if(1) {
		A_PRINTF("======= Apply MISC Assert patch\n\r");
  906253:	1a68e5        	l32r	a10, 8e05e8 <_bss_end+0x3cd6d8>
  906256:	232212        	l32i	a3, a2, 72
  906259:	0b3000        	callx8	a3
		_assfail_ori =  _indir_tbl.cmnos.misc._assfail;
  90625c:	842a      	l32i.n	a4, a2, 40
  90625e:	1368e6        	l32r	a3, 8e05f8 <_bss_end+0x3cd6e8>
  906261:	243600        	s32i	a4, a3, 0
		_indir_tbl.cmnos.misc._assfail = exception_reset;
  906264:	1368e7        	l32r	a3, 8e0600 <_bss_end+0x3cd6f0>
  906267:	23260a        	s32i	a3, a2, 40
	}

	change_magpie_clk();
  90626a:	58001e        	call8	9062e4 <change_magpie_clk>
#endif
	wlan_task(); //never return
  90626d:	58013c        	call8	906760 <wlan_task>

Disassembly of section .text:

00906270 <io32_rmw>:
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
			    const uint32_t set, const uint32_t clr)
{
  906270:	6c1006        	entry	a1, 48
  906273:	0c0200        	memw
  906276:	9210      	s32i.n	a2, a1, 0
	uint32_t val;

	val = ioread32(addr);
  906278:	0c0200        	memw
  90627b:	8810      	l32i.n	a8, a1, 0
	return *(const volatile uint32_t *) addr;
  90627d:	0c0200        	memw
  906280:	8980      	l32i.n	a9, a8, 0
	val &= ~clr;
  906282:	c78f      	movi.n	a8, -1
  906284:	048403        	xor	a4, a8, a4
  906287:	094401        	and	a4, a4, a9
	val |= set;
	iowrite32(addr, val);
  90628a:	0c0200        	memw
  90628d:	8810      	l32i.n	a8, a1, 0
	val |= set;
  90628f:	034402        	or	a4, a4, a3
	*(volatile uint32_t *) addr = b;
  906292:	0c0200        	memw
  906295:	9480      	s32i.n	a4, a8, 0
  906297:	d10f      	retw.n
  906299:	000000        	ill

0090629c <fatal_exception_func>:

static void idle_task();

#if defined(PROJECT_MAGPIE)
void fatal_exception_func()
{
  90629c:	6c1004        	entry	a1, 32
	// patch for execption
	(void)_xtos_set_exception_handler(EXCCAUSE_UNALIGNED, AR6002_fatal_exception_handler_patch);
  90629f:	1268e8        	l32r	a2, 8e0640 <_bss_end+0x3cd730>
  9062a2:	c0a9      	movi.n	a10, 9
  9062a4:	022b02        	or	a11, a2, a2
  9062a7:	5b8028        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_LOAD_STORE_ERROR, AR6002_fatal_exception_handler_patch);
  9062aa:	db20      	mov.n	a11, a2
  9062ac:	2a0a03        	movi	a10, 3
  9062af:	5b8026        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_ILLEGAL, AR6002_fatal_exception_handler_patch);
  9062b2:	db20      	mov.n	a11, a2
  9062b4:	2a0a00        	movi	a10, 0
  9062b7:	5b8024        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_INSTR_ERROR, AR6002_fatal_exception_handler_patch);
  9062ba:	db20      	mov.n	a11, a2
  9062bc:	2a0a02        	movi	a10, 2
  9062bf:	5b8022        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_PRIVILEGED, AR6002_fatal_exception_handler_patch);
  9062c2:	db20      	mov.n	a11, a2
  9062c4:	2a0a08        	movi	a10, 8
  9062c7:	5b8020        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_INSTR_DATA_ERROR, AR6002_fatal_exception_handler_patch);
  9062ca:	db20      	mov.n	a11, a2
  9062cc:	2a0a0c        	movi	a10, 12
  9062cf:	5b801e        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_LOAD_STORE_DATA_ERROR, AR6002_fatal_exception_handler_patch);
  9062d2:	db20      	mov.n	a11, a2
  9062d4:	c0ad      	movi.n	a10, 13
  9062d6:	5b801c        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_DIVIDE_BY_ZERO, AR6002_fatal_exception_handler_patch);
  9062d9:	db20      	mov.n	a11, a2
  9062db:	c0a6      	movi.n	a10, 6
  9062dd:	5b801a        	call8	8e6348 <_xtos_set_exception_handler>
  9062e0:	d10f      	retw.n
	...

009062e4 <change_magpie_clk>:
#endif

#if defined(PROJECT_MAGPIE)
void
change_magpie_clk(void)
{
  9062e4:	6c1004        	entry	a1, 32
  9062e7:	1368e9        	l32r	a3, 8e068c <_bss_end+0x3cd77c>
  9062ea:	c121      	movi.n	a2, 17
  9062ec:	0c0200        	memw
  9062ef:	9230      	s32i.n	a2, a3, 0
	return *(const volatile uint32_t *) addr;
  9062f1:	0c0200        	memw
  9062f4:	8230      	l32i.n	a2, a3, 0
	iowrite32(0x00056004, BIT4 | BIT0);

	/* Wait for the update bit (BIT0) to get cleared */
	while (ioread32(0x00056004) & BIT0)
  9062f6:	020240        	extui	a2, a2, 0, 1
  9062f9:	652ff4        	bnez	a2, 9062f1 <change_magpie_clk+0xd>
		;

	/* Put the PLL into reset */
	io32_set(0x00050010, BIT1);
  9062fc:	1468e2        	l32r	a4, 8e0684 <_bss_end+0x3cd774>
  9062ff:	dc20      	mov.n	a12, a2
  906301:	da40      	mov.n	a10, a4
  906303:	c0b2      	movi.n	a11, 2
  906305:	5bffda        	call8	906270 <io32_rmw>
	*(volatile uint32_t *) addr = b;
  906308:	1868ea        	l32r	a8, 8e06b0 <_bss_end+0x3cd7a0>
  90630b:	293a25        	movi	a9, 0x325
	 */
	/* Setting PLL to 400MHz */
	iowrite32(0x00056000, 0x325);

	/* Pull CPU PLL out of Reset */
	io32_clr(0x00050010, BIT1);
  90630e:	db20      	mov.n	a11, a2
  906310:	da40      	mov.n	a10, a4
  906312:	0c0200        	memw
  906315:	9980      	s32i.n	a9, a8, 0
  906317:	2c0a02        	movi	a12, 2
  90631a:	5bffd5        	call8	906270 <io32_rmw>

	A_DELAY_USECS(60); // wait for stable
  90631d:	1268b5        	l32r	a2, 8e05f4 <_bss_end+0x3cd6e4>
  906320:	2a0a3c        	movi	a10, 60
  906323:	24223b        	l32i	a4, a2, 236
  906326:	0b4000        	callx8	a4
  906329:	1468eb        	l32r	a4, 8e06d8 <_bss_end+0x3cd7c8>
  90632c:	0c0200        	memw
  90632f:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint32_t *) addr;
  906331:	1468e9        	l32r	a4, 8e06d8 <_bss_end+0x3cd7c8>
  906334:	0c0200        	memw
  906337:	8340      	l32i.n	a3, a4, 0
	/*
	 * AHB clk = ( CPU clk / 2 )
	 */
	iowrite32(0x00056004, 0x00001 | BIT16 | BIT8); /* set plldiv to 2 */

	while (ioread32(0x00056004) & BIT0)
  906339:	7f3ff7        	bbsi	a3, 31, 906334 <change_magpie_clk+0x50>
		;

	/* UART Setting */
	A_UART_HWINIT((100*1000*1000), 115200);
  90633c:	22221a        	l32i	a2, a2, 104
  90633f:	1b68ec        	l32r	a11, 8e06f0 <_bss_end+0x3cd7e0>
  906342:	1a68ed        	l32r	a10, 8e06f8 <_bss_end+0x3cd7e8>
  906345:	0b2000        	callx8	a2
  906348:	d10f      	retw.n
	...

0090634c <exception_reset>:

}

void exception_reset(struct register_dump_s *dump)
{
  90634c:	6c1004        	entry	a1, 32
	A_PRINTF("exception_reset \n");
  90634f:	1368b5        	l32r	a3, 8e0624 <_bss_end+0x3cd714>
  906352:	1a68ee        	l32r	a10, 8e070c <_bss_end+0x3cd7fc>
  906355:	243212        	l32i	a4, a3, 72
  906358:	0b4000        	callx8	a4

	/* phase I dump info */
	A_PRINTF("exception reset-phase 1\n");
  90635b:	1a68ef        	l32r	a10, 8e0718 <_bss_end+0x3cd808>
  90635e:	243212        	l32i	a4, a3, 72
  906361:	0b4000        	callx8	a4
	if(_assfail_ori)
  906364:	1468e6        	l32r	a4, 8e06fc <_bss_end+0x3cd7ec>
  906367:	8440      	l32i.n	a4, a4, 0
  906369:	c844      	beqz.n	a4, 906371 <exception_reset+0x25>
		_assfail_ori(dump);
  90636b:	022a02        	or	a10, a2, a2
  90636e:	0b4000        	callx8	a4

	/* phase II reset */
	A_PRINTF("exception reset-phase 2\n");
  906371:	223212        	l32i	a2, a3, 72
  906374:	1a68f0        	l32r	a10, 8e0734 <_bss_end+0x3cd824>
	*(volatile uint32_t *) addr = b;
  906377:	c040      	movi.n	a4, 0
  906379:	0b2000        	callx8	a2
  90637c:	1568b8        	l32r	a5, 8e065c <_bss_end+0x3cd74c>
  90637f:	1268ba        	l32r	a2, 8e0668 <_bss_end+0x3cd758>
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, WDT_MAGIC_PATTERN);

	io32_set(MAGPIE_REG_RST_RESET_ADDR, BIT10 | BIT8 | BIT7 | BIT6);
  906382:	c0c0      	movi.n	a12, 0
  906384:	0c0200        	memw
  906387:	9250      	s32i.n	a2, a5, 0
  906389:	1268e2        	l32r	a2, 8e0714 <_bss_end+0x3cd804>
  90638c:	2b5ac0        	movi	a11, 0x5c0
  90638f:	da20      	mov.n	a10, a2
  906391:	5bffb7        	call8	906270 <io32_rmw>

	io32_set(MAGPIE_REG_AHB_ARB_ADDR, BIT1);
  906394:	1a68e3        	l32r	a10, 8e0720 <_bss_end+0x3cd810>
  906397:	2c0a00        	movi	a12, 0
  90639a:	2b0a02        	movi	a11, 2
  90639d:	5bffb4        	call8	906270 <io32_rmw>
  9063a0:	1668f1        	l32r	a6, 8e0764 <_bss_end+0x3cd854>

	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, 0x0);
	io32_set(0x50010, BIT4);
  9063a3:	dc40      	mov.n	a12, a4
  9063a5:	0c0200        	memw
  9063a8:	9460      	s32i.n	a4, a6, 0
  9063aa:	c1b0      	movi.n	a11, 16
  9063ac:	da20      	mov.n	a10, a2
  9063ae:	5bffb0        	call8	906270 <io32_rmw>
	A_DELAY_USECS(5);
  9063b1:	28323b        	l32i	a8, a3, 236
  9063b4:	c0a5      	movi.n	a10, 5
  9063b6:	0b8000        	callx8	a8
	io32_clr(0x50010, BIT4);
  9063b9:	c1c0      	movi.n	a12, 16
  9063bb:	044b02        	or	a11, a4, a4
  9063be:	022a02        	or	a10, a2, a2
  9063c1:	5bffab        	call8	906270 <io32_rmw>
	A_DELAY_USECS(5);
  9063c4:	22323b        	l32i	a2, a3, 236
  9063c7:	c0a5      	movi.n	a10, 5
  9063c9:	0b2000        	callx8	a2
  9063cc:	c021      	movi.n	a2, 1
  9063ce:	0c0200        	memw
  9063d1:	226600        	s32i	a2, a6, 0
  9063d4:	1668e9        	l32r	a6, 8e0778 <_bss_end+0x3cd868>
  9063d7:	280a11        	movi	a8, 17
  9063da:	0c0200        	memw
  9063dd:	286600        	s32i	a8, a6, 0
	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, BIT0);

	// set clock to bypass mode - 40Mhz from XTAL
	iowrite32(MAGPIE_REG_CPU_PLL_BYPASS_ADDR, BIT0 | BIT4);
	A_DELAY_USECS(100); // wait for stable
  9063e0:	26323b        	l32i	a6, a3, 236
  9063e3:	2a0a64        	movi	a10, 100
  9063e6:	0b6000        	callx8	a6
  9063e9:	1868f2        	l32r	a8, 8e07b4 <_bss_end+0x3cd8a4>
  9063ec:	1668ea        	l32r	a6, 8e0794 <_bss_end+0x3cd884>
	iowrite32(MAGPIE_REG_CPU_PLL_ADDR, BIT16);

	A_UART_HWINIT((40*1000*1000), 115200);
  9063ef:	1b68ec        	l32r	a11, 8e07a0 <_bss_end+0x3cd890>
  9063f2:	0c0200        	memw
  9063f5:	9860      	s32i.n	a8, a6, 0
  9063f7:	1a68b4        	l32r	a10, 8e06c8 <_bss_end+0x3cd7b8>
  9063fa:	26321a        	l32i	a6, a3, 104
  9063fd:	0b6000        	callx8	a6

	A_PRINTF("do TX/RX swap\n");
  906400:	1a68f3        	l32r	a10, 8e07cc <_bss_end+0x3cd8bc>
  906403:	263212        	l32i	a6, a3, 72
  906406:	0b6000        	callx8	a6

	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  906409:	1668f4        	l32r	a6, 8e07dc <_bss_end+0x3cd8cc>
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;

        A_PRINTF("Cold reboot initiated.");
  90640c:	1a68f8        	l32r	a10, 8e07ec <_bss_end+0x3cd8dc>
	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  90640f:	0c0200        	memw
  906412:	9260      	s32i.n	a2, a6, 0
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  906414:	1668f5        	l32r	a6, 8e07e8 <_bss_end+0x3cd8d8>
  906417:	0c0200        	memw
  90641a:	226600        	s32i	a2, a6, 0
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  90641d:	1668f6        	l32r	a6, 8e07f8 <_bss_end+0x3cd8e8>
  906420:	0c0200        	memw
  906423:	226600        	s32i	a2, a6, 0
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  906426:	1668f7        	l32r	a6, 8e0804 <_bss_end+0x3cd8f4>
  906429:	0c0200        	memw
  90642c:	226600        	s32i	a2, a6, 0
        A_PRINTF("Cold reboot initiated.");
  90642f:	223212        	l32i	a2, a3, 72
  906432:	0b2000        	callx8	a2
#if defined(PROJECT_MAGPIE)
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, 0);
#elif defined(PROJECT_K2)
	iowrite32(MAGPIE_REG_RST_STATUS_ADDR, 0);
#endif /* #if defined(PROJECT_MAGPIE) */
	A_USB_JUMP_BOOT();
  906435:	22322c        	l32i	a2, a3, 176
  906438:	0c0200        	memw
  90643b:	9450      	s32i.n	a4, a5, 0
  90643d:	0b2000        	callx8	a2
  906440:	d10f      	retw.n
	...

00906444 <reset_EP4_FIFO>:
}

void reset_EP4_FIFO(void)
{
  906444:	6c1004        	entry	a1, 32
  906447:	1968f9        	l32r	a9, 8e082c <_bss_end+0x3cd91c>
	val |= set;
  90644a:	c1a0      	movi.n	a10, 16
	return *(const volatile uint8_t *) addr;
  90644c:	289000        	l8ui	a8, a9, 0
  90644f:	080847        	extui	a8, a8, 0, 8
	val |= set;
  906452:	0a8802        	or	a8, a8, a10
	*(volatile uint8_t *) addr = b;
  906455:	0c0200        	memw
  906458:	289400        	s8i	a8, a9, 0
	return *(const volatile uint8_t *) addr;
  90645b:	289000        	l8ui	a8, a9, 0
	val &= ~clr;
  90645e:	c6af      	movi.n	a10, -17
	return *(const volatile uint8_t *) addr;
  906460:	080847        	extui	a8, a8, 0, 8
	val &= ~clr;
  906463:	0a8801        	and	a8, a8, a10
	*(volatile uint8_t *) addr = b;
  906466:	0c0200        	memw
  906469:	289400        	s8i	a8, a9, 0
  90646c:	d10f      	retw.n
	...

00906470 <zfGenExceptionEvent>:
	for(i = 0; i < 100; i++) {}
	io8_clr_usb(ZM_EP4_BYTE_COUNT_HIGH_OFFSET, BIT4);
}

LOCAL void zfGenExceptionEvent(uint32_t exccause, uint32_t pc, uint32_t badvaddr)
{
  906470:	6c1004        	entry	a1, 32
	uint32_t pattern = 0x33221199;

	A_PRINTF("<Exception>Tgt Drv send an event 44332211 to Host Drv\n");
  906473:	1868b5        	l32r	a8, 8e0748 <_bss_end+0x3cd838>
  906476:	1a68fa        	l32r	a10, 8e0860 <_bss_end+0x3cd950>
  906479:	288212        	l32i	a8, a8, 72
  90647c:	0b8000        	callx8	a8
	return *(const volatile uint8_t *) addr;
  90647f:	1968fb        	l32r	a9, 8e086c <_bss_end+0x3cd95c>
	mUSB_STATUS_IN_INT_DISABLE();
  906482:	2a0ac0        	movi	a10, 192
  906485:	289000        	l8ui	a8, a9, 0
  906488:	080847        	extui	a8, a8, 0, 8
  90648b:	0a8802        	or	a8, a8, a10
	*(volatile uint8_t *) addr = b;
  90648e:	0c0200        	memw
  906491:	289400        	s8i	a8, a9, 0
	*(volatile uint32_t *) addr = b;
  906494:	1868db        	l32r	a8, 8e0800 <_bss_end+0x3cd8f0>
  906497:	c09f      	movi.n	a9, 15
  906499:	0c0200        	memw
  90649c:	9980      	s32i.n	a9, a8, 0
  90649e:	1868fc        	l32r	a8, 8e0890 <_bss_end+0x3cd980>
  9064a1:	1968fd        	l32r	a9, 8e0898 <_bss_end+0x3cd988>
	iowrite32_usb(ZM_EP3_DATA_OFFSET, pattern);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, exccause);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, pc);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, badvaddr);

	mUSB_EP3_XFER_DONE();
  9064a4:	c0a8      	movi.n	a10, 8
  9064a6:	0c0200        	memw
  9064a9:	9980      	s32i.n	a9, a8, 0
  9064ab:	0c0200        	memw
  9064ae:	9280      	s32i.n	a2, a8, 0
  9064b0:	0c0200        	memw
  9064b3:	9380      	s32i.n	a3, a8, 0
	return *(const volatile uint8_t *) addr;
  9064b5:	1968fe        	l32r	a9, 8e08b0 <_bss_end+0x3cd9a0>
	*(volatile uint32_t *) addr = b;
  9064b8:	0c0200        	memw
  9064bb:	9480      	s32i.n	a4, a8, 0
	return *(const volatile uint8_t *) addr;
  9064bd:	289000        	l8ui	a8, a9, 0
  9064c0:	080847        	extui	a8, a8, 0, 8
  9064c3:	0a8802        	or	a8, a8, a10
	*(volatile uint8_t *) addr = b;
  9064c6:	0c0200        	memw
  9064c9:	289400        	s8i	a8, a9, 0
  9064cc:	d10f      	retw.n
	...

009064d0 <AR6002_fatal_exception_handler_patch>:
	mUSB_EP3_XFER_DONE();
}

void
AR6002_fatal_exception_handler_patch(CPU_exception_frame_t *exc_frame)
{
  9064d0:	6c1016        	entry	a1, 176
	struct register_dump_s dump;
	uint32_t  exc_cause, exc_vaddr;
	asm volatile("rsr %0,%1" : "=r" (exc_cause) : "n" (EXCCAUSE));
  9064d3:	03e830        	rsr.exccause	a3
	asm volatile("rsr %0,%1" : "=r" (exc_vaddr) : "n" (EXCVADDR));
  9064d6:	04ee30        	rsr.excvaddr	a4

	dump.exc_frame              = *exc_frame; /* structure copy */
  9064d9:	2c0a80        	movi	a12, 128
  9064dc:	022b02        	or	a11, a2, a2
  9064df:	2a1c10        	addi	a10, a1, 16
  9064e2:	5b81a0        	call8	8e6b64 <memcpy>
	dump.badvaddr               = exc_vaddr;
	dump.exc_frame.xt_exccause  = exc_cause;
	dump.pc                     = exc_frame->xt_pc;
  9064e5:	8b20      	l32i.n	a11, a2, 0
	dump.badvaddr               = exc_vaddr;
  9064e7:	dc40      	mov.n	a12, a4
	dump.exc_frame.xt_exccause  = exc_cause;
  9064e9:	da30      	mov.n	a10, a3
	dump.assline                = 0;
  9064eb:	c020      	movi.n	a2, 0
	dump.exc_frame.xt_exccause  = exc_cause;
  9064ed:	931c      	s32i.n	a3, a1, 48
	dump.pc                     = exc_frame->xt_pc;
  9064ef:	9b12      	s32i.n	a11, a1, 8
	dump.assline                = 0;
  9064f1:	9211      	s32i.n	a2, a1, 4
	dump.badvaddr               = exc_vaddr;
  9064f3:	9413      	s32i.n	a4, a1, 12

	zfGenExceptionEvent(dump.exc_frame.xt_exccause, dump.pc, dump.badvaddr);
  9064f5:	5bffde        	call8	906470 <zfGenExceptionEvent>

#if SYSTEM_MODULE_PRINT
	A_PRINTF("\nFatal exception (%d): \tpc=0x%x \n\r\tbadvaddr=0x%x \n\r\tdump area=0x%x\n",
  9064f8:	1268b5        	l32r	a2, 8e07cc <_bss_end+0x3cd8bc>
  9064fb:	8d13      	l32i.n	a13, a1, 12
  9064fd:	232212        	l32i	a3, a2, 72
  906500:	8c12      	l32i.n	a12, a1, 8
  906502:	8b1c      	l32i.n	a11, a1, 48
  906504:	1a68ff        	l32r	a10, 8e0900 <_bss_end+0x3cd9f0>
  906507:	de10      	mov.n	a14, a1
  906509:	0b3000        	callx8	a3
		 dump.exc_frame.xt_exccause, dump.pc, dump.badvaddr, &dump);
	PRINT_FAILURE_STATE();
  90650c:	0bb130        	rsr.epc1	a11
  90650f:	0cb230        	rsr.epc2	a12
  906512:	0db330        	rsr.epc3	a13
  906515:	0eb430        	rsr.epc4	a14
  906518:	1a6900        	l32r	a10, 8e0918 <_bss_end+0x3cda08>
  90651b:	232212        	l32i	a3, a2, 72
  90651e:	0b3000        	callx8	a3
  906521:	1368b1        	l32r	a3, 8e07e8 <_bss_end+0x3cd8d8>
  906524:	1a6901        	l32r	a10, 8e0928 <_bss_end+0x3cda18>
  906527:	0c0200        	memw
  90652a:	8b30      	l32i.n	a11, a3, 0
  90652c:	1368bc        	l32r	a3, 8e081c <_bss_end+0x3cd90c>
  90652f:	0c0200        	memw
  906532:	8c30      	l32i.n	a12, a3, 0
  906534:	1368b8        	l32r	a3, 8e0814 <_bss_end+0x3cd904>
  906537:	0c0200        	memw
  90653a:	8d30      	l32i.n	a13, a3, 0
  90653c:	232212        	l32i	a3, a2, 72
  90653f:	0b3000        	callx8	a3
#else
	A_PUTS("Fatal exception\n\r");
#endif
	A_ASSFAIL(&dump);
  906542:	822a      	l32i.n	a2, a2, 40
  906544:	da10      	mov.n	a10, a1
  906546:	0b2000        	callx8	a2
  906549:	63fffc        	j	906549 <AR6002_fatal_exception_handler_patch+0x79>

0090654c <zfGenWrongEpidEvent>:
{
  90654c:	6c1004        	entry	a1, 32
	A_PRINTF("<WrongEPID>Tgt Drv send an event 44332212 to Host Drv\n");
  90654f:	1868b5        	l32r	a8, 8e0824 <_bss_end+0x3cd914>
  906552:	1a6902        	l32r	a10, 8e095c <_bss_end+0x3cda4c>
  906555:	288212        	l32i	a8, a8, 72
  906558:	0b8000        	callx8	a8
	return *(const volatile uint8_t *) addr;
  90655b:	1968fb        	l32r	a9, 8e0948 <_bss_end+0x3cda38>
	mUSB_STATUS_IN_INT_DISABLE();
  90655e:	2a0ac0        	movi	a10, 192
  906561:	289000        	l8ui	a8, a9, 0
  906564:	080847        	extui	a8, a8, 0, 8
  906567:	0a8802        	or	a8, a8, a10
	*(volatile uint8_t *) addr = b;
  90656a:	0c0200        	memw
  90656d:	289400        	s8i	a8, a9, 0
	*(volatile uint32_t *) addr = b;
  906570:	1868db        	l32r	a8, 8e08dc <_bss_end+0x3cd9cc>
  906573:	c09f      	movi.n	a9, 15
  906575:	0c0200        	memw
  906578:	9980      	s32i.n	a9, a8, 0
  90657a:	1868fc        	l32r	a8, 8e096c <_bss_end+0x3cda5c>
  90657d:	196903        	l32r	a9, 8e098c <_bss_end+0x3cda7c>
	mUSB_EP3_XFER_DONE();
  906580:	c0a8      	movi.n	a10, 8
  906582:	0c0200        	memw
  906585:	9980      	s32i.n	a9, a8, 0
	return *(const volatile uint8_t *) addr;
  906587:	1968fe        	l32r	a9, 8e0980 <_bss_end+0x3cda70>
	*(volatile uint32_t *) addr = b;
  90658a:	0c0200        	memw
  90658d:	9280      	s32i.n	a2, a8, 0
	return *(const volatile uint8_t *) addr;
  90658f:	289000        	l8ui	a8, a9, 0
  906592:	080847        	extui	a8, a8, 0, 8
  906595:	0a8802        	or	a8, a8, a10
	*(volatile uint8_t *) addr = b;
  906598:	0c0200        	memw
  90659b:	289400        	s8i	a8, a9, 0
  90659e:	d10f      	retw.n

009065a0 <HTCControlSvcProcessMsg_patch>:
}

void
HTCControlSvcProcessMsg_patch(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
			      adf_nbuf_t pBuffers, void *arg)
{
  9065a0:	6c1006        	entry	a1, 48
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  9065a3:	da40      	mov.n	a10, a4
  9065a5:	dc10      	mov.n	a12, a1
  9065a7:	b41b      	addi.n	a11, a1, 4
  9065a9:	5801b7        	call8	906c88 <__adf_nbuf_peek_header>
	/* we assume buffers are aligned such that we can access the message
	 * parameters directly*/
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;

	if (pMsg->MessageID == HTC_MSG_SETUP_COMPLETE_ID) {
  9065ac:	8a11      	l32i.n	a10, a1, 4
  9065ae:	28a000        	l8ui	a8, a10, 0
  9065b1:	088911        	slli	a9, a8, 8
  9065b4:	28a001        	l8ui	a8, a10, 1
  9065b7:	098802        	or	a8, a8, a9
  9065ba:	698407        	bnei	a8, 4, 9065c5 <HTCControlSvcProcessMsg_patch+0x25>
		htc_complete_setup = 1;
  9065bd:	186904        	l32r	a8, 8e09d0 <_bss_end+0x3cdac0>
  9065c0:	c091      	movi.n	a9, 1
  9065c2:	298400        	s8i	a9, a8, 0
	}

	HTCControlSvcProcessMsg(EndpointID, hdr_buf, pBuffers, arg);
  9065c5:	dd50      	mov.n	a13, a5
  9065c7:	dc40      	mov.n	a12, a4
  9065c9:	db30      	mov.n	a11, a3
  9065cb:	da20      	mov.n	a10, a2
  9065cd:	580ea6        	call8	90a068 <HTCControlSvcProcessMsg>
  9065d0:	d10f      	retw.n
	...

009065d4 <HTCMsgRecvHandler_patch>:
}

/* Patch callback for check the endpoint ID is correct or not */
void
HTCMsgRecvHandler_patch(adf_nbuf_t hdr_buf, adf_nbuf_t buffer, void *context)
{
  9065d4:	6c100a        	entry	a1, 80
	a_uint8_t *anbdata;
	a_uint32_t anblen;
	adf_nbuf_t tmp_nbuf;
	HTC_FRAME_HDR *pHTCHdr;

	if (hdr_buf == ADF_NBUF_NULL) {
  9065d7:	022502        	or	a5, a2, a2
  9065da:	023538        	moveqz	a5, a3, a2
  9065dd:	2b1c24        	addi	a11, a1, 36
  9065e0:	2c1c20        	addi	a12, a1, 32
  9065e3:	055a02        	or	a10, a5, a5
  9065e6:	5801a8        	call8	906c88 <__adf_nbuf_peek_header>
	} else {
		tmp_nbuf = hdr_buf;
	}

	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);
	pHTCHdr = (HTC_FRAME_HDR *)anbdata;
  9065e9:	8619      	l32i.n	a6, a1, 36

	eid = pHTCHdr->EndpointID;
  9065eb:	2b6000        	l8ui	a11, a6, 0

	if ((eid != 0) && (htc_complete_setup == 0)) {
  9065ee:	64b12a        	beqz	a11, 90671c <HTCMsgRecvHandler_patch+0x148>
  9065f1:	186904        	l32r	a8, 8e0a04 <_bss_end+0x3cdaf4>
  9065f4:	288000        	l8ui	a8, a8, 0
  9065f7:	658095        	bnez	a8, 906690 <HTCMsgRecvHandler_patch+0xbc>
		A_PRINTF("\nHTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
  9065fa:	1268b5        	l32r	a2, 8e08d0 <_bss_end+0x3cd9c0>
  9065fd:	8c18      	l32i.n	a12, a1, 32
  9065ff:	232212        	l32i	a3, a2, 72
  906602:	1a6905        	l32r	a10, 8e0a18 <_bss_end+0x3cdb08>
  906605:	0b3000        	callx8	a3
		A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n",
                         *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3),
  906608:	8819      	l32i.n	a8, a1, 36
		A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n",
  90660a:	1a6906        	l32r	a10, 8e0a24 <_bss_end+0x3cdb14>
  90660d:	23800b        	l8ui	a3, a8, 11
  906610:	2b8000        	l8ui	a11, a8, 0
  906613:	2f8004        	l8ui	a15, a8, 4
  906616:	2e8003        	l8ui	a14, a8, 3
  906619:	2d8002        	l8ui	a13, a8, 2
  90661c:	2c8001        	l8ui	a12, a8, 1
  90661f:	9316      	s32i.n	a3, a1, 24
  906621:	23800a        	l8ui	a3, a8, 10
  906624:	9315      	s32i.n	a3, a1, 20
  906626:	238009        	l8ui	a3, a8, 9
  906629:	9314      	s32i.n	a3, a1, 16
  90662b:	238008        	l8ui	a3, a8, 8
  90662e:	9313      	s32i.n	a3, a1, 12
  906630:	238007        	l8ui	a3, a8, 7
  906633:	9312      	s32i.n	a3, a1, 8
  906635:	238006        	l8ui	a3, a8, 6
  906638:	9311      	s32i.n	a3, a1, 4
  90663a:	238005        	l8ui	a3, a8, 5
  90663d:	9310      	s32i.n	a3, a1, 0
  90663f:	232212        	l32i	a3, a2, 72
  906642:	0b3000        	callx8	a3
                         *(anbdata+4), *(anbdata+5), *(anbdata+6), *(anbdata+7),
                         *(anbdata+8), *(anbdata+9), *(anbdata+10), *(anbdata+11));
		A_PRINTF("init_htc_handle = 0x%8x\n", init_htc_handle);
  906645:	146907        	l32r	a4, 8e0a64 <_bss_end+0x3cdb54>
  906648:	232212        	l32i	a3, a2, 72
  90664b:	2b4200        	l32i	a11, a4, 0
  90664e:	1a6908        	l32r	a10, 8e0a70 <_bss_end+0x3cdb60>
  906651:	0b3000        	callx8	a3

		if (pHTCHdr->EndpointID == 1) {
  906654:	236000        	l8ui	a3, a6, 0
  906657:	693112        	bnei	a3, 1, 90666d <HTCMsgRecvHandler_patch+0x99>
			A_PRINTF("Return WMI Command buffer\n");
  90665a:	262212        	l32i	a6, a2, 72
  90665d:	1a6909        	l32r	a10, 8e0a84 <_bss_end+0x3cdb74>
  906660:	0b6000        	callx8	a6
			HTC_ReturnBuffers(init_htc_handle, 1, tmp_nbuf);
  906663:	dc50      	mov.n	a12, a5
  906665:	222282        	l32i	a2, a2, 0x208
  906668:	db30      	mov.n	a11, a3
  90666a:	60001b        	j	906689 <HTCMsgRecvHandler_patch+0xb5>
		} else if ((pHTCHdr->EndpointID == 5) || (pHTCHdr->EndpointID == 6)) {
  90666d:	233cfb        	addi	a3, a3, -5
  906670:	030347        	extui	a3, a3, 0, 8
  906673:	6e3202        	bltui	a3, 2, 906679 <HTCMsgRecvHandler_patch+0xa5>
  906676:	6000ab        	j	906725 <HTCMsgRecvHandler_patch+0x151>
			A_PRINTF("Return Data buffer\n");
  906679:	232212        	l32i	a3, a2, 72
  90667c:	1a690a        	l32r	a10, 8e0aa4 <_bss_end+0x3cdb94>
  90667f:	0b3000        	callx8	a3
			HTC_ReturnBuffers(init_htc_handle, 6, tmp_nbuf);
  906682:	222282        	l32i	a2, a2, 0x208
  906685:	dc50      	mov.n	a12, a5
  906687:	c0b6      	movi.n	a11, 6
  906689:	8a40      	l32i.n	a10, a4, 0
  90668b:	0b2000        	callx8	a2
  90668e:	d10f      	retw.n
		} else {
		}
	} else {
		if ((pHTCHdr->EndpointID < 0) || (pHTCHdr->EndpointID >= ENDPOINT_MAX)) {
  906690:	c185      	movi.n	a8, 21
  906692:	7b8302        	bltu	a8, a11, 906698 <HTCMsgRecvHandler_patch+0xc4>
  906695:	600083        	j	90671c <HTCMsgRecvHandler_patch+0x148>
			A_PRINTF("HTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
  906698:	1268b5        	l32r	a2, 8e096c <_bss_end+0x3cda5c>
  90669b:	8c18      	l32i.n	a12, a1, 32
  90669d:	232212        	l32i	a3, a2, 72
  9066a0:	1a690b        	l32r	a10, 8e0acc <_bss_end+0x3cdbbc>
  9066a3:	0b3000        	callx8	a3
			A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n",
                                 *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3),
  9066a6:	8819      	l32i.n	a8, a1, 36
			A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n",
  9066a8:	1a690c        	l32r	a10, 8e0ad8 <_bss_end+0x3cdbc8>
  9066ab:	238007        	l8ui	a3, a8, 7
  9066ae:	2f8004        	l8ui	a15, a8, 4
  9066b1:	2e8003        	l8ui	a14, a8, 3
  9066b4:	2d8002        	l8ui	a13, a8, 2
  9066b7:	2c8001        	l8ui	a12, a8, 1
  9066ba:	2b8000        	l8ui	a11, a8, 0
  9066bd:	9312      	s32i.n	a3, a1, 8
  9066bf:	238006        	l8ui	a3, a8, 6
  9066c2:	231601        	s32i	a3, a1, 4
  9066c5:	238005        	l8ui	a3, a8, 5
  9066c8:	231600        	s32i	a3, a1, 0
  9066cb:	232212        	l32i	a3, a2, 72
  9066ce:	0b3000        	callx8	a3
                                 *(anbdata+4), *(anbdata+5), *(anbdata+6), *(anbdata+7));

			if (anblen > 64) {
  9066d1:	8818      	l32i.n	a8, a1, 32
  9066d3:	c490      	movi.n	a9, 64
  9066d5:	136907        	l32r	a3, 8e0af4 <_bss_end+0x3cdbe4>
  9066d8:	242212        	l32i	a4, a2, 72
  9066db:	789b1a        	bgeu	a9, a8, 9066f9 <HTCMsgRecvHandler_patch+0x125>
				A_PRINTF("EP1-Tx-Data with Wrong Htc Header Endpoint ID, WAR free this buffer\n");
  9066de:	1a690d        	l32r	a10, 8e0b14 <_bss_end+0x3cdc04>
  9066e1:	0b4000        	callx8	a4
				HTC_ReturnBuffers(init_htc_handle, 6, tmp_nbuf);
  9066e4:	8a30      	l32i.n	a10, a3, 0
  9066e6:	242282        	l32i	a4, a2, 0x208
  9066e9:	dc50      	mov.n	a12, a5
  9066eb:	c0b6      	movi.n	a11, 6
  9066ed:	0b4000        	callx8	a4
				A_PRINTF("EP1-Tx-Data > Free this buffer successfully\n");
  9066f0:	1a690e        	l32r	a10, 8e0b28 <_bss_end+0x3cdc18>
  9066f3:	222212        	l32i	a2, a2, 72
  9066f6:	60001d        	j	906717 <HTCMsgRecvHandler_patch+0x143>
			} else {
				A_PRINTF("EP4-WMI-Cmd with Wrong Htc Header Endpoint ID, WAR free this buffer\n");
  9066f9:	1a690f        	l32r	a10, 8e0b38 <_bss_end+0x3cdc28>
  9066fc:	0b4000        	callx8	a4
				zfGenWrongEpidEvent((a_uint32_t)pHTCHdr->EndpointID);
  9066ff:	2a6000        	l8ui	a10, a6, 0
  906702:	5bff92        	call8	90654c <zfGenWrongEpidEvent>
				HTC_ReturnBuffers(init_htc_handle, 1, tmp_nbuf);
  906705:	8a30      	l32i.n	a10, a3, 0
  906707:	242282        	l32i	a4, a2, 0x208
  90670a:	dc50      	mov.n	a12, a5
  90670c:	c0b1      	movi.n	a11, 1
  90670e:	0b4000        	callx8	a4
				A_PRINTF("EP4-WMI-Cmd > Free this buffer successfully\n");
  906711:	1a6910        	l32r	a10, 8e0b54 <_bss_end+0x3cdc44>
  906714:	222212        	l32i	a2, a2, 72
  906717:	0b2000        	callx8	a2
  90671a:	d10f      	retw.n
			}
		} else
			HTCMsgRecvHandler( hdr_buf, buffer, context);
  90671c:	dc40      	mov.n	a12, a4
  90671e:	db30      	mov.n	a11, a3
  906720:	da20      	mov.n	a10, a2
  906722:	580eda        	call8	90a28c <HTCMsgRecvHandler>
  906725:	d10f      	retw.n
	...

00906728 <init_mem>:
	}
}
#endif

void init_mem()
{
  906728:	6c1004        	entry	a1, 32
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  90672b:	186911        	l32r	a8, 8e0b70 <_bss_end+0x3cdc60>
  90672e:	196912        	l32r	a9, 8e0b78 <_bss_end+0x3cdc68>
		*temp = 0;
  906731:	c0a0      	movi.n	a10, 0
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  906733:	600003        	j	90673a <init_mem+0x12>
		*temp = 0;
  906736:	9a80      	s32i.n	a10, a8, 0
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  906738:	b488      	addi.n	a8, a8, 4
  90673a:	7983f8        	bltu	a8, a9, 906736 <init_mem+0xe>

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
  90673d:	1a68c6        	l32r	a10, 8e0a58 <_bss_end+0x3cdb48>
  906740:	196913        	l32r	a9, 8e0b8c <_bss_end+0x3cdc7c>
  906743:	0a990c        	sub	a9, a9, a10
  906746:	092914        	srli	a9, a9, 2
  906749:	0e9911        	slli	a9, a9, 2
  90674c:	a989      	add.n	a9, a8, a9
		temp[i] = 0;
  90674e:	c0a0      	movi.n	a10, 0
  906750:	600004        	j	906758 <init_mem+0x30>
  906753:	009a80        	excw
  906756:	b488      	addi.n	a8, a8, 4
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
  906758:	7989f8        	bne	a8, a9, 906754 <init_mem+0x2c>
}
  90675b:	d10f      	retw.n
  90675d:	000000        	ill

00906760 <wlan_task>:
	}
	return;
}

void __noreturn wlan_task(void)
{
  906760:	6c1004        	entry	a1, 32
	loop_low=loop_high=0;
  906763:	146914        	l32r	a4, 8e0bb4 <_bss_end+0x3cdca4>
  906766:	136915        	l32r	a3, 8e0bbc <_bss_end+0x3cdcac>
  906769:	c020      	movi.n	a2, 0
  90676b:	9240      	s32i.n	a2, a4, 0
  90676d:	9230      	s32i.n	a2, a3, 0

	while(1) {
		/* update wdt timer */
		A_WDT_TASK();
  90676f:	1268b5        	l32r	a2, 8e0a44 <_bss_end+0x3cdb34>
  906772:	28225c        	l32i	a8, a2, 0x170
  906775:	0b8000        	callx8	a8

		/* UPDATE cticks - to be moved to idle_tsk, put here will be easier to read  */
		A_CLOCK_TICK();
  906778:	282240        	l32i	a8, a2, 0x100
  90677b:	0b8000        	callx8	a8

		HIF_isr_handler(NULL);
  90677e:	28227b        	l32i	a8, a2, 0x1ec
  906781:	c0a0      	movi.n	a10, 0
  906783:	0b8000        	callx8	a8

#if MAGPIE_ENABLE_WLAN == 1
		wlan_pci_isr();
  906786:	580cf8        	call8	909b68 <wlan_pci_isr>
#endif

		A_TASKLET_RUN();
  906789:	28226d        	l32i	a8, a2, 0x1b4
  90678c:	0b8000        	callx8	a8
		A_TIMER_RUN();
  90678f:	282245        	l32i	a8, a2, 0x114
  906792:	0b8000        	callx8	a8

		/* Very low priority tasks */
		if ((loop_low & 0x1fff) == 0x7)
  906795:	283200        	l32i	a8, a3, 0
  906798:	08084c        	extui	a8, a8, 0, 13
  90679b:	698705        	bnei	a8, 7, 9067a4 <wlan_task+0x44>
			A_DBG_TASK();
  90679e:	28226f        	l32i	a8, a2, 0x1bc
  9067a1:	0b8000        	callx8	a8
	if (loop_low == 0xffffffff) {
  9067a4:	8830      	l32i.n	a8, a3, 0
  9067a6:	69800c        	bnei	a8, -1, 9067b6 <wlan_task+0x56>
		loop_low = 0;
  9067a9:	c080      	movi.n	a8, 0
  9067ab:	9830      	s32i.n	a8, a3, 0
		loop_high++;
  9067ad:	8840      	l32i.n	a8, a4, 0
  9067af:	b188      	addi.n	a8, a8, 1
  9067b1:	9840      	s32i.n	a8, a4, 0
  9067b3:	63ffbb        	j	906772 <wlan_task+0x12>
		loop_low++;
  9067b6:	b188      	addi.n	a8, a8, 1
  9067b8:	9830      	s32i.n	a8, a3, 0
  9067ba:	63ffb4        	j	906772 <wlan_task+0x12>
  9067bd:	000000        	ill

009067c0 <htc_setup_comp>:
#define MAGPIE 1

#if MAGPIE==1

void htc_setup_comp(void)
{
  9067c0:	6c1004        	entry	a1, 32
  9067c3:	d10f      	retw.n
  9067c5:	000000        	ill

009067c8 <_wmi_cmd_rsp>:
	}
}

void _wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		  A_UINT8 *buffer, int Length)
{
  9067c8:	6c1006        	entry	a1, 48
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY, sizeof(WMI_CMD_HDR) + Length);
  9067cb:	1768b5        	l32r	a7, 8e0aa0 <_bss_end+0x3cdb90>
  9067ce:	b46c      	addi.n	a12, a6, 4
  9067d0:	28728d        	l32i	a8, a7, 0x234
  9067d3:	2b0a01        	movi	a11, 1
  9067d6:	022a02        	or	a10, a2, a2
  9067d9:	0b8000        	callx8	a8
{
  9067dc:	04044f        	extui	a4, a4, 0, 16
	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY, sizeof(WMI_CMD_HDR) + Length);
  9067df:	d8a0      	mov.n	a8, a10

	if (netbuf == ADF_NBUF_NULL) {
  9067e1:	cea5      	bnez.n	a10, 90680a <_wmi_cmd_rsp+0x42>
		adf_os_print("%s: buffer allocation for event_id %x failed!\n", __FUNCTION__, cmd_id);
  9067e3:	126916        	l32r	a2, 8e0c3c <_bss_end+0x3cdd2c>
  9067e6:	247212        	l32i	a4, a7, 72
  9067e9:	1a6917        	l32r	a10, 8e0c48 <_bss_end+0x3cdd38>
  9067ec:	033c02        	or	a12, a3, a3
  9067ef:	022b02        	or	a11, a2, a2
  9067f2:	0b4000        	callx8	a4
		adf_os_assert(0);
  9067f5:	1a6918        	l32r	a10, 8e0c58 <_bss_end+0x3cdd48>
  9067f8:	237212        	l32i	a3, a7, 72
  9067fb:	db20      	mov.n	a11, a2
  9067fd:	0b3000        	callx8	a3
  906800:	126919        	l32r	a2, 8e0c64 <_bss_end+0x3cdd54>
  906803:	0c0200        	memw
  906806:	8220      	l32i.n	a2, a2, 0
  906808:	d10f      	retw.n
		return;
	}

	if (Length != 0 && buffer != NULL) {
  90680a:	c962      	beqz.n	a6, 906820 <_wmi_cmd_rsp+0x58>
  90680c:	c950      	beqz.n	a5, 906820 <_wmi_cmd_rsp+0x58>
    return __adf_nbuf_put_tail(buf, size);
  90680e:	db60      	mov.n	a11, a6
  906810:	9a10      	s32i.n	a10, a1, 0
  906812:	5800f2        	call8	906bdc <__adf_nbuf_put_tail>
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    A_MEMCPY(dst,src,size);
  906815:	8975      	l32i.n	a9, a7, 20
  906817:	dc60      	mov.n	a12, a6
  906819:	db50      	mov.n	a11, a5
  90681b:	0b9000        	callx8	a9
  90681e:	8810      	l32i.n	a8, a1, 0
		pData = (A_UINT8 *)adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(pContext, netbuf, cmd_id, SeqNo, Length);
  906820:	25728e        	l32i	a5, a7, 0x238
  906823:	de60      	mov.n	a14, a6
  906825:	dd40      	mov.n	a13, a4
  906827:	030c4f        	extui	a12, a3, 0, 16
  90682a:	db80      	mov.n	a11, a8
  90682c:	da20      	mov.n	a10, a2
  90682e:	0b5000        	callx8	a5
  906831:	d10f      	retw.n
	...

00906834 <Magpie_init>:
}


void Magpie_init(void)
{
  906834:	6c1004        	entry	a1, 32
	A_PRINTF("[+++Magpie_init]\n\r");
  906837:	1268b5        	l32r	a2, 8e0b0c <_bss_end+0x3cdbfc>
  90683a:	1a691a        	l32r	a10, 8e0ca4 <_bss_end+0x3cdd94>
  90683d:	232212        	l32i	a3, a2, 72
  906840:	0b3000        	callx8	a3

	A_PRINTF("[+++VBUF_init(%d)]\n\r", MAX_BUF_NUM);
  906843:	13691b        	l32r	a3, 8e0cb0 <_bss_end+0x3cdda0>
  906846:	282212        	l32i	a8, a2, 72
  906849:	2b0a64        	movi	a11, 100
  90684c:	da30      	mov.n	a10, a3
  90684e:	0b8000        	callx8	a8
	VBUF_init(MAX_BUF_NUM);
  906851:	2822a0        	l32i	a8, a2, 0x280
  906854:	2a0a64        	movi	a10, 100
  906857:	0b8000        	callx8	a8

	A_PRINTF("[+++VBUF_init(%d)]\n\r", MAX_DESC_NUM);
  90685a:	282212        	l32i	a8, a2, 72
  90685d:	2b0a64        	movi	a11, 100
  906860:	da30      	mov.n	a10, a3
  906862:	0b8000        	callx8	a8
	VDESC_init(MAX_DESC_NUM);
  906865:	2222a5        	l32i	a2, a2, 0x294
  906868:	2a0a64        	movi	a10, 100
  90686b:	0b2000        	callx8	a2
  90686e:	d10f      	retw.n

00906870 <__adf_nbuf_alloc>:
 * @return newly allocated nbuf
 */
__adf_nbuf_t
__adf_nbuf_alloc(adf_os_size_t size, a_uint32_t reserve,
                 a_uint32_t align)
{
  906870:	6c1004        	entry	a1, 32
    VBUF *buf = NULL;
    VDESC *desc;

    buf = VBUF_alloc_vbuf();
  906873:	1568b5        	l32r	a5, 8e0b48 <_bss_end+0x3cdc38>
{
  906876:	d620      	mov.n	a6, a2
    buf = VBUF_alloc_vbuf();
  906878:	2a52a1        	l32i	a10, a5, 0x284
  90687b:	0ba000        	callx8	a10
  90687e:	d2a0      	mov.n	a2, a10
    if ( buf != NULL ) {
  906880:	64a028        	beqz	a10, 9068ac <__adf_nbuf_alloc+0x3c>
        desc = VDESC_alloc_vdesc();
  906883:	2a52a6        	l32i	a10, a5, 0x298
  906886:	0ba000        	callx8	a10
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  906889:	255252        	l32i	a5, a5, 0x148
        desc = VDESC_alloc_vdesc();
  90688c:	d4a0      	mov.n	a4, a10
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  90688e:	db60      	mov.n	a11, a6
  906890:	c0a0      	movi.n	a10, 0
  906892:	0b5000        	callx8	a5
        desc->buf_size = size;
        desc->next_desc = NULL;
  906895:	c080      	movi.n	a8, 0
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  906897:	9a41      	s32i.n	a10, a4, 4
        desc->buf_size = size;
  906899:	264504        	s16i	a6, a4, 8
        desc->next_desc = NULL;
  90689c:	9840      	s32i.n	a8, a4, 0
        desc->data_offset = reserve;
  90689e:	234505        	s16i	a3, a4, 10
        desc->data_size = 0;
  9068a1:	284506        	s16i	a8, a4, 12
        desc->control = 0;
  9068a4:	284507        	s16i	a8, a4, 14

        buf->desc_list = desc;
  9068a7:	9420      	s32i.n	a4, a2, 0
        buf->buf_length = 0;
  9068a9:	282504        	s16i	a8, a2, 8
    }

    return buf;
}
  9068ac:	d10f      	retw.n
	...

009068b0 <__adf_nbuf_free>:
 * @param hdl
 * @param adf_nbuf
 *
 */
void __adf_nbuf_free(__adf_nbuf_t  buf)
{
  9068b0:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068b3:	1868b5        	l32r	a8, 8e0b88 <_bss_end+0x3cdc78>
  9068b6:	1b691c        	l32r	a11, 8e0d28 <_bss_end+0x3cde18>
  9068b9:	288212        	l32i	a8, a8, 72
  9068bc:	1a691d        	l32r	a10, 8e0d30 <_bss_end+0x3cde20>
  9068bf:	0b8000        	callx8	a8
  9068c2:	186919        	l32r	a8, 8e0d28 <_bss_end+0x3cde18>
  9068c5:	0c0200        	memw
  9068c8:	8880      	l32i.n	a8, a8, 0
  9068ca:	d10f      	retw.n

009068cc <__adf_nbuf_realloc_headroom>:
 *
 * @return new nbuf
 */
__adf_nbuf_t
__adf_nbuf_realloc_headroom(__adf_nbuf_t buf, a_uint32_t headroom)
{
  9068cc:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068cf:	1868b5        	l32r	a8, 8e0ba4 <_bss_end+0x3cdc94>
  9068d2:	1b691e        	l32r	a11, 8e0d4c <_bss_end+0x3cde3c>
  9068d5:	288212        	l32i	a8, a8, 72
  9068d8:	1a691d        	l32r	a10, 8e0d4c <_bss_end+0x3cde3c>
    return NULL;
}
  9068db:	c020      	movi.n	a2, 0
    adf_os_assert(0);
  9068dd:	0b8000        	callx8	a8
  9068e0:	186919        	l32r	a8, 8e0d44 <_bss_end+0x3cde34>
  9068e3:	0c0200        	memw
  9068e6:	8880      	l32i.n	a8, a8, 0
}
  9068e8:	d10f      	retw.n
	...

009068ec <__adf_nbuf_realloc_tailroom>:
 *
 * @return struct mbuf * (buffer with the new tailroom)
 */
__adf_nbuf_t
__adf_nbuf_realloc_tailroom(__adf_nbuf_t  buf, a_uint32_t tailroom)
{
  9068ec:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068ef:	1868b5        	l32r	a8, 8e0bc4 <_bss_end+0x3cdcb4>
  9068f2:	1b691f        	l32r	a11, 8e0d70 <_bss_end+0x3cde60>
  9068f5:	288212        	l32i	a8, a8, 72
  9068f8:	1a691d        	l32r	a10, 8e0d6c <_bss_end+0x3cde5c>
    return NULL;
}
  9068fb:	c020      	movi.n	a2, 0
    adf_os_assert(0);
  9068fd:	0b8000        	callx8	a8
  906900:	186919        	l32r	a8, 8e0d64 <_bss_end+0x3cde54>
  906903:	0c0200        	memw
  906906:	8880      	l32i.n	a8, a8, 0
}
  906908:	d10f      	retw.n
	...

0090690c <__adf_nbuf_expand>:
 *
 * @return struct mbuf* (NULL if something goofed up)
 */
__adf_nbuf_t
__adf_nbuf_expand(__adf_nbuf_t buf, a_uint32_t headroom, a_uint32_t tailroom)
{
  90690c:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  90690f:	1868b5        	l32r	a8, 8e0be4 <_bss_end+0x3cdcd4>
  906912:	1b6920        	l32r	a11, 8e0d94 <_bss_end+0x3cde84>
  906915:	288212        	l32i	a8, a8, 72
  906918:	1a691d        	l32r	a10, 8e0d8c <_bss_end+0x3cde7c>
    return NULL;
}
  90691b:	c020      	movi.n	a2, 0
    adf_os_assert(0);
  90691d:	0b8000        	callx8	a8
  906920:	186919        	l32r	a8, 8e0d84 <_bss_end+0x3cde74>
  906923:	0c0200        	memw
  906926:	8880      	l32i.n	a8, a8, 0
}
  906928:	d10f      	retw.n
	...

0090692c <__adf_nbuf_push_head>:
 * @return new data pointer ,NULL if the len is more than the
 *         space available in the head frag.
 */
a_uint8_t *
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
  90692c:	6c1004        	entry	a1, 32
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
  90692f:	8920      	l32i.n	a9, a2, 0

    desc->data_offset -= len;
  906931:	03034f        	extui	a3, a3, 0, 16
    desc->data_size += len;
  906934:	2a9106        	l16ui	a10, a9, 12
    desc->data_offset -= len;
  906937:	289105        	l16ui	a8, a9, 10
    desc->data_size += len;
  90693a:	aa3a      	add.n	a10, a3, a10
  90693c:	2a9506        	s16i	a10, a9, 12
    desc->data_offset -= len;
  90693f:	03880c        	sub	a8, a8, a3
    buf->buf_length += len;
  906942:	2a2104        	l16ui	a10, a2, 8
    desc->data_offset -= len;
  906945:	08084f        	extui	a8, a8, 0, 16
  906948:	289505        	s16i	a8, a9, 10
    buf->buf_length += len;
  90694b:	aa33      	add.n	a3, a3, a10
  90694d:	232504        	s16i	a3, a2, 8
    ptr = desc->buf_addr + desc->data_offset;
  906950:	8291      	l32i.n	a2, a9, 4
    return(ptr);
}
  906952:	a822      	add.n	a2, a2, a8
  906954:	d10f      	retw.n
	...

00906958 <__adf_nbuf_pull_head>:
 *
 * @return new data pointer
 */
a_uint8_t *
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
  906958:	6c1004        	entry	a1, 32
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
  90695b:	8920      	l32i.n	a9, a2, 0

    desc->data_offset += len;
  90695d:	030a4f        	extui	a10, a3, 0, 16
    desc->data_size -= len;
  906960:	239106        	l16ui	a3, a9, 12
    desc->data_offset += len;
  906963:	289105        	l16ui	a8, a9, 10
    desc->data_size -= len;
  906966:	0a330c        	sub	a3, a3, a10
  906969:	239506        	s16i	a3, a9, 12
    desc->data_offset += len;
  90696c:	a8a8      	add.n	a8, a10, a8
    buf->buf_length -= len;
  90696e:	232104        	l16ui	a3, a2, 8
    desc->data_offset += len;
  906971:	08084f        	extui	a8, a8, 0, 16
  906974:	289505        	s16i	a8, a9, 10
    buf->buf_length -= len;
  906977:	0a330c        	sub	a3, a3, a10
  90697a:	232504        	s16i	a3, a2, 8
    ptr = desc->buf_addr + desc->data_offset;
  90697d:	8291      	l32i.n	a2, a9, 4

    return ptr;
}
  90697f:	a822      	add.n	a2, a2, a8
  906981:	d10f      	retw.n
	...

00906984 <__adf_nbuf_copy>:
 *
 * @return struct mbuf * (newly allocated buffer)
 */
__adf_nbuf_t
__adf_nbuf_copy(__adf_nbuf_t src)
{
  906984:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL;

    adf_os_assert(src != NULL);
  906987:	cd25      	bnez.n	a2, 9069a0 <__adf_nbuf_copy+0x1c>
  906989:	1868b5        	l32r	a8, 8e0c60 <_bss_end+0x3cdd50>
  90698c:	1b6921        	l32r	a11, 8e0e10 <_bss_end+0x3cdf00>
  90698f:	288212        	l32i	a8, a8, 72
  906992:	1a691d        	l32r	a10, 8e0e08 <_bss_end+0x3cdef8>
  906995:	0b8000        	callx8	a8
  906998:	186919        	l32r	a8, 8e0dfc <_bss_end+0x3cdeec>
  90699b:	0c0200        	memw
  90699e:	8880      	l32i.n	a8, a8, 0

    return buf;
}
  9069a0:	c020      	movi.n	a2, 0
  9069a2:	d10f      	retw.n

009069a4 <__adf_nbuf_unshare>:
 *
 * @return new nbuf
 */
__adf_nbuf_t
__adf_nbuf_unshare(__adf_nbuf_t  src)
{
  9069a4:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL;

    adf_os_assert(src != NULL);
  9069a7:	cd25      	bnez.n	a2, 9069c0 <__adf_nbuf_unshare+0x1c>
  9069a9:	1868b5        	l32r	a8, 8e0c80 <_bss_end+0x3cdd70>
  9069ac:	1b6922        	l32r	a11, 8e0e34 <_bss_end+0x3cdf24>
  9069af:	288212        	l32i	a8, a8, 72
  9069b2:	1a691d        	l32r	a10, 8e0e28 <_bss_end+0x3cdf18>
  9069b5:	0b8000        	callx8	a8
  9069b8:	186919        	l32r	a8, 8e0e1c <_bss_end+0x3cdf0c>
  9069bb:	0c0200        	memw
  9069be:	8880      	l32i.n	a8, a8, 0

    return buf;
}
  9069c0:	c020      	movi.n	a2, 0
  9069c2:	d10f      	retw.n

009069c4 <__adf_nbuf_frag_info>:
 * @param[out] sg (scatter/gather list of all the frags)
 *
 */
void
__adf_nbuf_frag_info(__adf_nbuf_t buf, adf_os_sglist_t	*sg)
{
  9069c4:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  9069c7:	8820      	l32i.n	a8, a2, 0
  9069c9:	b439      	addi.n	a9, a3, 4
    int count = 0;
  9069cb:	c0a0      	movi.n	a10, 0

    while( desc != NULL ) {
  9069cd:	600013        	j	9069e4 <__adf_nbuf_frag_info+0x20>
        sg->sg_segs[count].vaddr = desc->buf_addr + desc->data_offset;
  9069d0:	2c8105        	l16ui	a12, a8, 10
  9069d3:	8b81      	l32i.n	a11, a8, 4
        sg->sg_segs[count].len   = desc->data_size;

        count++;
  9069d5:	b1aa      	addi.n	a10, a10, 1
        sg->sg_segs[count].vaddr = desc->buf_addr + desc->data_offset;
  9069d7:	acbb      	add.n	a11, a11, a12
  9069d9:	9b90      	s32i.n	a11, a9, 0
        sg->sg_segs[count].len   = desc->data_size;
  9069db:	2b8106        	l16ui	a11, a8, 12
        desc = desc->next_desc;
  9069de:	8880      	l32i.n	a8, a8, 0
        sg->sg_segs[count].len   = desc->data_size;
  9069e0:	9b91      	s32i.n	a11, a9, 4
  9069e2:	b899      	addi.n	a9, a9, 8
    while( desc != NULL ) {
  9069e4:	658fe8        	bnez	a8, 9069d0 <__adf_nbuf_frag_info+0xc>
    }

    sg->nsegs = count;
  9069e7:	9a30      	s32i.n	a10, a3, 0
  9069e9:	d10f      	retw.n
	...

009069ec <__adf_nbuf_get_priv>:
 *
 * @return uint8_t* ( pointer to the data )
 */
a_uint8_t *
__adf_nbuf_get_priv(__adf_nbuf_t buf)
{
  9069ec:	6c1004        	entry	a1, 32
    adf_os_assert(buf != NULL);
  9069ef:	cd25      	bnez.n	a2, 906a08 <__adf_nbuf_get_priv+0x1c>
  9069f1:	1868b5        	l32r	a8, 8e0cc8 <_bss_end+0x3cddb8>
  9069f4:	1b6923        	l32r	a11, 8e0e80 <_bss_end+0x3cdf70>
  9069f7:	288212        	l32i	a8, a8, 72
  9069fa:	1a691d        	l32r	a10, 8e0e70 <_bss_end+0x3cdf60>
  9069fd:	0b8000        	callx8	a8
  906a00:	186919        	l32r	a8, 8e0e64 <_bss_end+0x3cdf54>
  906a03:	0c0200        	memw
  906a06:	8880      	l32i.n	a8, a8, 0

    return buf->ctx;
}
  906a08:	bc22      	addi.n	a2, a2, 12
  906a0a:	d10f      	retw.n

00906a0c <__adf_nbuf_queue_add>:
 *
 */
void
__adf_nbuf_queue_add(__adf_nbuf_qhead_t  *qhead,
                     __adf_nbuf_t  buf)
{
  906a0c:	6c1004        	entry	a1, 32
    qhead->qlen++;
  906a0f:	8822      	l32i.n	a8, a2, 8
  906a11:	b188      	addi.n	a8, a8, 1
  906a13:	9822      	s32i.n	a8, a2, 8

    buf->next_buf = NULL;
  906a15:	c080      	movi.n	a8, 0
  906a17:	9831      	s32i.n	a8, a3, 4

    if (qhead->head == NULL) {
  906a19:	8820      	l32i.n	a8, a2, 0
  906a1b:	cc83      	bnez.n	a8, 906a22 <__adf_nbuf_queue_add+0x16>
        qhead->head = buf;
  906a1d:	9320      	s32i.n	a3, a2, 0
  906a1f:	600003        	j	906a26 <__adf_nbuf_queue_add+0x1a>
    }
    else {
        qhead->tail->next_buf = buf;
  906a22:	8821      	l32i.n	a8, a2, 4
  906a24:	9381      	s32i.n	a3, a8, 4
    }
    qhead->tail = buf;
  906a26:	9321      	s32i.n	a3, a2, 4
  906a28:	d10f      	retw.n
	...

00906a2c <__adf_nbuf_queue_remove>:
 *
 * @return the nbuf
 */
__adf_nbuf_t
__adf_nbuf_queue_remove(__adf_nbuf_qhead_t *qhead)
{
  906a2c:	6c1004        	entry	a1, 32
  906a2f:	d820      	mov.n	a8, a2
    __adf_nbuf_t  b0 = NULL;

    if (qhead->head) {
  906a31:	8220      	l32i.n	a2, a2, 0
  906a33:	c929      	beqz.n	a2, 906a50 <__adf_nbuf_queue_remove+0x24>
        qhead->qlen--;
  906a35:	8982      	l32i.n	a9, a8, 8
        b0 = qhead->head;
        if ( qhead->head == qhead->tail ) {
  906a37:	8a81      	l32i.n	a10, a8, 4
        qhead->qlen--;
  906a39:	b099      	addi.n	a9, a9, -1
  906a3b:	9982      	s32i.n	a9, a8, 8
  906a3d:	c090      	movi.n	a9, 0
        if ( qhead->head == qhead->tail ) {
  906a3f:	7a2907        	bne	a2, a10, 906a4a <__adf_nbuf_queue_remove+0x1e>
            qhead->head = NULL;
  906a42:	9980      	s32i.n	a9, a8, 0
            qhead->tail = NULL;
  906a44:	9981      	s32i.n	a9, a8, 4
  906a46:	600004        	j	906a4e <__adf_nbuf_queue_remove+0x22>
  906a49:	008a21        	excw
        } else {
            qhead->head = qhead->head->next_buf;
  906a4c:	9a80      	s32i.n	a10, a8, 0
        }

        b0->next_buf = NULL;
  906a4e:	9921      	s32i.n	a9, a2, 4
    }
	return b0;
}
  906a50:	d10f      	retw.n
	...

00906a54 <__adf_nbuf_dmamap_create>:
 *
 * @return a_status_t
 */
a_status_t
__adf_nbuf_dmamap_create(__adf_os_device_t osdev, __adf_os_dma_map_t *dmap)
{
  906a54:	6c1004        	entry	a1, 32
    a_status_t retval = A_STATUS_OK;

    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
  906a57:	1268b5        	l32r	a2, 8e0d2c <_bss_end+0x3cde1c>
  906a5a:	c0bc      	movi.n	a11, 12
  906a5c:	222252        	l32i	a2, a2, 0x148
  906a5f:	c0a0      	movi.n	a10, 0
  906a61:	0b2000        	callx8	a2
  906a64:	9a30      	s32i.n	a10, a3, 0
    if(*dmap == NULL)
        return A_STATUS_ENOMEM;
  906a66:	c023      	movi.n	a2, 3
    if(*dmap == NULL)
  906a68:	c8a2      	beqz.n	a10, 906a6e <__adf_nbuf_dmamap_create+0x1a>

    (*dmap)->buf = NULL;
  906a6a:	c020      	movi.n	a2, 0
  906a6c:	92a0      	s32i.n	a2, a10, 0
    return retval;
}
  906a6e:	d10f      	retw.n

00906a70 <__adf_nbuf_map>:


a_status_t
__adf_nbuf_map(__adf_os_device_t osdev, __adf_os_dma_map_t bmap,
                          __adf_nbuf_t buf, adf_os_dma_dir_t dir)
{
  906a70:	6c1004        	entry	a1, 32
    bmap->buf = buf;
  906a73:	9430      	s32i.n	a4, a3, 0

    return A_STATUS_OK;
}
  906a75:	c020      	movi.n	a2, 0
  906a77:	d10f      	retw.n
  906a79:	000000        	ill

00906a7c <__adf_nbuf_unmap>:

void
__adf_nbuf_unmap(__adf_os_device_t osdev, __adf_os_dma_map_t bmap,
                            adf_os_dma_dir_t dir)
{
  906a7c:	6c1004        	entry	a1, 32
    bmap->buf = NULL;
  906a7f:	c080      	movi.n	a8, 0
  906a81:	9830      	s32i.n	a8, a3, 0
  906a83:	d10f      	retw.n
  906a85:	000000        	ill

00906a88 <__adf_nbuf_dmamap_destroy>:
  906a88:	6c1004        	entry	a1, 32
  906a8b:	d10f      	retw.n
  906a8d:	000000        	ill

00906a90 <__adf_nbuf_dmamap_info>:
 * @param[in]  bmap
 * @param[out] sg (map_info ptr)
 */
void
__adf_nbuf_dmamap_info(__adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
  906a90:	6c1004        	entry	a1, 32
    VDESC *desc = bmap->buf->desc_list;
  906a93:	8820      	l32i.n	a8, a2, 0
  906a95:	b439      	addi.n	a9, a3, 4
  906a97:	8880      	l32i.n	a8, a8, 0
    int count = 0;
  906a99:	c0a0      	movi.n	a10, 0

    while( desc != NULL ) {
  906a9b:	600015        	j	906ab4 <__adf_nbuf_dmamap_info+0x24>
  906a9e:	00002c        	excw
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
  906aa1:	8105      	l32i.n	a1, a0, 20
  906aa3:	8b81      	l32i.n	a11, a8, 4
        sg->dma_segs[count].len   = desc->data_size;

        count++;
  906aa5:	b1aa      	addi.n	a10, a10, 1
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
  906aa7:	acbb      	add.n	a11, a11, a12
  906aa9:	9b90      	s32i.n	a11, a9, 0
        sg->dma_segs[count].len   = desc->data_size;
  906aab:	2b8106        	l16ui	a11, a8, 12
        desc = desc->next_desc;
  906aae:	8880      	l32i.n	a8, a8, 0
        sg->dma_segs[count].len   = desc->data_size;
  906ab0:	9b91      	s32i.n	a11, a9, 4
  906ab2:	b899      	addi.n	a9, a9, 8
    while( desc != NULL ) {
  906ab4:	658fe8        	bnez	a8, 906aa0 <__adf_nbuf_dmamap_info+0x10>
    }

    sg->nsegs = count;
  906ab7:	9a30      	s32i.n	a10, a3, 0
  906ab9:	d10f      	retw.n
	...

00906abc <__adf_nbuf_set_rx_cksum>:
  906abc:	6c1004        	entry	a1, 32
  906abf:	d10f      	retw.n
  906ac1:	000000        	ill

00906ac4 <__adf_nbuf_get_vlan_info>:
}

a_status_t
__adf_nbuf_get_vlan_info(adf_net_handle_t hdl, __adf_nbuf_t buf,
                         adf_net_vlanhdr_t *vlan)
{
  906ac4:	6c1004        	entry	a1, 32
    return A_STATUS_OK;
}
  906ac7:	c020      	movi.n	a2, 0
  906ac9:	d10f      	retw.n
	...

00906acc <__adf_nbuf_create_frm_frag>:

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
  906acc:	6c1006        	entry	a1, 48
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  906acf:	1468b5        	l32r	a4, 8e0da4 <_bss_end+0x3cde94>
{
  906ad2:	d520      	mov.n	a5, a2
    buf_head = VBUF_alloc_vbuf();
  906ad4:	2a42a1        	l32i	a10, a4, 0x284
 *
 */
a_uint32_t
__adf_nbuf_queue_len(__adf_nbuf_qhead_t *qhead)
{
    return qhead->qlen;
  906ad7:	8222      	l32i.n	a2, a2, 8
  906ad9:	9210      	s32i.n	a2, a1, 0
    buf_head = VBUF_alloc_vbuf();
  906adb:	0ba000        	callx8	a10
  906ade:	d2a0      	mov.n	a2, a10
 * @return (NULL if the Q is empty)
 */
__adf_nbuf_t
__adf_nbuf_queue_first(__adf_nbuf_queue_t *qhead)
{
    return qhead->head;
  906ae0:	8350      	l32i.n	a3, a5, 0
    __adf_os_assert(buf_head);
  906ae2:	cda2      	bnez.n	a10, 906af8 <__adf_nbuf_create_frm_frag+0x2c>
  906ae4:	274212        	l32i	a7, a4, 72
  906ae7:	1b6924        	l32r	a11, 8e0f78 <_bss_end+0x3ce068>
  906aea:	1a691d        	l32r	a10, 8e0f60 <_bss_end+0x3ce050>
  906aed:	0b7000        	callx8	a7
  906af0:	176919        	l32r	a7, 8e0f54 <_bss_end+0x3ce044>
  906af3:	0c0200        	memw
  906af6:	8770      	l32i.n	a7, a7, 0
    __adf_os_assert(buf_tmp);
  906af8:	cd32      	bnez.n	a3, 906b0e <__adf_nbuf_create_frm_frag+0x42>
  906afa:	274212        	l32i	a7, a4, 72
  906afd:	1b6924        	l32r	a11, 8e0f90 <_bss_end+0x3ce080>
  906b00:	1a691d        	l32r	a10, 8e0f74 <_bss_end+0x3ce064>
  906b03:	0b7000        	callx8	a7
  906b06:	176919        	l32r	a7, 8e0f6c <_bss_end+0x3ce05c>
  906b09:	0c0200        	memw
  906b0c:	8770      	l32i.n	a7, a7, 0
    buf_head->desc_list = buf_tmp->desc_list;
  906b0e:	8330      	l32i.n	a3, a3, 0
  906b10:	9320      	s32i.n	a3, a2, 0
    a_uint16_t total_len = 0;
  906b12:	c030      	movi.n	a3, 0
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
  906b14:	d630      	mov.n	a6, a3
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
  906b16:	d730      	mov.n	a7, a3
    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
  906b18:	600024        	j	906b40 <__adf_nbuf_create_frm_frag+0x74>
  906b1b:	000028        	mull	a0, a0, a0
        total_len += buf_tmp->buf_length;
  906b1e:	a104      	add.n	a4, a0, a1
        cnt++;
  906b20:	b166      	addi.n	a6, a6, 1
        total_len += buf_tmp->buf_length;
  906b22:	a833      	add.n	a3, a3, a8
  906b24:	03034f        	extui	a3, a3, 0, 16
  906b27:	88a0      	l32i.n	a8, a10, 0
        if (vdesc_prev) {
  906b29:	c871      	beqz.n	a7, 906b2e <__adf_nbuf_create_frm_frag+0x62>
            vdesc_prev->next_desc = buf_tmp->desc_list;
  906b2b:	287600        	s32i	a8, a7, 0
  906b2e:	d780      	mov.n	a7, a8
        while (vdesc_tmp->next_desc) {
  906b30:	8880      	l32i.n	a8, a8, 0
  906b32:	658ff8        	bnez	a8, 906b2e <__adf_nbuf_create_frm_frag+0x62>
        buf_tmp->desc_list = NULL;
  906b35:	98a0      	s32i.n	a8, a10, 0
        buf_tmp->buf_length = 0;
  906b37:	28a504        	s16i	a8, a10, 8
        VBUF_free_vbuf(buf_tmp);
  906b3a:	2842a3        	l32i	a8, a4, 0x28c
  906b3d:	0b8000        	callx8	a8
    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
  906b40:	da50      	mov.n	a10, a5
  906b42:	5bffba        	call8	906a2c <__adf_nbuf_queue_remove>
  906b45:	65afd4        	bnez	a10, 906b1d <__adf_nbuf_create_frm_frag+0x51>
    if (cnt != len) {
  906b48:	8510      	l32i.n	a5, a1, 0
  906b4a:	756113        	beq	a6, a5, 906b61 <__adf_nbuf_create_frm_frag+0x95>
        adf_os_assert(0);
  906b4d:	244212        	l32i	a4, a4, 72
  906b50:	1b6924        	l32r	a11, 8e0fe0 <_bss_end+0x3ce0d0>
  906b53:	1a691d        	l32r	a10, 8e0fc8 <_bss_end+0x3ce0b8>
  906b56:	0b4000        	callx8	a4
  906b59:	146919        	l32r	a4, 8e0fc0 <_bss_end+0x3ce0b0>
  906b5c:	0c0200        	memw
  906b5f:	8440      	l32i.n	a4, a4, 0
    buf_head->buf_length = total_len;
  906b61:	232504        	s16i	a3, a2, 8
}
  906b64:	d10f      	retw.n
	...

00906b68 <__adf_nbuf_split_to_frag>:
{
  906b68:	6c1004        	entry	a1, 32
    qhead->qlen = 0;
  906b6b:	c040      	movi.n	a4, 0
  906b6d:	9432      	s32i.n	a4, a3, 8
    qhead->head = NULL;
  906b6f:	9430      	s32i.n	a4, a3, 0
    qhead->tail = NULL;
  906b71:	9431      	s32i.n	a4, a3, 4
  906b73:	1668b5        	l32r	a6, 8e0e48 <_bss_end+0x3cdf38>
    desc_tmp = buf->desc_list;
  906b76:	8420      	l32i.n	a4, a2, 0
    while (desc_tmp /*&& desc_tmp->buf_addr*/) {
  906b78:	60003a        	j	906bb6 <__adf_nbuf_split_to_frag+0x4e>
  906b7b:	00002a        	muluh	a0, a0, a0
        buf_tmp = VBUF_alloc_vbuf();
  906b7e:	62a10b        	j	8f0c8d <memset+0x9e45>
  906b81:	a000      	add.n	a0, a0, a0
  906b83:	d5a0      	mov.n	a5, a10
        __adf_os_assert(buf_tmp);
  906b85:	65a014        	bnez	a10, 906b9d <__adf_nbuf_split_to_frag+0x35>
  906b88:	276212        	l32i	a7, a6, 72
  906b8b:	1b6925        	l32r	a11, 8e1020 <_bss_end+0x3ce110>
  906b8e:	1a691d        	l32r	a10, 8e1004 <_bss_end+0x3ce0f4>
  906b91:	0b7000        	callx8	a7
  906b94:	176919        	l32r	a7, 8e0ff8 <_bss_end+0x3ce0e8>
  906b97:	0c0200        	memw
  906b9a:	277200        	l32i	a7, a7, 0
        buf_tmp->buf_length = desc_tmp->data_size;
  906b9d:	274106        	l16ui	a7, a4, 12
        buf_tmp->desc_list = desc_tmp;
  906ba0:	9450      	s32i.n	a4, a5, 0
        buf_tmp->buf_length = desc_tmp->data_size;
  906ba2:	275504        	s16i	a7, a5, 8
        buf_tmp->next_buf = NULL;
  906ba5:	c070      	movi.n	a7, 0
  906ba7:	9751      	s32i.n	a7, a5, 4
        __adf_nbuf_queue_add(qhead, buf_tmp);
  906ba9:	db50      	mov.n	a11, a5
  906bab:	da30      	mov.n	a10, a3
  906bad:	5bff97        	call8	906a0c <__adf_nbuf_queue_add>
        buf_tmp->desc_list->next_desc = NULL;
  906bb0:	8550      	l32i.n	a5, a5, 0
        desc_tmp = desc_tmp->next_desc;
  906bb2:	8440      	l32i.n	a4, a4, 0
        buf_tmp->desc_list->next_desc = NULL;
  906bb4:	9750      	s32i.n	a7, a5, 0
    while (desc_tmp /*&& desc_tmp->buf_addr*/) {
  906bb6:	654fc3        	bnez	a4, 906b7d <__adf_nbuf_split_to_frag+0x15>
    VBUF_free_vbuf(buf);
  906bb9:	2362a3        	l32i	a3, a6, 0x28c
    buf->desc_list = NULL;
  906bbc:	9420      	s32i.n	a4, a2, 0
    buf->buf_length = 0;
  906bbe:	242504        	s16i	a4, a2, 8
    VBUF_free_vbuf(buf);
  906bc1:	da20      	mov.n	a10, a2
  906bc3:	0b3000        	callx8	a3
  906bc6:	d10f      	retw.n

00906bc8 <__adf_nbuf_last>:
{
  906bc8:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  906bcb:	8220      	l32i.n	a2, a2, 0
    while(desc->next_desc != NULL)
  906bcd:	600001        	j	906bd2 <__adf_nbuf_last+0xa>
  906bd0:	d280      	mov.n	a2, a8
  906bd2:	8820      	l32i.n	a8, a2, 0
  906bd4:	658ff8        	bnez	a8, 906bd0 <__adf_nbuf_last+0x8>
}
  906bd7:	d10f      	retw.n
  906bd9:	000000        	ill

00906bdc <__adf_nbuf_put_tail>:
{
  906bdc:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  906bdf:	da20      	mov.n	a10, a2
  906be1:	5bfff9        	call8	906bc8 <__adf_nbuf_last>
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906be4:	28a106        	l16ui	a8, a10, 12
  906be7:	29a105        	l16ui	a9, a10, 10
    last_desc->data_size += len;
  906bea:	03034f        	extui	a3, a3, 0, 16
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906bed:	a899      	add.n	a9, a9, a8
    last_desc->data_size += len;
  906bef:	a388      	add.n	a8, a8, a3
  906bf1:	28a506        	s16i	a8, a10, 12
    buf->buf_length += len;
  906bf4:	282104        	l16ui	a8, a2, 8
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906bf7:	8ba1      	l32i.n	a11, a10, 4
    buf->buf_length += len;
  906bf9:	a833      	add.n	a3, a3, a8
  906bfb:	232504        	s16i	a3, a2, 8
}
  906bfe:	a9b2      	add.n	a2, a11, a9
  906c00:	d10f      	retw.n
	...

00906c04 <__adf_nbuf_trim_tail>:
{
  906c04:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  906c07:	022a02        	or	a10, a2, a2
  906c0a:	5bffef        	call8	906bc8 <__adf_nbuf_last>
  906c0d:	d4a0      	mov.n	a4, a10
    adf_os_assert(buf != NULL);
  906c0f:	cd25      	bnez.n	a2, 906c28 <__adf_nbuf_trim_tail+0x24>
  906c11:	1868b5        	l32r	a8, 8e0ee8 <_bss_end+0x3cdfd8>
  906c14:	1b6926        	l32r	a11, 8e10ac <_bss_end+0x3ce19c>
  906c17:	288212        	l32i	a8, a8, 72
  906c1a:	1a691d        	l32r	a10, 8e1090 <_bss_end+0x3ce180>
  906c1d:	0b8000        	callx8	a8
  906c20:	186919        	l32r	a8, 8e1084 <_bss_end+0x3ce174>
  906c23:	0c0200        	memw
  906c26:	8880      	l32i.n	a8, a8, 0
    last_desc->data_size -= len;
  906c28:	284106        	l16ui	a8, a4, 12
  906c2b:	03034f        	extui	a3, a3, 0, 16
  906c2e:	03880c        	sub	a8, a8, a3
  906c31:	284506        	s16i	a8, a4, 12
    buf->buf_length -= len;
  906c34:	282104        	l16ui	a8, a2, 8
  906c37:	03830c        	sub	a3, a8, a3
  906c3a:	232504        	s16i	a3, a2, 8
  906c3d:	d10f      	retw.n
	...

00906c40 <__adf_nbuf_headroom>:
{
  906c40:	6c1004        	entry	a1, 32
    return buf->desc_list->data_offset;
  906c43:	8820      	l32i.n	a8, a2, 0
}
  906c45:	228105        	l16ui	a2, a8, 10
  906c48:	d10f      	retw.n
	...

00906c4c <__adf_nbuf_tailroom>:
{
  906c4c:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  906c4f:	da20      	mov.n	a10, a2
  906c51:	5bffdd        	call8	906bc8 <__adf_nbuf_last>
    return last_desc->buf_size - last_desc->data_offset - last_desc->data_size;
  906c54:	22a105        	l16ui	a2, a10, 10
  906c57:	28a104        	l16ui	a8, a10, 8
  906c5a:	02880c        	sub	a8, a8, a2
  906c5d:	22a106        	l16ui	a2, a10, 12
}
  906c60:	02820c        	sub	a2, a8, a2
  906c63:	d10f      	retw.n
  906c65:	000000        	ill

00906c68 <__adf_nbuf_len>:
{
  906c68:	6c1004        	entry	a1, 32
}
  906c6b:	222104        	l16ui	a2, a2, 8
  906c6e:	d10f      	retw.n

00906c70 <__adf_nbuf_clone>:
{
  906c70:	6c1004        	entry	a1, 32
}
  906c73:	c020      	movi.n	a2, 0
  906c75:	d10f      	retw.n
	...

00906c78 <__adf_nbuf_cat>:
{
  906c78:	6c1004        	entry	a1, 32
  906c7b:	d10f      	retw.n
  906c7d:	000000        	ill

00906c80 <__adf_nbuf_is_cloned>:
{
  906c80:	6c1004        	entry	a1, 32
}
  906c83:	c020      	movi.n	a2, 0
  906c85:	d10f      	retw.n
	...

00906c88 <__adf_nbuf_peek_header>:
{
  906c88:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  906c8b:	8820      	l32i.n	a8, a2, 0
    *addr = desc->buf_addr + desc->data_offset;
  906c8d:	2a8105        	l16ui	a10, a8, 10
  906c90:	8981      	l32i.n	a9, a8, 4
    *len = desc->data_size;
  906c92:	288106        	l16ui	a8, a8, 12
    *addr = desc->buf_addr + desc->data_offset;
  906c95:	aa99      	add.n	a9, a9, a10
  906c97:	9930      	s32i.n	a9, a3, 0
    *len = desc->data_size;
  906c99:	9840      	s32i.n	a8, a4, 0
  906c9b:	d10f      	retw.n
  906c9d:	000000        	ill

00906ca0 <__adf_nbuf_queue_init>:
{
  906ca0:	6c1004        	entry	a1, 32
    qhead->qlen = 0;
  906ca3:	c080      	movi.n	a8, 0
  906ca5:	9822      	s32i.n	a8, a2, 8
    qhead->head = NULL;
  906ca7:	9820      	s32i.n	a8, a2, 0
    qhead->tail = NULL;
  906ca9:	9821      	s32i.n	a8, a2, 4
  906cab:	d10f      	retw.n
  906cad:	000000        	ill

00906cb0 <__adf_nbuf_queue_len>:
{
  906cb0:	6c1004        	entry	a1, 32
}
  906cb3:	8222      	l32i.n	a2, a2, 8
  906cb5:	d10f      	retw.n
	...

00906cb8 <__adf_nbuf_queue_first>:
{
  906cb8:	6c1004        	entry	a1, 32
}
  906cbb:	8220      	l32i.n	a2, a2, 0
  906cbd:	d10f      	retw.n
	...

00906cc0 <__adf_nbuf_queue_next>:
 *
 * @return (NULL if no packets are there)
 */
__adf_nbuf_t
__adf_nbuf_queue_next(__adf_nbuf_t  buf)
{
  906cc0:	6c1004        	entry	a1, 32
    return buf->next_buf;
}
  906cc3:	8221      	l32i.n	a2, a2, 4
  906cc5:	d10f      	retw.n
	...

00906cc8 <__adf_nbuf_is_queue_empty>:
 *
 * @return a_bool_t
 */
a_bool_t
__adf_nbuf_is_queue_empty(__adf_nbuf_qhead_t *qhead)
{
  906cc8:	6c1004        	entry	a1, 32
    return ((qhead->qlen == 0));
  906ccb:	8222      	l32i.n	a2, a2, 8
  906ccd:	c091      	movi.n	a9, 1
  906ccf:	c080      	movi.n	a8, 0
  906cd1:	029838        	moveqz	a8, a9, a2
  906cd4:	d280      	mov.n	a2, a8
}
  906cd6:	d10f      	retw.n

00906cd8 <_buf_pool_static_init>:
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}

LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
  906cd8:	6c1004        	entry	a1, 32
  906cdb:	c080      	movi.n	a8, 0
#if 1
    int i;

    for(i=0; i < POOL_ID_MAX; i++) {
        g_poolCtx.bufQ[i] = NULL;
  906cdd:	126927        	l32r	a2, 8e117c <_bss_end+0x3ce26c>
  906ce0:	db80      	mov.n	a11, a8
    for(i=0; i < POOL_ID_MAX; i++) {
  906ce2:	290a0a        	movi	a9, 10
  906ce5:	6d9805        	loop	a9, 906cee <_buf_pool_static_init+0x16>
        g_poolCtx.bufQ[i] = NULL;
  906ce8:	a28a      	add.n	a10, a8, a2
  906cea:	9ba0      	s32i.n	a11, a10, 0
  906cec:	b488      	addi.n	a8, a8, 4
    ctx = (BUF_POOL_STATIC_CONTEXT *)adf_os_mem_alloc(sizeof(BUF_POOL_STATIC_CONTEXT));
    ctx->NetHandle = handle;

    return ctx;
#endif
}
  906cee:	d10f      	retw.n

00906cf0 <_buf_pool_static_shutdown>:

LOCAL void _buf_pool_static_shutdown(pool_handle_t handle)
{
  906cf0:	6c1004        	entry	a1, 32
  906cf3:	d10f      	retw.n
  906cf5:	000000        	ill

00906cf8 <_buf_pool_static_create_pool>:
    // SHALL NOT BE USED in FW
}

LOCAL void _buf_pool_static_create_pool(pool_handle_t handle, BUF_POOL_ID poolId, int nItems, int nSize)
{
  906cf8:	6c1006        	entry	a1, 48
        desc->data_size = 0;

        buf->buf_length = 0;
        buf->desc_list = desc;

        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906cfb:	126927        	l32r	a2, 8e1198 <_bss_end+0x3ce288>
  906cfe:	0e3311        	slli	a3, a3, 2
{
  906d01:	d940      	mov.n	a9, a4
        buf = VBUF_alloc_vbuf();
  906d03:	1668b5        	l32r	a6, 8e0fd8 <_bss_end+0x3ce0c8>
    for ( i = 0; i < nItems; i++) {
  906d06:	c040      	movi.n	a4, 0
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d08:	a323      	add.n	a3, a2, a3
    for ( i = 0; i < nItems; i++) {
  906d0a:	60003c        	j	906d4a <_buf_pool_static_create_pool+0x52>
        buf = VBUF_alloc_vbuf();
  906d0d:	2a62a1        	l32i	a10, a6, 0x284
  906d10:	9910      	s32i.n	a9, a1, 0
  906d12:	0ba000        	callx8	a10
  906d15:	d2a0      	mov.n	a2, a10
        desc = VDESC_alloc_vdesc();
  906d17:	2a62a6        	l32i	a10, a6, 0x298
  906d1a:	0ba000        	callx8	a10
    return A_ALLOCRAM(size);
  906d1d:	286252        	l32i	a8, a6, 0x148
  906d20:	d7a0      	mov.n	a7, a10
  906d22:	db50      	mov.n	a11, a5
  906d24:	c0a0      	movi.n	a10, 0
  906d26:	0b8000        	callx8	a8
        desc->data_offset = 0;
  906d29:	c080      	movi.n	a8, 0
        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
  906d2b:	9a71      	s32i.n	a10, a7, 4
        desc->buf_size = nSize;
  906d2d:	257504        	s16i	a5, a7, 8
        desc->data_offset = 0;
  906d30:	287505        	s16i	a8, a7, 10
        desc->data_size = 0;
  906d33:	287506        	s16i	a8, a7, 12
        buf->desc_list = desc;
  906d36:	9720      	s32i.n	a7, a2, 0
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d38:	8730      	l32i.n	a7, a3, 0
        buf->buf_length = 0;
  906d3a:	282504        	s16i	a8, a2, 8
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d3d:	8910      	l32i.n	a9, a1, 0
  906d3f:	cc71      	bnez.n	a7, 906d44 <_buf_pool_static_create_pool+0x4c>
  906d41:	600001        	j	906d46 <_buf_pool_static_create_pool+0x4e>
            g_poolCtx.bufQ[poolId] = buf;
        } else {
            buf->next_buf = g_poolCtx.bufQ[poolId];
  906d44:	9721      	s32i.n	a7, a2, 4
            g_poolCtx.bufQ[poolId] = buf;
  906d46:	9230      	s32i.n	a2, a3, 0
    for ( i = 0; i < nItems; i++) {
  906d48:	b144      	addi.n	a4, a4, 1
  906d4a:	7942bf        	blt	a4, a9, 906d0d <_buf_pool_static_create_pool+0x15>
        }
    }
}
  906d4d:	d10f      	retw.n
	...

00906d50 <_buf_pool_static_alloc_buf>:

LOCAL adf_nbuf_t  _buf_pool_static_alloc_buf(pool_handle_t handle, BUF_POOL_ID poolId, int reserve)
{
  906d50:	6c1004        	entry	a1, 32
    VBUF *buf;

    buf = g_poolCtx.bufQ[poolId];
  906d53:	126927        	l32r	a2, 8e11f0 <_bss_end+0x3ce2e0>
  906d56:	0e3311        	slli	a3, a3, 2
  906d59:	a323      	add.n	a3, a2, a3
  906d5b:	8230      	l32i.n	a2, a3, 0
    if ( buf != NULL ) {
  906d5d:	c921      	beqz.n	a2, 906d72 <_buf_pool_static_alloc_buf+0x22>
        g_poolCtx.bufQ[poolId] = buf->next_buf;
  906d5f:	8821      	l32i.n	a8, a2, 4
  906d61:	9830      	s32i.n	a8, a3, 0

        buf->next_buf = NULL;
  906d63:	c030      	movi.n	a3, 0
        buf->desc_list->data_offset = reserve;
  906d65:	8820      	l32i.n	a8, a2, 0
        buf->next_buf = NULL;
  906d67:	9321      	s32i.n	a3, a2, 4
        buf->desc_list->data_offset = reserve;
  906d69:	248505        	s16i	a4, a8, 10
        buf->desc_list->data_size = 0;
  906d6c:	238506        	s16i	a3, a8, 12
        buf->buf_length = 0;
  906d6f:	232504        	s16i	a3, a2, 8
    }

    return buf;
}
  906d72:	d10f      	retw.n

00906d74 <_buf_pool_static_alloc_buf_align>:

LOCAL adf_nbuf_t  _buf_pool_static_alloc_buf_align(pool_handle_t handle, BUF_POOL_ID poolId, int reserve, int align)
{
  906d74:	6c1004        	entry	a1, 32
    return _buf_pool_static_alloc_buf(handle, poolId, reserve);
  906d77:	dc40      	mov.n	a12, a4
  906d79:	db30      	mov.n	a11, a3
  906d7b:	da20      	mov.n	a10, a2
  906d7d:	5bfff4        	call8	906d50 <_buf_pool_static_alloc_buf>
}
  906d80:	d2a0      	mov.n	a2, a10
  906d82:	d10f      	retw.n

00906d84 <_buf_pool_static_free_buf>:

LOCAL void _buf_pool_static_free_buf(pool_handle_t handle, BUF_POOL_ID poolId, adf_nbuf_t buf)
{
  906d84:	6c1004        	entry	a1, 32
    if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d87:	186927        	l32r	a8, 8e1224 <_bss_end+0x3ce314>
  906d8a:	0e3311        	slli	a3, a3, 2
  906d8d:	a383      	add.n	a3, a8, a3
  906d8f:	8830      	l32i.n	a8, a3, 0
  906d91:	cc81      	bnez.n	a8, 906d96 <_buf_pool_static_free_buf+0x12>
  906d93:	600001        	j	906d98 <_buf_pool_static_free_buf+0x14>
        g_poolCtx.bufQ[poolId] = buf;
    } else {
        buf->next_buf = g_poolCtx.bufQ[poolId];
  906d96:	9841      	s32i.n	a8, a4, 4
        g_poolCtx.bufQ[poolId] = buf;
  906d98:	9430      	s32i.n	a4, a3, 0
  906d9a:	d10f      	retw.n

00906d9c <buf_pool_module_install>:
{
  906d9c:	6c1004        	entry	a1, 32
    pAPIs->_init = _buf_pool_static_init;
  906d9f:	186928        	l32r	a8, 8e1240 <_bss_end+0x3ce330>
  906da2:	9820      	s32i.n	a8, a2, 0
    pAPIs->_create_pool = _buf_pool_static_create_pool;
  906da4:	186929        	l32r	a8, 8e1248 <_bss_end+0x3ce338>
  906da7:	9822      	s32i.n	a8, a2, 8
    pAPIs->_alloc_buf = _buf_pool_static_alloc_buf;
  906da9:	18692a        	l32r	a8, 8e1254 <_bss_end+0x3ce344>
  906dac:	9823      	s32i.n	a8, a2, 12
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
  906dae:	18692b        	l32r	a8, 8e125c <_bss_end+0x3ce34c>
  906db1:	9824      	s32i.n	a8, a2, 16
    pAPIs->_free_buf = _buf_pool_static_free_buf;
  906db3:	18692c        	l32r	a8, 8e1264 <_bss_end+0x3ce354>
  906db6:	9825      	s32i.n	a8, a2, 20
    pAPIs->_shutdown = _buf_pool_static_shutdown;
  906db8:	18692d        	l32r	a8, 8e126c <_bss_end+0x3ce35c>
  906dbb:	9821      	s32i.n	a8, a2, 4
  906dbd:	d10f      	retw.n
	...

00906dc0 <db_incorect_format>:
int cmd_not_found;
uint16_t gvLen;
int pressed_time;

static void db_incorect_format(void)
{
  906dc0:	6c1004        	entry	a1, 32
	A_PRINTF("Error! Incorrect format.\n\r");
  906dc3:	1868b5        	l32r	a8, 8e1098 <_bss_end+0x3ce188>
  906dc6:	1a692e        	l32r	a10, 8e1280 <_bss_end+0x3ce370>
  906dc9:	288212        	l32i	a8, a8, 72
  906dcc:	0b8000        	callx8	a8
  906dcf:	d10f      	retw.n
  906dd1:	000000        	ill

00906dd4 <zf_debug_init>:
	} while (mem1 < mem2);
	A_PRINTF("\n\r");
}

static void zf_debug_init(void)
{
  906dd4:	6c1006        	entry	a1, 48
	uint8_t ch;

	/* Purge Rx FIFO */
	while ((zm_get_char(&ch)) != 0)
  906dd7:	1268b5        	l32r	a2, 8e10ac <_bss_end+0x3ce19c>
  906dda:	282215        	l32i	a8, a2, 84
  906ddd:	da10      	mov.n	a10, a1
  906ddf:	0b8000        	callx8	a8
  906de2:	65aff4        	bnez	a10, 906dda <zf_debug_init+0x6>
	{
	}

	cmd_buf_ptr = 0;
  906de5:	18692f        	l32r	a8, 8e12a4 <_bss_end+0x3ce394>
  906de8:	9a80      	s32i.n	a10, a8, 0
	cmd_buf_full = FALSE;
  906dea:	186930        	l32r	a8, 8e12ac <_bss_end+0x3ce39c>
  906ded:	9a80      	s32i.n	a10, a8, 0
	gvLen = 0;
  906def:	186931        	l32r	a8, 8e12b4 <_bss_end+0x3ce3a4>
  906df2:	2a8500        	s16i	a10, a8, 0
	pressed_time = 0;
  906df5:	186932        	l32r	a8, 8e12c0 <_bss_end+0x3ce3b0>
  906df8:	9a80      	s32i.n	a10, a8, 0
  906dfa:	d10f      	retw.n

00906dfc <db_ascii_to_hex>:
	}
	return (int)A_STRLEN(cmd_str);
}

static int db_ascii_to_hex(char *num_str, unsigned long *hex_num)
{
  906dfc:	6c1004        	entry	a1, 32
	int i = 0;

	*hex_num = 0;
  906dff:	c080      	movi.n	a8, 0
  906e01:	9830      	s32i.n	a8, a3, 0
	while (num_str[i])
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  906e03:	c099      	movi.n	a9, 9
	while (num_str[i])
  906e05:	60004f        	j	906e58 <db_ascii_to_hex+0x5c>
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  906e08:	2a8cd0        	addi	a10, a8, -48
  906e0b:	0a0a47        	extui	a10, a10, 0, 8
  906e0e:	7a930f        	bltu	a9, a10, 906e21 <db_ascii_to_hex+0x25>
		{
			*hex_num <<= 4;
  906e11:	8830      	l32i.n	a8, a3, 0
  906e13:	0c8811        	slli	a8, a8, 4
  906e16:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - '0');
  906e18:	2a2000        	l8ui	a10, a2, 0
  906e1b:	288cd0        	addi	a8, a8, -48
  906e1e:	600030        	j	906e52 <db_ascii_to_hex+0x56>
		}
		else if ((num_str[i] >= 'A') && (num_str[i] <= 'F'))
  906e21:	2a8cbf        	addi	a10, a8, -65
  906e24:	0a0a47        	extui	a10, a10, 0, 8
  906e27:	6fa611        	bgeui	a10, 6, 906e3c <db_ascii_to_hex+0x40>
		{
			*hex_num <<= 4;
  906e2a:	8830      	l32i.n	a8, a3, 0
  906e2c:	0c8811        	slli	a8, a8, 4
  906e2f:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - 'A' + 10);
  906e31:	2a2000        	l8ui	a10, a2, 0
  906e34:	288cc9        	addi	a8, a8, -55
  906e37:	600017        	j	906e52 <db_ascii_to_hex+0x56>
  906e3a:	000028        	mull	a0, a0, a0
		}
		else if ((num_str[i] >= 'a') && (num_str[i] <= 'f'))
  906e3d:	8c9f      	l32i.n	a12, a9, 60
  906e3f:	080847        	extui	a8, a8, 0, 8
  906e42:	6f861c        	bgeui	a8, 6, 906e62 <db_ascii_to_hex+0x66>
		{
			*hex_num <<= 4;
  906e45:	8830      	l32i.n	a8, a3, 0
  906e47:	0c8811        	slli	a8, a8, 4
  906e4a:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - 'a' + 10);
  906e4c:	2a2000        	l8ui	a10, a2, 0
  906e4f:	288ca9        	addi	a8, a8, -87
  906e52:	a8a8      	add.n	a8, a10, a8
  906e54:	9830      	s32i.n	a8, a3, 0
  906e56:	b122      	addi.n	a2, a2, 1
	while (num_str[i])
  906e58:	282000        	l8ui	a8, a2, 0
  906e5b:	658fa9        	bnez	a8, 906e08 <db_ascii_to_hex+0xc>
		{
			return -1;
		}
		i++;
	}
	return 0;
  906e5e:	d280      	mov.n	a2, a8
  906e60:	d10f      	retw.n
			return -1;
  906e62:	c72f      	movi.n	a2, -1
}
  906e64:	d10f      	retw.n
	...

00906e68 <db_hex_to_ascii>:
	}
	return 0;
}

static int db_hex_to_ascii(unsigned long hex_num, char *num_str)
{
  906e68:	6c1004        	entry	a1, 32
  906e6b:	d930      	mov.n	a9, a3
  906e6d:	c1bc      	movi.n	a11, 28
	unsigned long four_bits;

	for (i=7; i>=0; i--)
	{
		four_bits = (hex_num >> i*4) & 0xf;
		if (four_bits < 10)
  906e6f:	2c0a09        	movi	a12, 9
	for (i=7; i>=0; i--)
  906e72:	2a0a08        	movi	a10, 8
  906e75:	6da81e        	loop	a10, 906e97 <db_hex_to_ascii+0x2f>
		four_bits = (hex_num >> i*4) & 0xf;
  906e78:	00b004        	ssr	a11
  906e7b:	020819        	srl	a8, a2
  906e7e:	080843        	extui	a8, a8, 0, 4
		if (four_bits < 10)
  906e81:	78c307        	bltu	a12, a8, 906e8c <db_hex_to_ascii+0x24>
		{
			num_str[7-i] = four_bits + '0';
  906e84:	288c30        	addi	a8, a8, 48
  906e87:	600004        	j	906e8f <db_hex_to_ascii+0x27>
  906e8a:	000028        	mull	a0, a0, a0
		}
		else
		{
			num_str[7-i] = four_bits - 10 + 'A';
  906e8d:	8c37      	l32i.n	a12, a3, 28
  906e8f:	289400        	s8i	a8, a9, 0
  906e92:	2bbcfc        	addi	a11, a11, -4
  906e95:	b199      	addi.n	a9, a9, 1
		}
	}
	num_str[8] = 0;
  906e97:	c080      	movi.n	a8, 0
  906e99:	283408        	s8i	a8, a3, 8
	return 0;
}
  906e9c:	c020      	movi.n	a2, 0
  906e9e:	d10f      	retw.n

00906ea0 <db_help_cmd>:

int db_help_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  906ea0:	6c1004        	entry	a1, 32
	int i;

	i = 0;

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);
  906ea3:	1468b5        	l32r	a4, 8e1178 <_bss_end+0x3ce268>
  906ea6:	1c6933        	l32r	a12, 8e1374 <_bss_end+0x3ce464>
  906ea9:	224212        	l32i	a2, a4, 72
  906eac:	1b6934        	l32r	a11, 8e137c <_bss_end+0x3ce46c>
  906eaf:	1a6935        	l32r	a10, 8e1384 <_bss_end+0x3ce474>
  906eb2:	0b2000        	callx8	a2
  906eb5:	136936        	l32r	a3, 8e1390 <_bss_end+0x3ce480>
	i = 0;
  906eb8:	c020      	movi.n	a2, 0

	while (command_table[i].cmd_func)
  906eba:	600010        	j	906ece <db_help_cmd+0x2e>
	{
		A_PRINTF("%s\t%s\n\r", command_table[i].cmd_str,
  906ebd:	8c31      	l32i.n	a12, a3, 4
  906ebf:	8b30      	l32i.n	a11, a3, 0
  906ec1:	284212        	l32i	a8, a4, 72
  906ec4:	1a6937        	l32r	a10, 8e13a0 <_bss_end+0x3ce490>
				       command_table[i].help_str);
		i++;
  906ec7:	b122      	addi.n	a2, a2, 1
		A_PRINTF("%s\t%s\n\r", command_table[i].cmd_str,
  906ec9:	0b8000        	callx8	a8
  906ecc:	bc33      	addi.n	a3, a3, 12
	while (command_table[i].cmd_func)
  906ece:	8832      	l32i.n	a8, a3, 8
  906ed0:	658fe9        	bnez	a8, 906ebd <db_help_cmd+0x1d>
	}
	return i;
}
  906ed3:	d10f      	retw.n
  906ed5:	000000        	ill

00906ed8 <db_cmd_starthtc>:
#endif
	return 1;
}

static int db_cmd_starthtc(char *cmd, char *param1, char *param2, char *param3)
{
  906ed8:	6c1004        	entry	a1, 32
    extern htc_handle_t htc_handle;
    HTC_Ready(htc_handle);
  906edb:	186938        	l32r	a8, 8e13bc <_bss_end+0x3ce4ac>
  906ede:	1268b5        	l32r	a2, 8e11b4 <_bss_end+0x3ce2a4>
  906ee1:	8a80      	l32i.n	a10, a8, 0
  906ee3:	222281        	l32i	a2, a2, 0x204
  906ee6:	0b2000        	callx8	a2
}
  906ee9:	d10f      	retw.n
	...

00906eec <db_cmd_memcmp>:
#endif
#endif /* #if defined(PROJECT_K2) */

/* Memory Comparison */
static int db_cmd_memcmp(char *cmd, char *param1, char *param2, char *param3)
{
  906eec:	6c1006        	entry	a1, 48
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
  906eef:	2b1c08        	addi	a11, a1, 8
  906ef2:	033a02        	or	a10, a3, a3
  906ef5:	5bffc1        	call8	906dfc <db_ascii_to_hex>
  906ef8:	68a045        	beqi	a10, -1, 906f41 <db_cmd_memcmp+0x55>
	    db_ascii_to_hex(param2, &addr2) != -1 &&
  906efb:	2b1c04        	addi	a11, a1, 4
  906efe:	044a02        	or	a10, a4, a4
  906f01:	5bffbe        	call8	906dfc <db_ascii_to_hex>
	if (db_ascii_to_hex(param1, &addr1) != -1 &&
  906f04:	68a039        	beqi	a10, -1, 906f41 <db_cmd_memcmp+0x55>
	    db_ascii_to_hex(param3, &len) != -1 &&
  906f07:	011b02        	or	a11, a1, a1
  906f0a:	055a02        	or	a10, a5, a5
  906f0d:	5bffbb        	call8	906dfc <db_ascii_to_hex>
	    db_ascii_to_hex(param2, &addr2) != -1 &&
  906f10:	68a02d        	beqi	a10, -1, 906f41 <db_cmd_memcmp+0x55>
	    addr1 != addr2 && addr1%4 == 0 && addr2%4 == 0 && len%4 == 0)
  906f13:	8a12      	l32i.n	a10, a1, 8
  906f15:	8b11      	l32i.n	a11, a1, 4
	    db_ascii_to_hex(param3, &len) != -1 &&
  906f17:	7ba126        	beq	a10, a11, 906f41 <db_cmd_memcmp+0x55>
	    addr1 != addr2 && addr1%4 == 0 && addr2%4 == 0 && len%4 == 0)
  906f1a:	0ba202        	or	a2, a10, a11
  906f1d:	020241        	extui	a2, a2, 0, 2
  906f20:	cd2d      	bnez.n	a2, 906f41 <db_cmd_memcmp+0x55>
  906f22:	8c10      	l32i.n	a12, a1, 0
  906f24:	0c0241        	extui	a2, a12, 0, 2
  906f27:	cd26      	bnez.n	a2, 906f41 <db_cmd_memcmp+0x55>
	{
		buf1 = (A_UINT8 *)addr1;
		buf2 = (A_UINT8 *)addr2;        ;

		A_PRINTF("memcmp(buf1, buf2, len) = %d\n\r", A_MEMCMP(buf1, buf2, len));
  906f29:	1868b5        	l32r	a8, 8e1200 <_bss_end+0x3ce2f0>
  906f2c:	238212        	l32i	a3, a8, 72
  906f2f:	8887      	l32i.n	a8, a8, 28
  906f31:	0b8000        	callx8	a8
  906f34:	dba0      	mov.n	a11, a10
  906f36:	1a6939        	l32r	a10, 8e141c <_bss_end+0x3ce50c>
  906f39:	0b3000        	callx8	a3
		return 0;
  906f3c:	d10f      	retw.n
  906f3e:	000000        	ill
	}

	db_incorect_format();
  906f41:	5bff9f        	call8	906dc0 <db_incorect_format>
	return -1;
  906f44:	c72f      	movi.n	a2, -1
}
  906f46:	d10f      	retw.n

00906f48 <db_cmd_memdump>:

/* Memory Dump */
static int db_cmd_memdump(char *cmd, char *param1, char *param2, char *param3)
{
  906f48:	6c1006        	entry	a1, 48
	unsigned long       addr1, addr2;

	if (db_ascii_to_hex(param1, &addr1) != -1 && db_ascii_to_hex(param2, &addr2) != -1 && addr1 < addr2 && addr1%4 == 0)
  906f4b:	2b1c04        	addi	a11, a1, 4
  906f4e:	033a02        	or	a10, a3, a3
  906f51:	5bffaa        	call8	906dfc <db_ascii_to_hex>
  906f54:	69a002        	bnei	a10, -1, 906f5a <db_cmd_memdump+0x12>
  906f57:	600082        	j	906fdd <db_cmd_memdump+0x95>
  906f5a:	db10      	mov.n	a11, a1
  906f5c:	da40      	mov.n	a10, a4
  906f5e:	5bffa7        	call8	906dfc <db_ascii_to_hex>
  906f61:	68a078        	beqi	a10, -1, 906fdd <db_cmd_memdump+0x95>
  906f64:	8211      	l32i.n	a2, a1, 4
  906f66:	261200        	l32i	a6, a1, 0
  906f69:	762b70        	bgeu	a2, a6, 906fdd <db_cmd_memdump+0x95>
  906f6c:	020341        	extui	a3, a2, 0, 2
  906f6f:	65306a        	bnez	a3, 906fdd <db_cmd_memdump+0x95>
  906f72:	1468b5        	l32r	a4, 8e1248 <_bss_end+0x3ce338>
		if (i == 0) {
  906f75:	cc3b      	bnez.n	a3, 906f84 <db_cmd_memdump+0x3c>
			A_PRINTF("\n\r%06x: ", mem1);
  906f77:	254212        	l32i	a5, a4, 72
  906f7a:	1a693a        	l32r	a10, 8e1464 <_bss_end+0x3ce554>
  906f7d:	db20      	mov.n	a11, a2
  906f7f:	0b5000        	callx8	a5
  906f82:	d520      	mov.n	a5, a2
		A_PRINTF("%04x ", *(uint16_t *)mem1);
  906f84:	2b2100        	l16ui	a11, a2, 0
  906f87:	274212        	l32i	a7, a4, 72
  906f8a:	1a693b        	l32r	a10, 8e1478 <_bss_end+0x3ce568>
		i++;
  906f8d:	b133      	addi.n	a3, a3, 1
		A_PRINTF("%04x ", *(uint16_t *)mem1);
  906f8f:	0b7000        	callx8	a7
		mem1 += 2;
  906f92:	222c02        	addi	a2, a2, 2
		if (i == 8) {
  906f95:	693833        	bnei	a3, 8, 906fcc <db_cmd_memdump+0x84>
			A_PRINTF(" ");
  906f98:	234212        	l32i	a3, a4, 72
  906f9b:	1a693c        	l32r	a10, 8e148c <_bss_end+0x3ce57c>
				if (*tmp > 0x20 && *tmp < 0x7e)
  906f9e:	270a5c        	movi	a7, 92
			A_PRINTF(" ");
  906fa1:	0b3000        	callx8	a3
				if (*tmp > 0x20 && *tmp < 0x7e)
  906fa4:	2b5000        	l8ui	a11, a5, 0
  906fa7:	23bcdf        	addi	a3, a11, -33
  906faa:	030347        	extui	a3, a3, 0, 8
  906fad:	73730b        	bltu	a7, a3, 906fbc <db_cmd_memdump+0x74>
					A_PRINTF("%c", *tmp);
  906fb0:	234212        	l32i	a3, a4, 72
  906fb3:	1a693d        	l32r	a10, 8e14a8 <_bss_end+0x3ce598>
  906fb6:	0b3000        	callx8	a3
  906fb9:	600008        	j	906fc5 <db_cmd_memdump+0x7d>
					A_PRINTF(".");
  906fbc:	234212        	l32i	a3, a4, 72
  906fbf:	1a693e        	l32r	a10, 8e14b8 <_bss_end+0x3ce5a8>
  906fc2:	0b3000        	callx8	a3
				tmp++;
  906fc5:	b155      	addi.n	a5, a5, 1
			} while (tmp < mem1);
  906fc7:	7253d9        	bltu	a5, a2, 906fa4 <db_cmd_memdump+0x5c>
			i = 0;
  906fca:	c030      	movi.n	a3, 0
	} while (mem1 < mem2);
  906fcc:	7623a5        	bltu	a2, a6, 906f75 <db_cmd_memdump+0x2d>
	A_PRINTF("\n\r");
  906fcf:	224212        	l32i	a2, a4, 72
  906fd2:	1a693f        	l32r	a10, 8e14d0 <_bss_end+0x3ce5c0>
  906fd5:	0b2000        	callx8	a2
	{
		db_print_dump((const char *)addr1, (const char *)addr2);
		return 0;
  906fd8:	c020      	movi.n	a2, 0
  906fda:	d10f      	retw.n
  906fdc:	005bff        	excw
	}

	db_incorect_format();
  906fdf:	78c72f        	bbci	a12, 24, 907012 <db_str_cmd+0x2e>
	return -1;
}
  906fe2:	d10f      	retw.n

00906fe4 <db_str_cmd>:
{
  906fe4:	6c100a        	entry	a1, 80
	if ((A_STRLEN(param2) > 0) &&
  906fe7:	1568b5        	l32r	a5, 8e12bc <_bss_end+0x3ce3ac>
  906fea:	da40      	mov.n	a10, a4
  906fec:	285266        	l32i	a8, a5, 0x198
  906fef:	0b8000        	callx8	a8
  906ff2:	6ba102        	bgei	a10, 1, 906ff8 <db_str_cmd+0x14>
  906ff5:	6000a0        	j	907099 <db_str_cmd+0xb5>
	    (db_ascii_to_hex(param1, &addr) != -1) &&
  906ff8:	2b1c28        	addi	a11, a1, 40
  906ffb:	da30      	mov.n	a10, a3
  906ffd:	5bff7f        	call8	906dfc <db_ascii_to_hex>
	if ((A_STRLEN(param2) > 0) &&
  907000:	69a002        	bnei	a10, -1, 907006 <db_str_cmd+0x22>
  907003:	600092        	j	907099 <db_str_cmd+0xb5>
	    (db_ascii_to_hex(param2, &val) != -1))
  907006:	2b1c2c        	addi	a11, a1, 44
  907009:	da40      	mov.n	a10, a4
  90700b:	5bff7c        	call8	906dfc <db_ascii_to_hex>
	    (db_ascii_to_hex(param1, &addr) != -1) &&
  90700e:	69a002        	bnei	a10, -1, 907014 <db_str_cmd+0x30>
  907011:	600084        	j	907099 <db_str_cmd+0xb5>
		if (strcmp(cmd, "STR") == 0)
  907014:	1b6940        	l32r	a11, 8e1514 <_bss_end+0x3ce604>
  907017:	da20      	mov.n	a10, a2
  907019:	5b7d51        	call8	8e6560 <strcmp>
  90701c:	cda1      	bnez.n	a10, 907031 <db_str_cmd+0x4d>
			addr &= 0xfffffffc;
  90701e:	821a      	l32i.n	a2, a1, 40
  907020:	c78c      	movi.n	a8, -4
  907022:	028801        	and	a8, a8, a2
			iowrite32(addr, val);
  907025:	821b      	l32i.n	a2, a1, 44
			addr &= 0xfffffffc;
  907027:	981a      	s32i.n	a8, a1, 40
	*(volatile uint32_t *) addr = b;
  907029:	0c0200        	memw
  90702c:	9280      	s32i.n	a2, a8, 0
  90702e:	600044        	j	907076 <db_str_cmd+0x92>
		else if (strcmp(cmd, "STRH") == 0)
  907031:	1b6941        	l32r	a11, 8e1538 <_bss_end+0x3ce628>
  907034:	da20      	mov.n	a10, a2
  907036:	5b7d4a        	call8	8e6560 <strcmp>
  907039:	cda3      	bnez.n	a10, 907050 <db_str_cmd+0x6c>
			addr &= 0xfffffffe;
  90703b:	821a      	l32i.n	a2, a1, 40
  90703d:	c78e      	movi.n	a8, -2
  90703f:	028801        	and	a8, a8, a2
			iowrite16(addr, val);
  907042:	221117        	l16ui	a2, a1, 46
			addr &= 0xfffffffe;
  907045:	981a      	s32i.n	a8, a1, 40
	*(volatile uint16_t *) addr = b;
  907047:	0c0200        	memw
  90704a:	228500        	s16i	a2, a8, 0
  90704d:	600025        	j	907076 <db_str_cmd+0x92>
		else if (strcmp(cmd, "STRB") == 0)
  907050:	1b6942        	l32r	a11, 8e1558 <generic_hif_module_install+0x10>
  907053:	da20      	mov.n	a10, a2
  907055:	5b7d42        	call8	8e6560 <strcmp>
  907058:	cdaa      	bnez.n	a10, 907076 <db_str_cmd+0x92>
			if( addr & 0x00f00000 )
  90705a:	891a      	l32i.n	a9, a1, 40
  90705c:	126943        	l32r	a2, 8e1568 <generic_hif_module_install+0x20>
  90705f:	881b      	l32i.n	a8, a1, 44
  907061:	729003        	bnone	a9, a2, 907068 <db_str_cmd+0x84>
  907064:	600005        	j	90706d <db_str_cmd+0x89>
  907067:	00c023        	excw
				iowrite8(addr^3, val);
  90706a:	029903        	xor	a9, a9, a2
  90706d:	080847        	extui	a8, a8, 0, 8
	*(volatile uint8_t *) addr = b;
  907070:	0c0200        	memw
  907073:	289400        	s8i	a8, a9, 0
		db_hex_to_ascii(val, val_str);
  907076:	8a1b      	l32i.n	a10, a1, 44
  907078:	2b1c14        	addi	a11, a1, 20
  90707b:	5bff7b        	call8	906e68 <db_hex_to_ascii>
		db_hex_to_ascii(addr, addr_str);
  90707e:	8a1a      	l32i.n	a10, a1, 40
  907080:	db10      	mov.n	a11, a1
  907082:	5bff79        	call8	906e68 <db_hex_to_ascii>
		A_PRINTF("%s : %s\n\r", addr_str, val_str);
  907085:	1a6944        	l32r	a10, 8e1598 <athos_indirection_table_install+0x24>
  907088:	225212        	l32i	a2, a5, 72
  90708b:	2c1c14        	addi	a12, a1, 20
  90708e:	011b02        	or	a11, a1, a1
  907091:	0b2000        	callx8	a2
		return 0;
  907094:	c020      	movi.n	a2, 0
  907096:	d10f      	retw.n
  907098:	005bff        	excw
	db_incorect_format();
  90709b:	49c72f        	excw
}
  90709e:	d10f      	retw.n

009070a0 <db_ldr_cmd>:
{
  9070a0:	6c100a        	entry	a1, 80
	if (db_ascii_to_hex(param1, &addr) != -1)
  9070a3:	033a02        	or	a10, a3, a3
  9070a6:	2b1c28        	addi	a11, a1, 40
  9070a9:	5bff54        	call8	906dfc <db_ascii_to_hex>
  9070ac:	d3a0      	mov.n	a3, a10
  9070ae:	68a06f        	beqi	a10, -1, 907121 <db_ldr_cmd+0x81>
		if( addr == 0 )
  9070b1:	831a      	l32i.n	a3, a1, 40
  9070b3:	1568b5        	l32r	a5, 8e1388 <_bss_end+0x3ce478>
  9070b6:	cc3f      	bnez.n	a3, 9070c9 <db_ldr_cmd+0x29>
			A_PRINTF("Error! bad address 0x%08x.\n\r",
  9070b8:	225212        	l32i	a2, a5, 72
  9070bb:	1a6945        	l32r	a10, 8e15d0 <athos_indirection_table_install+0x5c>
  9070be:	033b02        	or	a11, a3, a3
  9070c1:	0b2000        	callx8	a2
			return -1;
  9070c4:	c73f      	movi.n	a3, -1
  9070c6:	60005a        	j	907124 <db_ldr_cmd+0x84>
		if (strcmp(cmd, "LDR") == 0)
  9070c9:	1b6946        	l32r	a11, 8e15e4 <athos_indirection_table_install+0x70>
  9070cc:	da20      	mov.n	a10, a2
  9070ce:	5b7d24        	call8	8e6560 <strcmp>
  9070d1:	cda0      	bnez.n	a10, 9070e5 <db_ldr_cmd+0x45>
			addr &= 0xfffffffc;
  9070d3:	c72c      	movi.n	a2, -4
  9070d5:	023301        	and	a3, a3, a2
  9070d8:	931a      	s32i.n	a3, a1, 40
	return *(const volatile uint32_t *) addr;
  9070da:	0c0200        	memw
  9070dd:	8430      	l32i.n	a4, a3, 0
  9070df:	60001a        	j	9070fd <db_ldr_cmd+0x5d>
  9070e2:	000000        	ill
		else if (strcmp(cmd, "LDRH") == 0)
  9070e5:	1b6947        	l32r	a11, 8e1604 <athos_indirection_table_install+0x90>
  9070e8:	022a02        	or	a10, a2, a2
  9070eb:	5b7d1d        	call8	8e6560 <strcmp>
  9070ee:	ccab      	bnez.n	a10, 9070fd <db_ldr_cmd+0x5d>
			addr &= 0xfffffffe;
  9070f0:	c72e      	movi.n	a2, -2
  9070f2:	023301        	and	a3, a3, a2
	return *(const volatile uint16_t *) addr;
  9070f5:	243100        	l16ui	a4, a3, 0
  9070f8:	931a      	s32i.n	a3, a1, 40
  9070fa:	04044f        	extui	a4, a4, 0, 16
		db_hex_to_ascii(val, val_str);
  9070fd:	2b1c14        	addi	a11, a1, 20
  907100:	da40      	mov.n	a10, a4
  907102:	5bff59        	call8	906e68 <db_hex_to_ascii>
		db_hex_to_ascii(addr, addr_str);
  907105:	8a1a      	l32i.n	a10, a1, 40
  907107:	db10      	mov.n	a11, a1
  907109:	5bff57        	call8	906e68 <db_hex_to_ascii>
		A_PRINTF("%s : %s\n\r", addr_str, val_str);
  90710c:	1a6944        	l32r	a10, 8e161c <athos_indirection_table_install+0xa8>
  90710f:	225212        	l32i	a2, a5, 72
  907112:	2c1c14        	addi	a12, a1, 20
  907115:	db10      	mov.n	a11, a1
  907117:	0b2000        	callx8	a2
		return 0;
  90711a:	c030      	movi.n	a3, 0
  90711c:	600004        	j	907124 <db_ldr_cmd+0x84>
  90711f:	00005b        	extui	a0, a0, 16, 12
	db_incorect_format();
  907122:	ff          	.byte 0xff
  907123:	27d230        	l32i	a7, a13, 192
}
  907126:	d10f      	retw.n

00907128 <db_intr_cmd>:
{
  907128:	6c1006        	entry	a1, 48
	if(strcmp(param1, "read") == 0 )
  90712b:	1b6948        	l32r	a11, 8e164c <athos_indirection_table_install+0xd8>
  90712e:	033a02        	or	a10, a3, a3
  907131:	5b7d0b        	call8	8e6560 <strcmp>
  907134:	65a028        	bnez	a10, 907160 <db_intr_cmd+0x38>
			pending_intrs = A_INTR_GET_INTRPENDING();
  907137:	1268b5        	l32r	a2, 8e140c <_bss_end+0x3ce4fc>
  90713a:	2a224f        	l32i	a10, a2, 0x13c
  90713d:	0ba000        	callx8	a10
  907140:	0aa302        	or	a3, a10, a10
			A_PRINTF("intr mask [0x%08x]\n\r", xthal_get_intenable());
  907143:	242212        	l32i	a4, a2, 72
  907146:	5b7e0e        	call8	8e6980 <xthal_get_intenable>
  907149:	dba0      	mov.n	a11, a10
  90714b:	1a6949        	l32r	a10, 8e1670 <athos_indirection_table_install+0xfc>
  90714e:	0b4000        	callx8	a4
			A_PRINTF("intr on [0x%08x]\n\r", pending_intrs);
  907151:	1a694a        	l32r	a10, 8e167c <athos_indirection_table_install+0x108>
  907154:	222212        	l32i	a2, a2, 72
  907157:	db30      	mov.n	a11, a3
  907159:	0b2000        	callx8	a2
  90715c:	60009d        	j	9071fd <db_intr_cmd+0xd5>
  90715f:	001b69        	excw
	else if (strcmp(param1, "timer") == 0 )
  907162:	4bda30        	excw
  907165:	5b7cfe        	call8	8e6560 <strcmp>
  907168:	65a07c        	bnez	a10, 9071e8 <db_intr_cmd+0xc0>
		if (strcmp(param2, "on") == 0 )
  90716b:	1b694c        	l32r	a11, 8e169c <athos_indirection_table_install+0x128>
		uint32_t data = 0;
  90716e:	9a10      	s32i.n	a10, a1, 0
		if (strcmp(param2, "on") == 0 )
  907170:	da40      	mov.n	a10, a4
  907172:	5b7cfb        	call8	8e6560 <strcmp>
  907175:	65a013        	bnez	a10, 90718c <db_intr_cmd+0x64>
			pending_intrs = A_INTR_GET_INTRENABLE()|CMNOS_IMASK_XTTIMER;
  907178:	1468b5        	l32r	a4, 8e144c <_bss_end+0x3ce53c>
  90717b:	220a02        	movi	a2, 2
  90717e:	2a424d        	l32i	a10, a4, 0x134
  907181:	0ba000        	callx8	a10
  907184:	02a202        	or	a2, a10, a2
  907187:	600019        	j	9071a4 <db_intr_cmd+0x7c>
  90718a:	00001b        	sra	a0, a0
		else if ( strcmp(param2, "off") == 0 )
  90718d:	694eda        	bnei	a4, 128, 90716b <db_intr_cmd+0x43>
  907190:	405b7c        	excw
  907193:	f3          	.byte 0xf3
  907194:	cea1      	bnez.n	a10, 9071b9 <db_intr_cmd+0x91>
			pending_intrs = A_INTR_GET_INTRENABLE()&(~CMNOS_IMASK_XTTIMER);
  907196:	1468b5        	l32r	a4, 8e146c <_bss_end+0x3ce55c>
  907199:	c72d      	movi.n	a2, -3
  90719b:	2a424d        	l32i	a10, a4, 0x134
  90719e:	0ba000        	callx8	a10
  9071a1:	02a201        	and	a2, a10, a2
			A_INTR_SET_INTRENABLE(pending_intrs);
  9071a4:	23424e        	l32i	a3, a4, 0x138
  9071a7:	da20      	mov.n	a10, a2
  9071a9:	0b3000        	callx8	a3
			A_PRINTF("- intr [0x%08x]\n\r", pending_intrs);
  9071ac:	db20      	mov.n	a11, a2
  9071ae:	234212        	l32i	a3, a4, 72
  9071b1:	1a694d        	l32r	a10, 8e16e8 <athos_indirection_table_install+0x174>
  9071b4:	600029        	j	9071e1 <db_intr_cmd+0xb9>
  9071b7:	0000db        	excw
		else if( db_ascii_to_hex(param2, &data)==0 )
  9071ba:	10da40        	l32r	a0, 8fdabc <memset+0x16c74>
  9071bd:	5bff0f        	call8	906dfc <db_ascii_to_hex>
  9071c0:	cfa9      	bnez.n	a10, 9071fd <db_intr_cmd+0xd5>
			if( data>=0 && data <=10 )
  9071c2:	8410      	l32i.n	a4, a1, 0
  9071c4:	c03a      	movi.n	a3, 10
  9071c6:	12694f        	l32r	a2, 8e1704 <athos_indirection_table_install+0x190>
  9071c9:	743305        	bltu	a3, a4, 9071d2 <db_intr_cmd+0xaa>
				delay = data;
  9071cc:	9420      	s32i.n	a4, a2, 0
  9071ce:	600004        	j	9071d6 <db_intr_cmd+0xae>
  9071d1:	00c033        	excw
				delay = 3;
  9071d4:	9320      	s32i.n	a3, a2, 0
			A_PRINTF("==>set cb to %d seconds \n\r", delay);
  9071d6:	1368b5        	l32r	a3, 8e14ac <_bss_end+0x3ce59c>
  9071d9:	8b20      	l32i.n	a11, a2, 0
  9071db:	233212        	l32i	a3, a3, 72
  9071de:	1a6950        	l32r	a10, 8e1720 <athos_indirection_table_install+0x1ac>
  9071e1:	0b3000        	callx8	a3
  9071e4:	600015        	j	9071fd <db_intr_cmd+0xd5>
  9071e7:	001268        	excw
		A_PRINTF("\tintr read - read the interrenable status\n\r");
  9071ea:	b51a      	addi.n	a10, a1, 5
  9071ec:	695123        	bnei	a5, 1, 907213 <db_wdt_cmd+0xf>
  9071ef:	22120b        	l32i	a2, a1, 44
  9071f2:	30001a        	excw
		A_PRINTF("\tintr timer on/off/tick - timer attach on/off/ticks\n\r");
  9071f5:	695222        	bnei	a5, 2, 90721b <db_wdt_cmd+0x17>
  9071f8:	22120b        	l32i	a2, a1, 44
  9071fb:	2000c0        	l8ui	a0, a0, 192
}
  9071fe:	20d10f        	l16ui	a0, a13, 30
  907201:	000000        	ill

00907204 <db_wdt_cmd>:
{
  907204:	6c1006        	entry	a1, 48
        if ( strcmp(param1, "rst") == 0 )
  907207:	1b6953        	l32r	a11, 8e1754 <athos_indirection_table_install+0x1e0>
  90720a:	033a02        	or	a10, a3, a3
  90720d:	5b7cd4        	call8	8e6560 <strcmp>
  907210:	cda0      	bnez.n	a10, 907224 <db_wdt_cmd+0x20>
		A_PRINTF(" reseting...\n\n\r");
  907212:	1368b5        	l32r	a3, 8e14e8 <_bss_end+0x3ce5d8>
  907215:	1a6954        	l32r	a10, 8e1768 <athos_indirection_table_install+0x1f4>
  907218:	223212        	l32i	a2, a3, 72
  90721b:	0b2000        	callx8	a2
		A_WDT_RESET();
  90721e:	22325d        	l32i	a2, a3, 0x174
  907221:	600024        	j	907249 <db_wdt_cmd+0x45>
        else if( strcmp(param1, "on") == 0 )
  907224:	1b694c        	l32r	a11, 8e1754 <athos_indirection_table_install+0x1e0>
  907227:	da30      	mov.n	a10, a3
  907229:	5b7ccd        	call8	8e6560 <strcmp>
  90722c:	cca9      	bnez.n	a10, 907239 <db_wdt_cmd+0x35>
		A_WDT_ENABLE();
  90722e:	1268b5        	l32r	a2, 8e1504 <_bss_end+0x3ce5f4>
  907231:	222259        	l32i	a2, a2, 0x164
  907234:	600011        	j	907249 <db_wdt_cmd+0x45>
  907237:	00001b        	sra	a0, a0
        else if (strcmp(param1, "off") == 0 )
  90723a:	694eda        	bnei	a4, 128, 907218 <db_wdt_cmd+0x14>
  90723d:	305b7c        	excw
  907240:	c8cc      	beqz.n	a12, 907250 <db_wdt_cmd+0x4c>
  907242:	ab12      	add.n	a2, a1, a11
		A_WDT_DISABLE();
  907244:	68b522        	beqi	a11, 5, 90726a <db_wdt_cmd+0x66>
  907247:	225a0b        	movi	a2, 0x50b
  90724a:	2000d1        	l8ui	a0, a0, 209
  90724d:	0f0000        	callx12	a0
        else if ( strcmp(param1, "boot") == 0 )
  907250:	1b6955        	l32r	a11, 8e17a4 <athos_indirection_table_install+0x230>
  907253:	da30      	mov.n	a10, a3
  907255:	5b7cc2        	call8	8e6560 <strcmp>
  907258:	cea4      	bnez.n	a10, 907280 <db_wdt_cmd+0x7c>
		A_PRINTF("Last BOOT is ");
  90725a:	1368b5        	l32r	a3, 8e1530 <_bss_end+0x3ce620>
  90725d:	1a6956        	l32r	a10, 8e17b8 <athos_indirection_table_install+0x244>
  907260:	223212        	l32i	a2, a3, 72
  907263:	0b2000        	callx8	a2
		if (ENUM_WDT_BOOT == A_WDT_LASTBOOT() )
  907266:	2a325e        	l32i	a10, a3, 0x178
  907269:	0ba000        	callx8	a10
  90726c:	233212        	l32i	a3, a3, 72
  90726f:	69a105        	bnei	a10, 1, 907278 <db_wdt_cmd+0x74>
			A_PRINTF("wdt");
  907272:	1a6957        	l32r	a10, 8e17d0 <athos_indirection_table_install+0x25c>
  907275:	600002        	j	90727b <db_wdt_cmd+0x77>
			A_PRINTF("normal boot");
  907278:	1a6958        	l32r	a10, 8e17d8 <athos_indirection_table_install+0x264>
  90727b:	0b3000        	callx8	a3
  90727e:	d10f      	retw.n
        else if (strcmp(param1, "loop") == 0 )
  907280:	1b6959        	l32r	a11, 8e17e4 <athos_indirection_table_install+0x270>
  907283:	da30      	mov.n	a10, a3
  907285:	5b7cb6        	call8	8e6560 <strcmp>
  907288:	ceac      	bnez.n	a10, 9072b8 <db_wdt_cmd+0xb4>
		A_PRINTF(" doing the wdt reseting...");
  90728a:	1368b5        	l32r	a3, 8e1560 <generic_hif_module_install+0x18>
  90728d:	1a695a        	l32r	a10, 8e17f8 <athos_indirection_table_install+0x284>
  907290:	223212        	l32i	a2, a3, 72
  907293:	0b2000        	callx8	a2
		if( db_ascii_to_hex(param2, &time_offset)!=0 )
  907296:	b81b      	addi.n	a11, a1, 8
  907298:	da40      	mov.n	a10, a4
  90729a:	5bfed8        	call8	906dfc <db_ascii_to_hex>
		A_PRINTF(" (wdt tick: 0x%08x...\n\n\r", time_offset);
  90729d:	8b12      	l32i.n	a11, a1, 8
  90729f:	223212        	l32i	a2, a3, 72
  9072a2:	1a695b        	l32r	a10, 8e1810 <athos_indirection_table_install+0x29c>
  9072a5:	0b2000        	callx8	a2
		A_WDT_SET(wdt_cmd);
  9072a8:	2b1202        	l32i	a11, a1, 8
  9072ab:	22325b        	l32i	a2, a3, 0x16c
  9072ae:	2a0a01        	movi	a10, 1
  9072b1:	0b2000        	callx8	a2
  9072b4:	63fffc        	j	9072b4 <db_wdt_cmd+0xb0>
  9072b7:	001b69        	excw
        else if (strcmp(param1, "noloop") == 0 )
  9072ba:	5cda30        	call12	93db7c <_etext+0x2e96b>
  9072bd:	5b7ca8        	call8	8e6560 <strcmp>
  9072c0:	cea9      	bnez.n	a10, 9072ed <db_wdt_cmd+0xe9>
		A_PRINTF(" doing the wdt reseting...");
  9072c2:	1368b5        	l32r	a3, 8e1598 <athos_indirection_table_install+0x24>
  9072c5:	1a695a        	l32r	a10, 8e1830 <athos_indirection_table_install+0x2bc>
  9072c8:	223212        	l32i	a2, a3, 72
  9072cb:	0b2000        	callx8	a2
		if( db_ascii_to_hex(param3, &time_offset)!=0 )
  9072ce:	b81b      	addi.n	a11, a1, 8
  9072d0:	da50      	mov.n	a10, a5
  9072d2:	5bfeca        	call8	906dfc <db_ascii_to_hex>
		A_PRINTF(" (wdt tick: 0x%08x...\n\n\r", time_offset);
  9072d5:	8b12      	l32i.n	a11, a1, 8
  9072d7:	223212        	l32i	a2, a3, 72
  9072da:	1a695b        	l32r	a10, 8e1848 <athos_indirection_table_install+0x2d4>
  9072dd:	0b2000        	callx8	a2
		A_WDT_SET(wdt_cmd);
  9072e0:	8b12      	l32i.n	a11, a1, 8
  9072e2:	22325b        	l32i	a2, a3, 0x16c
  9072e5:	c0a1      	movi.n	a10, 1
  9072e7:	0b2000        	callx8	a2
  9072ea:	d10f      	retw.n
  9072ec:	001b69        	excw
        else if( strcmp(param1, "event") == 0 )
  9072ef:	5dda30        	call12	97dbb0 <_etext+0x6e99f>
  9072f2:	5b7c9b        	call8	8e6560 <strcmp>
  9072f5:	65a04f        	bnez	a10, 907348 <db_wdt_cmd+0x144>
	return *(const volatile uint8_t *) addr;
  9072f8:	1868fb        	l32r	a8, 8e16e4 <athos_indirection_table_install+0x170>
		iowrite8_usb(0x17, ioread8_usb(0x17)|0xc0);
  9072fb:	220ac0        	movi	a2, 192
  9072fe:	238000        	l8ui	a3, a8, 0
  907301:	1968fe        	l32r	a9, 8e16fc <athos_indirection_table_install+0x188>
  907304:	030347        	extui	a3, a3, 0, 8
  907307:	023302        	or	a3, a3, a2
	*(volatile uint32_t *) addr = b;
  90730a:	1268db        	l32r	a2, 8e1678 <athos_indirection_table_install+0x104>
	*(volatile uint8_t *) addr = b;
  90730d:	0c0200        	memw
  907310:	238400        	s8i	a3, a8, 0
	*(volatile uint32_t *) addr = b;
  907313:	c03f      	movi.n	a3, 15
  907315:	0c0200        	memw
  907318:	9320      	s32i.n	a3, a2, 0
  90731a:	13695e        	l32r	a3, 8e1894 <athos_indirection_table_install+0x320>
  90731d:	1268fc        	l32r	a2, 8e1710 <athos_indirection_table_install+0x19c>
  907320:	0c0200        	memw
  907323:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint8_t *) addr;
  907325:	239000        	l8ui	a3, a9, 0
		iowrite8_usb(0xAE, ioread8_usb(0xAE) | 0x08);
  907328:	c028      	movi.n	a2, 8
  90732a:	030347        	extui	a3, a3, 0, 8
  90732d:	023302        	or	a3, a3, a2
	*(volatile uint8_t *) addr = b;
  907330:	0c0200        	memw
  907333:	239400        	s8i	a3, a9, 0
	return *(const volatile uint8_t *) addr;
  907336:	238000        	l8ui	a3, a8, 0
  907339:	22fabf        	movi	a2, -65
  90733c:	030347        	extui	a3, a3, 0, 8
  90733f:	023301        	and	a3, a3, a2
	*(volatile uint8_t *) addr = b;
  907342:	0c0200        	memw
  907345:	238400        	s8i	a3, a8, 0
}
  907348:	d10f      	retw.n
	...

0090734c <db_usb_cmd>:
{
  90734c:	6c1004        	entry	a1, 32
	A_PRINTF("THIS IS USB COMMAND\n\r");
  90734f:	1268b5        	l32r	a2, 8e1624 <athos_indirection_table_install+0xb0>
  907352:	1a695f        	l32r	a10, 8e18d0 <athos_indirection_table_install+0x35c>
  907355:	282212        	l32i	a8, a2, 72
  907358:	0b8000        	callx8	a8
	if( strcmp(param1, "que") == 0 )
  90735b:	1b6960        	l32r	a11, 8e18dc <athos_indirection_table_install+0x368>
  90735e:	033a02        	or	a10, a3, a3
  907361:	5b7c7f        	call8	8e6560 <strcmp>
  907364:	cca4      	bnez.n	a10, 90736c <db_usb_cmd+0x20>
		HIFusb_DescTraceDump();
  907366:	5b7120        	call8	8e37e8 <HIFusb_DescTraceDump>
  907369:	600011        	j	90737e <db_usb_cmd+0x32>
		A_PRINTF("\tusb que - dump descriptor queue\n\r");
  90736c:	282212        	l32i	a8, a2, 72
  90736f:	1a6961        	l32r	a10, 8e18f4 <athos_indirection_table_install+0x380>
  907372:	0b8000        	callx8	a8
		A_PRINTF("\tusb fw on/off - enable/disable write fw download to ram\n\r");
  907375:	1a6962        	l32r	a10, 8e1900 <athos_indirection_table_install+0x38c>
  907378:	222212        	l32i	a2, a2, 72
  90737b:	0b2000        	callx8	a2
}
  90737e:	c020      	movi.n	a2, 0
  907380:	d10f      	retw.n
	...

00907384 <db_info_cmd>:
{
  907384:	6c1004        	entry	a1, 32
	if(strcmp(param1, "ram") == 0 )
  907387:	1b6963        	l32r	a11, 8e1914 <athos_indirection_table_install+0x3a0>
  90738a:	033a02        	or	a10, a3, a3
  90738d:	5b7c74        	call8	8e6560 <strcmp>
  907390:	65a00d        	bnez	a10, 9073a1 <db_info_cmd+0x1d>
		A_ALLOCRAM_DEBUG();
  907393:	1868b5        	l32r	a8, 8e1668 <athos_indirection_table_install+0xf4>
  907396:	288253        	l32i	a8, a8, 0x14c
  907399:	0b8000        	callx8	a8
  90739c:	600004        	j	9073a4 <db_info_cmd+0x20>
  90739f:	00005b        	extui	a0, a0, 16, 12
		HIFusb_DescTraceDump();
  9073a2:	7111c0        	beq	a1, a1, 907366 <db_usb_cmd+0x1a>
}
  9073a5:	21d10f        	l16ui	a1, a13, 30

009073a8 <zf_debug_task>:
{
  9073a8:	6c1008        	entry	a1, 64
	if ((zm_get_char(&ch)) == 0)
  9073ab:	1268b5        	l32r	a2, 8e1680 <athos_indirection_table_install+0x10c>
  9073ae:	da10      	mov.n	a10, a1
  9073b0:	232215        	l32i	a3, a2, 84
  9073b3:	0b3000        	callx8	a3
  9073b6:	64a22f        	beqz	a10, 9075e9 <zf_debug_task+0x241>
	if (db_get_cmd_line(ch, raw_cmd, &gvLen) == 0)
  9073b9:	2b1000        	l8ui	a11, a1, 0
	switch (ch)
  9073bc:	69b802        	bnei	a11, 8, 9073c2 <zf_debug_task+0x1a>
  9073bf:	6000fe        	j	9074c1 <zf_debug_task+0x119>
  9073c2:	c038      	movi.n	a3, 8
  9073c4:	7b3305        	bltu	a3, a11, 9073cd <zf_debug_task+0x25>
  9073c7:	64b21e        	beqz	a11, 9075e9 <zf_debug_task+0x241>
  9073ca:	600112        	j	9074e0 <zf_debug_task+0x138>
  9073cd:	c03d      	movi.n	a3, 13
  9073cf:	73b17d        	beq	a11, a3, 907450 <zf_debug_task+0xa8>
  9073d2:	c53c      	movi.n	a3, 92
  9073d4:	73b102        	beq	a11, a3, 9073da <zf_debug_task+0x32>
  9073d7:	600105        	j	9074e0 <zf_debug_task+0x138>
		pressed_time++;
  9073da:	146932        	l32r	a4, 8e18a4 <athos_indirection_table_install+0x330>
  9073dd:	234200        	l32i	a3, a4, 0
  9073e0:	233c01        	addi	a3, a3, 1
		if (pressed_time >= COMMAND_BUFFER_SIZE)
  9073e3:	6b3601        	bgei	a3, 6, 9073e8 <zf_debug_task+0x40>
		pressed_time++;
  9073e6:	9340      	s32i.n	a3, a4, 0
		cmd_buf_loc = cmd_buf_ptr - pressed_time;
  9073e8:	13692f        	l32r	a3, 8e18a4 <athos_indirection_table_install+0x330>
  9073eb:	8440      	l32i.n	a4, a4, 0
  9073ed:	8330      	l32i.n	a3, a3, 0
  9073ef:	04340c        	sub	a4, a3, a4
		if (cmd_buf_loc < 0)
  9073f2:	67400f        	bgez	a4, 907405 <zf_debug_task+0x5d>
			if (cmd_buf_full == TRUE)
  9073f5:	136930        	l32r	a3, 8e18b8 <athos_indirection_table_install+0x344>
  9073f8:	8530      	l32i.n	a5, a3, 0
				cmd_buf_loc += COMMAND_BUFFER_SIZE;
  9073fa:	b643      	addi.n	a3, a4, 6
  9073fc:	b054      	addi.n	a4, a5, -1
  9073fe:	c050      	movi.n	a5, 0
  907400:	043538        	moveqz	a5, a3, a4
  907403:	d450      	mov.n	a4, a5
		if (A_STRLEN(cmd_buffer[cmd_buf_loc]) != 0)
  907405:	0e4311        	slli	a3, a4, 2
  907408:	043308        	add	a3, a3, a4
  90740b:	146964        	l32r	a4, 8e199c <athos_indirection_table_install+0x428>
  90740e:	0d3311        	slli	a3, a3, 3
  907411:	043308        	add	a3, a3, a4
  907414:	242266        	l32i	a4, a2, 0x198
  907417:	033a02        	or	a10, a3, a3
  90741a:	0b4000        	callx8	a4
  90741d:	64a1c8        	beqz	a10, 9075e9 <zf_debug_task+0x241>
			A_STRCPY(cmd_line, cmd_buffer[cmd_buf_loc]);
  907420:	146965        	l32r	a4, 8e19b4 <athos_indirection_table_install+0x440>
  907423:	252264        	l32i	a5, a2, 0x190
  907426:	db30      	mov.n	a11, a3
  907428:	da40      	mov.n	a10, a4
  90742a:	0b5000        	callx8	a5
			*i = A_STRLEN(cmd_buffer[cmd_buf_loc]);
  90742d:	252266        	l32i	a5, a2, 0x198
  907430:	da30      	mov.n	a10, a3
  907432:	0b5000        	callx8	a5
  907435:	136931        	l32r	a3, 8e18fc <athos_indirection_table_install+0x388>
  907438:	2a3500        	s16i	a10, a3, 0
			A_PRINTF("\r>");
  90743b:	232212        	l32i	a3, a2, 72
  90743e:	1a6966        	l32r	a10, 8e19d8 <athos_indirection_table_install+0x464>
  907441:	0b3000        	callx8	a3
			A_PRINTF("%s", cmd_line);
  907444:	db40      	mov.n	a11, a4
  907446:	222212        	l32i	a2, a2, 72
  907449:	1a6967        	l32r	a10, 8e19e8 <athos_indirection_table_install+0x474>
  90744c:	6000cd        	j	90751d <zf_debug_task+0x175>
  90744f:	001369        	excw
		pressed_time = 0;
  907452:	32c050        	excw
  907455:	253600        	s32i	a5, a3, 0
		cmd_line[*i] = 0;
  907458:	136931        	l32r	a3, 8e191c <athos_indirection_table_install+0x3a8>
		A_PRINTF("\n\r");
  90745b:	1a693f        	l32r	a10, 8e1958 <athos_indirection_table_install+0x3e4>
		cmd_line[*i] = 0;
  90745e:	243100        	l16ui	a4, a3, 0
  907461:	136965        	l32r	a3, 8e19f8 <athos_indirection_table_install+0x484>
  907464:	043408        	add	a4, a3, a4
  907467:	254400        	s8i	a5, a4, 0
		A_PRINTF("\n\r");
  90746a:	242212        	l32i	a4, a2, 72
  90746d:	0b4000        	callx8	a4
		if (*i != 0)
  907470:	156931        	l32r	a5, 8e1934 <athos_indirection_table_install+0x3c0>
  907473:	16692f        	l32r	a6, 8e1930 <athos_indirection_table_install+0x3bc>
  907476:	245100        	l16ui	a4, a5, 0
  907479:	cb41      	beqz.n	a4, 9074ae <zf_debug_task+0x106>
			if (strcmp(cmd_buffer[(cmd_buf_ptr==0)?(COMMAND_BUFFER_SIZE-1):(cmd_buf_ptr-1)], cmd_line) != 0)
  90747b:	8560      	l32i.n	a5, a6, 0
  90747d:	c045      	movi.n	a4, 5
  90747f:	b05a      	addi.n	a10, a5, -1
  907481:	05a439        	movnez	a4, a10, a5
  907484:	0e4a11        	slli	a10, a4, 2
  907487:	a4aa      	add.n	a10, a10, a4
  907489:	146964        	l32r	a4, 8e1a1c <athos_indirection_table_install+0x4a8>
  90748c:	0daa11        	slli	a10, a10, 3
  90748f:	db30      	mov.n	a11, a3
  907491:	aa4a      	add.n	a10, a4, a10
  907493:	5b7c33        	call8	8e6560 <strcmp>
  907496:	c9a4      	beqz.n	a10, 9074ae <zf_debug_task+0x106>
				A_STRCPY(cmd_buffer[cmd_buf_ptr++], cmd_line);
  907498:	0e5a11        	slli	a10, a5, 2
  90749b:	a5aa      	add.n	a10, a10, a5
  90749d:	b158      	addi.n	a8, a5, 1
  90749f:	0daa11        	slli	a10, a10, 3
  9074a2:	272264        	l32i	a7, a2, 0x190
  9074a5:	9860      	s32i.n	a8, a6, 0
  9074a7:	db30      	mov.n	a11, a3
  9074a9:	aa4a      	add.n	a10, a4, a10
  9074ab:	0b7000        	callx8	a7
		if (cmd_buf_ptr >= COMMAND_BUFFER_SIZE)
  9074ae:	8460      	l32i.n	a4, a6, 0
  9074b0:	6a466e        	blti	a4, 6, 907522 <zf_debug_task+0x17a>
			cmd_buf_ptr = 0;
  9074b3:	c040      	movi.n	a4, 0
  9074b5:	9460      	s32i.n	a4, a6, 0
			cmd_buf_full = TRUE;
  9074b7:	146930        	l32r	a4, 8e1978 <athos_indirection_table_install+0x404>
  9074ba:	c051      	movi.n	a5, 1
  9074bc:	9540      	s32i.n	a5, a4, 0
  9074be:	600060        	j	907522 <zf_debug_task+0x17a>
		pressed_time = 0;
  9074c1:	136932        	l32r	a3, 8e198c <athos_indirection_table_install+0x418>
  9074c4:	c040      	movi.n	a4, 0
  9074c6:	9430      	s32i.n	a4, a3, 0
		if (*i > 0)
  9074c8:	146931        	l32r	a4, 8e198c <athos_indirection_table_install+0x418>
  9074cb:	234100        	l16ui	a3, a4, 0
  9074ce:	643117        	beqz	a3, 9075e9 <zf_debug_task+0x241>
			*i = *i-1;
  9074d1:	b033      	addi.n	a3, a3, -1
  9074d3:	234500        	s16i	a3, a4, 0
			A_PRINTF("\b \b");
  9074d6:	222212        	l32i	a2, a2, 72
  9074d9:	1a6968        	l32r	a10, 8e1a7c <athos_indirection_table_install+0x508>
  9074dc:	600106        	j	9075e6 <zf_debug_task+0x23e>
  9074df:	0023bc        	excw
		if ((ch >= ' ') && (ch <= '~'))
  9074e2:	e0          	.byte 0xe0
  9074e3:	030347        	extui	a3, a3, 0, 8
  9074e6:	c54e      	movi.n	a4, 94
  9074e8:	734329        	bltu	a4, a3, 907515 <zf_debug_task+0x16d>
			pressed_time = 0;
  9074eb:	136932        	l32r	a3, 8e19b4 <athos_indirection_table_install+0x440>
			if (*i < DB_MAX_COMMAND_LENGTH-2)
  9074ee:	156931        	l32r	a5, 8e19b4 <athos_indirection_table_install+0x440>
			pressed_time = 0;
  9074f1:	c040      	movi.n	a4, 0
  9074f3:	9430      	s32i.n	a4, a3, 0
			if (*i < DB_MAX_COMMAND_LENGTH-2)
  9074f5:	235100        	l16ui	a3, a5, 0
  9074f8:	c245      	movi.n	a4, 37
  9074fa:	734b02        	bgeu	a4, a3, 907500 <zf_debug_task+0x158>
  9074fd:	6000e8        	j	9075e9 <zf_debug_task+0x241>
					cmd_line[*i] = ch;
  907500:	146965        	l32r	a4, 8e1a94 <athos_indirection_table_install+0x520>
					A_PRINTF("%c", ch);
  907503:	222212        	l32i	a2, a2, 72
					cmd_line[*i] = ch;
  907506:	a344      	add.n	a4, a4, a3
					*i = *i + 1;
  907508:	b133      	addi.n	a3, a3, 1
					cmd_line[*i] = ch;
  90750a:	2b4400        	s8i	a11, a4, 0
					*i = *i + 1;
  90750d:	235500        	s16i	a3, a5, 0
  907510:	600006        	j	90751a <zf_debug_task+0x172>
  907513:	000022        	excw
			A_PRINTF("%c", ch);
  907516:	2212c0        	l32i	a2, a1, 0x300
  907519:	b71a      	addi.n	a10, a1, 7
  90751b:	693d0b        	bnei	a3, 64, 90752a <zf_debug_task+0x182>
  90751e:	2000d1        	l8ui	a0, a0, 209
  907521:	0fc090        	l32e	a15, a12, -64
			if (strcmp(cmd_buffer[(cmd_buf_ptr==0)?(COMMAND_BUFFER_SIZE-1):(cmd_buf_ptr-1)], cmd_line) != 0)
  907524:	d890      	mov.n	a8, a9
  907526:	df90      	mov.n	a15, a9
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
  907528:	c179      	movi.n	a7, 25
  90752a:	63ffff        	j	90752d <zf_debug_task+0x185>
		while (raw_str[i++] == ' '){}
  90752d:	a83d      	add.n	a13, a3, a8
  90752f:	24d000        	l8ui	a4, a13, 0
  907532:	b18b      	addi.n	a11, a8, 1
  907534:	d8b0      	mov.n	a8, a11
  907536:	684cf3        	beqi	a4, 32, 90752d <zf_debug_task+0x185>
  907539:	1e6969        	l32r	a14, 8e1ae0 <athos_indirection_table_install+0x56c>
  90753c:	c061      	movi.n	a6, 1
  90753e:	d4e0      	mov.n	a4, a14
  907540:	600027        	j	90756b <zf_debug_task+0x1c3>
  907543:	00cdf6        	excw
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
  907546:	25ac9f        	addi	a5, a10, -97
  907549:	050547        	extui	a5, a5, 0, 8
  90754c:	757305        	bltu	a7, a5, 907555 <zf_debug_task+0x1ad>
					raw_str[i] -= 'a' - 'A';
  90754f:	2aace0        	addi	a10, a10, -32
  907552:	2ad400        	s8i	a10, a13, 0
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
  907555:	25d000        	l8ui	a5, a13, 0
  907558:	25e400        	s8i	a5, a14, 0
  90755b:	600004        	j	907563 <zf_debug_task+0x1bb>
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
  90755e:	a9e5      	add.n	a5, a14, a9
  907560:	2a5400        	s8i	a10, a5, 0
  907563:	b1dd      	addi.n	a13, a13, 1
  907565:	b1bb      	addi.n	a11, a11, 1
  907567:	b166      	addi.n	a6, a6, 1
  907569:	b1ee      	addi.n	a14, a14, 1
  90756b:	b06c      	addi.n	a12, a6, -1
		while(raw_str[i] && (raw_str[i] != ' '))
  90756d:	2ad000        	l8ui	a10, a13, 0
  907570:	9c14      	s32i.n	a12, a1, 16
  907572:	2cfadf        	movi	a12, -33
  907575:	0ca501        	and	a5, a10, a12
  907578:	b0b8      	addi.n	a8, a11, -1
  90757a:	655fc6        	bnez	a5, 907544 <zf_debug_task+0x19c>
		cmd_str[k*DB_MAX_COMMAND_LENGTH + j] = 0;
  90757d:	8614      	l32i.n	a6, a1, 16
	for (k=0; k<4; k++)
  90757f:	b1ff      	addi.n	a15, a15, 1
		cmd_str[k*DB_MAX_COMMAND_LENGTH + j] = 0;
  907581:	a64c      	add.n	a12, a4, a6
  907583:	09cc08        	add	a12, a12, a9
  907586:	25c400        	s8i	a5, a12, 0
  907589:	299c28        	addi	a9, a9, 40
	for (k=0; k<4; k++)
  90758c:	69f49d        	bnei	a15, 4, 90752d <zf_debug_task+0x185>
	return (int)A_STRLEN(cmd_str);
  90758f:	232266        	l32i	a3, a2, 0x198
  907592:	044a02        	or	a10, a4, a4
  907595:	0b3000        	callx8	a3
	if (db_formalize_command(raw_cmd, cmd_str))
  907598:	64a044        	beqz	a10, 9075e0 <zf_debug_task+0x238>
		gvLen = 0;
  90759b:	1c6931        	l32r	a12, 8e1a60 <athos_indirection_table_install+0x4ec>
		cmd_not_found = TRUE;
  90759e:	c031      	movi.n	a3, 1
		gvLen = 0;
  9075a0:	25c500        	s16i	a5, a12, 0
		cmd_not_found = TRUE;
  9075a3:	15696a        	l32r	a5, 8e1b4c <athos_indirection_table_install+0x5d8>
  9075a6:	9350      	s32i.n	a3, a5, 0
  9075a8:	136936        	l32r	a3, 8e1a80 <athos_indirection_table_install+0x50c>
  9075ab:	60001d        	j	9075cc <zf_debug_task+0x224>
			if (!strcmp(command_table[i].cmd_str, cmd_str))
  9075ae:	8a30      	l32i.n	a10, a3, 0
  9075b0:	db40      	mov.n	a11, a4
  9075b2:	5b7beb        	call8	8e6560 <strcmp>
  9075b5:	bc33      	addi.n	a3, a3, 12
  9075b7:	cda1      	bnez.n	a10, 9075cc <zf_debug_task+0x224>
				command_table[i].cmd_func(cmd_str,
  9075b9:	1d696b        	l32r	a13, 8e1b68 <athos_indirection_table_install+0x5f4>
  9075bc:	1c696c        	l32r	a12, 8e1b6c <athos_indirection_table_install+0x5f8>
  9075bf:	1b696d        	l32r	a11, 8e1b74 <athos_indirection_table_install+0x600>
				cmd_not_found = FALSE;
  9075c2:	9a50      	s32i.n	a10, a5, 0
				command_table[i].cmd_func(cmd_str,
  9075c4:	da40      	mov.n	a10, a4
  9075c6:	0b6000        	callx8	a6
  9075c9:	600004        	j	9075d1 <zf_debug_task+0x229>
		while(command_table[i].cmd_func)
  9075cc:	8632      	l32i.n	a6, a3, 8
  9075ce:	656fdc        	bnez	a6, 9075ae <zf_debug_task+0x206>
		if (cmd_not_found)
  9075d1:	235200        	l32i	a3, a5, 0
  9075d4:	643008        	beqz	a3, 9075e0 <zf_debug_task+0x238>
			A_PRINTF("Error, HELP for command list.\n\r");
  9075d7:	232212        	l32i	a3, a2, 72
  9075da:	1a696e        	l32r	a10, 8e1b94 <athos_indirection_table_install+0x620>
  9075dd:	0b3000        	callx8	a3
	A_PRINTF(">");
  9075e0:	222212        	l32i	a2, a2, 72
  9075e3:	1a696f        	l32r	a10, 8e1ba0 <athos_indirection_table_install+0x62c>
  9075e6:	0b2000        	callx8	a2
  9075e9:	d10f      	retw.n
	...

009075ec <db_ascii_to_int>:
{
  9075ec:	6c1004        	entry	a1, 32
	*int_num = 0;
  9075ef:	c080      	movi.n	a8, 0
  9075f1:	9830      	s32i.n	a8, a3, 0
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  9075f3:	c0a9      	movi.n	a10, 9
	while (num_str[i])
  9075f5:	600020        	j	907619 <db_ascii_to_int+0x2d>
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  9075f8:	288cd0        	addi	a8, a8, -48
  9075fb:	080847        	extui	a8, a8, 0, 8
  9075fe:	78a322        	bltu	a10, a8, 907624 <db_ascii_to_int+0x38>
			*int_num *= 10;
  907601:	8930      	l32i.n	a9, a3, 0
  907603:	0e9811        	slli	a8, a9, 2
  907606:	a988      	add.n	a8, a8, a9
  907608:	0f8811        	slli	a8, a8, 1
  90760b:	9830      	s32i.n	a8, a3, 0
			*int_num += (num_str[i] - '0');
  90760d:	292000        	l8ui	a9, a2, 0
  907610:	288cd0        	addi	a8, a8, -48
  907613:	a898      	add.n	a8, a9, a8
  907615:	9830      	s32i.n	a8, a3, 0
  907617:	b122      	addi.n	a2, a2, 1
	while (num_str[i])
  907619:	282000        	l8ui	a8, a2, 0
  90761c:	658fd8        	bnez	a8, 9075f8 <db_ascii_to_int+0xc>
	return 0;
  90761f:	d280      	mov.n	a2, a8
  907621:	d10f      	retw.n
  907623:	00c72f        	excw
}
  907626:	d10f      	retw.n

00907628 <db_clock_cmd>:
{
  907628:	6c1006        	entry	a1, 48
	uint32_t clk = 0;
  90762b:	c040      	movi.n	a4, 0
	if( db_ascii_to_int(param1, &clk) != -1 )
  90762d:	011b02        	or	a11, a1, a1
  907630:	da30      	mov.n	a10, a3
	uint32_t clk = 0;
  907632:	241600        	s32i	a4, a1, 0
	if( db_ascii_to_int(param1, &clk) != -1 )
  907635:	5bffed        	call8	9075ec <db_ascii_to_int>
  907638:	68a056        	beqi	a10, -1, 907692 <db_clock_cmd+0x6a>
		A_PRINTF("changing clock to %d\n", clk);
  90763b:	1268b5        	l32r	a2, 8e1910 <athos_indirection_table_install+0x39c>
  90763e:	8b10      	l32i.n	a11, a1, 0
  907640:	282212        	l32i	a8, a2, 72
  907643:	1a6970        	l32r	a10, 8e1c04 <athos_indirection_table_install+0x690>
  907646:	0b8000        	callx8	a8
		clk_change(clk, ratio, baud);
  907649:	8910      	l32i.n	a9, a1, 0
	switch(clk){
  90764b:	c2ac      	movi.n	a10, 44
		clk_sel = 2;
  90764d:	c082      	movi.n	a8, 2
	switch(clk){
  90764f:	7a9122        	beq	a9, a10, 907675 <db_clock_cmd+0x4d>
  907652:	79a30e        	bltu	a10, a9, 907664 <db_clock_cmd+0x3c>
  907655:	c1a6      	movi.n	a10, 22
		clk_sel = 0;
  907657:	d840      	mov.n	a8, a4
	switch(clk){
  907659:	7a9118        	beq	a9, a10, 907675 <db_clock_cmd+0x4d>
  90765c:	c248      	movi.n	a4, 40
		clk_sel = 6;
  90765e:	c086      	movi.n	a8, 6
  907660:	60000c        	j	907670 <db_clock_cmd+0x48>
  907663:	00c548        	extui	a5, a0, 12, 9
		clk_sel = 1;
  907666:	c081      	movi.n	a8, 1
	switch(clk){
  907668:	749109        	beq	a9, a4, 907675 <db_clock_cmd+0x4d>
  90766b:	240a75        	movi	a4, 117
		clk_sel = 4;
  90766e:	c084      	movi.n	a8, 4
	switch(clk){
  907670:	749101        	beq	a9, a4, 907675 <db_clock_cmd+0x4d>
		clk_sel = 6;
  907673:	c086      	movi.n	a8, 6
	iowrite32(0x50040, (0x300|clk_sel|(ratio>>1)<<12));
  907675:	243a00        	movi	a4, 0x300
	A_UART_HWINIT((clk*1000*1000)/ratio, baud);
  907678:	1a6973        	l32r	a10, 8e1c44 <athos_indirection_table_install+0x6d0>
	iowrite32(0x50040, (0x300|clk_sel|(ratio>>1)<<12));
  90767b:	048802        	or	a8, a8, a4
  90767e:	146971        	l32r	a4, 8e1c44 <athos_indirection_table_install+0x6d0>
	A_UART_HWINIT((clk*1000*1000)/ratio, baud);
  907681:	22221a        	l32i	a2, a2, 104
  907684:	1b6972        	l32r	a11, 8e1c4c <athos_indirection_table_install+0x6d8>
  907687:	0a9a28        	mull	a10, a9, a10
	*(volatile uint32_t *) addr = b;
  90768a:	0c0200        	memw
  90768d:	9840      	s32i.n	a8, a4, 0
  90768f:	0b2000        	callx8	a2
}
  907692:	d10f      	retw.n

00907694 <cmnos_dbg_module_install>:
void cmnos_dbg_module_install(struct dbg_api *apis)
{
  907694:	6c1004        	entry	a1, 32
	apis->_dbg_init = zf_debug_init;
  907697:	186974        	l32r	a8, 8e1c68 <athos_indirection_table_install+0x6f4>
  90769a:	9820      	s32i.n	a8, a2, 0
	apis->_dbg_task = zf_debug_task;
  90769c:	186975        	l32r	a8, 8e1c70 <athos_indirection_table_install+0x6fc>
  90769f:	9821      	s32i.n	a8, a2, 4
  9076a1:	d10f      	retw.n
	...

009076a4 <_fw_usbfifo_recv_command>:

typedef void (* USBFIFO_recv_command)(VBUF *cmd);
USBFIFO_recv_command m_origUsbfifoRecvCmd = NULL;

void _fw_usbfifo_recv_command(VBUF *buf)
{
  9076a4:	6c1004        	entry	a1, 32
	uint8_t *cmd_data;
	uint32_t tmp;

	cmd_data = (uint8_t *)(buf->desc_list->buf_addr +
  9076a7:	8920      	l32i.n	a9, a2, 0
{
  9076a9:	da20      	mov.n	a10, a2
				buf->desc_list->data_offset);
  9076ab:	2b9105        	l16ui	a11, a9, 10
	tmp = *((uint32_t *)cmd_data);
  9076ae:	8891      	l32i.n	a8, a9, 4
  9076b0:	ab88      	add.n	a8, a8, a11
	if (tmp == 0xFFFFFFFF)
  9076b2:	8880      	l32i.n	a8, a8, 0
  9076b4:	698004        	bnei	a8, -1, 9076bc <_fw_usbfifo_recv_command+0x18>
		_fw_usb_suspend_reboot();
  9076b7:	580cac        	call8	90a968 <_fw_usb_suspend_reboot>
  9076ba:	d10f      	retw.n
	else
		m_origUsbfifoRecvCmd(buf);
  9076bc:	186976        	l32r	a8, 8e1c94 <athos_indirection_table_install+0x720>
  9076bf:	8880      	l32i.n	a8, a8, 0
  9076c1:	0b8000        	callx8	a8
  9076c4:	d10f      	retw.n
	...

009076c8 <_fw_usbfifo_init>:
}

void _fw_usbfifo_init(USB_FIFO_CONFIG *pConfig)
{
  9076c8:	6c1004        	entry	a1, 32
	m_origUsbfifoRecvCmd = pConfig->recv_command;
  9076cb:	8921      	l32i.n	a9, a2, 4
  9076cd:	186976        	l32r	a8, 8e1ca8 <athos_indirection_table_install+0x734>
  9076d0:	9980      	s32i.n	a9, a8, 0

	usbFifoConf.get_command_buf = pConfig->get_command_buf;
  9076d2:	8920      	l32i.n	a9, a2, 0
  9076d4:	186977        	l32r	a8, 8e1cb0 <athos_indirection_table_install+0x73c>
  9076d7:	9980      	s32i.n	a9, a8, 0
	usbFifoConf.recv_command    = _fw_usbfifo_recv_command;
  9076d9:	196978        	l32r	a9, 8e1cbc <athos_indirection_table_install+0x748>
  9076dc:	9981      	s32i.n	a9, a8, 4
	usbFifoConf.get_event_buf   = pConfig->get_event_buf;
  9076de:	8922      	l32i.n	a9, a2, 8
	usbFifoConf.send_event_done = pConfig->send_event_done;
  9076e0:	8223      	l32i.n	a2, a2, 12
	usbFifoConf.get_event_buf   = pConfig->get_event_buf;
  9076e2:	9982      	s32i.n	a9, a8, 8
	usbFifoConf.send_event_done = pConfig->send_event_done;
  9076e4:	9283      	s32i.n	a2, a8, 12
  9076e6:	d10f      	retw.n

009076e8 <cold_reboot>:
}

void cold_reboot(void)
{
  9076e8:	6c1004        	entry	a1, 32
	A_PRINTF("Cold reboot initiated.");
  9076eb:	1268b5        	l32r	a2, 8e19c0 <athos_indirection_table_install+0x44c>
  9076ee:	1a6979        	l32r	a10, 8e1cd4 <athos_indirection_table_install+0x760>
  9076f1:	282212        	l32i	a8, a2, 72
  9076f4:	0b8000        	callx8	a8
  9076f7:	1868b8        	l32r	a8, 8e19d8 <athos_indirection_table_install+0x464>
  9076fa:	c090      	movi.n	a9, 0
#if defined(PROJECT_MAGPIE)
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, 0);
#elif defined(PROJECT_K2)
	iowrite32(MAGPIE_REG_RST_STATUS_ADDR, 0);
#endif /* #if defined(PROJECT_MAGPIE) */
	A_USB_JUMP_BOOT();
  9076fc:	22222c        	l32i	a2, a2, 176
  9076ff:	0c0200        	memw
  907702:	298600        	s32i	a9, a8, 0
  907705:	0b2000        	callx8	a2
  907708:	d10f      	retw.n
	...

0090770c <usb_status_in_patch>:

/*
 * support more than 64 bytes command on ep3
 */
void usb_status_in_patch(void)
{
  90770c:	6c1004        	entry	a1, 32
	static VBUF *evntbuf = NULL;
	static volatile uint32_t *regaddr;
	static BOOLEAN cmd_is_new = TRUE;
	BOOLEAN cmd_end = FALSE;

	if (cmd_is_new) {
  90770f:	12697a        	l32r	a2, 8e1cf8 <athos_indirection_table_install+0x784>
  907712:	282100        	l16ui	a8, a2, 0
  907715:	648048        	beqz	a8, 907761 <usb_status_in_patch+0x55>
		evntbuf = usbFifoConf.get_event_buf();
  907718:	186977        	l32r	a8, 8e1cf4 <athos_indirection_table_install+0x780>
  90771b:	8a82      	l32i.n	a10, a8, 8
  90771d:	0ba000        	callx8	a10
  907720:	18697b        	l32r	a8, 8e1d0c <athos_indirection_table_install+0x798>
  907723:	9a80      	s32i.n	a10, a8, 0
		if (evntbuf != NULL) {
  907725:	c9af      	beqz.n	a10, 907748 <usb_status_in_patch+0x3c>
			regaddr = (uint32_t *)VBUF_GET_DATA_ADDR(evntbuf);
  907727:	89a0      	l32i.n	a9, a10, 0
  907729:	2b9105        	l16ui	a11, a9, 10
  90772c:	8891      	l32i.n	a8, a9, 4
  90772e:	19697c        	l32r	a9, 8e1d20 <athos_indirection_table_install+0x7ac>
  907731:	ab88      	add.n	a8, a8, a11
  907733:	9890      	s32i.n	a8, a9, 0
			buf_len = evntbuf->buf_length;
  907735:	18697d        	l32r	a8, 8e1d2c <athos_indirection_table_install+0x7b8>
  907738:	29a104        	l16ui	a9, a10, 8
  90773b:	298500        	s16i	a9, a8, 0
		} else {
			mUSB_STATUS_IN_INT_DISABLE();
			return;
		}

		cmd_is_new = FALSE;
  90773e:	c080      	movi.n	a8, 0
  907740:	282500        	s16i	a8, a2, 0
  907743:	60001a        	j	907761 <usb_status_in_patch+0x55>
  907746:	000018        	src	a0, a0, a0
	return *(const volatile uint8_t *) addr;
  907749:	68fb29        	beqi	a15, 16, 907776 <usb_status_in_patch+0x6a>
			mUSB_STATUS_IN_INT_DISABLE();
  90774c:	0ac022        	excw
  90774f:	8000      	l32i.n	a0, a0, 0
  907751:	020247        	extui	a2, a2, 0, 8
  907754:	092202        	or	a2, a2, a9
	*(volatile uint8_t *) addr = b;
  907757:	0c0200        	memw
  90775a:	228400        	s8i	a2, a8, 0
  90775d:	d10f      	retw.n
  90775f:	00001a        	sll	a0, a0
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
  907762:	697dc4        	bnei	a7, 64, 90772a <usb_status_in_patch+0x1e>
  907765:	9028      	s32i.n	a0, a2, 32
  907767:	a100      	add.n	a0, a0, a1
	}
	/* TODO: 64 bytes...
	 * controller supposed will take care of zero-length? */
	else {
		reg_buf_len = buf_len;
		cmd_end = TRUE;
  907769:	c0c1      	movi.n	a12, 1
	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
  90776b:	789b09        	bgeu	a9, a8, 907778 <usb_status_in_patch+0x6c>
		buf_len -= USB_EP3_MAX_PKT_SIZE;
  90776e:	288cc0        	addi	a8, a8, -64
  907771:	28a500        	s16i	a8, a10, 0
	BOOLEAN cmd_end = FALSE;
  907774:	c0c0      	movi.n	a12, 0
		reg_buf_len = USB_EP3_MAX_PKT_SIZE;
  907776:	d890      	mov.n	a8, a9
  907778:	1b697c        	l32r	a11, 8e1d68 <athos_indirection_table_install+0x7f4>
  90777b:	082914        	srli	a9, a8, 2
  90777e:	8ab0      	l32i.n	a10, a11, 0
  907780:	0e9911        	slli	a9, a9, 2
  907783:	a9a9      	add.n	a9, a10, a9
	}

	/* INT use EP3 */
	for (count = 0; count < (reg_buf_len / 4); count++)
  907785:	c0d0      	movi.n	a13, 0
  907787:	1e68fc        	l32r	a14, 8e1b78 <athos_indirection_table_install+0x604>
  90778a:	c0f1      	movi.n	a15, 1
  90778c:	60000e        	j	90779e <usb_status_in_patch+0x92>
  90778f:	000c02        	or	a12, a0, a0
	{
		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
  907792:	008da0        	excw
		regaddr++;
  907795:	b4aa      	addi.n	a10, a10, 4
	*(volatile uint32_t *) addr = b;
  907797:	0c0200        	memw
  90779a:	9de0      	s32i.n	a13, a14, 0
  90779c:	ddf0      	mov.n	a13, a15
	for (count = 0; count < (reg_buf_len / 4); count++)
  90779e:	7a99ee        	bne	a9, a10, 907790 <usb_status_in_patch+0x84>
  9077a1:	c8d0      	beqz.n	a13, 9077a5 <usb_status_in_patch+0x99>
  9077a3:	99b0      	s32i.n	a9, a11, 0
	}

	remainder = reg_buf_len % 4;
  9077a5:	080841        	extui	a8, a8, 0, 2

	if (remainder) {
  9077a8:	cb81      	beqz.n	a8, 9077dd <usb_status_in_patch+0xd1>
  9077aa:	1968db        	l32r	a9, 8e1b18 <athos_indirection_table_install+0x5a4>
		switch(remainder) {
  9077ad:	688207        	beqi	a8, 2, 9077b8 <usb_status_in_patch+0xac>
  9077b0:	698309        	bnei	a8, 3, 9077bd <usb_status_in_patch+0xb1>
  9077b3:	c087      	movi.n	a8, 7
  9077b5:	600006        	j	9077bf <usb_status_in_patch+0xb3>
  9077b8:	c083      	movi.n	a8, 3
  9077ba:	600001        	j	9077bf <usb_status_in_patch+0xb3>
  9077bd:	c081      	movi.n	a8, 1
  9077bf:	0c0200        	memw
  9077c2:	9890      	s32i.n	a8, a9, 0
		case 1:
			iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0x1);
			break;
		}

		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
  9077c4:	88b0      	l32i.n	a8, a11, 0
  9077c6:	0c0200        	memw
  9077c9:	8980      	l32i.n	a9, a8, 0
  9077cb:	1868fc        	l32r	a8, 8e1bbc <athos_indirection_table_install+0x648>
  9077ce:	0c0200        	memw
  9077d1:	9980      	s32i.n	a9, a8, 0
  9077d3:	1868db        	l32r	a8, 8e1b40 <athos_indirection_table_install+0x5cc>
  9077d6:	c09f      	movi.n	a9, 15
  9077d8:	0c0200        	memw
  9077db:	9980      	s32i.n	a9, a8, 0
	return *(const volatile uint8_t *) addr;
  9077dd:	1968fe        	l32r	a9, 8e1bd8 <athos_indirection_table_install+0x664>

		/* Restore CBus FIFO size to word size */
		iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0xF);
	}

	mUSB_EP3_XFER_DONE();
  9077e0:	c0a8      	movi.n	a10, 8
  9077e2:	289000        	l8ui	a8, a9, 0
  9077e5:	080847        	extui	a8, a8, 0, 8
  9077e8:	0a8802        	or	a8, a8, a10
	*(volatile uint8_t *) addr = b;
  9077eb:	0c0200        	memw
  9077ee:	289400        	s8i	a8, a9, 0

	if (evntbuf != NULL && cmd_end) {
  9077f1:	18697b        	l32r	a8, 8e1de0 <athos_indirection_table_install+0x86c>
  9077f4:	8a80      	l32i.n	a10, a8, 0
  9077f6:	c8af      	beqz.n	a10, 907809 <usb_status_in_patch+0xfd>
  9077f8:	64c00d        	beqz	a12, 907809 <usb_status_in_patch+0xfd>
		usbFifoConf.send_event_done(evntbuf);
  9077fb:	186977        	l32r	a8, 8e1dd8 <athos_indirection_table_install+0x864>
  9077fe:	288203        	l32i	a8, a8, 12
  907801:	0b8000        	callx8	a8
		cmd_is_new = TRUE;
  907804:	c081      	movi.n	a8, 1
  907806:	282500        	s16i	a8, a2, 0
  907809:	d10f      	retw.n
	...

0090780c <usb_reg_out_patch>:

/*
 * support more than 64 bytes command on ep4
 */
void usb_reg_out_patch(void)
{
  90780c:	6c1004        	entry	a1, 32
	return *(const volatile uint8_t *) addr;
  90780f:	12697e        	l32r	a2, 8e1e08 <athos_indirection_table_install+0x894>
	static BOOLEAN cmd_is_new = TRUE;

	/* get the size of this transcation */
	usbfifolen = ioread8_usb(ZM_EP4_BYTE_COUNT_LOW_OFFSET);

	if (usbfifolen > USB_EP4_MAX_PKT_SIZE) {
  907812:	240a40        	movi	a4, 64
  907815:	222000        	l8ui	a2, a2, 0
  907818:	020247        	extui	a2, a2, 0, 8
	usbfifolen = ioread8_usb(ZM_EP4_BYTE_COUNT_LOW_OFFSET);
  90781b:	02034f        	extui	a3, a2, 0, 16
	if (usbfifolen > USB_EP4_MAX_PKT_SIZE) {
  90781e:	734b11        	bgeu	a4, a3, 907833 <usb_reg_out_patch+0x27>
		A_PRINTF("EP4 FIFO Bug? Buffer is too big: %x\n", usbfifolen);
  907821:	1468b5        	l32r	a4, 8e1af8 <athos_indirection_table_install+0x584>
  907824:	1a697f        	l32r	a10, 8e1e20 <athos_indirection_table_install+0x8ac>
  907827:	244212        	l32i	a4, a4, 72
  90782a:	022b02        	or	a11, a2, a2
  90782d:	0b4000        	callx8	a4
		cold_reboot();
  907830:	5bffad        	call8	9076e8 <cold_reboot>
	}

	/* check is command is new */
	if(cmd_is_new) {
  907833:	146980        	l32r	a4, 8e1e34 <athos_indirection_table_install+0x8c0>
  907836:	156981        	l32r	a5, 8e1e3c <athos_indirection_table_install+0x8c8>
  907839:	284100        	l16ui	a8, a4, 0
  90783c:	ca8d      	beqz.n	a8, 90786d <usb_reg_out_patch+0x61>

		buf = usbFifoConf.get_command_buf();
  90783e:	186977        	l32r	a8, 8e1e1c <athos_indirection_table_install+0x8a8>
  907841:	8a80      	l32i.n	a10, a8, 0
  907843:	0ba000        	callx8	a10
		cmd_len = 0;
  907846:	196982        	l32r	a9, 8e1e50 <athos_indirection_table_install+0x8dc>
  907849:	c080      	movi.n	a8, 0
		buf = usbFifoConf.get_command_buf();
  90784b:	9a50      	s32i.n	a10, a5, 0
		cmd_len = 0;
  90784d:	289500        	s16i	a8, a9, 0

		if(!buf) {
  907850:	ccad      	bnez.n	a10, 907861 <usb_reg_out_patch+0x55>
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
  907852:	1268b5        	l32r	a2, 8e1b28 <athos_indirection_table_install+0x5b4>
  907855:	1b6983        	l32r	a11, 8e1e64 <athos_indirection_table_install+0x8f0>
  907858:	222212        	l32i	a2, a2, 72
  90785b:	1a6984        	l32r	a10, 8e1e6c <athos_indirection_table_install+0x8f8>
  90785e:	600031        	j	907893 <usb_reg_out_patch+0x87>
			goto err;
		}

		/* copy free, assignment buffer of the address */
		regaddr = (uint32_t *)buf->desc_list->buf_addr;
  907861:	89a0      	l32i.n	a9, a10, 0

		cmd_is_new = FALSE;
  907863:	284500        	s16i	a8, a4, 0
		regaddr = (uint32_t *)buf->desc_list->buf_addr;
  907866:	8a91      	l32i.n	a10, a9, 4
  907868:	196985        	l32r	a9, 8e1e7c <athos_indirection_table_install+0x908>
  90786b:	9a90      	s32i.n	a10, a9, 0
	}

	/* just in case, suppose should not happen */
	if(!buf)
  90786d:	8a50      	l32i.n	a10, a5, 0
  90786f:	caa3      	beqz.n	a10, 907896 <usb_reg_out_patch+0x8a>
	 */
	if(usbfifolen < USB_EP4_MAX_PKT_SIZE)
		cmd_is_last = TRUE;

	/* accumulate the size */
	cmd_len += usbfifolen;
  907871:	196982        	l32r	a9, 8e1e7c <athos_indirection_table_install+0x908>
  907874:	289100        	l16ui	a8, a9, 0
  907877:	a838      	add.n	a8, a3, a8
  907879:	08084f        	extui	a8, a8, 0, 16
  90787c:	289500        	s16i	a8, a9, 0

	if (cmd_len > buf->desc_list->buf_size) {
  90787f:	89a0      	l32i.n	a9, a10, 0
  907881:	259104        	l16ui	a5, a9, 8
  907884:	785b18        	bgeu	a5, a8, 9078a0 <usb_reg_out_patch+0x94>
		A_PRINTF("%s: Data length on EP4 FIFO is bigger as "
  907887:	1268b5        	l32r	a2, 8e1b5c <athos_indirection_table_install+0x5e8>
  90788a:	1b6983        	l32r	a11, 8e1e98 <athos_indirection_table_install+0x924>
  90788d:	222212        	l32i	a2, a2, 72
  907890:	1a6986        	l32r	a10, 8e1ea8 <athos_indirection_table_install+0x934>
  907893:	0b2000        	callx8	a2
		usbfifolen = (usbfifolen >> 2) + 1;
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  907896:	c020      	movi.n	a2, 0
	return *(const volatile uint32_t *) addr;
  907898:	146987        	l32r	a4, 8e1eb4 <athos_indirection_table_install+0x940>
  90789b:	600067        	j	907906 <usb_reg_out_patch+0xfa>
  90789e:	000003        	xor	a0, a0, a0
		usbfifolen = (usbfifolen >> 2) + 1;
  9078a1:	2b141c        	s8i	a11, a1, 28
  9078a4:	698502        	bnei	a8, 5, 9078aa <usb_reg_out_patch+0x9e>
	if(usbfifolen % 4)
  9078a7:	0241b1        	excw
		usbfifolen = (usbfifolen >> 2) + 1;
  9078aa:	b502      	addi.n	a2, a0, 5
  9078ac:	b538      	addi.n	a8, a3, 5
  9078ae:	8bc0      	l32i.n	a11, a12, 0
  9078b0:	0e5211        	slli	a2, a5, 2
  9078b3:	a2b2      	add.n	a2, a11, a2
	for(ii = 0; ii < usbfifolen; ii++) {
  9078b5:	c0d0      	movi.n	a13, 0
  9078b7:	156987        	l32r	a5, 8e1ed4 <athos_indirection_table_install+0x960>
  9078ba:	c0e1      	movi.n	a14, 1
  9078bc:	60000e        	j	9078ce <usb_reg_out_patch+0xc2>
  9078bf:	000c02        	or	a12, a0, a0
  9078c2:	008d50        	extui	a13, a0, 24, 1
		/* read fifo data out */
		ep4_data = ioread32_usb(ZM_EP4_DATA_OFFSET);
		*regaddr = ep4_data;
  9078c5:	0c0200        	memw
  9078c8:	9db0      	s32i.n	a13, a11, 0
		regaddr++;
  9078ca:	b4bb      	addi.n	a11, a11, 4
  9078cc:	dde0      	mov.n	a13, a14
	for(ii = 0; ii < usbfifolen; ii++) {
  9078ce:	7b29ee        	bne	a2, a11, 9078c0 <usb_reg_out_patch+0xb4>
  9078d1:	c8d0      	beqz.n	a13, 9078d5 <usb_reg_out_patch+0xc9>
  9078d3:	92c0      	s32i.n	a2, a12, 0
	}

	/* if this is the last command, callback to HTC */
	if (cmd_is_last) {
  9078d5:	c32f      	movi.n	a2, 63
  9078d7:	73232e        	bltu	a2, a3, 907909 <usb_reg_out_patch+0xfd>
		buf->desc_list->next_desc = NULL;
  9078da:	c020      	movi.n	a2, 0
  9078dc:	9290      	s32i.n	a2, a9, 0
		buf->desc_list->data_offset = 0;
  9078de:	229505        	s16i	a2, a9, 10
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
  9078e1:	229507        	s16i	a2, a9, 14
		buf->desc_list->data_size = cmd_len;
  9078e4:	289506        	s16i	a8, a9, 12
		buf->next_buf = NULL;
  9078e7:	92a1      	s32i.n	a2, a10, 4
		buf->buf_length = cmd_len;

		usbFifoConf.recv_command(buf);
  9078e9:	126977        	l32r	a2, 8e1ec8 <athos_indirection_table_install+0x954>
		buf->buf_length = cmd_len;
  9078ec:	28a504        	s16i	a8, a10, 8
		usbFifoConf.recv_command(buf);
  9078ef:	8221      	l32i.n	a2, a2, 4
  9078f1:	0b2000        	callx8	a2

		cmd_is_new = TRUE;
  9078f4:	c021      	movi.n	a2, 1
  9078f6:	224500        	s16i	a2, a4, 0
  9078f9:	d10f      	retw.n
  9078fb:	00b122        	excw
  9078fe:	0c0200        	memw
  907901:	8540      	l32i.n	a5, a4, 0
	goto done;
err:
	/* we might get no command buffer here?
	 * but if we return here, the ep4 fifo will be lock out,
	 * so that we still read them out but just drop it? */
	for(ii = 0; ii < usbfifolen; ii++)
  907903:	02024f        	extui	a2, a2, 0, 16
  907906:	7323f2        	bltu	a2, a3, 9078fc <usb_reg_out_patch+0xf0>
  907909:	d10f      	retw.n
	...

0090790c <vUSBFIFO_EP6Cfg_FS_patch>:
#define FS_C1_I0_A0_EP6_MAP		\
	 (FS_C1_I0_A0_EP6_FIFO_START | (FS_C1_I0_A0_EP6_FIFO_START << 4) | \
	  (MASK_F0 >> (4*FS_C1_I0_A0_EP6_DIRECTION)))

void vUSBFIFO_EP6Cfg_FS_patch(void)
{
  90790c:	6c1004        	entry	a1, 32
#if (FS_C1_I0_A0_EP_NUMBER >= 6)
	int i;

	/* EP0X06 */
	mUsbEPMap(EP6, FS_C1_I0_A0_EP6_MAP);
  90790f:	2b0a6f        	movi	a11, 111
  907912:	2a0a06        	movi	a10, 6
  907915:	5b73f8        	call8	8e48f8 <mUsbEPMap>
	mUsbFIFOMap(FS_C1_I0_A0_EP6_FIFO_START, FS_C1_I0_A0_EP6_FIFO_MAP);
  907918:	2b0a06        	movi	a11, 6
  90791b:	0bba02        	or	a10, a11, a11
  90791e:	5b73fd        	call8	8e4914 <mUsbFIFOMap>
	mUsbFIFOConfig(FS_C1_I0_A0_EP6_FIFO_START, FS_C1_I0_A0_EP6_FIFO_CONFIG);
  907921:	2b0a86        	movi	a11, 134
  907924:	c0a6      	movi.n	a10, 6
  907926:	5b7403        	call8	8e4934 <mUsbFIFOConfig>

	for(i = FS_C1_I0_A0_EP6_FIFO_START + 1 ;
            i < FS_C1_I0_A0_EP6_FIFO_START + FS_C1_I0_A0_EP6_FIFO_NO ; i ++)
	{
		mUsbFIFOConfig(i, (FS_C1_I0_A0_EP6_FIFO_CONFIG & (~BIT7)) );
  907929:	c0b6      	movi.n	a11, 6
  90792b:	c0a7      	movi.n	a10, 7
  90792d:	5b7401        	call8	8e4934 <mUsbFIFOConfig>
	}

	mUsbEPMxPtSzHigh(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  907930:	c4c0      	movi.n	a12, 64
  907932:	c0b1      	movi.n	a11, 1
  907934:	c0a6      	movi.n	a10, 6
  907936:	5b7407        	call8	8e4954 <mUsbEPMxPtSzHigh>
			 (FS_C1_I0_A0_EP6_MAX_PACKET & 0x7ff));
	mUsbEPMxPtSzLow(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  907939:	c4c0      	movi.n	a12, 64
  90793b:	c0b1      	movi.n	a11, 1
  90793d:	c0a6      	movi.n	a10, 6
  90793f:	5b740f        	call8	8e497c <mUsbEPMxPtSzLow>
			(FS_C1_I0_A0_EP6_MAX_PACKET & 0x7ff));
	mUsbEPinHighBandSet(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  907942:	c4c0      	movi.n	a12, 64
  907944:	c0b1      	movi.n	a11, 1
  907946:	2a0a06        	movi	a10, 6
  907949:	5b7415        	call8	8e49a0 <mUsbEPinHighBandSet>
  90794c:	d10f      	retw.n
	...

00907950 <vUsbFIFO_EPxCfg_FS_patch>:
			    FS_C1_I0_A0_EP6_MAX_PACKET);
#endif
}

void vUsbFIFO_EPxCfg_FS_patch(void)
{
  907950:	6c1004        	entry	a1, 32
	switch (u8UsbConfigValue)
  907953:	186988        	l32r	a8, 8e1f74 <athos_indirection_table_install+0xa00>
  907956:	288100        	l16ui	a8, a8, 0
  907959:	698113        	bnei	a8, 1, 907970 <vUsbFIFO_EPxCfg_FS_patch+0x20>
	{
#if (FS_CONFIGURATION_NUMBER >= 1)
		/* Configuration 0X01 */
        case 0X01:
		switch (u8UsbInterfaceValue)
  90795c:	186989        	l32r	a8, 8e1f80 <athos_indirection_table_install+0xa0c>
  90795f:	288100        	l16ui	a8, a8, 0
  907962:	cc8a      	bnez.n	a8, 907970 <vUsbFIFO_EPxCfg_FS_patch+0x20>
		{
#if (FS_C1_INTERFACE_NUMBER >= 1)
			/* Interface 0 */
                case 0:
			switch (u8UsbInterfaceAlternateSetting)
  907964:	18698a        	l32r	a8, 8e1f8c <athos_indirection_table_install+0xa18>
  907967:	288100        	l16ui	a8, a8, 0
  90796a:	658002        	bnez	a8, 907970 <vUsbFIFO_EPxCfg_FS_patch+0x20>
                        case 0:

				/* snapped.... */

				/* patch up this ep6_fs config */
				vUSBFIFO_EP6Cfg_FS_patch();
  90796d:	5bffe7        	call8	90790c <vUSBFIFO_EP6Cfg_FS_patch>
  907970:	d10f      	retw.n
	...

00907974 <bSet_configuration_patch>:
	}
	/* mCHECK_STACK(); */
}

BOOLEAN bSet_configuration_patch(void)
{
  907974:	6c1004        	entry	a1, 32
	/* do some defaul configuration */
	bSet_configuration();
  907977:	5b7077        	call8	8e3b54 <bSet_configuration>

	/* overwrite defaul FIFO configuration for FullSpeed USB */
	if ((mLOW_BYTE(mDEV_REQ_VALUE()) != 0) && !mUsbHighSpeedST())
  90797a:	12698b        	l32r	a2, 8e1fa8 <athos_indirection_table_install+0xa34>
  90797d:	222007        	l8ui	a2, a2, 7
  907980:	c82a      	beqz.n	a2, 90798e <bSet_configuration_patch+0x1a>
	return *(const volatile uint8_t *) addr;
  907982:	1268d6        	l32r	a2, 8e1cdc <athos_indirection_table_install+0x768>
  907985:	222000        	l8ui	a2, a2, 0
  907988:	792f02        	bbsi	a2, 25, 90798e <bSet_configuration_patch+0x1a>
			vUsbFIFO_EPxCfg_FS_patch();
  90798b:	5bfff1        	call8	907950 <vUsbFIFO_EPxCfg_FS_patch>

	eUsbCxFinishAction = ACT_DONE;
  90798e:	18698c        	l32r	a8, 8e1fc0 <athos_indirection_table_install+0xa4c>
  907991:	c021      	movi.n	a2, 1
  907993:	9280      	s32i.n	a2, a8, 0
	return TRUE;
}
  907995:	d10f      	retw.n
	...

00907998 <bStandardCommand_patch>:

extern BOOLEAN bStandardCommand(void);

BOOLEAN bStandardCommand_patch(void)
{
  907998:	6c1004        	entry	a1, 32
	if (mDEV_REQ_REQ() == USB_SET_CONFIGURATION) {
  90799b:	18698b        	l32r	a8, 8e1fc8 <athos_indirection_table_install+0xa54>
  90799e:	298102        	l16ui	a9, a8, 4
  9079a1:	280a09        	movi	a8, 9
  9079a4:	78992d        	bne	a9, a8, 9079d5 <bStandardCommand_patch+0x3d>
		A_USB_SET_CONFIG();
  9079a7:	1868b5        	l32r	a8, 8e1c7c <athos_indirection_table_install+0x708>
  9079aa:	2a8226        	l32i	a10, a8, 152
  9079ad:	0ba000        	callx8	a10

#if ENABLE_SWAP_DATA_MODE
		/* SWAP FUNCTION should be enabled while DMA engine
		 * is not working, the best place to enable it
		 * is before we trigger the DMA */
		MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  9079b0:	1868f4        	l32r	a8, 8e1d80 <athos_indirection_table_install+0x80c>
  9079b3:	c0a1      	movi.n	a10, 1
  9079b5:	0c0200        	memw
  9079b8:	9a80      	s32i.n	a10, a8, 0
		MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  9079ba:	1868f5        	l32r	a8, 8e1d90 <athos_indirection_table_install+0x81c>
  9079bd:	0c0200        	memw
  9079c0:	9a80      	s32i.n	a10, a8, 0

#if SYSTEM_MODULE_HP_EP5
		MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  9079c2:	1868f6        	l32r	a8, 8e1d9c <athos_indirection_table_install+0x828>
  9079c5:	0c0200        	memw
  9079c8:	9a80      	s32i.n	a10, a8, 0
#endif

#if SYSTEM_MODULE_HP_EP6
		MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  9079ca:	1868f7        	l32r	a8, 8e1da8 <athos_indirection_table_install+0x834>
  9079cd:	0c0200        	memw
  9079d0:	9a80      	s32i.n	a10, a8, 0
#endif

#endif /* ENABLE_SWAP_DATA_MODE */
		return TRUE;
  9079d2:	600002        	j	9079d8 <bStandardCommand_patch+0x40>
	} else
		return bStandardCommand();
  9079d5:	5b7123        	call8	8e3e64 <bStandardCommand>
}
  9079d8:	d2a0      	mov.n	a2, a10
  9079da:	d10f      	retw.n

009079dc <bGet_descriptor_patch>:
#define EP3_INT_INTERVAL		19
#define EP4_TRANSFER_TYPE_OFFSET	21
#define EP4_INT_INTERVAL		22

BOOLEAN bGet_descriptor_patch(void)
{
  9079dc:	6c1004        	entry	a1, 32
	if (mDEV_REQ_VALUE_HIGH() == 1)
  9079df:	12698b        	l32r	a2, 8e200c <athos_indirection_table_install+0xa98>
  9079e2:	282103        	l16ui	a8, a2, 6
  9079e5:	088814        	srli	a8, a8, 8
  9079e8:	698120        	bnei	a8, 1, 907a0c <bGet_descriptor_patch+0x30>
	{
		uint8_t *p = (uint8_t *)u8UsbDeviceDescriptor;
  9079eb:	14698d        	l32r	a4, 8e2020 <athos_indirection_table_install+0xaac>

		/* Copy Usb Device Descriptor */
		ath_hal_memcpy(UsbDeviceDescriptorPatch, p,
  9079ee:	13698e        	l32r	a3, 8e2028 <athos_indirection_table_install+0xab4>
  9079f1:	8b40      	l32i.n	a11, a4, 0
  9079f3:	da30      	mov.n	a10, a3
  9079f5:	c1c2      	movi.n	a12, 18
  9079f7:	580035        	call8	907acc <ath_hal_memcpy>
				sizeof(UsbDeviceDescriptorPatch));

		/* Change bcdDevice. we need it to detect if FW
		 * was uploaded. */
		UsbDeviceDescriptorPatch[BCD_DEVICE_OFFSET] =
  9079fa:	c78f      	movi.n	a8, -1
  9079fc:	283506        	s16i	a8, a3, 12
			BCD_DEVICE_FW_SIGNATURE;

		pu8DescriptorEX = UsbDeviceDescriptorPatch;
  9079ff:	18698f        	l32r	a8, 8e203c <athos_indirection_table_install+0xac8>
  907a02:	9380      	s32i.n	a3, a8, 0
		u16TxRxCounter = mTABLE_LEN(u8UsbDeviceDescriptor[0]);
  907a04:	8340      	l32i.n	a3, a4, 0
  907a06:	283001        	l8ui	a8, a3, 1
  907a09:	600024        	j	907a31 <bGet_descriptor_patch+0x55>
			u16TxRxCounter = mDEV_REQ_LENGTH();

		A_USB_EP0_TX_DATA();

		return TRUE;
	} else if (mDEV_REQ_VALUE_HIGH() == 2) {
  907a0c:	69823e        	bnei	a8, 2, 907a4e <bGet_descriptor_patch+0x72>
		uint8_t *p = (uint8_t *)u8ConfigDescriptorEX;

		/* Copy ConfigDescriptor */
		ath_hal_memcpy(ConfigDescriptorPatch, p,
  907a0f:	146991        	l32r	a4, 8e2054 <athos_indirection_table_install+0xae0>
  907a12:	136992        	l32r	a3, 8e205c <athos_indirection_table_install+0xae8>
  907a15:	2b4200        	l32i	a11, a4, 0
  907a18:	2c0a3c        	movi	a12, 60
  907a1b:	033a02        	or	a10, a3, a3
  907a1e:	58002b        	call8	907acc <ath_hal_memcpy>
				sizeof(ConfigDescriptorPatch));

		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
  907a21:	242007        	l8ui	a4, a2, 7
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
			u16TxRxCounter = ConfigDescriptorPatch[1];
		} else
			return FALSE;
  907a24:	c0a0      	movi.n	a10, 0
		if (mDEV_REQ_VALUE_LOW() == 0) {
  907a26:	7a4927        	bne	a4, a10, 907a51 <bGet_descriptor_patch+0x75>
			pu8DescriptorEX = ConfigDescriptorPatch;
  907a29:	14698f        	l32r	a4, 8e2068 <athos_indirection_table_install+0xaf4>
			u16TxRxCounter = ConfigDescriptorPatch[1];
  907a2c:	283101        	l16ui	a8, a3, 2
			pu8DescriptorEX = ConfigDescriptorPatch;
  907a2f:	9340      	s32i.n	a3, a4, 0
			u16TxRxCounter = ConfigDescriptorPatch[1];
  907a31:	136990        	l32r	a3, 8e2074 <athos_indirection_table_install+0xb00>

		if (u16TxRxCounter > mDEV_REQ_LENGTH())
  907a34:	222105        	l16ui	a2, a2, 10
			u16TxRxCounter = ConfigDescriptorPatch[1];
  907a37:	283500        	s16i	a8, a3, 0
		if (u16TxRxCounter > mDEV_REQ_LENGTH())
  907a3a:	782b02        	bgeu	a2, a8, 907a40 <bGet_descriptor_patch+0x64>
			u16TxRxCounter = mDEV_REQ_LENGTH();
  907a3d:	223500        	s16i	a2, a3, 0

		A_USB_EP0_TX_DATA();
  907a40:	1268b5        	l32r	a2, 8e1d14 <athos_indirection_table_install+0x7a0>
  907a43:	222235        	l32i	a2, a2, 212
  907a46:	0b2000        	callx8	a2
		return TRUE;
  907a49:	c0a1      	movi.n	a10, 1
  907a4b:	600002        	j	907a51 <bGet_descriptor_patch+0x75>
	} else
		return bGet_descriptor();
  907a4e:	5b7013        	call8	8e3a9c <bGet_descriptor>
}
  907a51:	d2a0      	mov.n	a2, a10
  907a53:	d10f      	retw.n
  907a55:	000000        	ill

00907a58 <ath_hal_getuptime>:
#include<ah_internal.h>
#include "ah_osdep.h"

a_uint32_t __ahdecl
ath_hal_getuptime(struct ath_hal *ah)
{
  907a58:	6c1004        	entry	a1, 32
	return MSEC_TO_TICK(msecs);
}
static inline unsigned long
__adf_os_getuptime(void)
{
    return MSEC_TO_TICK(A_MILLISECONDS());;
  907a5b:	1868b5        	l32r	a8, 8e1d30 <athos_indirection_table_install+0x7bc>
  907a5e:	2a823e        	l32i	a10, a8, 248
  907a61:	0ba000        	callx8	a10
	return adf_os_getuptime();
}
  907a64:	d2a0      	mov.n	a2, a10
  907a66:	d10f      	retw.n

00907a68 <_ath_hal_attach_tgt>:

struct ath_hal *
_ath_hal_attach_tgt(a_uint32_t devid, HAL_SOFTC sc,
		    adf_os_device_t dev, a_uint32_t flags, void* s)
{
  907a68:	6c1006        	entry	a1, 48
	HAL_STATUS status;
	struct ath_hal *ah = ath_hal_attach_tgt(devid, sc, dev, flags, &status);
  907a6b:	de10      	mov.n	a14, a1
  907a6d:	dd50      	mov.n	a13, a5
  907a6f:	dc40      	mov.n	a12, a4
  907a71:	db30      	mov.n	a11, a3
  907a73:	da20      	mov.n	a10, a2
  907a75:	580c7d        	call8	90ac6c <ath_hal_attach_tgt>
	adf_os_print(" ath_hal = %p \n",ah);
  907a78:	1868b5        	l32r	a8, 8e1d4c <athos_indirection_table_install+0x7d8>
  907a7b:	dba0      	mov.n	a11, a10
	struct ath_hal *ah = ath_hal_attach_tgt(devid, sc, dev, flags, &status);
  907a7d:	d2a0      	mov.n	a2, a10
	adf_os_print(" ath_hal = %p \n",ah);
  907a7f:	288212        	l32i	a8, a8, 72
  907a82:	1a6993        	l32r	a10, 8e20d0 <athos_indirection_table_install+0xb5c>
  907a85:	0b8000        	callx8	a8
	*(HAL_STATUS *)s = status;
  907a88:	8810      	l32i.n	a8, a1, 0
  907a8a:	9860      	s32i.n	a8, a6, 0
	return ah;
}
  907a8c:	d10f      	retw.n
	...

00907a90 <ath_hal_delay>:
/*
 * Delay n microseconds.
 */
void __ahdecl
ath_hal_delay(a_int32_t n)
{
  907a90:	6c1004        	entry	a1, 32
}

static inline void
__adf_os_udelay(int usecs)
{
    A_DELAY_USECS(usecs);
  907a93:	1868b5        	l32r	a8, 8e1d68 <athos_indirection_table_install+0x7f4>
  907a96:	da20      	mov.n	a10, a2
  907a98:	28823b        	l32i	a8, a8, 236
  907a9b:	0b8000        	callx8	a8
  907a9e:	d10f      	retw.n

00907aa0 <ath_hal_malloc>:
/*
 * Allocate/free memory.
 */
void * __ahdecl
ath_hal_malloc(adf_os_size_t size)
{
  907aa0:	6c1004        	entry	a1, 32
  907aa3:	1468b5        	l32r	a4, 8e1d78 <athos_indirection_table_install+0x804>
  907aa6:	d320      	mov.n	a3, a2
  907aa8:	224252        	l32i	a2, a4, 0x148
  907aab:	db30      	mov.n	a11, a3
  907aad:	c0a0      	movi.n	a10, 0
  907aaf:	0b2000        	callx8	a2
  907ab2:	d2a0      	mov.n	a2, a10
	void *p;

	p = adf_os_mem_alloc(size);
	if (p)
  907ab4:	c8a8      	beqz.n	a10, 907ac0 <ath_hal_malloc+0x20>
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  907ab6:	8444      	l32i.n	a4, a4, 16
  907ab8:	dc30      	mov.n	a12, a3
  907aba:	2b0a00        	movi	a11, 0
  907abd:	0b4000        	callx8	a4
		adf_os_mem_zero(p, size);

	return p;
}
  907ac0:	d10f      	retw.n
	...

00907ac4 <ath_hal_free>:

void __ahdecl
ath_hal_free(void* p)
{
  907ac4:	6c1004        	entry	a1, 32
  907ac7:	d10f      	retw.n
  907ac9:	000000        	ill

00907acc <ath_hal_memcpy>:
	adf_os_mem_free(p);
}

void * __ahdecl
ath_hal_memcpy(void *dst, const void *src, adf_os_size_t n)
{
  907acc:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);
  907acf:	1868b5        	l32r	a8, 8e1da4 <athos_indirection_table_install+0x830>
  907ad2:	dc40      	mov.n	a12, a4
  907ad4:	8885      	l32i.n	a8, a8, 20
  907ad6:	db30      	mov.n	a11, a3
  907ad8:	da20      	mov.n	a10, a2
  907ada:	0b8000        	callx8	a8
	adf_os_mem_copy(dst, src, n);
	return 0;
}
  907add:	c020      	movi.n	a2, 0
  907adf:	d10f      	retw.n
  907ae1:	000000        	ill

00907ae4 <__adf_os_mem_alloc>:
{
  907ae4:	6c1004        	entry	a1, 32
    return A_ALLOCRAM(size);
  907ae7:	1868b5        	l32r	a8, 8e1dbc <athos_indirection_table_install+0x848>
  907aea:	db20      	mov.n	a11, a2
  907aec:	288252        	l32i	a8, a8, 0x148
  907aef:	c0a0      	movi.n	a10, 0
  907af1:	0b8000        	callx8	a8
}
  907af4:	d2a0      	mov.n	a2, a10
  907af6:	d10f      	retw.n

00907af8 <__adf_os_mem_copy>:
{
  907af8:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);
  907afb:	1868b5        	l32r	a8, 8e1dd0 <athos_indirection_table_install+0x85c>
  907afe:	dc40      	mov.n	a12, a4
  907b00:	8885      	l32i.n	a8, a8, 20
  907b02:	db30      	mov.n	a11, a3
  907b04:	da20      	mov.n	a10, a2
  907b06:	0b8000        	callx8	a8
  907b09:	d10f      	retw.n
	...

00907b0c <__adf_os_mem_set>:
{
  907b0c:	6c1004        	entry	a1, 32
	A_MEMSET(buf, b, size);
  907b0f:	1868b5        	l32r	a8, 8e1de4 <athos_indirection_table_install+0x870>
  907b12:	dc40      	mov.n	a12, a4
  907b14:	8884      	l32i.n	a8, a8, 16
  907b16:	db30      	mov.n	a11, a3
  907b18:	da20      	mov.n	a10, a2
  907b1a:	0b8000        	callx8	a8
  907b1d:	d10f      	retw.n
	...

00907b20 <tgt_HTCRecv_uapsdhandler>:
	ath_tgt_send_beacon(sc, hdr_buf, buf, EndPt);
}

static void tgt_HTCRecv_uapsdhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				     adf_nbuf_t buf, void *ServiceCtx)
{
  907b20:	6c1004        	entry	a1, 32
  907b23:	d10f      	retw.n
  907b25:	000000        	ill

00907b28 <dispatch_magpie_sys_cmds>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void dispatch_magpie_sys_cmds(void *pContext, A_UINT16 Command,
				     A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  907b28:	6c1004        	entry	a1, 32
	adf_os_assert(0);
  907b2b:	1868b5        	l32r	a8, 8e1e00 <athos_indirection_table_install+0x88c>
  907b2e:	1b6994        	l32r	a11, 8e2180 <athos_indirection_table_install+0xc0c>
  907b31:	288212        	l32i	a8, a8, 72
  907b34:	1a6995        	l32r	a10, 8e2188 <athos_indirection_table_install+0xc14>
  907b37:	0b8000        	callx8	a8
  907b3a:	186919        	l32r	a8, 8e1fa0 <athos_indirection_table_install+0xa2c>
  907b3d:	0c0200        	memw
  907b40:	8880      	l32i.n	a8, a8, 0
  907b42:	d10f      	retw.n

00907b44 <htc_setup_comp>:
/*****************/
/* Init / Deinit */
/*****************/

static void htc_setup_comp(void)
{
  907b44:	6c1004        	entry	a1, 32
  907b47:	d10f      	retw.n
  907b49:	000000        	ill

00907b4c <tgt_reg_service>:
	return HTC_SERVICE_SUCCESS;
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
  907b4c:	6c1004        	entry	a1, 32
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
  907b4f:	186996        	l32r	a8, 8e21a8 <athos_indirection_table_install+0xc34>
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907b52:	8a22      	l32i.n	a10, a2, 8
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
  907b54:	9832      	s32i.n	a8, a3, 8
	svc->ProcessConnect = tgt_ServiceConnect;
  907b56:	186997        	l32r	a8, 8e21b4 <athos_indirection_table_install+0xc40>
{
  907b59:	db30      	mov.n	a11, a3
	svc->ProcessConnect = tgt_ServiceConnect;
  907b5b:	9833      	s32i.n	a8, a3, 12
	svc->MaxSvcMsgSize = 1600;
  907b5d:	286a40        	movi	a8, 0x640
  907b60:	28350a        	s16i	a8, a3, 20
	svc->TrailerSpcCheckLimit = 0;
  907b63:	c080      	movi.n	a8, 0
  907b65:	28350b        	s16i	a8, a3, 22
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907b68:	1868b5        	l32r	a8, 8e1e3c <athos_indirection_table_install+0x8c8>
	svc->ProcessRecvMsg = recvMsg;
  907b6b:	9531      	s32i.n	a5, a3, 4
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907b6d:	288280        	l32i	a8, a8, 0x200
	svc->ServiceID = svcId;
  907b70:	243508        	s16i	a4, a3, 16
	svc->ServiceCtx = sc;
  907b73:	9236      	s32i.n	a2, a3, 24
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907b75:	0b8000        	callx8	a8
  907b78:	d10f      	retw.n
	...

00907b7c <tgt_HTCRecvMessageHandler>:
{
  907b7c:	6c1006        	entry	a1, 48
    __adf_nbuf_peek_header(buf, addr, len);
  907b7f:	dc10      	mov.n	a12, a1
  907b81:	b41b      	addi.n	a11, a1, 4
	if (!hdr_buf) {
  907b83:	cc3e      	bnez.n	a3, 907b95 <tgt_HTCRecvMessageHandler+0x19>
  907b85:	da40      	mov.n	a10, a4
  907b87:	5bfc40        	call8	906c88 <__adf_nbuf_peek_header>
    return __adf_nbuf_pull_head(buf, size);
  907b8a:	c0bc      	movi.n	a11, 12
  907b8c:	da40      	mov.n	a10, a4
  907b8e:	5bfb72        	call8	906958 <__adf_nbuf_pull_head>
  907b91:	600005        	j	907b9a <tgt_HTCRecvMessageHandler+0x1e>
  907b94:	00da30        	excw
    __adf_nbuf_peek_header(buf, addr, len);
  907b97:	5bfc3c        	call8	906c88 <__adf_nbuf_peek_header>
	adf_os_assert(len >= sizeof(ath_data_hdr_t));
  907b9a:	8310      	l32i.n	a3, a1, 0
  907b9c:	c06b      	movi.n	a6, 11
  907b9e:	736316        	bltu	a6, a3, 907bb8 <tgt_HTCRecvMessageHandler+0x3c>
  907ba1:	1368b5        	l32r	a3, 8e1e78 <athos_indirection_table_install+0x904>
  907ba4:	1b6998        	l32r	a11, 8e2204 <athos_indirection_table_install+0xc90>
  907ba7:	233212        	l32i	a3, a3, 72
  907baa:	1a6995        	l32r	a10, 8e2200 <athos_indirection_table_install+0xc8c>
  907bad:	0b3000        	callx8	a3
  907bb0:	136919        	l32r	a3, 8e2014 <athos_indirection_table_install+0xaa0>
  907bb3:	0c0200        	memw
  907bb6:	8330      	l32i.n	a3, a3, 0
	sc->sc_tx_stats.tx_tgt++;
  907bb8:	29525b        	l32i	a9, a5, 0x16c
	dh = (ath_data_hdr_t *)data;
  907bbb:	8311      	l32i.n	a3, a1, 4
	sc->sc_tx_stats.tx_tgt++;
  907bbd:	b199      	addi.n	a9, a9, 1
	an = &sc->sc_sta[dh->ni_index];
  907bbf:	263001        	l8ui	a6, a3, 1
	tid = ATH_AN_2_TID(an, dh->tidno);
  907bc2:	273003        	l8ui	a7, a3, 3
	bf = ath_tgt_tx_prepare(sc, buf, dh);
  907bc5:	db40      	mov.n	a11, a4
	sc->sc_tx_stats.tx_tgt++;
  907bc7:	29565b        	s32i	a9, a5, 0x16c
	bf = ath_tgt_tx_prepare(sc, buf, dh);
  907bca:	dc30      	mov.n	a12, a3
  907bcc:	da50      	mov.n	a10, a5
  907bce:	5817d8        	call8	90db30 <ath_tgt_tx_prepare>
  907bd1:	dba0      	mov.n	a11, a10
	if (!bf) {
  907bd3:	cda1      	bnez.n	a10, 907be8 <tgt_HTCRecvMessageHandler+0x6c>
		ath_free_tx_skb(sc->tgt_htc_handle,EndPt,buf);
  907bd5:	1368b5        	l32r	a3, 8e1eac <athos_indirection_table_install+0x938>
  907bd8:	8a52      	l32i.n	a10, a5, 8
  907bda:	233282        	l32i	a3, a3, 0x208
  907bdd:	dc40      	mov.n	a12, a4
  907bdf:	db20      	mov.n	a11, a2
  907be1:	0b3000        	callx8	a3
  907be4:	d10f      	retw.n
  907be6:	000022        	excw
	bf->bf_endpt = EndPt;
  907be9:	a623      	add.n	a3, a2, a6
	bf->bf_cookie = dh->cookie;
  907beb:	22300a        	l8ui	a2, a3, 10
	if (tid->flag & TID_AGGR_ENABLED)
  907bee:	0c7811        	slli	a8, a7, 4
	bf->bf_cookie = dh->cookie;
  907bf1:	22a492        	s8i	a2, a10, 146
	if (tid->flag & TID_AGGR_ENABLED)
  907bf4:	07820c        	sub	a2, a8, a7
  907bf7:	0a6811        	slli	a8, a6, 6
  907bfa:	a688      	add.n	a8, a8, a6
  907bfc:	0f8811        	slli	a8, a8, 1
  907bff:	a688      	add.n	a8, a8, a6
  907c01:	a288      	add.n	a8, a8, a2
  907c03:	0e8811        	slli	a8, a8, 2
  907c06:	225a92        	movi	a2, 0x592
  907c09:	a858      	add.n	a8, a5, a8
  907c0b:	a288      	add.n	a8, a8, a2
  907c0d:	228000        	l8ui	a2, a8, 0
		ath_tgt_handle_aggr(sc, bf);
  907c10:	da50      	mov.n	a10, a5
	if (tid->flag & TID_AGGR_ENABLED)
  907c12:	7e2707        	bbci	a2, 30, 907c1d <tgt_HTCRecvMessageHandler+0xa1>
		ath_tgt_handle_aggr(sc, bf);
  907c15:	5819ca        	call8	90e340 <ath_tgt_handle_aggr>
  907c18:	d10f      	retw.n
  907c1a:	000000        	ill
		ath_tgt_handle_normal(sc, bf);
  907c1d:	581999        	call8	90e284 <ath_tgt_handle_normal>
  907c20:	d10f      	retw.n
	...

00907c24 <tgt_HTCRecv_mgmthandler>:
{
  907c24:	6c1004        	entry	a1, 32
	ath_tgt_send_mgt(sc,hdr_buf,buf,EndPt);
  907c27:	dd20      	mov.n	a13, a2
  907c29:	dc40      	mov.n	a12, a4
  907c2b:	db30      	mov.n	a11, a3
  907c2d:	da50      	mov.n	a10, a5
  907c2f:	581886        	call8	90de48 <ath_tgt_send_mgt>
  907c32:	d10f      	retw.n

00907c34 <ath_descdma_cleanup>:
{
  907c34:	6c1006        	entry	a1, 48
	asf_tailq_foreach(bf, head, bf_list) {
  907c37:	8740      	l32i.n	a7, a4, 0
  907c39:	60007d        	j	907cba <ath_descdma_cleanup+0x86>
		if (adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
  907c3c:	267c14        	addi	a6, a7, 20
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  907c3f:	da60      	mov.n	a10, a6
  907c41:	5bfc1b        	call8	906cb0 <__adf_nbuf_queue_len>
  907c44:	d9a0      	mov.n	a9, a10
  907c46:	cbac      	beqz.n	a10, 907c86 <ath_descdma_cleanup+0x52>
    __adf_nbuf_unmap(osdev, bmap, dir);
  907c48:	2b7200        	l32i	a11, a7, 0
  907c4b:	2a2246        	l32i	a10, a2, 0x118
  907c4e:	055c02        	or	a12, a5, a5
  907c51:	5bfb8a        	call8	906a7c <__adf_nbuf_unmap>
  907c54:	600021        	j	907c79 <ath_descdma_cleanup+0x45>
  907c57:	000018        	src	a0, a0, a0
				ath_free_rx_skb(sc,
  907c5a:	68b58d        	beqi	a11, 5, 907beb <tgt_HTCRecvMessageHandler+0x6f>
  907c5d:	202982        	l16si	a0, a2, 0x104
  907c60:	9eda      	s32i.n	a14, a13, 40
    return __adf_nbuf_queue_remove(head);
  907c62:	609911        	j	911577 <_etext+0x2366>
  907c65:	9d10      	s32i.n	a13, a1, 0
  907c67:	5bfb71        	call8	906a2c <__adf_nbuf_queue_remove>
  907c6a:	8d10      	l32i.n	a13, a1, 0
  907c6c:	8911      	l32i.n	a9, a1, 4
  907c6e:	0aac02        	or	a12, a10, a10
  907c71:	2b0a03        	movi	a11, 3
  907c74:	dad0      	mov.n	a10, a13
  907c76:	0b9000        	callx8	a9
    return __adf_nbuf_queue_len(head);
  907c79:	da60      	mov.n	a10, a6
  907c7b:	5bfc0d        	call8	906cb0 <__adf_nbuf_queue_len>
			while(adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
  907c7e:	65afd7        	bnez	a10, 907c59 <ath_descdma_cleanup+0x25>
			bf->bf_skb = NULL;
  907c81:	9a78      	s32i.n	a10, a7, 32
  907c83:	600025        	j	907cac <ath_descdma_cleanup+0x78>
		} else if (bf->bf_skb != NULL) {
  907c86:	8678      	l32i.n	a6, a7, 32
  907c88:	ca60      	beqz.n	a6, 907cac <ath_descdma_cleanup+0x78>
    __adf_nbuf_unmap(osdev, bmap, dir);
  907c8a:	2b7200        	l32i	a11, a7, 0
  907c8d:	2a2246        	l32i	a10, a2, 0x118
  907c90:	055c02        	or	a12, a5, a5
  907c93:	291601        	s32i	a9, a1, 4
  907c96:	5bfb79        	call8	906a7c <__adf_nbuf_unmap>
			ath_free_rx_skb(sc, bf->bf_skb);
  907c99:	1868b5        	l32r	a8, 8e1f70 <athos_indirection_table_install+0x9fc>
  907c9c:	8c78      	l32i.n	a12, a7, 32
  907c9e:	8a20      	l32i.n	a10, a2, 0
  907ca0:	26829e        	l32i	a6, a8, 0x278
  907ca3:	c0b3      	movi.n	a11, 3
  907ca5:	0b6000        	callx8	a6
			bf->bf_skb = NULL;
  907ca8:	8911      	l32i.n	a9, a1, 4
  907caa:	9978      	s32i.n	a9, a7, 32
    __adf_nbuf_dmamap_destroy(osdev, dmap);
  907cac:	8b70      	l32i.n	a11, a7, 0
  907cae:	2a2246        	l32i	a10, a2, 0x118
		bf->bf_node = NULL;
  907cb1:	c060      	movi.n	a6, 0
  907cb3:	5bfb75        	call8	906a88 <__adf_nbuf_dmamap_destroy>
  907cb6:	9674      	s32i.n	a6, a7, 16
	asf_tailq_foreach(bf, head, bf_list) {
  907cb8:	8779      	l32i.n	a7, a7, 36
  907cba:	657f7e        	bnez	a7, 907c3c <ath_descdma_cleanup+0x8>
	asf_tailq_init(head);
  907cbd:	9740      	s32i.n	a7, a4, 0
  907cbf:	9441      	s32i.n	a4, a4, 4
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  907cc1:	c1c8      	movi.n	a12, 24
  907cc3:	db70      	mov.n	a11, a7
  907cc5:	da30      	mov.n	a10, a3
  907cc7:	5bff91        	call8	907b0c <__adf_os_mem_set>
  907cca:	d10f      	retw.n

00907ccc <__adf_os_init_bh$isra$5>:
									  void 				*arg)
{
	__adf_os_init_defer(work, func, arg);
}

static inline void	__adf_os_init_bh(adf_os_handle_t  hdl,
  907ccc:	6c1004        	entry	a1, 32
									 __adf_os_bh_t		*bh,
									 adf_os_defer_fn_t	func,
									 void				*arg)
{
	//__adf_os_init_defer(bh, func, arg);
	A_TASKLET_INIT_TASK(func, arg, bh);
  907ccf:	1868b5        	l32r	a8, 8e1fa4 <athos_indirection_table_install+0xa30>
  907cd2:	dc20      	mov.n	a12, a2
  907cd4:	28826a        	l32i	a8, a8, 0x1a8
  907cd7:	db40      	mov.n	a11, a4
  907cd9:	da30      	mov.n	a10, a3
  907cdb:	0b8000        	callx8	a8
  907cde:	d10f      	retw.n

00907ce0 <__adf_os_sched_bh$isra$6>:
                                         __adf_os_work_t  * work)
{
    //taskqueue_drain(taskqueue_thread, &work->tsk);
}

static inline void __adf_os_sched_bh(adf_os_handle_t  hdl,
  907ce0:	6c1004        	entry	a1, 32
                                       __adf_os_bh_t  * bh)
{
    A_TASKLET_SCHEDULE(bh);
  907ce3:	1868b5        	l32r	a8, 8e1fb8 <athos_indirection_table_install+0xa44>
  907ce6:	da20      	mov.n	a10, a2
  907ce8:	28826c        	l32i	a8, a8, 0x1b0
  907ceb:	0b8000        	callx8	a8
  907cee:	d10f      	retw.n

00907cf0 <ath_tgt_rx_tasklet>:
{
  907cf0:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  907cf3:	252d05        	addmi	a5, a2, 0x500
  907cf6:	835b      	l32i.n	a3, a5, 44
		bf->bf_skb = NULL;
  907cf8:	c040      	movi.n	a4, 0
	struct ath_hal *ah = sc->sc_ah;
  907cfa:	231600        	s32i	a3, a1, 0
		bf = asf_tailq_first(&sc->sc_rxbuf);
  907cfd:	2322d5        	l32i	a3, a2, 0x354
		if (bf == NULL) {
  907d00:	64308c        	beqz	a3, 907d90 <ath_tgt_rx_tasklet+0xa0>
		if (!(bf->bf_status & ATH_BUFSTATUS_DONE)) {
  907d03:	863f      	l32i.n	a6, a3, 60
  907d05:	7f6f02        	bbsi	a6, 31, 907d0b <ath_tgt_rx_tasklet+0x1b>
  907d08:	600084        	j	907d90 <ath_tgt_rx_tasklet+0xa0>
		skb = bf->bf_skb;
  907d0b:	8d38      	l32i.n	a13, a3, 32
		if (skb == NULL) {
  907d0d:	64dfef        	beqz	a13, 907d00 <ath_tgt_rx_tasklet+0x10>
		asf_tailq_remove(&sc->sc_rxbuf, bf, bf_list);
  907d10:	8639      	l32i.n	a6, a3, 36
  907d12:	873a      	l32i.n	a7, a3, 40
  907d14:	c864      	beqz.n	a6, 907d1c <ath_tgt_rx_tasklet+0x2c>
  907d16:	976a      	s32i.n	a7, a6, 40
  907d18:	600003        	j	907d1f <ath_tgt_rx_tasklet+0x2f>
  907d1b:	002726        	excw
  907d1e:	d687      	excw
  907d20:	3adad0        	excw
  907d23:	9670      	s32i.n	a6, a7, 0
		bf->bf_skb = NULL;
  907d25:	9438      	s32i.n	a4, a3, 32
    return __adf_nbuf_push_head(buf, size);
  907d27:	2b0a28        	movi	a11, 40
  907d2a:	2d1601        	s32i	a13, a1, 4
  907d2d:	5bfaff        	call8	90692c <__adf_nbuf_push_head>
    __adf_os_mem_copy(dst, src, size);
  907d30:	c2c8      	movi.n	a12, 40
  907d32:	2b3c40        	addi	a11, a3, 64
  907d35:	d7a0      	mov.n	a7, a10
  907d37:	5bff70        	call8	907af8 <__adf_os_mem_copy>
  907d3a:	8a5b      	l32i.n	a10, a5, 44
		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907d3c:	8671      	l32i.n	a6, a7, 4
	tsf = ah->ah_getTsf64(ah);
  907d3e:	28a21e        	l32i	a8, a10, 120
  907d41:	0b8000        	callx8	a8
	tsf_delta = (a_int32_t)((rstamp - tsf_low) & 0xffffffffUL);
  907d44:	0b680c        	sub	a8, a6, a11
	return (tsf + (u_int64_t)tsf_delta);
  907d47:	ab8b      	add.n	a11, a8, a11
  907d49:	08fc13        	srai	a12, a8, 31
  907d4c:	c061      	movi.n	a6, 1
  907d4e:	8d11      	l32i.n	a13, a1, 4
  907d50:	78b301        	bltu	a11, a8, 907d55 <ath_tgt_rx_tasklet+0x65>
  907d53:	d640      	mov.n	a6, a4
  907d55:	aaca      	add.n	a10, a12, a10
  907d57:	aa66      	add.n	a6, a6, a10
		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907d59:	9670      	s32i.n	a6, a7, 0
		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
  907d5b:	1668b5        	l32r	a6, 8e2030 <athos_indirection_table_install+0xabc>
  907d5e:	8a22      	l32i.n	a10, a2, 8
  907d60:	266284        	l32i	a6, a6, 0x210
		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907d63:	9b71      	s32i.n	a11, a7, 4
		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
  907d65:	dcd0      	mov.n	a12, a13
  907d67:	c0b3      	movi.n	a11, 3
  907d69:	0b6000        	callx8	a6
		sc->sc_rx_stats.ast_rx_send++;
  907d6c:	26227d        	l32i	a6, a2, 0x1f4
		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  907d6f:	c77e      	movi.n	a7, -2
		sc->sc_rx_stats.ast_rx_send++;
  907d71:	b166      	addi.n	a6, a6, 1
  907d73:	26267d        	s32i	a6, a2, 0x1f4
		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  907d76:	863f      	l32i.n	a6, a3, 60
		asf_tailq_insert_tail(&sc->sc_rxbuf, bf, bf_list);
  907d78:	9439      	s32i.n	a4, a3, 36
		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  907d7a:	076601        	and	a6, a6, a7
  907d7d:	963f      	s32i.n	a6, a3, 60
		asf_tailq_insert_tail(&sc->sc_rxbuf, bf, bf_list);
  907d7f:	2622d6        	l32i	a6, a2, 0x358
  907d82:	963a      	s32i.n	a6, a3, 40
  907d84:	9360      	s32i.n	a3, a6, 0
  907d86:	233c24        	addi	a3, a3, 36
  907d89:	2326d6        	s32i	a3, a2, 0x358
  907d8c:	63ff6d        	j	907cfd <ath_tgt_rx_tasklet+0xd>
  907d8f:	002322        	excw
	sc->sc_imask |= HAL_INT_RX;
  907d92:	c4c0      	movi.n	a12, 64
  907d94:	b103      	addi.n	a3, a0, 1
  907d96:	bb02      	addi.n	a2, a0, 11
	ah->ah_setInterrupts(ah, sc->sc_imask);
  907d98:	8310      	l32i.n	a3, a1, 0
	sc->sc_imask |= HAL_INT_RX;
  907d9a:	2b26c4        	s32i	a11, a2, 0x310
	ah->ah_setInterrupts(ah, sc->sc_imask);
  907d9d:	223228        	l32i	a2, a3, 160
  907da0:	da30      	mov.n	a10, a3
  907da2:	0b2000        	callx8	a2
  907da5:	d10f      	retw.n
	...

00907da8 <ath_rxdesc_init>:
{
  907da8:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  907dab:	242d05        	addmi	a4, a2, 0x500
  907dae:	854b      	l32i.n	a5, a4, 44
	if (!sc->sc_rxdesc_held) {
  907db0:	2422db        	l32i	a4, a2, 0x36c
		sc->sc_rxdesc_held = ds;
  907db3:	2326db        	s32i	a3, a2, 0x36c
	if (!sc->sc_rxdesc_held) {
  907db6:	cc41      	bnez.n	a4, 907dbb <ath_rxdesc_init+0x13>
  907db8:	600180        	j	907f3c <ath_rxdesc_init+0x194>
	if (ds->ds_nbuf == ADF_NBUF_NULL) {
  907dbb:	284034        	l8ui	a8, a4, 52
  907dbe:	234035        	l8ui	a3, a4, 53
  907dc1:	088810        	slli	a8, a8, 24
  907dc4:	003311        	slli	a3, a3, 16
  907dc7:	083802        	or	a8, a3, a8
  907dca:	234036        	l8ui	a3, a4, 54
  907dcd:	264037        	l8ui	a6, a4, 55
  907dd0:	083311        	slli	a3, a3, 8
  907dd3:	083302        	or	a3, a3, a8
  907dd6:	036302        	or	a3, a6, a3
  907dd9:	6530bb        	bnez	a3, 907e98 <ath_rxdesc_init+0xf0>
	skb = BUF_Pool_alloc_buf_align(sc->pool_handle, POOL_ID_WLAN_RX_BUF,
  907ddc:	1368b5        	l32r	a3, 8e20b0 <athos_indirection_table_install+0xb3c>
  907ddf:	2d2196        	l16ui	a13, a2, 0x12c
  907de2:	23329d        	l32i	a3, a3, 0x274
  907de5:	8a20      	l32i.n	a10, a2, 0
  907de7:	2c0a30        	movi	a12, 48
  907dea:	2b0a03        	movi	a11, 3
  907ded:	0b3000        	callx8	a3
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
  907df0:	0a8357        	extui	a3, a10, 24, 8
  907df3:	234434        	s8i	a3, a4, 52
  907df6:	0a0357        	extui	a3, a10, 16, 8
  907df9:	234435        	s8i	a3, a4, 53
  907dfc:	0a8347        	extui	a3, a10, 8, 8
  907dff:	234436        	s8i	a3, a4, 54
  907e02:	2a4437        	s8i	a10, a4, 55
		if (ds->ds_nbuf == ADF_NBUF_NULL) {
  907e05:	cda0      	bnez.n	a10, 907e19 <ath_rxdesc_init+0x71>
			sc->sc_rx_stats.ast_rx_nobuf++;
  907e07:	23227c        	l32i	a3, a2, 0x1f0
			sc->sc_rxdesc_held = ds;
  907e0a:	2426db        	s32i	a4, a2, 0x36c
			sc->sc_rx_stats.ast_rx_nobuf++;
  907e0d:	b133      	addi.n	a3, a3, 1
  907e0f:	23267c        	s32i	a3, a2, 0x1f0
			return ENOMEM;
  907e12:	c72f      	movi.n	a2, -1
  907e14:	d10f      	retw.n
  907e16:	000000        	ill
		adf_nbuf_map(sc->sc_dev, ds->ds_dmap, ds->ds_nbuf, ADF_OS_DMA_FROM_DEVICE);
  907e19:	234038        	l8ui	a3, a4, 56
  907e1c:	2b4039        	l8ui	a11, a4, 57
  907e1f:	083310        	slli	a3, a3, 24
  907e22:	00bb11        	slli	a11, a11, 16
  907e25:	03bb02        	or	a11, a11, a3
  907e28:	23403a        	l8ui	a3, a4, 58
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  907e2b:	dca0      	mov.n	a12, a10
  907e2d:	083311        	slli	a3, a3, 8
  907e30:	0b3302        	or	a3, a3, a11
  907e33:	2b403b        	l8ui	a11, a4, 59
  907e36:	2a2246        	l32i	a10, a2, 0x118
  907e39:	03bb02        	or	a11, a11, a3
  907e3c:	c0d1      	movi.n	a13, 1
  907e3e:	5bfb0c        	call8	906a70 <__adf_nbuf_map>
		adf_nbuf_dmamap_info(ds->ds_dmap, &ds->ds_dmap_info);
  907e41:	2a4039        	l8ui	a10, a4, 57
  907e44:	234038        	l8ui	a3, a4, 56
  907e47:	00aa11        	slli	a10, a10, 16
  907e4a:	083310        	slli	a3, a3, 24
  907e4d:	03aa02        	or	a10, a10, a3
  907e50:	23403a        	l8ui	a3, a4, 58
    __adf_nbuf_dmamap_info(bmap, sg);
  907e53:	2b4c3c        	addi	a11, a4, 60
  907e56:	083311        	slli	a3, a3, 8
  907e59:	0a3302        	or	a3, a3, a10
  907e5c:	2a403b        	l8ui	a10, a4, 59
  907e5f:	03aa02        	or	a10, a10, a3
  907e62:	5bfb0b        	call8	906a90 <__adf_nbuf_dmamap_info>
		ds->ds_data = ds->ds_dmap_info.dma_segs[0].paddr;
  907e65:	234040        	l8ui	a3, a4, 64
  907e68:	083810        	slli	a8, a3, 24
  907e6b:	234041        	l8ui	a3, a4, 65
  907e6e:	003311        	slli	a3, a3, 16
  907e71:	083302        	or	a3, a3, a8
  907e74:	284042        	l8ui	a8, a4, 66
  907e77:	088811        	slli	a8, a8, 8
  907e7a:	038302        	or	a3, a8, a3
  907e7d:	284043        	l8ui	a8, a4, 67
  907e80:	038802        	or	a8, a8, a3
  907e83:	088357        	extui	a3, a8, 24, 8
  907e86:	234404        	s8i	a3, a4, 4
  907e89:	080357        	extui	a3, a8, 16, 8
  907e8c:	234405        	s8i	a3, a4, 5
  907e8f:	088347        	extui	a3, a8, 8, 8
  907e92:	234406        	s8i	a3, a4, 6
  907e95:	284407        	s8i	a8, a4, 7
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);
  907e98:	284034        	l8ui	a8, a4, 52
  907e9b:	2a4035        	l8ui	a10, a4, 53
  907e9e:	088810        	slli	a8, a8, 24
  907ea1:	00aa11        	slli	a10, a10, 16
  907ea4:	08aa02        	or	a10, a10, a8
  907ea7:	284036        	l8ui	a8, a4, 54
	ds->ds_link = 0;
  907eaa:	c030      	movi.n	a3, 0
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);
  907eac:	088811        	slli	a8, a8, 8
  907eaf:	0a8802        	or	a8, a8, a10
  907eb2:	2a4037        	l8ui	a10, a4, 55
    __adf_nbuf_peek_header(buf, addr, len);
  907eb5:	dc10      	mov.n	a12, a1
  907eb7:	2b1c04        	addi	a11, a1, 4
  907eba:	08aa02        	or	a10, a10, a8
	ds->ds_link = 0;
  907ebd:	234400        	s8i	a3, a4, 0
  907ec0:	234401        	s8i	a3, a4, 1
  907ec3:	234402        	s8i	a3, a4, 2
  907ec6:	234403        	s8i	a3, a4, 3
  907ec9:	5bfb6f        	call8	906c88 <__adf_nbuf_peek_header>
	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);
  907ecc:	284034        	l8ui	a8, a4, 52
  907ecf:	2a4035        	l8ui	a10, a4, 53
  907ed2:	088810        	slli	a8, a8, 24
  907ed5:	00aa11        	slli	a10, a10, 16
  907ed8:	08aa02        	or	a10, a10, a8
  907edb:	284036        	l8ui	a8, a4, 54
  907ede:	265220        	l32i	a6, a5, 128
  907ee1:	088811        	slli	a8, a8, 8
  907ee4:	0a8802        	or	a8, a8, a10
  907ee7:	2a4037        	l8ui	a10, a4, 55
    return (__adf_nbuf_tailroom(buf));
  907eea:	08aa02        	or	a10, a10, a8
  907eed:	5bfb57        	call8	906c4c <__adf_nbuf_tailroom>
  907ef0:	dba0      	mov.n	a11, a10
  907ef2:	dc30      	mov.n	a12, a3
  907ef4:	da40      	mov.n	a10, a4
  907ef6:	0b6000        	callx8	a6
  907ef9:	2b4048        	l8ui	a11, a4, 72
  907efc:	294049        	l8ui	a9, a4, 73
  907eff:	28404a        	l8ui	a8, a4, 74
	if (sc->sc_rxlink == NULL) {
  907f02:	2322ef        	l32i	a3, a2, 0x3bc
		ah->ah_setRxDP(ah, ds->ds_daddr);
  907f05:	08bb10        	slli	a11, a11, 24
  907f08:	009911        	slli	a9, a9, 16
  907f0b:	2a404b        	l8ui	a10, a4, 75
  907f0e:	0b9902        	or	a9, a9, a11
  907f11:	088811        	slli	a8, a8, 8
	if (sc->sc_rxlink == NULL) {
  907f14:	cd31      	bnez.n	a3, 907f29 <ath_rxdesc_init+0x181>
		ah->ah_setRxDP(ah, ds->ds_daddr);
  907f16:	098b02        	or	a11, a8, a9
  907f19:	23521f        	l32i	a3, a5, 124
  907f1c:	0bab02        	or	a11, a10, a11
  907f1f:	da50      	mov.n	a10, a5
  907f21:	0b3000        	callx8	a3
  907f24:	600009        	j	907f31 <ath_rxdesc_init+0x189>
  907f27:	000009        	addx2	a0, a0, a0
		*sc->sc_rxlink = ds->ds_daddr;
  907f2a:	8802      	l32i.n	a8, a0, 8
  907f2c:	08a802        	or	a8, a10, a8
  907f2f:	9830      	s32i.n	a8, a3, 0
	sc->sc_rxlink = &ds->ds_link;
  907f31:	2426ef        	s32i	a4, a2, 0x3bc
	ah->ah_enableReceive(ah);
  907f34:	225225        	l32i	a2, a5, 148
  907f37:	da50      	mov.n	a10, a5
  907f39:	0b2000        	callx8	a2
	return 0;
  907f3c:	c020      	movi.n	a2, 0
}
  907f3e:	d10f      	retw.n

00907f40 <ath_pll_reset_ones$isra$12>:
static void ath_pll_reset_ones(struct ath_hal *ah)
  907f40:	6c1004        	entry	a1, 32
	if(reset_pll == 0) {
  907f43:	1a6999        	l32r	a10, 8e25a8 <athos_indirection_table_install+0x1034>
  907f46:	28a000        	l8ui	a8, a10, 0
  907f49:	ce87      	bnez.n	a8, 907f74 <ath_pll_reset_ones$isra$12+0x34>
	return *(const volatile uint32_t *) addr;
  907f4b:	18699a        	l32r	a8, 8e25b4 <athos_indirection_table_install+0x1040>
		iowrite32_mac(0x7890,
  907f4e:	1b699b        	l32r	a11, 8e25bc <athos_indirection_table_install+0x1048>
  907f51:	0c0200        	memw
  907f54:	8980      	l32i.n	a9, a8, 0
  907f56:	0b9902        	or	a9, a9, a11
	*(volatile uint32_t *) addr = b;
  907f59:	0c0200        	memw
  907f5c:	9980      	s32i.n	a9, a8, 0
	return *(const volatile uint32_t *) addr;
  907f5e:	0c0200        	memw
  907f61:	8980      	l32i.n	a9, a8, 0
		iowrite32_mac(0x7890,
  907f63:	1b699c        	l32r	a11, 8e25d4 <athos_indirection_table_install+0x1060>
  907f66:	0b9901        	and	a9, a9, a11
	*(volatile uint32_t *) addr = b;
  907f69:	0c0200        	memw
  907f6c:	9980      	s32i.n	a9, a8, 0
		reset_pll = 1;
  907f6e:	280a01        	movi	a8, 1
  907f71:	28a400        	s8i	a8, a10, 0
  907f74:	d10f      	retw.n
	...

00907f78 <tgt_ServiceConnect>:
{
  907f78:	6c1004        	entry	a1, 32
	switch(pService->ServiceID) {
  907f7b:	292108        	l16ui	a9, a2, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)pService->ServiceCtx;
  907f7e:	8826      	l32i.n	a8, a2, 24
	switch(pService->ServiceID) {
  907f80:	299dff        	addmi	a9, a9, 0xffffff00
  907f83:	09094f        	extui	a9, a9, 0, 16
  907f86:	c028      	movi.n	a2, 8
  907f88:	792345        	bltu	a2, a9, 907fd1 <tgt_ServiceConnect+0x59>
  907f8b:	1a699d        	l32r	a10, 8e2600 <athos_indirection_table_install+0x108c>
  907f8e:	0e9911        	slli	a9, a9, 2
  907f91:	a9a9      	add.n	a9, a10, a9
  907f93:	8290      	l32i.n	a2, a9, 0
  907f95:	0a2000        	jx	a2
		sc->wmi_command_ep= eid;
  907f98:	23863c        	s32i	a3, a8, 240
		break;
  907f9b:	600049        	j	907fe8 <tgt_ServiceConnect+0x70>
		sc->beacon_ep= eid;
  907f9e:	23863d        	s32i	a3, a8, 244
		break;
  907fa1:	600043        	j	907fe8 <tgt_ServiceConnect+0x70>
		sc->cab_ep= eid;
  907fa4:	23863e        	s32i	a3, a8, 248
		break;
  907fa7:	60003d        	j	907fe8 <tgt_ServiceConnect+0x70>
		sc->uapsd_ep= eid;
  907faa:	23863f        	s32i	a3, a8, 252
		break;
  907fad:	600037        	j	907fe8 <tgt_ServiceConnect+0x70>
		sc->mgmt_ep= eid;
  907fb0:	238640        	s32i	a3, a8, 0x100
		break;
  907fb3:	600031        	j	907fe8 <tgt_ServiceConnect+0x70>
		sc->data_VO_ep = eid;
  907fb6:	238641        	s32i	a3, a8, 0x104
		break;
  907fb9:	60002b        	j	907fe8 <tgt_ServiceConnect+0x70>
		sc->data_VI_ep = eid;
  907fbc:	238642        	s32i	a3, a8, 0x108
		break;
  907fbf:	600025        	j	907fe8 <tgt_ServiceConnect+0x70>
  907fc2:	000000        	ill
		sc->data_BE_ep = eid;
  907fc5:	238643        	s32i	a3, a8, 0x10c
		break;
  907fc8:	60001c        	j	907fe8 <tgt_ServiceConnect+0x70>
		sc->data_BK_ep = eid;
  907fcb:	238644        	s32i	a3, a8, 0x110
		break;
  907fce:	600016        	j	907fe8 <tgt_ServiceConnect+0x70>
		adf_os_assert(0);
  907fd1:	1268b5        	l32r	a2, 8e22a8 <athos_indirection_table_install+0xd34>
  907fd4:	1b699e        	l32r	a11, 8e264c <athos_indirection_table_install+0x10d8>
  907fd7:	222212        	l32i	a2, a2, 72
  907fda:	1a6995        	l32r	a10, 8e2630 <athos_indirection_table_install+0x10bc>
  907fdd:	0b2000        	callx8	a2
  907fe0:	126919        	l32r	a2, 8e2444 <athos_indirection_table_install+0xed0>
  907fe3:	0c0200        	memw
  907fe6:	8220      	l32i.n	a2, a2, 0
}
  907fe8:	c020      	movi.n	a2, 0
  907fea:	d10f      	retw.n

00907fec <ath_reg_read_filter>:
{
  907fec:	6c1004        	entry	a1, 32
	if ((addr & 0xffffe000) == 0x2000) {
  907fef:	18699f        	l32r	a8, 8e266c <athos_indirection_table_install+0x10f8>
  907ff2:	1969a0        	l32r	a9, 8e2674 <athos_indirection_table_install+0x1100>
  907ff5:	083801        	and	a8, a3, a8
  907ff8:	798935        	bne	a8, a9, 908031 <ath_reg_read_filter+0x45>
		ioread32_mac(addr);
  907ffb:	1869a1        	l32r	a8, 8e2680 <athos_indirection_table_install+0x110c>
		if (!ath_hal_wait(ah, 0x407c, 0x00030000, 0))
  907ffe:	1c69a2        	l32r	a12, 8e2688 <athos_indirection_table_install+0x1114>
		ioread32_mac(addr);
  908001:	a838      	add.n	a8, a3, a8
		if (!ath_hal_wait(ah, 0x407c, 0x00030000, 0))
  908003:	1b69a3        	l32r	a11, 8e2690 <athos_indirection_table_install+0x111c>
	return *(const volatile uint32_t *) addr;
  908006:	0c0200        	memw
  908009:	8880      	l32i.n	a8, a8, 0
  90800b:	2d0a00        	movi	a13, 0
  90800e:	022a02        	or	a10, a2, a2
  908011:	580b59        	call8	90ad78 <ath_hal_wait>
  908014:	ccac      	bnez.n	a10, 908024 <ath_reg_read_filter+0x38>
			adf_os_print("SEEPROM Read fail: 0x%08x\n", addr);
  908016:	1268b5        	l32r	a2, 8e22ec <athos_indirection_table_install+0xd78>
  908019:	1a69a4        	l32r	a10, 8e26ac <athos_indirection_table_install+0x1138>
  90801c:	222212        	l32i	a2, a2, 72
  90801f:	db30      	mov.n	a11, a3
  908021:	0b2000        	callx8	a2
  908024:	1269a5        	l32r	a2, 8e26b8 <athos_indirection_table_install+0x1144>
  908027:	0c0200        	memw
  90802a:	8220      	l32i.n	a2, a2, 0
		return ioread32_mac(0x407c) & 0x0000ffff;
  90802c:	02024f        	extui	a2, a2, 0, 16
  90802f:	d10f      	retw.n
	} else if (addr > 0xffff)
  908031:	1269a6        	l32r	a2, 8e26cc <athos_indirection_table_install+0x1158>
  908034:	732a04        	bge	a2, a3, 90803c <ath_reg_read_filter+0x50>
  908037:	600006        	j	908041 <ath_reg_read_filter+0x55>
  90803a:	000012        	srai	a0, a0, 0
		return ioread32_mac(addr);
  90803d:	69a1a2        	bnei	a10, 1, 907fe3 <tgt_ServiceConnect+0x6b>
  908040:	330c02        	excw
  908043:	008230        	excw
}
  908046:	d10f      	retw.n

00908048 <tgt_HTCRecv_cabhandler>:
{
  908048:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  90804b:	285d05        	addmi	a8, a5, 0x500
  90804e:	8a8b      	l32i.n	a10, a8, 44
	tsf = ah->ah_getTsf64(ah);
  908050:	28a21e        	l32i	a8, a10, 120
  908053:	0b8000        	callx8	a8
	tmp = tsf - sc->sc_swba_tsf;
  908056:	285d16        	addmi	a8, a5, 0x1600
  908059:	888d      	l32i.n	a8, a8, 52
  90805b:	08bb0c        	sub	a11, a11, a8
	if ( tmp > ATH_CABQ_HANDLING_THRESHOLD ) {
  90805e:	1869a7        	l32r	a8, 8e26fc <athos_indirection_table_install+0x1188>
  908061:	7b8b11        	bgeu	a8, a11, 908076 <tgt_HTCRecv_cabhandler+0x2e>
		HTC_ReturnBuffers(sc->tgt_htc_handle, EndPt, buf);
  908064:	1368b5        	l32r	a3, 8e2338 <athos_indirection_table_install+0xdc4>
  908067:	8a52      	l32i.n	a10, a5, 8
  908069:	233282        	l32i	a3, a3, 0x208
  90806c:	dc40      	mov.n	a12, a4
  90806e:	022b02        	or	a11, a2, a2
  908071:	0b3000        	callx8	a3
  908074:	d10f      	retw.n
	tgt_HTCRecvMessageHandler(EndPt, hdr_buf, buf, ServiceCtx);
  908076:	dd50      	mov.n	a13, a5
  908078:	dc40      	mov.n	a12, a4
  90807a:	db30      	mov.n	a11, a3
  90807c:	da20      	mov.n	a10, a2
  90807e:	5bfebf        	call8	907b7c <tgt_HTCRecvMessageHandler>
  908081:	d10f      	retw.n
	...

00908084 <tgt_HTCSendCompleteHandler>:
{
  908084:	6c1006        	entry	a1, 48
	if (Endpt == RX_ENDPOINT_ID) {
  908087:	682302        	beqi	a2, 3, 90808d <tgt_HTCSendCompleteHandler+0x9>
  90808a:	6000fe        	j	90818c <tgt_HTCSendCompleteHandler+0x108>
		sc->sc_rx_stats.ast_rx_done++;
  90808d:	22427e        	l32i	a2, a4, 0x1f8
}

static inline void
adf_nbuf_split_to_frag(adf_nbuf_t buf, adf_nbuf_queue_t *qhead)
{
    return __adf_nbuf_split_to_frag(buf, qhead);
  908090:	da30      	mov.n	a10, a3
  908092:	b122      	addi.n	a2, a2, 1
  908094:	22467e        	s32i	a2, a4, 0x1f8
  908097:	db10      	mov.n	a11, a1
  908099:	5bfab3        	call8	906b68 <__adf_nbuf_split_to_frag>
	ds = asf_tailq_first(&sc->sc_rxdesc_idle);
  90809c:	2242d7        	l32i	a2, a4, 0x35c
		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);
  90809f:	1368b5        	l32r	a3, 8e2374 <athos_indirection_table_install+0xe00>
  9080a2:	6000e3        	j	908189 <tgt_HTCSendCompleteHandler+0x105>
    return __adf_nbuf_queue_remove(head);
  9080a5:	da10      	mov.n	a10, a1
  9080a7:	5bfa61        	call8	906a2c <__adf_nbuf_queue_remove>
		if (buf_tmp == NULL) {
  9080aa:	64a0de        	beqz	a10, 90818c <tgt_HTCSendCompleteHandler+0x108>
		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);
  9080ad:	dca0      	mov.n	a12, a10
  9080af:	25329e        	l32i	a5, a3, 0x278
  9080b2:	8a40      	l32i.n	a10, a4, 0
  9080b4:	c0b3      	movi.n	a11, 3
  9080b6:	0b5000        	callx8	a5
		ds = asf_tailq_next(ds, ds_list);
  9080b9:	28204c        	l8ui	a8, a2, 76
  9080bc:	25204d        	l8ui	a5, a2, 77
  9080bf:	088810        	slli	a8, a8, 24
  9080c2:	005511        	slli	a5, a5, 16
  9080c5:	085802        	or	a8, a5, a8
  9080c8:	25204e        	l8ui	a5, a2, 78
		ath_rxdesc_init(sc, ds_tmp);
  9080cb:	022b02        	or	a11, a2, a2
		ds = asf_tailq_next(ds, ds_list);
  9080ce:	085511        	slli	a5, a5, 8
  9080d1:	085502        	or	a5, a5, a8
  9080d4:	28204f        	l8ui	a8, a2, 79
		ath_rxdesc_init(sc, ds_tmp);
  9080d7:	044a02        	or	a10, a4, a4
		ds = asf_tailq_next(ds, ds_list);
  9080da:	058502        	or	a5, a8, a5
		ath_rxdesc_init(sc, ds_tmp);
  9080dd:	5bff32        	call8	907da8 <ath_rxdesc_init>
		asf_tailq_remove(&sc->sc_rxdesc_idle, ds_tmp, ds_list);
  9080e0:	28204c        	l8ui	a8, a2, 76
  9080e3:	2c2050        	l8ui	a12, a2, 80
  9080e6:	088a10        	slli	a10, a8, 24
  9080e9:	28204d        	l8ui	a8, a2, 77
  9080ec:	292052        	l8ui	a9, a2, 82
  9080ef:	008811        	slli	a8, a8, 16
  9080f2:	0a8802        	or	a8, a8, a10
  9080f5:	2a204e        	l8ui	a10, a2, 78
  9080f8:	08cc10        	slli	a12, a12, 24
  9080fb:	08aa11        	slli	a10, a10, 8
  9080fe:	08a802        	or	a8, a10, a8
  908101:	2a204f        	l8ui	a10, a2, 79
  908104:	2b2053        	l8ui	a11, a2, 83
  908107:	08aa02        	or	a10, a10, a8
  90810a:	282051        	l8ui	a8, a2, 81
  90810d:	089911        	slli	a9, a9, 8
  908110:	008811        	slli	a8, a8, 16
  908113:	0c8802        	or	a8, a8, a12
  908116:	089802        	or	a8, a9, a8
  908119:	08b802        	or	a8, a11, a8
  90811c:	c9a6      	beqz.n	a10, 908136 <tgt_HTCSendCompleteHandler+0xb2>
  90811e:	088957        	extui	a9, a8, 24, 8
  908121:	29a450        	s8i	a9, a10, 80
  908124:	080957        	extui	a9, a8, 16, 8
  908127:	29a451        	s8i	a9, a10, 81
  90812a:	088947        	extui	a9, a8, 8, 8
  90812d:	29a452        	s8i	a9, a10, 82
  908130:	28a453        	s8i	a8, a10, 83
  908133:	600002        	j	908139 <tgt_HTCSendCompleteHandler+0xb5>
  908136:	2846d8        	s32i	a8, a4, 0x360
  908139:	292050        	l8ui	a9, a2, 80
  90813c:	282051        	l8ui	a8, a2, 81
  90813f:	089910        	slli	a9, a9, 24
  908142:	008811        	slli	a8, a8, 16
  908145:	098902        	or	a9, a8, a9
  908148:	282052        	l8ui	a8, a2, 82
  90814b:	088811        	slli	a8, a8, 8
  90814e:	098802        	or	a8, a8, a9
  908151:	292053        	l8ui	a9, a2, 83
  908154:	089802        	or	a8, a9, a8
  908157:	9a80      	s32i.n	a10, a8, 0
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds_tmp, ds_list);
  908159:	c080      	movi.n	a8, 0
  90815b:	28244c        	s8i	a8, a2, 76
  90815e:	28244d        	s8i	a8, a2, 77
  908161:	28244e        	s8i	a8, a2, 78
  908164:	28244f        	s8i	a8, a2, 79
  908167:	2842da        	l32i	a8, a4, 0x368
  90816a:	088957        	extui	a9, a8, 24, 8
  90816d:	292450        	s8i	a9, a2, 80
  908170:	080957        	extui	a9, a8, 16, 8
  908173:	292451        	s8i	a9, a2, 81
  908176:	088947        	extui	a9, a8, 8, 8
  908179:	292452        	s8i	a9, a2, 82
  90817c:	282453        	s8i	a8, a2, 83
  90817f:	9280      	s32i.n	a2, a8, 0
  908181:	222c4c        	addi	a2, a2, 76
  908184:	2246da        	s32i	a2, a4, 0x368
		ds = asf_tailq_next(ds, ds_list);
  908187:	d250      	mov.n	a2, a5
	while (ds) {
  908189:	652f18        	bnez	a2, 9080a5 <tgt_HTCSendCompleteHandler+0x21>
  90818c:	d10f      	retw.n
	...

00908190 <ath_desc_free>:
{
  908190:	6c1004        	entry	a1, 32
	asf_tailq_insert_tail(&sc->sc_txbuf, sc->sc_txbuf_held, bf_list);
  908193:	2822dc        	l32i	a8, a2, 0x370
  908196:	2922f1        	l32i	a9, a2, 0x3c4
  908199:	c0d0      	movi.n	a13, 0
  90819b:	9d89      	s32i.n	a13, a8, 36
  90819d:	998a      	s32i.n	a9, a8, 40
  90819f:	9890      	s32i.n	a8, a9, 0
  9081a1:	2822dc        	l32i	a8, a2, 0x370
	sc->sc_txbuf_held = NULL;
  9081a4:	2d26dc        	s32i	a13, a2, 0x370
	asf_tailq_insert_tail(&sc->sc_txbuf, sc->sc_txbuf_held, bf_list);
  9081a7:	288c24        	addi	a8, a8, 36
  9081aa:	2826f1        	s32i	a8, a2, 0x3c4
	if (sc->sc_txdma.dd_desc_len != 0)
  9081ad:	2822e7        	l32i	a8, a2, 0x39c
  9081b0:	7d8110        	beq	a8, a13, 9081c4 <ath_desc_free+0x34>
		ath_descdma_cleanup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  9081b3:	2c3ac0        	movi	a12, 0x3c0
  9081b6:	2b3a8c        	movi	a11, 0x38c
  9081b9:	ac2c      	add.n	a12, a2, a12
  9081bb:	0b2b08        	add	a11, a2, a11
  9081be:	022a02        	or	a10, a2, a2
  9081c1:	5bfe9c        	call8	907c34 <ath_descdma_cleanup>
	if (sc->sc_rxdma.dd_desc_len != 0)
  9081c4:	2822e1        	l32i	a8, a2, 0x384
  9081c7:	c88f      	beqz.n	a8, 9081da <ath_desc_free+0x4a>
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  9081c9:	2c3a54        	movi	a12, 0x354
  9081cc:	2b3a74        	movi	a11, 0x374
  9081cf:	c0d1      	movi.n	a13, 1
  9081d1:	ac2c      	add.n	a12, a2, a12
  9081d3:	ab2b      	add.n	a11, a2, a11
  9081d5:	da20      	mov.n	a10, a2
  9081d7:	5bfe97        	call8	907c34 <ath_descdma_cleanup>
  9081da:	d10f      	retw.n

009081dc <ath_descdma_setup$isra$22$constprop$28>:
static a_int32_t ath_descdma_setup(struct ath_softc_tgt *sc,
  9081dc:	6c1006        	entry	a1, 48
	dd->dd_name = name;
  9081df:	9530      	s32i.n	a5, a3, 0
	dd->dd_desc_len = descSize * nbuf * ndesc;
  9081e1:	851c      	l32i.n	a5, a1, 48
adf_os_dmamem_alloc(adf_os_device_t     osdev,
                    adf_os_size_t       size,
                    a_bool_t            coherent,
                    adf_os_dma_map_t   *dmap)
{
    return __adf_os_dmamem_alloc(osdev, size, coherent, dmap);
  9081e3:	8a20      	l32i.n	a10, a2, 0
  9081e5:	056b28        	mull	a11, a6, a5
  9081e8:	b83d      	addi.n	a13, a3, 8
  9081ea:	9b34      	s32i.n	a11, a3, 16
  9081ec:	c0c1      	movi.n	a12, 1
  9081ee:	580a8d        	call8	90ac24 <__adf_os_dmamem_alloc>
 * @return the (bus) address
 */
static inline adf_os_dma_addr_t
adf_os_dmamem_map2addr(adf_os_dma_map_t dmap)
{
    return(__adf_os_dmamem_map2addr(dmap));
  9081f1:	8532      	l32i.n	a5, a3, 8
	dd->dd_desc = adf_os_dmamem_alloc(sc->sc_dev,
  9081f3:	9a31      	s32i.n	a10, a3, 4
	dd->dd_desc_paddr = adf_os_dmamem_map2addr(dd->dd_desc_dmamap);
  9081f5:	8551      	l32i.n	a5, a5, 4
  9081f7:	9533      	s32i.n	a5, a3, 12
    return __adf_os_dmamem_alloc(osdev, size, coherent, dmap);
  9081f9:	d8a0      	mov.n	a8, a10
	if (dd->dd_desc == NULL) {
  9081fb:	64a06d        	beqz	a10, 90826c <ath_descdma_setup$isra$22$constprop$28+0x90>
	bsize = bfSize * nbuf;
  9081fe:	076c28        	mull	a12, a6, a7
    return __adf_os_mem_alloc(size);
  908201:	9812      	s32i.n	a8, a1, 8
  908203:	dac0      	mov.n	a10, a12
  908205:	9c10      	s32i.n	a12, a1, 0
  908207:	5bfe37        	call8	907ae4 <__adf_os_mem_alloc>
  90820a:	d5a0      	mov.n	a5, a10
	if (bf == NULL) {
  90820c:	8c10      	l32i.n	a12, a1, 0
  90820e:	64a05a        	beqz	a10, 90826c <ath_descdma_setup$isra$22$constprop$28+0x90>
    __adf_os_mem_set(buf, b, size);
  908211:	c0b0      	movi.n	a11, 0
  908213:	5bfe3e        	call8	907b0c <__adf_os_mem_set>
	asf_tailq_init(head);
  908216:	c090      	movi.n	a9, 0
	dd->dd_bufptr = bf;
  908218:	9535      	s32i.n	a5, a3, 20
	asf_tailq_init(head);
  90821a:	9940      	s32i.n	a9, a4, 0
  90821c:	9441      	s32i.n	a4, a4, 4
  90821e:	8812      	l32i.n	a8, a1, 8
  908220:	600041        	j	908265 <ath_descdma_setup$isra$22$constprop$28+0x89>
  908223:	00008a        	excw
    return (__adf_nbuf_dmamap_create(osdev, dmap));
  908226:	20db50        	l32ai	a0, a13, 0x140
  908229:	9812      	s32i.n	a8, a1, 8
  90822b:	9911      	s32i.n	a9, a1, 4
  90822d:	5bfa09        	call8	906a54 <__adf_nbuf_dmamap_create>
  908230:	dba0      	mov.n	a11, a10
		if (adf_nbuf_dmamap_create( sc->sc_dev, &bf->bf_dmamap) != A_STATUS_OK) {
  908232:	8812      	l32i.n	a8, a1, 8
  908234:	8911      	l32i.n	a9, a1, 4
  908236:	cfa2      	bnez.n	a10, 90826c <ath_descdma_setup$isra$22$constprop$28+0x90>
		bf->bf_desc = bf->bf_descarr = bf->bf_lastds = ds;
  908238:	985c      	s32i.n	a8, a5, 48
  90823a:	985e      	s32i.n	a8, a5, 56
  90823c:	985d      	s32i.n	a8, a5, 52
    __adf_nbuf_queue_init(head);
  90823e:	2a5c14        	addi	a10, a5, 20
  908241:	9812      	s32i.n	a8, a1, 8
  908243:	9911      	s32i.n	a9, a1, 4
  908245:	9b10      	s32i.n	a11, a1, 0
  908247:	5bfa96        	call8	906ca0 <__adf_nbuf_queue_init>
		asf_tailq_insert_tail(head, bf, bf_list);
  90824a:	8a41      	l32i.n	a10, a4, 4
  90824c:	8b10      	l32i.n	a11, a1, 0
  90824e:	9a5a      	s32i.n	a10, a5, 40
  908250:	9b59      	s32i.n	a11, a5, 36
  908252:	95a0      	s32i.n	a5, a10, 0
  908254:	2a5c24        	addi	a10, a5, 36
  908257:	9a41      	s32i.n	a10, a4, 4
	for (i = 0; i < nbuf; i++) {
  908259:	8911      	l32i.n	a9, a1, 4
		ds = (struct ath_desc *)ds_addr;
  90825b:	8812      	l32i.n	a8, a1, 8
  90825d:	8a1c      	l32i.n	a10, a1, 48
	for (i = 0; i < nbuf; i++) {
  90825f:	b199      	addi.n	a9, a9, 1
		ds = (struct ath_desc *)ds_addr;
  908261:	aa88      	add.n	a8, a8, a10
		bf = (struct ath_buf *)bf_addr;
  908263:	a755      	add.n	a5, a5, a7
	for (i = 0; i < nbuf; i++) {
  908265:	7692bc        	blt	a9, a6, 908225 <ath_descdma_setup$isra$22$constprop$28+0x49>
	return 0;
  908268:	c020      	movi.n	a2, 0
  90826a:	d10f      	retw.n
  90826c:	c1c8      	movi.n	a12, 24
  90826e:	da30      	mov.n	a10, a3
  908270:	c0b0      	movi.n	a11, 0
  908272:	5bfe26        	call8	907b0c <__adf_os_mem_set>
	adf_os_assert(0);
  908275:	1268b5        	l32r	a2, 8e254c <athos_indirection_table_install+0xfd8>
  908278:	1b69a8        	l32r	a11, 8e2918 <athos_indirection_table_install+0x13a4>
  90827b:	222212        	l32i	a2, a2, 72
  90827e:	1a6995        	l32r	a10, 8e28d4 <athos_indirection_table_install+0x1360>
  908281:	0b2000        	callx8	a2
  908284:	126919        	l32r	a2, 8e26e8 <athos_indirection_table_install+0x1174>
  908287:	0c0200        	memw
  90828a:	8220      	l32i.n	a2, a2, 0
	return error;
  90828c:	c021      	movi.n	a2, 1
}
  90828e:	d10f      	retw.n

00908290 <wmi_event>:
{
  908290:	6c1004        	entry	a1, 32
	netbuf = WMI_AllocEvent(handle, WMI_EVT_CLASS_CMD_EVENT,
  908293:	1668b5        	l32r	a6, 8e2568 <athos_indirection_table_install+0xff4>
  908296:	b45c      	addi.n	a12, a5, 4
  908298:	27628d        	l32i	a7, a6, 0x234
  90829b:	c0b0      	movi.n	a11, 0
  90829d:	da20      	mov.n	a10, a2
  90829f:	0b7000        	callx8	a7
  9082a2:	d7a0      	mov.n	a7, a10
	if (netbuf == ADF_NBUF_NULL) {
  9082a4:	65a00a        	bnez	a10, 9082b2 <wmi_event+0x22>
		adf_os_print("Buf null\n");
  9082a7:	226212        	l32i	a2, a6, 72
  9082aa:	1a69a9        	l32r	a10, 8e2950 <athos_indirection_table_install+0x13dc>
  9082ad:	0b2000        	callx8	a2
  9082b0:	d10f      	retw.n
	if (buffer != NULL && Length != 0 && Length < WMI_SVC_MAX_BUFFERED_EVENT_SIZE) {
  9082b2:	c090      	movi.n	a9, 0
  9082b4:	c081      	movi.n	a8, 1
  9082b6:	da90      	mov.n	a10, a9
  9082b8:	2b0a63        	movi	a11, 99
  9082bb:	058a39        	movnez	a10, a8, a5
  9082be:	75ba02        	bge	a11, a5, 9082c4 <wmi_event+0x34>
  9082c1:	099802        	or	a8, a9, a9
  9082c4:	78a010        	bnone	a10, a8, 9082d8 <wmi_event+0x48>
  9082c7:	c84d      	beqz.n	a4, 9082d8 <wmi_event+0x48>
    return __adf_nbuf_put_tail(buf, size);
  9082c9:	db50      	mov.n	a11, a5
  9082cb:	077a02        	or	a10, a7, a7
  9082ce:	5bfa43        	call8	906bdc <__adf_nbuf_put_tail>
    __adf_os_mem_copy(dst, src, size);
  9082d1:	dc50      	mov.n	a12, a5
  9082d3:	db40      	mov.n	a11, a4
  9082d5:	5bfe08        	call8	907af8 <__adf_os_mem_copy>
	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
  9082d8:	24628e        	l32i	a4, a6, 0x238
  9082db:	de50      	mov.n	a14, a5
  9082dd:	c0d0      	movi.n	a13, 0
  9082df:	030c4f        	extui	a12, a3, 0, 16
  9082e2:	db70      	mov.n	a11, a7
  9082e4:	da20      	mov.n	a10, a2
  9082e6:	0b4000        	callx8	a4
  9082e9:	d10f      	retw.n
	...

009082ec <ath_intr>:
{
  9082ec:	6c100a        	entry	a1, 80
	if (sc->sc_invalid)
  9082ef:	232249        	l32i	a3, a2, 0x124
  9082f2:	673006        	bgez	a3, 9082fc <ath_intr+0x10>
		return ADF_OS_IRQ_NONE;
  9082f5:	c030      	movi.n	a3, 0
  9082f7:	600641        	j	90893c <ath_intr+0x650>
  9082fa:	000025        	excw
	struct ath_hal *ah = sc->sc_ah;
  9082fd:	2d0584        	s16i	a13, a0, 0x108
  908300:	5b2342        	call8	8d100c <_bss_end+0x3be0fc>
	if (!ah->ah_isInterruptPending(ah))
  908303:	26da40        	movi	a6, 0xfffffd40
  908306:	0b3000        	callx8	a3
  908309:	64afe8        	beqz	a10, 9082f5 <ath_intr+0x9>
	ah->ah_getPendingInterrupts(ah, &status);
  90830c:	234227        	l32i	a3, a4, 156
  90830f:	bc1b      	addi.n	a11, a1, 12
  908311:	da40      	mov.n	a10, a4
  908313:	0b3000        	callx8	a3
	status &= sc->sc_imask;
  908316:	8613      	l32i.n	a6, a1, 12
  908318:	2322c4        	l32i	a3, a2, 0x310
  90831b:	063301        	and	a3, a3, a6
  90831e:	9313      	s32i.n	a3, a1, 12
	if (status & HAL_INT_FATAL) {
  908320:	713619        	bbci	a3, 1, 90833d <ath_intr+0x51>
		ah->ah_setInterrupts(ah, 0);
  908323:	234228        	l32i	a3, a4, 160
  908326:	c0b0      	movi.n	a11, 0
  908328:	da40      	mov.n	a10, a4
  90832a:	0b3000        	callx8	a3
 * @param[in] bh    bottom instance
 */
static inline void
adf_os_sched_bh(adf_os_handle_t hdl, adf_os_bh_t *bh)
{
    __adf_os_sched_bh(hdl, bh);
  90832d:	2a3a44        	movi	a10, 0x344
  908330:	aa2a      	add.n	a10, a2, a10
  908332:	5bfe6b        	call8	907ce0 <__adf_os_sched_bh$isra$6>
	return ADF_OS_IRQ_HANDLED;
  908335:	c031      	movi.n	a3, 1
  908337:	600601        	j	90893c <ath_intr+0x650>
  90833a:	000000        	ill
		if (status & HAL_INT_SWBA) {
  90833d:	7f3643        	bbci	a3, 15, 908384 <ath_intr+0x98>
			swbaEvt.tsf = ah->ah_getTsf64(ah);
  908340:	23421e        	l32i	a3, a4, 120
  908343:	da40      	mov.n	a10, a4
  908345:	0b3000        	callx8	a3
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  908348:	232d01        	addmi	a3, a2, 0x100
			swbaEvt.tsf = ah->ah_getTsf64(ah);
  90834b:	9b11      	s32i.n	a11, a1, 4
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  90834d:	864b      	l32i.n	a6, a4, 44
  90834f:	2b301c        	l8ui	a11, a3, 28
			swbaEvt.tsf = ah->ah_getTsf64(ah);
  908352:	9a10      	s32i.n	a10, a1, 0
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  908354:	da40      	mov.n	a10, a4
  908356:	0b6000        	callx8	a6
  908359:	2a1408        	s8i	a10, a1, 8
			sc->sc_swba_tsf = ah->ah_getTsf64(ah);
  90835c:	23421e        	l32i	a3, a4, 120
  90835f:	044a02        	or	a10, a4, a4
  908362:	0b3000        	callx8	a3
  908365:	232d16        	addmi	a3, a2, 0x1600
  908368:	9a3c      	s32i.n	a10, a3, 48
  90836a:	9b3d      	s32i.n	a11, a3, 52
			wmi_event(sc->tgt_wmi_handle,
  90836c:	8a23      	l32i.n	a10, a2, 12
  90836e:	1b69aa        	l32r	a11, 8e2a18 <athos_indirection_table_install+0x14a4>
  908371:	dc10      	mov.n	a12, a1
  908373:	c0d9      	movi.n	a13, 9
  908375:	5bffc6        	call8	908290 <wmi_event>
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  908378:	2b4acc        	movi	a11, 0x4cc
  90837b:	c0c1      	movi.n	a12, 1
  90837d:	ab2b      	add.n	a11, a2, a11
  90837f:	da20      	mov.n	a10, a2
  908381:	581943        	call8	90e890 <owltgt_tx_processq>
		if (status & HAL_INT_RXORN)
  908384:	8313      	l32i.n	a3, a1, 12
  908386:	7a3707        	bbci	a3, 26, 908391 <ath_intr+0xa5>
			sc->sc_int_stats.ast_rxorn++;
  908389:	26224d        	l32i	a6, a2, 0x134
  90838c:	b166      	addi.n	a6, a6, 1
  90838e:	26264d        	s32i	a6, a2, 0x134
		if (status & HAL_INT_RXEOL)
  908391:	7b3708        	bbci	a3, 27, 90839d <ath_intr+0xb1>
			sc->sc_int_stats.ast_rxeol++;
  908394:	26224e        	l32i	a6, a2, 0x138
  908397:	266c01        	addi	a6, a6, 1
  90839a:	26264e        	s32i	a6, a2, 0x138
		if (status & (HAL_INT_RX | HAL_INT_RXEOL | HAL_INT_RXORN)) {
  90839d:	c361      	movi.n	a6, 49
  90839f:	763802        	bany	a3, a6, 9083a5 <ath_intr+0xb9>
  9083a2:	600550        	j	9088f6 <ath_intr+0x60a>
			if (status & HAL_INT_RX)
  9083a5:	7f3707        	bbci	a3, 31, 9083b0 <ath_intr+0xc4>
				sc->sc_int_stats.ast_rx++;
  9083a8:	23224c        	l32i	a3, a2, 0x130
  9083ab:	b133      	addi.n	a3, a3, 1
  9083ad:	23264c        	s32i	a3, a2, 0x130
	struct ath_hal *ah = sc->sc_ah;
  9083b0:	855b      	l32i.n	a5, a5, 44
	ds = asf_tailq_first(&sc->sc_rxdesc);
  9083b2:	2322d9        	l32i	a3, a2, 0x364
	struct ath_hal *ah = sc->sc_ah;
  9083b5:	9515      	s32i.n	a5, a1, 20
	bf = asf_tailq_first(&sc->sc_rxbuf);
  9083b7:	2522d5        	l32i	a5, a2, 0x354
  9083ba:	6004ff        	j	9088bd <ath_intr+0x5d1>
		if (cnt == ath_numrxbufs - 1) {
  9083bd:	1a69ab        	l32r	a10, 8e2a6c <athos_indirection_table_install+0x14f8>
		++cnt;
  9083c0:	b177      	addi.n	a7, a7, 1
		if (cnt == ath_numrxbufs - 1) {
  9083c2:	89a0      	l32i.n	a9, a10, 0
  9083c4:	b099      	addi.n	a9, a9, -1
  9083c6:	797102        	beq	a7, a9, 9083cc <ath_intr+0xe0>
  9083c9:	600207        	j	9085d4 <ath_intr+0x2e8>
			adf_os_print("VERY LONG PACKET!!!!!\n");
  9083cc:	1868b5        	l32r	a8, 8e26a0 <athos_indirection_table_install+0x112c>
  9083cf:	1a69ac        	l32r	a10, 8e2a80 <athos_indirection_table_install+0x150c>
  9083d2:	258212        	l32i	a5, a8, 72
  9083d5:	0b5000        	callx8	a5
  9083d8:	6001f2        	j	9085ce <ath_intr+0x2e2>
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
  9083db:	253038        	l8ui	a5, a3, 56
  9083de:	2b3039        	l8ui	a11, a3, 57
  9083e1:	085510        	slli	a5, a5, 24
  9083e4:	00bb11        	slli	a11, a11, 16
  9083e7:	05bb02        	or	a11, a11, a5
  9083ea:	25303a        	l8ui	a5, a3, 58
    __adf_nbuf_unmap(osdev, bmap, dir);
  9083ed:	2a2246        	l32i	a10, a2, 0x118
  9083f0:	085511        	slli	a5, a5, 8
  9083f3:	0b5502        	or	a5, a5, a11
  9083f6:	2b303b        	l8ui	a11, a3, 59
  9083f9:	c0c1      	movi.n	a12, 1
  9083fb:	05bb02        	or	a11, a11, a5
  9083fe:	5bf99f        	call8	906a7c <__adf_nbuf_unmap>
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908401:	27304c        	l8ui	a7, a3, 76
  908404:	25304d        	l8ui	a5, a3, 77
  908407:	087710        	slli	a7, a7, 24
  90840a:	005511        	slli	a5, a5, 16
  90840d:	075702        	or	a7, a5, a7
  908410:	25304e        	l8ui	a5, a3, 78
  908413:	085511        	slli	a5, a5, 8
  908416:	075502        	or	a5, a5, a7
  908419:	27304f        	l8ui	a7, a3, 79
  90841c:	057502        	or	a5, a7, a5
  90841f:	9514      	s32i.n	a5, a1, 16
				if (ds_tmp == NULL) {
  908421:	655023        	bnez	a5, 908448 <ath_intr+0x15c>
					adf_os_print("ds_tmp is NULL\n");
  908424:	1a68b5        	l32r	a10, 8e26f8 <athos_indirection_table_install+0x1184>
  908427:	25a212        	l32i	a5, a10, 72
  90842a:	1a69ad        	l32r	a10, 8e2ae0 <athos_indirection_table_install+0x156c>
  90842d:	0b5000        	callx8	a5
					adf_os_assert(0);
  908430:	1868b5        	l32r	a8, 8e2704 <athos_indirection_table_install+0x1190>
  908433:	1b69ae        	l32r	a11, 8e2aec <athos_indirection_table_install+0x1578>
  908436:	258212        	l32i	a5, a8, 72
  908439:	1a6995        	l32r	a10, 8e2a90 <athos_indirection_table_install+0x151c>
  90843c:	0b5000        	callx8	a5
  90843f:	156919        	l32r	a5, 8e28a4 <athos_indirection_table_install+0x1330>
  908442:	0c0200        	memw
  908445:	255200        	l32i	a5, a5, 0
				BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ds_rmv->ds_nbuf);
  908448:	253034        	l8ui	a5, a3, 52
  90844b:	2c3035        	l8ui	a12, a3, 53
  90844e:	085510        	slli	a5, a5, 24
  908451:	00cc11        	slli	a12, a12, 16
  908454:	05cc02        	or	a12, a12, a5
  908457:	253036        	l8ui	a5, a3, 54
  90845a:	1a68b5        	l32r	a10, 8e2730 <athos_indirection_table_install+0x11bc>
  90845d:	085511        	slli	a5, a5, 8
  908460:	0c5502        	or	a5, a5, a12
  908463:	2c3037        	l8ui	a12, a3, 55
  908466:	27a29e        	l32i	a7, a10, 0x278
  908469:	8a20      	l32i.n	a10, a2, 0
  90846b:	05cc02        	or	a12, a12, a5
  90846e:	2b0a03        	movi	a11, 3
  908471:	0b7000        	callx8	a7
				ds_rmv->ds_nbuf = ADF_NBUF_NULL;
  908474:	c050      	movi.n	a5, 0
  908476:	253434        	s8i	a5, a3, 52
  908479:	253435        	s8i	a5, a3, 53
  90847c:	253436        	s8i	a5, a3, 54
  90847f:	253437        	s8i	a5, a3, 55
				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  908482:	db30      	mov.n	a11, a3
  908484:	da20      	mov.n	a10, a2
  908486:	5bfe48        	call8	907da8 <ath_rxdesc_init>
  908489:	2e304c        	l8ui	a14, a3, 76
  90848c:	2c304d        	l8ui	a12, a3, 77
  90848f:	27304e        	l8ui	a7, a3, 78
  908492:	2b3050        	l8ui	a11, a3, 80
  908495:	293051        	l8ui	a9, a3, 81
  908498:	253052        	l8ui	a5, a3, 82
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  90849b:	08ee10        	slli	a14, a14, 24
  90849e:	00cc11        	slli	a12, a12, 16
  9084a1:	2f304f        	l8ui	a15, a3, 79
  9084a4:	0ece02        	or	a14, a12, a14
  9084a7:	087711        	slli	a7, a7, 8
  9084aa:	08bb10        	slli	a11, a11, 24
  9084ad:	009911        	slli	a9, a9, 16
  9084b0:	0e7e02        	or	a14, a7, a14
  9084b3:	0b9902        	or	a9, a9, a11
  9084b6:	085511        	slli	a5, a5, 8
  9084b9:	2d3053        	l8ui	a13, a3, 83
  9084bc:	0eff02        	or	a15, a15, a14
  9084bf:	095502        	or	a5, a5, a9
				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  9084c2:	65a072        	bnez	a10, 908538 <ath_intr+0x24c>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  9084c5:	05dd02        	or	a13, a13, a5
  9084c8:	c9f8      	beqz.n	a15, 9084e4 <ath_intr+0x1f8>
  9084ca:	0d8557        	extui	a5, a13, 24, 8
  9084cd:	25f450        	s8i	a5, a15, 80
  9084d0:	0d0557        	extui	a5, a13, 16, 8
  9084d3:	25f451        	s8i	a5, a15, 81
  9084d6:	0d8547        	extui	a5, a13, 8, 8
  9084d9:	25f452        	s8i	a5, a15, 82
  9084dc:	2df453        	s8i	a13, a15, 83
  9084df:	600004        	j	9084e7 <ath_intr+0x1fb>
  9084e2:	00002d        	excw
  9084e5:	26da27        	movi	a6, 0xfffffd27
  9084e8:	305025        	excw
  9084eb:	305108        	excw
  9084ee:	771000        	bnone	a1, a7, 9084f2 <ath_intr+0x206>
  9084f1:	551107        	call4	94c910 <_etext+0x3d6ff>
  9084f4:	570225        	call4	8c8d8c <_bss_end+0x3b5e7c>
  9084f7:	305208        	excw
  9084fa:	551107        	call4	94c918 <_etext+0x3d707>
  9084fd:	550227        	call4	948d9c <_etext+0x39b8b>
  908500:	305305        	excw
  908503:	75029f        	blt	a0, a5, 9084a6 <ath_intr+0x1ba>
  908506:	50c050        	call0	938648 <_etext+0x29437>
					asf_tailq_insert_tail(&sc->sc_rxdesc, ds_rmv, ds_list);
  908509:	25344c        	s8i	a5, a3, 76
  90850c:	25344d        	s8i	a5, a3, 77
  90850f:	25344e        	s8i	a5, a3, 78
  908512:	25344f        	s8i	a5, a3, 79
  908515:	2522da        	l32i	a5, a2, 0x368
  908518:	058757        	extui	a7, a5, 24, 8
  90851b:	273450        	s8i	a7, a3, 80
  90851e:	050757        	extui	a7, a5, 16, 8
  908521:	273451        	s8i	a7, a3, 81
  908524:	058747        	extui	a7, a5, 8, 8
  908527:	253453        	s8i	a5, a3, 83
  90852a:	273452        	s8i	a7, a3, 82
  90852d:	9350      	s32i.n	a3, a5, 0
  90852f:	253c4c        	addi	a5, a3, 76
  908532:	2526da        	s32i	a5, a2, 0x368
  908535:	600071        	j	9085aa <ath_intr+0x2be>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  908538:	c9f9      	beqz.n	a15, 908555 <ath_intr+0x269>
  90853a:	05dd02        	or	a13, a13, a5
  90853d:	0d8557        	extui	a5, a13, 24, 8
  908540:	25f450        	s8i	a5, a15, 80
  908543:	0d0557        	extui	a5, a13, 16, 8
  908546:	25f451        	s8i	a5, a15, 81
  908549:	0d8547        	extui	a5, a13, 8, 8
  90854c:	25f452        	s8i	a5, a15, 82
  90854f:	2df453        	s8i	a13, a15, 83
  908552:	600005        	j	90855b <ath_intr+0x26f>
  908555:	05d502        	or	a5, a13, a5
  908558:	2526da        	s32i	a5, a2, 0x368
  90855b:	273050        	l8ui	a7, a3, 80
  90855e:	253051        	l8ui	a5, a3, 81
  908561:	087710        	slli	a7, a7, 24
  908564:	005511        	slli	a5, a5, 16
  908567:	075702        	or	a7, a5, a7
  90856a:	253052        	l8ui	a5, a3, 82
  90856d:	085511        	slli	a5, a5, 8
  908570:	075502        	or	a5, a5, a7
  908573:	273053        	l8ui	a7, a3, 83
  908576:	057502        	or	a5, a7, a5
  908579:	9f50      	s32i.n	a15, a5, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc_idle, ds_rmv, ds_list);
  90857b:	c050      	movi.n	a5, 0
  90857d:	25344c        	s8i	a5, a3, 76
  908580:	25344d        	s8i	a5, a3, 77
  908583:	25344e        	s8i	a5, a3, 78
  908586:	25344f        	s8i	a5, a3, 79
  908589:	2522d8        	l32i	a5, a2, 0x360
  90858c:	058757        	extui	a7, a5, 24, 8
  90858f:	273450        	s8i	a7, a3, 80
  908592:	050757        	extui	a7, a5, 16, 8
  908595:	273451        	s8i	a7, a3, 81
  908598:	058747        	extui	a7, a5, 8, 8
  90859b:	253453        	s8i	a5, a3, 83
  90859e:	273452        	s8i	a7, a3, 82
  9085a1:	235600        	s32i	a3, a5, 0
  9085a4:	253c4c        	addi	a5, a3, 76
  9085a7:	2526d8        	s32i	a5, a2, 0x360
				if (ds_rmv == ds_tail) {
  9085aa:	76391e        	bne	a3, a6, 9085cc <ath_intr+0x2e0>
			sc->sc_imask &= ~HAL_INT_RX;
  9085ad:	2322c4        	l32i	a3, a2, 0x310
  9085b0:	c7be      	movi.n	a11, -2
  9085b2:	03bb01        	and	a11, a11, a3
			ah->ah_setInterrupts(ah, sc->sc_imask);
  9085b5:	234228        	l32i	a3, a4, 160
			sc->sc_imask &= ~HAL_INT_RX;
  9085b8:	2b26c4        	s32i	a11, a2, 0x310
			ah->ah_setInterrupts(ah, sc->sc_imask);
  9085bb:	da40      	mov.n	a10, a4
  9085bd:	0b3000        	callx8	a3
  9085c0:	2a3a14        	movi	a10, 0x314
  9085c3:	aa2a      	add.n	a10, a2, a10
  9085c5:	5bfdc6        	call8	907ce0 <__adf_os_sched_bh$isra$6>
  9085c8:	60032a        	j	9088f6 <ath_intr+0x60a>
  9085cb:	008314        	srli	a3, a0, 8
			while (ds_tmp) {
  9085ce:	653e09        	bnez	a3, 9083db <ath_intr+0xef>
  9085d1:	63ffd8        	j	9085ad <ath_intr+0x2c1>
		if (ds->ds_link == 0) {
  9085d4:	2d6000        	l8ui	a13, a6, 0
  9085d7:	2b6001        	l8ui	a11, a6, 1
  9085da:	08dd10        	slli	a13, a13, 24
  9085dd:	00bb11        	slli	a11, a11, 16
  9085e0:	0dbb02        	or	a11, a11, a13
  9085e3:	2d6002        	l8ui	a13, a6, 2
  9085e6:	08dd11        	slli	a13, a13, 8
  9085e9:	0bdd02        	or	a13, a13, a11
  9085ec:	2b6003        	l8ui	a11, a6, 3
  9085ef:	0dbb02        	or	a11, a11, a13
  9085f2:	64bfb7        	beqz	a11, 9085ad <ath_intr+0x2c1>
		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
  9085f5:	895f      	l32i.n	a9, a5, 60
  9085f7:	7f9702        	bbci	a9, 31, 9085fd <ath_intr+0x311>
  9085fa:	6002f0        	j	9088ee <ath_intr+0x602>
		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  9085fd:	2a6048        	l8ui	a10, a6, 72
  908600:	2c6049        	l8ui	a12, a6, 73
  908603:	08aa10        	slli	a10, a10, 24
  908606:	00cc11        	slli	a12, a12, 16
  908609:	0acc02        	or	a12, a12, a10
  90860c:	2a604a        	l8ui	a10, a6, 74
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  90860f:	2922de        	l32i	a9, a2, 0x378
		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  908612:	8815      	l32i.n	a8, a1, 20
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  908614:	2d22e0        	l32i	a13, a2, 0x380
		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  908617:	08aa11        	slli	a10, a10, 8
  90861a:	0caa02        	or	a10, a10, a12
  90861d:	2c604b        	l8ui	a12, a6, 75
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  908620:	0d9d0c        	sub	a13, a9, a13
		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  908623:	298222        	l32i	a9, a8, 136
  908626:	abdd      	add.n	a13, a13, a11
  908628:	0acc02        	or	a12, a12, a10
  90862b:	2e5c40        	addi	a14, a5, 64
  90862e:	db60      	mov.n	a11, a6
  908630:	da80      	mov.n	a10, a8
  908632:	0b9000        	callx8	a9
		if (HAL_EINPROGRESS == retval) {
  908635:	c09f      	movi.n	a9, 15
  908637:	79a902        	bne	a10, a9, 90863d <ath_intr+0x351>
  90863a:	63ff6f        	j	9085ad <ath_intr+0x2c1>
		if (adf_nbuf_len(ds->ds_nbuf) == 0) {
  90863d:	296034        	l8ui	a9, a6, 52
  908640:	2a6035        	l8ui	a10, a6, 53
  908643:	089910        	slli	a9, a9, 24
  908646:	00aa11        	slli	a10, a10, 16
  908649:	09aa02        	or	a10, a10, a9
  90864c:	296036        	l8ui	a9, a6, 54
  90864f:	089911        	slli	a9, a9, 8
  908652:	0a9902        	or	a9, a9, a10
  908655:	2a6037        	l8ui	a10, a6, 55
    return (__adf_nbuf_len(buf));
  908658:	09aa02        	or	a10, a10, a9
  90865b:	5bf983        	call8	906c68 <__adf_nbuf_len>
  90865e:	cea2      	bnez.n	a10, 908684 <ath_intr+0x398>
			adf_nbuf_put_tail(ds->ds_nbuf, bf->bf_rx_status.rs_datalen);
  908660:	296034        	l8ui	a9, a6, 52
  908663:	2a6035        	l8ui	a10, a6, 53
  908666:	089910        	slli	a9, a9, 24
  908669:	00aa11        	slli	a10, a10, 16
  90866c:	09aa02        	or	a10, a10, a9
  90866f:	296036        	l8ui	a9, a6, 54
    return __adf_nbuf_put_tail(buf, size);
  908672:	2b5124        	l16ui	a11, a5, 72
  908675:	089911        	slli	a9, a9, 8
  908678:	0a9902        	or	a9, a9, a10
  90867b:	2a6037        	l8ui	a10, a6, 55
  90867e:	09aa02        	or	a10, a10, a9
  908681:	5bf956        	call8	906bdc <__adf_nbuf_put_tail>
		frame_len += bf->bf_rx_status.rs_datalen;
  908684:	295124        	l16ui	a9, a5, 72
  908687:	8a14      	l32i.n	a10, a1, 16
  908689:	a9a8      	add.n	a8, a10, a9
  90868b:	08084f        	extui	a8, a8, 0, 16
		if (bf->bf_rx_status.rs_more == 0) {
  90868e:	295056        	l8ui	a9, a5, 86
		frame_len += bf->bf_rx_status.rs_datalen;
  908691:	9814      	s32i.n	a8, a1, 16
		if (bf->bf_rx_status.rs_more == 0) {
  908693:	659239        	bnez	a9, 9088d0 <ath_intr+0x5e4>
    __adf_nbuf_queue_init(head);
  908696:	da10      	mov.n	a10, a1
  908698:	9918      	s32i.n	a9, a1, 32
  90869a:	5bf981        	call8	906ca0 <__adf_nbuf_queue_init>
			ds = asf_tailq_next(ds, ds_list);
  90869d:	2a604c        	l8ui	a10, a6, 76
  9086a0:	27604d        	l8ui	a7, a6, 77
  9086a3:	08aa10        	slli	a10, a10, 24
  9086a6:	007711        	slli	a7, a7, 16
  9086a9:	0a7a02        	or	a10, a7, a10
  9086ac:	27604e        	l8ui	a7, a6, 78
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  9086af:	8918      	l32i.n	a9, a1, 32
			ds = asf_tailq_next(ds, ds_list);
  9086b1:	087711        	slli	a7, a7, 8
  9086b4:	0a7702        	or	a7, a7, a10
  9086b7:	2a604f        	l8ui	a10, a6, 79
  9086ba:	07aa02        	or	a10, a10, a7
  9086bd:	9a17      	s32i.n	a10, a1, 28
  9086bf:	600207        	j	9088ca <ath_intr+0x5de>
  9086c2:	000000        	ill
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
  9086c5:	273038        	l8ui	a7, a3, 56
  9086c8:	2b3039        	l8ui	a11, a3, 57
  9086cb:	087710        	slli	a7, a7, 24
  9086ce:	00bb11        	slli	a11, a11, 16
  9086d1:	07bb02        	or	a11, a11, a7
  9086d4:	27303a        	l8ui	a7, a3, 58
    __adf_nbuf_unmap(osdev, bmap, dir);
  9086d7:	2a2246        	l32i	a10, a2, 0x118
  9086da:	087711        	slli	a7, a7, 8
  9086dd:	0b7702        	or	a7, a7, a11
  9086e0:	2b303b        	l8ui	a11, a3, 59
  9086e3:	c0c1      	movi.n	a12, 1
  9086e5:	07bb02        	or	a11, a11, a7
  9086e8:	9918      	s32i.n	a9, a1, 32
  9086ea:	5bf8e4        	call8	906a7c <__adf_nbuf_unmap>
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
  9086ed:	2b3035        	l8ui	a11, a3, 53
  9086f0:	273034        	l8ui	a7, a3, 52
  9086f3:	00bb11        	slli	a11, a11, 16
  9086f6:	087710        	slli	a7, a7, 24
  9086f9:	07bb02        	or	a11, a11, a7
  9086fc:	273036        	l8ui	a7, a3, 54
    __adf_nbuf_queue_add(head, buf);
  9086ff:	da10      	mov.n	a10, a1
  908701:	087711        	slli	a7, a7, 8
  908704:	0b7702        	or	a7, a7, a11
  908707:	2b3037        	l8ui	a11, a3, 55
  90870a:	07bb02        	or	a11, a11, a7
  90870d:	5bf8bf        	call8	906a0c <__adf_nbuf_queue_add>
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908710:	2a304c        	l8ui	a10, a3, 76
  908713:	27304d        	l8ui	a7, a3, 77
  908716:	08aa10        	slli	a10, a10, 24
  908719:	007711        	slli	a7, a7, 16
  90871c:	0a7a02        	or	a10, a7, a10
  90871f:	27304e        	l8ui	a7, a3, 78
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  908722:	8918      	l32i.n	a9, a1, 32
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908724:	087711        	slli	a7, a7, 8
  908727:	0a7702        	or	a7, a7, a10
  90872a:	2a304f        	l8ui	a10, a3, 79
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  90872d:	293434        	s8i	a9, a3, 52
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908730:	07aa02        	or	a10, a10, a7
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  908733:	293435        	s8i	a9, a3, 53
  908736:	293436        	s8i	a9, a3, 54
  908739:	293437        	s8i	a9, a3, 55
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  90873c:	9a16      	s32i.n	a10, a1, 24
				if (ds_tmp == NULL) {
  90873e:	cdaa      	bnez.n	a10, 90875c <ath_intr+0x470>
					adf_os_assert(0);
  908740:	1768b5        	l32r	a7, 8e2a14 <athos_indirection_table_install+0x14a0>
  908743:	1b69ae        	l32r	a11, 8e2dfc <athos_indirection_table_install+0x1888>
  908746:	277212        	l32i	a7, a7, 72
  908749:	1a6995        	l32r	a10, 8e2da0 <athos_indirection_table_install+0x182c>
  90874c:	9918      	s32i.n	a9, a1, 32
  90874e:	0b7000        	callx8	a7
  908751:	176919        	l32r	a7, 8e2bb8 <athos_indirection_table_install+0x1644>
  908754:	8918      	l32i.n	a9, a1, 32
  908756:	0c0200        	memw
  908759:	277200        	l32i	a7, a7, 0
				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  90875c:	db30      	mov.n	a11, a3
  90875e:	da20      	mov.n	a10, a2
  908760:	9918      	s32i.n	a9, a1, 32
  908762:	5bfd91        	call8	907da8 <ath_rxdesc_init>
  908765:	2e304c        	l8ui	a14, a3, 76
  908768:	2d304d        	l8ui	a13, a3, 77
  90876b:	2c304e        	l8ui	a12, a3, 78
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  90876e:	00dd11        	slli	a13, a13, 16
  908771:	08ee10        	slli	a14, a14, 24
  908774:	0ede02        	or	a14, a13, a14
  908777:	2b3050        	l8ui	a11, a3, 80
  90877a:	273051        	l8ui	a7, a3, 81
  90877d:	08cc11        	slli	a12, a12, 8
  908780:	2d304f        	l8ui	a13, a3, 79
  908783:	0ece02        	or	a14, a12, a14
				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  908786:	8918      	l32i.n	a9, a1, 32
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  908788:	0ede02        	or	a14, a13, a14
  90878b:	08bb10        	slli	a11, a11, 24
  90878e:	007711        	slli	a7, a7, 16
				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  908791:	65a07d        	bnez	a10, 908812 <ath_intr+0x526>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  908794:	0b7b02        	or	a11, a7, a11
  908797:	273052        	l8ui	a7, a3, 82
  90879a:	087711        	slli	a7, a7, 8
  90879d:	0b7702        	or	a7, a7, a11
  9087a0:	2b3053        	l8ui	a11, a3, 83
  9087a3:	07b702        	or	a7, a11, a7
  9087a6:	c9e6      	beqz.n	a14, 9087c0 <ath_intr+0x4d4>
  9087a8:	078a57        	extui	a10, a7, 24, 8
  9087ab:	2ae450        	s8i	a10, a14, 80
  9087ae:	070a57        	extui	a10, a7, 16, 8
  9087b1:	2ae451        	s8i	a10, a14, 81
  9087b4:	078a47        	extui	a10, a7, 8, 8
  9087b7:	2ae452        	s8i	a10, a14, 82
  9087ba:	27e453        	s8i	a7, a14, 83
  9087bd:	600002        	j	9087c3 <ath_intr+0x4d7>
  9087c0:	2726da        	s32i	a7, a2, 0x368
  9087c3:	2a3050        	l8ui	a10, a3, 80
  9087c6:	273051        	l8ui	a7, a3, 81
  9087c9:	08aa10        	slli	a10, a10, 24
  9087cc:	007711        	slli	a7, a7, 16
  9087cf:	0a7a02        	or	a10, a7, a10
  9087d2:	273052        	l8ui	a7, a3, 82
  9087d5:	087711        	slli	a7, a7, 8
  9087d8:	0a7702        	or	a7, a7, a10
  9087db:	2a3053        	l8ui	a10, a3, 83
  9087de:	07a702        	or	a7, a10, a7
  9087e1:	9e70      	s32i.n	a14, a7, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc, ds_rmv, ds_list);
  9087e3:	2722da        	l32i	a7, a2, 0x368
  9087e6:	29344c        	s8i	a9, a3, 76
  9087e9:	078a57        	extui	a10, a7, 24, 8
  9087ec:	2a3450        	s8i	a10, a3, 80
  9087ef:	070a57        	extui	a10, a7, 16, 8
  9087f2:	2a3451        	s8i	a10, a3, 81
  9087f5:	078a47        	extui	a10, a7, 8, 8
  9087f8:	273453        	s8i	a7, a3, 83
  9087fb:	29344d        	s8i	a9, a3, 77
  9087fe:	29344e        	s8i	a9, a3, 78
  908801:	29344f        	s8i	a9, a3, 79
  908804:	2a3452        	s8i	a10, a3, 82
  908807:	9370      	s32i.n	a3, a7, 0
  908809:	273c4c        	addi	a7, a3, 76
  90880c:	2726da        	s32i	a7, a2, 0x368
  90880f:	60008e        	j	9088a1 <ath_intr+0x5b5>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  908812:	caea      	beqz.n	a14, 908840 <ath_intr+0x554>
  908814:	0b7b02        	or	a11, a7, a11
  908817:	273052        	l8ui	a7, a3, 82
  90881a:	087711        	slli	a7, a7, 8
  90881d:	0b7702        	or	a7, a7, a11
  908820:	2b3053        	l8ui	a11, a3, 83
  908823:	07b702        	or	a7, a11, a7
  908826:	078a57        	extui	a10, a7, 24, 8
  908829:	2ae450        	s8i	a10, a14, 80
  90882c:	070a57        	extui	a10, a7, 16, 8
  90882f:	2ae451        	s8i	a10, a14, 81
  908832:	078a47        	extui	a10, a7, 8, 8
  908835:	2ae452        	s8i	a10, a14, 82
  908838:	27e453        	s8i	a7, a14, 83
  90883b:	600016        	j	908855 <ath_intr+0x569>
  90883e:	00000b        	addx8	a0, a0, a0
  908841:	77022b        	blt	a0, a7, 908870 <ath_intr+0x584>
  908844:	305208        	excw
  908847:	bb11      	addi.n	a1, a1, 11
  908849:	07b702        	or	a7, a11, a7
  90884c:	2b3053        	l8ui	a11, a3, 83
  90884f:	07b702        	or	a7, a11, a7
  908852:	2726da        	s32i	a7, a2, 0x368
  908855:	2a3050        	l8ui	a10, a3, 80
  908858:	273051        	l8ui	a7, a3, 81
  90885b:	08aa10        	slli	a10, a10, 24
  90885e:	007711        	slli	a7, a7, 16
  908861:	0a7a02        	or	a10, a7, a10
  908864:	273052        	l8ui	a7, a3, 82
  908867:	087711        	slli	a7, a7, 8
  90886a:	0a7702        	or	a7, a7, a10
  90886d:	2a3053        	l8ui	a10, a3, 83
  908870:	07a702        	or	a7, a10, a7
  908873:	9e70      	s32i.n	a14, a7, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc_idle, ds_rmv, ds_list);
  908875:	2722d8        	l32i	a7, a2, 0x360
  908878:	29344c        	s8i	a9, a3, 76
  90887b:	078a57        	extui	a10, a7, 24, 8
  90887e:	2a3450        	s8i	a10, a3, 80
  908881:	070a57        	extui	a10, a7, 16, 8
  908884:	2a3451        	s8i	a10, a3, 81
  908887:	078a47        	extui	a10, a7, 8, 8
  90888a:	273453        	s8i	a7, a3, 83
  90888d:	29344d        	s8i	a9, a3, 77
  908890:	29344e        	s8i	a9, a3, 78
  908893:	29344f        	s8i	a9, a3, 79
  908896:	2a3452        	s8i	a10, a3, 82
  908899:	9370      	s32i.n	a3, a7, 0
  90889b:	273c4c        	addi	a7, a3, 76
  90889e:	2726d8        	s32i	a7, a2, 0x360
				if (ds_rmv == ds_tail) {
  9088a1:	736923        	bne	a6, a3, 9088c8 <ath_intr+0x5dc>
			bf->bf_rx_status.rs_datalen = frame_len;
  9088a4:	8314      	l32i.n	a3, a1, 16
    return __adf_nbuf_create_frm_frag(head);
  9088a6:	da10      	mov.n	a10, a1
  9088a8:	235524        	s16i	a3, a5, 72
  9088ab:	5bf888        	call8	906acc <__adf_nbuf_create_frm_frag>
			bf->bf_status |= ATH_BUFSTATUS_DONE;
  9088ae:	835f      	l32i.n	a3, a5, 60
  9088b0:	c061      	movi.n	a6, 1
  9088b2:	063302        	or	a3, a3, a6
  9088b5:	935f      	s32i.n	a3, a5, 60
			bf->bf_skb = adf_nbuf_create_frm_frag(&nbuf_head);
  9088b7:	9a58      	s32i.n	a10, a5, 32
			ds_head = asf_tailq_next(ds_tail, ds_list);
  9088b9:	8317      	l32i.n	a3, a1, 28
			bf = (struct ath_rx_buf *)asf_tailq_next(bf, bf_list);
  9088bb:	8559      	l32i.n	a5, a5, 36
			frame_len = 0;
  9088bd:	c080      	movi.n	a8, 0
			ds = asf_tailq_next(ds, ds_list);
  9088bf:	d630      	mov.n	a6, a3
			frame_len = 0;
  9088c1:	9814      	s32i.n	a8, a1, 16
			cnt = 0;
  9088c3:	d780      	mov.n	a7, a8
  9088c5:	600025        	j	9088ee <ath_intr+0x602>
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  9088c8:	8316      	l32i.n	a3, a1, 24
			while (ds_tmp) {
  9088ca:	653df7        	bnez	a3, 9086c5 <ath_intr+0x3d9>
  9088cd:	63ffd3        	j	9088a4 <ath_intr+0x5b8>
			ds = asf_tailq_next(ds, ds_list);
  9088d0:	2a604c        	l8ui	a10, a6, 76
  9088d3:	29604d        	l8ui	a9, a6, 77
  9088d6:	08aa10        	slli	a10, a10, 24
  9088d9:	009911        	slli	a9, a9, 16
  9088dc:	0a9a02        	or	a10, a9, a10
  9088df:	29604e        	l8ui	a9, a6, 78
  9088e2:	28604f        	l8ui	a8, a6, 79
  9088e5:	089911        	slli	a9, a9, 8
  9088e8:	0a9902        	or	a9, a9, a10
  9088eb:	098602        	or	a6, a8, a9
	while(ds) {
  9088ee:	656acb        	bnez	a6, 9083bd <ath_intr+0xd1>
  9088f1:	63fcb8        	j	9085ad <ath_intr+0x2c1>
  9088f4:	000083        	excw
		if (status & HAL_INT_TXURN) {
  9088f7:	137437        	l32r	a3, 8e59d4 <vdesc_module_install+0x9c4>
  9088fa:	102322        	l32r	a0, 8d1584 <_bss_end+0x3be674>
			sc->sc_int_stats.ast_txurn++;
  9088fd:	4fc0b1        	excw
  908900:	b133      	addi.n	a3, a3, 1
  908902:	23264f        	s32i	a3, a2, 0x13c
			ah->ah_updateTxTrigLevel(ah, AH_TRUE);
  908905:	8347      	l32i.n	a3, a4, 28
  908907:	da40      	mov.n	a10, a4
  908909:	0b3000        	callx8	a3
  90890c:	2a5a1c        	movi	a10, 0x51c
  90890f:	aa2a      	add.n	a10, a2, a10
  908911:	5bfcf3        	call8	907ce0 <__adf_os_sched_bh$isra$6>
		if (status & HAL_INT_BMISS) {
  908914:	8313      	l32i.n	a3, a1, 12
  908916:	7d3607        	bbci	a3, 13, 908921 <ath_intr+0x635>
  908919:	2a3a24        	movi	a10, 0x324
  90891c:	aa2a      	add.n	a10, a2, a10
  90891e:	5bfcf0        	call8	907ce0 <__adf_os_sched_bh$isra$6>
		if (status & HAL_INT_GTT)
  908921:	8413      	l32i.n	a4, a1, 12
  908923:	724607        	bbci	a4, 2, 90892e <ath_intr+0x642>
			sc->sc_int_stats.ast_txto++;
  908926:	232250        	l32i	a3, a2, 0x140
  908929:	b133      	addi.n	a3, a3, 1
  90892b:	232650        	s32i	a3, a2, 0x140
	return ADF_OS_IRQ_HANDLED;
  90892e:	c031      	movi.n	a3, 1
		if (status & HAL_INT_CST)
  908930:	764608        	bbci	a4, 6, 90893c <ath_intr+0x650>
			sc->sc_int_stats.ast_cst++;
  908933:	242251        	l32i	a4, a2, 0x144
  908936:	034408        	add	a4, a4, a3
  908939:	242651        	s32i	a4, a2, 0x144
}
  90893c:	d230      	mov.n	a2, a3
  90893e:	d10f      	retw.n

00908940 <ath_fatal_tasklet>:
{
  908940:	6c1004        	entry	a1, 32
	wmi_event(sc->tgt_wmi_handle, WMI_FATAL_EVENTID, NULL, 0);
  908943:	c0d0      	movi.n	a13, 0
  908945:	1b69af        	l32r	a11, 8e3004 <athos_indirection_table_install+0x1a90>
  908948:	8a23      	l32i.n	a10, a2, 12
  90894a:	0ddc02        	or	a12, a13, a13
  90894d:	5bfe50        	call8	908290 <wmi_event>
  908950:	d10f      	retw.n
	...

00908954 <ath_bmiss_tasklet>:
{
  908954:	6c1004        	entry	a1, 32
	wmi_event(sc->tgt_wmi_handle, WMI_BMISS_EVENTID, NULL, 0);
  908957:	c0d0      	movi.n	a13, 0
  908959:	1b69b0        	l32r	a11, 8e301c <athos_indirection_table_install+0x1aa8>
  90895c:	8a23      	l32i.n	a10, a2, 12
  90895e:	0ddc02        	or	a12, a13, a13
  908961:	5bfe4b        	call8	908290 <wmi_event>
  908964:	d10f      	retw.n
	...

00908968 <wmi_cmd_rsp>:
{
  908968:	6c1006        	entry	a1, 48
	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY,
  90896b:	1768b5        	l32r	a7, 8e2c40 <athos_indirection_table_install+0x16cc>
  90896e:	b46c      	addi.n	a12, a6, 4
  908970:	28728d        	l32i	a8, a7, 0x234
  908973:	2b0a01        	movi	a11, 1
  908976:	022a02        	or	a10, a2, a2
  908979:	0b8000        	callx8	a8
{
  90897c:	04044f        	extui	a4, a4, 0, 16
	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY,
  90897f:	d8a0      	mov.n	a8, a10
	if (netbuf == ADF_NBUF_NULL) {
  908981:	65a015        	bnez	a10, 90899a <wmi_cmd_rsp+0x32>
		adf_os_assert(0);
  908984:	227212        	l32i	a2, a7, 72
  908987:	1b69b1        	l32r	a11, 8e304c <athos_indirection_table_install+0x1ad8>
  90898a:	1a6995        	l32r	a10, 8e2fe0 <athos_indirection_table_install+0x1a6c>
  90898d:	0b2000        	callx8	a2
  908990:	126919        	l32r	a2, 8e2df4 <athos_indirection_table_install+0x1880>
  908993:	0c0200        	memw
  908996:	8220      	l32i.n	a2, a2, 0
  908998:	d10f      	retw.n
	if (Length != 0 && buffer != NULL) {
  90899a:	c962      	beqz.n	a6, 9089b0 <wmi_cmd_rsp+0x48>
  90899c:	c950      	beqz.n	a5, 9089b0 <wmi_cmd_rsp+0x48>
    return __adf_nbuf_put_tail(buf, size);
  90899e:	db60      	mov.n	a11, a6
  9089a0:	2a1600        	s32i	a10, a1, 0
  9089a3:	5bf88e        	call8	906bdc <__adf_nbuf_put_tail>
  9089a6:	dc60      	mov.n	a12, a6
  9089a8:	055b02        	or	a11, a5, a5
  9089ab:	5bfc53        	call8	907af8 <__adf_os_mem_copy>
  9089ae:	8810      	l32i.n	a8, a1, 0
	WMI_SendEvent(pContext, netbuf, cmd_id, SeqNo, Length);
  9089b0:	25728e        	l32i	a5, a7, 0x238
  9089b3:	de60      	mov.n	a14, a6
  9089b5:	dd40      	mov.n	a13, a4
  9089b7:	030c4f        	extui	a12, a3, 0, 16
  9089ba:	db80      	mov.n	a11, a8
  9089bc:	da20      	mov.n	a10, a2
  9089be:	0b5000        	callx8	a5
  9089c1:	d10f      	retw.n
	...

009089c4 <ath_hal_reg_rmw_tgt>:
{
  9089c4:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  9089c7:	272d05        	addmi	a7, a2, 0x500
  9089ca:	887b      	l32i.n	a8, a7, 44
{
  9089cc:	03034f        	extui	a3, a3, 0, 16
  9089cf:	04044f        	extui	a4, a4, 0, 16
	struct ath_hal *ah = sc->sc_ah;
  9089d2:	9810      	s32i.n	a8, a1, 0
	for (i = 0; i < datalen;
  9089d4:	d750      	mov.n	a7, a5
  9089d6:	60003f        	j	908a19 <ath_hal_reg_rmw_tgt+0x55>
		val = ath_reg_read_filter(ah, buf->reg);
  9089d9:	8b70      	l32i.n	a11, a7, 0
  9089db:	8a10      	l32i.n	a10, a1, 0
  9089dd:	5bfd83        	call8	907fec <ath_reg_read_filter>
		val &= ~buf->clr;
  9089e0:	8872      	l32i.n	a8, a7, 8
  9089e2:	c79f      	movi.n	a9, -1
  9089e4:	089803        	xor	a8, a9, a8
  9089e7:	0a8a01        	and	a10, a8, a10
		val |= buf->set;
  9089ea:	8871      	l32i.n	a8, a7, 4
	if(reg > 0xffff) {
  9089ec:	1b69a6        	l32r	a11, 8e3084 <athos_indirection_table_install+0x1b10>
		val |= buf->set;
  9089ef:	08aa02        	or	a10, a10, a8
		ath_hal_reg_write_filter(ah, buf->reg, val);
  9089f2:	8870      	l32i.n	a8, a7, 0
	if(reg > 0xffff) {
  9089f4:	78bb04        	bgeu	a11, a8, 9089fc <ath_hal_reg_rmw_tgt+0x38>
  9089f7:	600017        	j	908a12 <ath_hal_reg_rmw_tgt+0x4e>
  9089fa:	00001b        	sra	a0, a0
		if(reg == 0x7014)
  9089fd:	69b27b        	bnei	a11, 2, 908a7c <ath_rc_mask_tgt+0x4c>
  908a00:	890a      	l32i.n	a9, a0, 40
			ath_pll_reset_ones(ah);
  908a02:	9812      	s32i.n	a8, a1, 8
  908a04:	9a11      	s32i.n	a10, a1, 4
  908a06:	5bfd4e        	call8	907f40 <ath_pll_reset_ones$isra$12>
  908a09:	8a11      	l32i.n	a10, a1, 4
  908a0b:	8812      	l32i.n	a8, a1, 8
		iowrite32_mac(reg, val);
  908a0d:	1b69a1        	l32r	a11, 8e3094 <athos_indirection_table_install+0x1b20>
  908a10:	ab88      	add.n	a8, a8, a11
	*(volatile uint32_t *) addr = b;
  908a12:	0c0200        	memw
  908a15:	9a80      	s32i.n	a10, a8, 0
  908a17:	bc77      	addi.n	a7, a7, 12
	for (i = 0; i < datalen;
  908a19:	05780c        	sub	a8, a7, a5
  908a1c:	7682b9        	blt	a8, a6, 9089d9 <ath_hal_reg_rmw_tgt+0x15>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908a1f:	c0e0      	movi.n	a14, 0
  908a21:	8a23      	l32i.n	a10, a2, 12
  908a23:	dde0      	mov.n	a13, a14
  908a25:	dc40      	mov.n	a12, a4
  908a27:	db30      	mov.n	a11, a3
  908a29:	5bffcf        	call8	908968 <wmi_cmd_rsp>
  908a2c:	d10f      	retw.n
	...

00908a30 <ath_rc_mask_tgt>:
{
  908a30:	6c1004        	entry	a1, 32
	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  908a33:	2a5002        	l8ui	a10, a5, 2
	idx = wmi_data->vap_index;
  908a36:	2f5000        	l8ui	a15, a5, 0
	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  908a39:	08ae10        	slli	a14, a10, 24
  908a3c:	2a5003        	l8ui	a10, a5, 3
	band = wmi_data->band;
  908a3f:	2d5001        	l8ui	a13, a5, 1
	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  908a42:	00aa11        	slli	a10, a10, 16
  908a45:	0eaa02        	or	a10, a10, a14
  908a48:	2e5004        	l8ui	a14, a5, 4
  908a4b:	0cf811        	slli	a8, a15, 4
  908a4e:	08ee11        	slli	a14, a14, 8
  908a51:	0aea02        	or	a10, a14, a10
  908a54:	2e5005        	l8ui	a14, a5, 5
  908a57:	af89      	add.n	a9, a8, a15
  908a59:	0aee02        	or	a14, a14, a10
{
  908a5c:	030b4f        	extui	a11, a3, 0, 16
	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  908a5f:	ad9a      	add.n	a10, a9, a13
  908a61:	235a70        	movi	a3, 0x570
  908a64:	a3aa      	add.n	a10, a10, a3
  908a66:	0eaa11        	slli	a10, a10, 2
  908a69:	aa2a      	add.n	a10, a2, a10
  908a6b:	9ea4      	s32i.n	a14, a10, 16
{
  908a6d:	040c4f        	extui	a12, a4, 0, 16
	if (sc->sc_vap[idx].av_rate_mask[band]) {
  908a70:	caea      	beqz.n	a14, 908a9e <ath_rc_mask_tgt+0x6e>
  908a72:	c050      	movi.n	a5, 0
			if ((1 << i) & sc->sc_vap[idx].av_rate_mask[band]) {
  908a74:	c0a1      	movi.n	a10, 1
  908a76:	290a20        	movi	a9, 32
  908a79:	6d981e        	loop	a9, 908a9b <ath_rc_mask_tgt+0x6b>
  908a7c:	005104        	ssl	a5
  908a7f:	00a31a        	sll	a3, a10
  908a82:	7e3013        	bnone	a3, a14, 908a99 <ath_rc_mask_tgt+0x69>
				sc->sc_vap[idx].av_minrateidx[band] = i;
  908a85:	af89      	add.n	a9, a8, a15
  908a87:	0e9911        	slli	a9, a9, 2
  908a8a:	a929      	add.n	a9, a2, a9
  908a8c:	1869b3        	l32r	a8, 8e3158 <athos_indirection_table_install+0x1be4>
  908a8f:	ad99      	add.n	a9, a9, a13
  908a91:	a899      	add.n	a9, a9, a8
  908a93:	259400        	s8i	a5, a9, 0
				break;
  908a96:	600013        	j	908aad <ath_rc_mask_tgt+0x7d>
		for (i = 0; i < RATE_TABLE_SIZE; i++) {
  908a99:	b155      	addi.n	a5, a5, 1
  908a9b:	60000e        	j	908aad <ath_rc_mask_tgt+0x7d>
		sc->sc_vap[idx].av_minrateidx[band] = 0;
  908a9e:	0e9911        	slli	a9, a9, 2
  908aa1:	a929      	add.n	a9, a2, a9
  908aa3:	1569b3        	l32r	a5, 8e3170 <athos_indirection_table_install+0x1bfc>
  908aa6:	ad99      	add.n	a9, a9, a13
  908aa8:	a599      	add.n	a9, a9, a5
  908aaa:	2e9400        	s8i	a14, a9, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908aad:	c0e0      	movi.n	a14, 0
  908aaf:	8a23      	l32i.n	a10, a2, 12
  908ab1:	dde0      	mov.n	a13, a14
  908ab3:	5bffad        	call8	908968 <wmi_cmd_rsp>
  908ab6:	d10f      	retw.n

00908ab8 <ath_rx_stats_tgt>:
{
  908ab8:	6c1006        	entry	a1, 48
	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
  908abb:	28227c        	l32i	a8, a2, 0x1f0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908abe:	8a23      	l32i.n	a10, a2, 12
	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
  908ac0:	9810      	s32i.n	a8, a1, 0
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
  908ac2:	28227d        	l32i	a8, a2, 0x1f4
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908ac5:	c0ec      	movi.n	a14, 12
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
  908ac7:	9811      	s32i.n	a8, a1, 4
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;
  908ac9:	28227e        	l32i	a8, a2, 0x1f8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908acc:	dd10      	mov.n	a13, a1
  908ace:	040c4f        	extui	a12, a4, 0, 16
  908ad1:	030b4f        	extui	a11, a3, 0, 16
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;
  908ad4:	9812      	s32i.n	a8, a1, 8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908ad6:	5bffa4        	call8	908968 <wmi_cmd_rsp>
  908ad9:	d10f      	retw.n
	...

00908adc <ath_tx_stats_tgt>:
{
  908adc:	6c100a        	entry	a1, 80
	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
  908adf:	282252        	l32i	a8, a2, 0x148
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908ae2:	8a23      	l32i.n	a10, a2, 12
	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
  908ae4:	9810      	s32i.n	a8, a1, 0
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
  908ae6:	282253        	l32i	a8, a2, 0x14c
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908ae9:	c2e4      	movi.n	a14, 36
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
  908aeb:	9811      	s32i.n	a8, a1, 4
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
  908aed:	282254        	l32i	a8, a2, 0x150
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908af0:	dd10      	mov.n	a13, a1
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
  908af2:	9812      	s32i.n	a8, a1, 8
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
  908af4:	282255        	l32i	a8, a2, 0x154
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908af7:	040c4f        	extui	a12, a4, 0, 16
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
  908afa:	9813      	s32i.n	a8, a1, 12
	stats.ast_tx_shortretry = sc->sc_tx_stats.ast_tx_shortretry;
  908afc:	282256        	l32i	a8, a2, 0x158
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908aff:	030b4f        	extui	a11, a3, 0, 16
	stats.ast_tx_shortretry = sc->sc_tx_stats.ast_tx_shortretry;
  908b02:	9814      	s32i.n	a8, a1, 16
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
  908b04:	282257        	l32i	a8, a2, 0x15c
  908b07:	9815      	s32i.n	a8, a1, 20
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
  908b09:	28225c        	l32i	a8, a2, 0x170
  908b0c:	9816      	s32i.n	a8, a1, 24
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
  908b0e:	282276        	l32i	a8, a2, 0x1d8
  908b11:	9817      	s32i.n	a8, a1, 28
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;
  908b13:	282277        	l32i	a8, a2, 0x1dc
  908b16:	281608        	s32i	a8, a1, 32
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908b19:	5bff93        	call8	908968 <wmi_cmd_rsp>
  908b1c:	d10f      	retw.n
	...

00908b20 <ath_int_stats_tgt>:
{
  908b20:	6c1008        	entry	a1, 64
	stats.ast_rx = sc->sc_int_stats.ast_rx;
  908b23:	28224c        	l32i	a8, a2, 0x130
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908b26:	8a23      	l32i.n	a10, a2, 12
	stats.ast_rx = sc->sc_int_stats.ast_rx;
  908b28:	9810      	s32i.n	a8, a1, 0
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
  908b2a:	28224d        	l32i	a8, a2, 0x134
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908b2d:	c1e8      	movi.n	a14, 24
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
  908b2f:	9811      	s32i.n	a8, a1, 4
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
  908b31:	28224e        	l32i	a8, a2, 0x138
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908b34:	dd10      	mov.n	a13, a1
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
  908b36:	9812      	s32i.n	a8, a1, 8
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
  908b38:	28224f        	l32i	a8, a2, 0x13c
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908b3b:	040c4f        	extui	a12, a4, 0, 16
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
  908b3e:	9813      	s32i.n	a8, a1, 12
	stats.ast_txto = sc->sc_int_stats.ast_txto;
  908b40:	282250        	l32i	a8, a2, 0x140
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908b43:	030b4f        	extui	a11, a3, 0, 16
	stats.ast_txto = sc->sc_int_stats.ast_txto;
  908b46:	9814      	s32i.n	a8, a1, 16
	stats.ast_cst = sc->sc_int_stats.ast_cst;
  908b48:	282251        	l32i	a8, a2, 0x144
  908b4b:	9815      	s32i.n	a8, a1, 20
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908b4d:	5bff86        	call8	908968 <wmi_cmd_rsp>
  908b50:	d10f      	retw.n
	...

00908b54 <ath_node_update_tgt>:
{
  908b54:	6c1004        	entry	a1, 32
	node_index = node->ni_nodeindex;
  908b57:	26500c        	l8ui	a6, a5, 12
	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
  908b5a:	2a5a38        	movi	a10, 0x538
  908b5d:	0a6811        	slli	a8, a6, 6
  908b60:	a688      	add.n	a8, a8, a6
  908b62:	0f8811        	slli	a8, a8, 1
  908b65:	a688      	add.n	a8, a8, a6
  908b67:	0e8611        	slli	a6, a8, 2
  908b6a:	aa6a      	add.n	a10, a6, a10
{
  908b6c:	db50      	mov.n	a11, a5
  908b6e:	aa2a      	add.n	a10, a2, a10
  908b70:	c1c6      	movi.n	a12, 22
  908b72:	5bfbe1        	call8	907af8 <__adf_os_mem_copy>
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  908b75:	a628      	add.n	a8, a2, a6
	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
  908b77:	265a45        	movi	a6, 0x545
  908b7a:	a686      	add.n	a6, a8, a6
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  908b7c:	2a6000        	l8ui	a10, a6, 0
  908b7f:	295a58        	movi	a9, 0x558
  908b82:	0ca611        	slli	a6, a10, 4
  908b85:	aa66      	add.n	a6, a6, a10
  908b87:	1a69b4        	l32r	a10, 8e3258 <athos_indirection_table_install+0x1ce4>
  908b8a:	0e6611        	slli	a6, a6, 2
  908b8d:	aa66      	add.n	a6, a6, a10
  908b8f:	a989      	add.n	a9, a8, a9
  908b91:	a626      	add.n	a6, a2, a6
  908b93:	9690      	s32i.n	a6, a9, 0
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  908b95:	265a50        	movi	a6, 0x550
  908b98:	a686      	add.n	a6, a8, a6
  908b9a:	c090      	movi.n	a9, 0
  908b9c:	296500        	s16i	a9, a6, 0
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
  908b9f:	265a52        	movi	a6, 0x552
  908ba2:	a686      	add.n	a6, a8, a6
  908ba4:	296500        	s16i	a9, a6, 0
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908ba7:	265a54        	movi	a6, 0x554
  908baa:	c0d0      	movi.n	a13, 0
{
  908bac:	03034f        	extui	a3, a3, 0, 16
  908baf:	04044f        	extui	a4, a4, 0, 16
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908bb2:	a688      	add.n	a8, a8, a6
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908bb4:	8a23      	l32i.n	a10, a2, 12
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908bb6:	9d80      	s32i.n	a13, a8, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908bb8:	ded0      	mov.n	a14, a13
  908bba:	dc40      	mov.n	a12, a4
  908bbc:	db30      	mov.n	a11, a3
  908bbe:	5bff6a        	call8	908968 <wmi_cmd_rsp>
  908bc1:	d10f      	retw.n
	...

00908bc4 <ath_detach_tgt>:
{
  908bc4:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  908bc7:	252d05        	addmi	a5, a2, 0x500
  908bca:	855b      	l32i.n	a5, a5, 44
	ath_desc_free(sc);
  908bcc:	022a02        	or	a10, a2, a2
  908bcf:	5bfd70        	call8	908190 <ath_desc_free>
	ah->ah_detach(ah);
  908bd2:	8856      	l32i.n	a8, a5, 24
  908bd4:	da50      	mov.n	a10, a5
  908bd6:	0b8000        	callx8	a8
{
  908bd9:	03034f        	extui	a3, a3, 0, 16
  908bdc:	04044f        	extui	a4, a4, 0, 16
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908bdf:	c0e0      	movi.n	a14, 0
  908be1:	8a23      	l32i.n	a10, a2, 12
  908be3:	dde0      	mov.n	a13, a14
  908be5:	dc40      	mov.n	a12, a4
  908be7:	db30      	mov.n	a11, a3
  908be9:	5bff5f        	call8	908968 <wmi_cmd_rsp>
  908bec:	d10f      	retw.n
	...

00908bf0 <ath_enable_aggr_tgt>:
{
  908bf0:	6c1004        	entry	a1, 32
	a_uint8_t nodeindex = aggr->nodeindex;
  908bf3:	2d5000        	l8ui	a13, a5, 0
{
  908bf6:	03034f        	extui	a3, a3, 0, 16
  908bf9:	04044f        	extui	a4, a4, 0, 16
	if (nodeindex >= TARGET_NODE_MAX) {
  908bfc:	6ed802        	bltui	a13, 8, 908c02 <ath_enable_aggr_tgt+0x12>
  908bff:	600089        	j	908c8c <ath_enable_aggr_tgt+0x9c>
	if (!an->an_valid) {
  908c02:	0ad811        	slli	a8, a13, 6
  908c05:	ad88      	add.n	a8, a8, a13
  908c07:	0f8811        	slli	a8, a8, 1
  908c0a:	ad88      	add.n	a8, a8, a13
  908c0c:	0e8b11        	slli	a11, a8, 2
  908c0f:	ab28      	add.n	a8, a2, a11
  908c11:	297a3c        	movi	a9, 0x73c
  908c14:	a988      	add.n	a8, a8, a9
  908c16:	288000        	l8ui	a8, a8, 0
  908c19:	64806f        	beqz	a8, 908c8c <ath_enable_aggr_tgt+0x9c>
	a_uint8_t tidno = aggr->tidno;
  908c1c:	2c5001        	l8ui	a12, a5, 1
	if (tidno >= WME_NUM_TID) {
  908c1f:	6ec811        	bltui	a12, 8, 908c34 <ath_enable_aggr_tgt+0x44>
		adf_os_print("[%s] enable_aggr with invalid tid %d(node = %d)\n",
  908c22:	1568b5        	l32r	a5, 8e2ef8 <athos_indirection_table_install+0x1984>
  908c25:	1b69b5        	l32r	a11, 8e32fc <athos_indirection_table_install+0x1d88>
  908c28:	255212        	l32i	a5, a5, 72
  908c2b:	1a69b6        	l32r	a10, 8e3304 <athos_indirection_table_install+0x1d90>
  908c2e:	0b5000        	callx8	a5
		goto done;
  908c31:	600057        	j	908c8c <ath_enable_aggr_tgt+0x9c>
  908c34:	0cc811        	slli	a8, a12, 4
		tid->flag |= TID_AGGR_ENABLED;
  908c37:	0c880c        	sub	a8, a8, a12
  908c3a:	0e8811        	slli	a8, a8, 2
	if (aggr->aggr_enable) {
  908c3d:	255002        	l8ui	a5, a5, 2
		tid->flag |= TID_AGGR_ENABLED;
  908c40:	ab88      	add.n	a8, a8, a11
  908c42:	a828      	add.n	a8, a2, a8
	if (aggr->aggr_enable) {
  908c44:	c951      	beqz.n	a5, 908c59 <ath_enable_aggr_tgt+0x69>
		tid->flag |= TID_AGGR_ENABLED;
  908c46:	255a92        	movi	a5, 0x592
  908c49:	a588      	add.n	a8, a8, a5
  908c4b:	298000        	l8ui	a9, a8, 0
  908c4e:	c052      	movi.n	a5, 2
  908c50:	059902        	or	a9, a9, a5
  908c53:	298400        	s8i	a9, a8, 0
  908c56:	600032        	j	908c8c <ath_enable_aggr_tgt+0x9c>
	} else if ( tid->flag & TID_AGGR_ENABLED ) {
  908c59:	255a92        	movi	a5, 0x592
  908c5c:	a588      	add.n	a8, a8, a5
  908c5e:	298000        	l8ui	a9, a8, 0
  908c61:	7e9727        	bbci	a9, 30, 908c8c <ath_enable_aggr_tgt+0x9c>
		tid->flag &= ~TID_AGGR_ENABLED;
  908c64:	c75d      	movi.n	a5, -3
  908c66:	059901        	and	a9, a9, a5
  908c69:	298400        	s8i	a9, a8, 0
	tid = ATH_AN_2_TID(an, tidno);
  908c6c:	0cc911        	slli	a9, a12, 4
  908c6f:	0c9c0c        	sub	a12, a9, a12
  908c72:	0ecc11        	slli	a12, a12, 2
  908c75:	abcc      	add.n	a12, a12, a11
  908c77:	255a5c        	movi	a5, 0x55c
	an = &sc->sc_sta[nodeindex];
  908c7a:	285a38        	movi	a8, 0x538
	tid = ATH_AN_2_TID(an, tidno);
  908c7d:	a5cc      	add.n	a12, a12, a5
	an = &sc->sc_sta[nodeindex];
  908c7f:	a8bb      	add.n	a11, a11, a8
		ath_tgt_tx_cleanup(sc, an, tid, 1);
  908c81:	c0d1      	movi.n	a13, 1
  908c83:	ac2c      	add.n	a12, a2, a12
  908c85:	ab2b      	add.n	a11, a2, a11
  908c87:	da20      	mov.n	a10, a2
  908c89:	581882        	call8	90ee94 <ath_tgt_tx_cleanup>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908c8c:	c0e0      	movi.n	a14, 0
  908c8e:	8a23      	l32i.n	a10, a2, 12
  908c90:	dde0      	mov.n	a13, a14
  908c92:	dc40      	mov.n	a12, a4
  908c94:	db30      	mov.n	a11, a3
  908c96:	5bff34        	call8	908968 <wmi_cmd_rsp>
  908c99:	d10f      	retw.n
	...

00908c9c <ath_ic_update_tgt>:
{
  908c9c:	6c1004        	entry	a1, 32
  908c9f:	1a69b7        	l32r	a10, 8e337c <athos_indirection_table_install+0x1e08>
  908ca2:	db50      	mov.n	a11, a5
  908ca4:	0a2a08        	add	a10, a2, a10
  908ca7:	c0c8      	movi.n	a12, 8
  908ca9:	5bfb93        	call8	907af8 <__adf_os_mem_copy>
	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908cac:	8850      	l32i.n	a8, a5, 0
{
  908cae:	03034f        	extui	a3, a3, 0, 16
  908cb1:	04044f        	extui	a4, a4, 0, 16
	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908cb4:	252d16        	addmi	a5, a2, 0x1600
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908cb7:	c0e0      	movi.n	a14, 0
  908cb9:	8a23      	l32i.n	a10, a2, 12
	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908cbb:	9858      	s32i.n	a8, a5, 32
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908cbd:	dde0      	mov.n	a13, a14
  908cbf:	dc40      	mov.n	a12, a4
  908cc1:	db30      	mov.n	a11, a3
  908cc3:	5bff29        	call8	908968 <wmi_cmd_rsp>
  908cc6:	d10f      	retw.n

00908cc8 <handle_rc_rate_update_cmd>:
{
  908cc8:	6c1004        	entry	a1, 32
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908ccb:	295000        	l8ui	a9, a5, 0
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908cce:	285004        	l8ui	a8, a5, 4
  908cd1:	2d5005        	l8ui	a13, a5, 5
  908cd4:	088810        	slli	a8, a8, 24
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908cd7:	0a9b11        	slli	a11, a9, 6
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908cda:	00dd11        	slli	a13, a13, 16
  908cdd:	08dd02        	or	a13, a13, a8
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908ce0:	a9bb      	add.n	a11, a11, a9
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908ce2:	285006        	l8ui	a8, a5, 6
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908ce5:	0fbb11        	slli	a11, a11, 1
  908ce8:	a9bb      	add.n	a11, a11, a9
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908cea:	088811        	slli	a8, a8, 8
  908ced:	0d8802        	or	a8, a8, a13
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908cf0:	295a38        	movi	a9, 0x538
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908cf3:	2d5007        	l8ui	a13, a5, 7
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908cf6:	0ebb11        	slli	a11, a11, 2
  908cf9:	a9bb      	add.n	a11, a11, a9
  908cfb:	2c5001        	l8ui	a12, a5, 1
  908cfe:	b85e      	addi.n	a14, a5, 8
  908d00:	08dd02        	or	a13, a13, a8
  908d03:	0b2b08        	add	a11, a2, a11
  908d06:	022a02        	or	a10, a2, a2
  908d09:	581027        	call8	90cda8 <ath_rate_node_update>
{
  908d0c:	03034f        	extui	a3, a3, 0, 16
  908d0f:	04044f        	extui	a4, a4, 0, 16
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908d12:	c0e0      	movi.n	a14, 0
  908d14:	8a23      	l32i.n	a10, a2, 12
  908d16:	dde0      	mov.n	a13, a14
  908d18:	dc40      	mov.n	a12, a4
  908d1a:	033b02        	or	a11, a3, a3
  908d1d:	5bff12        	call8	908968 <wmi_cmd_rsp>
  908d20:	d10f      	retw.n
	...

00908d24 <handle_rc_state_change_cmd>:
{
  908d24:	6c1004        	entry	a1, 32
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908d27:	285004        	l8ui	a8, a5, 4
  908d2a:	2d5005        	l8ui	a13, a5, 5
	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908d2d:	295000        	l8ui	a9, a5, 0
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908d30:	088810        	slli	a8, a8, 24
  908d33:	00dd11        	slli	a13, a13, 16
  908d36:	08dd02        	or	a13, a13, a8
  908d39:	285006        	l8ui	a8, a5, 6
	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908d3c:	0c9b11        	slli	a11, a9, 4
  908d3f:	a9bb      	add.n	a11, a11, a9
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908d41:	088811        	slli	a8, a8, 8
	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908d44:	1969b4        	l32r	a9, 8e3414 <athos_indirection_table_install+0x1ea0>
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908d47:	0d8802        	or	a8, a8, a13
	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908d4a:	0ebb11        	slli	a11, a11, 2
	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908d4d:	2d5007        	l8ui	a13, a5, 7
	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908d50:	a9bb      	add.n	a11, a11, a9
  908d52:	2c5001        	l8ui	a12, a5, 1
  908d55:	b85e      	addi.n	a14, a5, 8
  908d57:	08dd02        	or	a13, a13, a8
  908d5a:	ab2b      	add.n	a11, a2, a11
  908d5c:	da20      	mov.n	a10, a2
  908d5e:	581017        	call8	90cdbc <ath_rate_newstate>
{
  908d61:	03034f        	extui	a3, a3, 0, 16
  908d64:	04044f        	extui	a4, a4, 0, 16
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908d67:	c0e0      	movi.n	a14, 0
  908d69:	8a23      	l32i.n	a10, a2, 12
  908d6b:	dde0      	mov.n	a13, a14
  908d6d:	dc40      	mov.n	a12, a4
  908d6f:	db30      	mov.n	a11, a3
  908d71:	5bfefd        	call8	908968 <wmi_cmd_rsp>
  908d74:	d10f      	retw.n
	...

00908d78 <ath_hal_reg_write_tgt>:
{
  908d78:	6c1006        	entry	a1, 48
  908d7b:	030b4f        	extui	a11, a3, 0, 16
  908d7e:	040c4f        	extui	a12, a4, 0, 16
	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
  908d81:	d350      	mov.n	a3, a5
  908d83:	60002a        	j	908db1 <ath_hal_reg_write_tgt+0x39>
		ath_hal_reg_write_filter(ah, t->reg, t->val);
  908d86:	8730      	l32i.n	a7, a3, 0
	if(reg > 0xffff) {
  908d88:	1869a6        	l32r	a8, 8e3420 <athos_indirection_table_install+0x1eac>
		ath_hal_reg_write_filter(ah, t->reg, t->val);
  908d8b:	8431      	l32i.n	a4, a3, 4
	if(reg > 0xffff) {
  908d8d:	778b03        	bgeu	a8, a7, 908d94 <ath_hal_reg_write_tgt+0x1c>
  908d90:	600016        	j	908daa <ath_hal_reg_write_tgt+0x32>
  908d93:	001869        	excw
		if(reg == 0x7014)
  908d96:	b278      	addi.n	a8, a7, 2
  908d98:	790a9b        	bge	a0, a9, 908d37 <handle_rc_state_change_cmd+0x13>
			ath_pll_reset_ones(ah);
  908d9b:	109c11        	l32r	a0, 8efde0 <memset+0x8f98>
  908d9e:	5bfc68        	call8	907f40 <ath_pll_reset_ones$isra$12>
  908da1:	8c11      	l32i.n	a12, a1, 4
  908da3:	8b10      	l32i.n	a11, a1, 0
		iowrite32_mac(reg, val);
  908da5:	1869a1        	l32r	a8, 8e342c <athos_indirection_table_install+0x1eb8>
  908da8:	a877      	add.n	a7, a7, a8
  908daa:	0c0200        	memw
  908dad:	9470      	s32i.n	a4, a7, 0
  908daf:	b833      	addi.n	a3, a3, 8
	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
  908db1:	05340c        	sub	a4, a3, a5
  908db4:	7642ce        	blt	a4, a6, 908d86 <ath_hal_reg_write_tgt+0xe>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908db7:	c0e0      	movi.n	a14, 0
  908db9:	8a23      	l32i.n	a10, a2, 12
  908dbb:	dde0      	mov.n	a13, a14
  908dbd:	5bfeea        	call8	908968 <wmi_cmd_rsp>
  908dc0:	d10f      	retw.n
	...

00908dc4 <ath_hal_reg_read_tgt>:
{
  908dc4:	6c1016        	entry	a1, 176
	struct ath_hal *ah = sc->sc_ah;
  908dc7:	272d05        	addmi	a7, a2, 0x500
  908dca:	897b      	l32i.n	a9, a7, 44
{
  908dcc:	03034f        	extui	a3, a3, 0, 16
  908dcf:	04044f        	extui	a4, a4, 0, 16
	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  908dd2:	c070      	movi.n	a7, 0
  908dd4:	60001c        	j	908df4 <ath_hal_reg_read_tgt+0x30>
  908dd7:	0000a7        	excw
		addr = *(a_uint32_t *)(data + i);
  908dda:	588b80        	call8	92bbdc <_etext+0x1c9cb>
			adf_os_ntohl(ath_reg_read_filter(ah, addr));
  908ddd:	da90      	mov.n	a10, a9
  908ddf:	291620        	s32i	a9, a1, 128
  908de2:	5bfc82        	call8	907fec <ath_reg_read_filter>
		val[i/sizeof(a_int32_t)] =
  908de5:	072814        	srli	a8, a7, 2
  908de8:	0e8811        	slli	a8, a8, 2
  908deb:	a818      	add.n	a8, a1, a8
	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  908ded:	291220        	l32i	a9, a1, 128
		val[i/sizeof(a_int32_t)] =
  908df0:	9a80      	s32i.n	a10, a8, 0
	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  908df2:	b477      	addi.n	a7, a7, 4
  908df4:	7672e1        	blt	a7, a6, 908dd9 <ath_hal_reg_read_tgt+0x15>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &val[0], datalen);
  908df7:	8a23      	l32i.n	a10, a2, 12
  908df9:	de60      	mov.n	a14, a6
  908dfb:	dd10      	mov.n	a13, a1
  908dfd:	dc40      	mov.n	a12, a4
  908dff:	db30      	mov.n	a11, a3
  908e01:	5bfed9        	call8	908968 <wmi_cmd_rsp>
  908e04:	d10f      	retw.n
	...

00908e08 <ath_vap_create_tgt>:
{
  908e08:	6c1004        	entry	a1, 32
	vap_index = vap->iv_vapindex;
  908e0b:	275000        	l8ui	a7, a5, 0
	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  908e0e:	1969b8        	l32r	a9, 8e34f0 <_HIFusb_start+0x50>
  908e11:	0c7611        	slli	a6, a7, 4
  908e14:	a768      	add.n	a8, a6, a7
  908e16:	0e8811        	slli	a8, a8, 2
  908e19:	a828      	add.n	a8, a2, a8
  908e1b:	a988      	add.n	a8, a8, a9
  908e1d:	288000        	l8ui	a8, a8, 0
{
  908e20:	03034f        	extui	a3, a3, 0, 16
  908e23:	04044f        	extui	a4, a4, 0, 16
	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  908e26:	648016        	beqz	a8, 908e40 <ath_vap_create_tgt+0x38>
  908e29:	1868b5        	l32r	a8, 8e3100 <athos_indirection_table_install+0x1b8c>
  908e2c:	1b69b9        	l32r	a11, 8e3510 <_HIFusb_start+0x70>
  908e2f:	288212        	l32i	a8, a8, 72
  908e32:	1a6995        	l32r	a10, 8e3488 <athos_indirection_table_install+0x1f14>
  908e35:	0b8000        	callx8	a8
  908e38:	186919        	l32r	a8, 8e329c <athos_indirection_table_install+0x1d28>
  908e3b:	0c0200        	memw
  908e3e:	8880      	l32i.n	a8, a8, 0
	adf_os_mem_copy(&(sc->sc_vap[vap_index].av_vap), vap,
  908e40:	0c7a11        	slli	a10, a7, 4
  908e43:	1869b4        	l32r	a8, 8e3514 <_HIFusb_start+0x74>
  908e46:	a7aa      	add.n	a10, a10, a7
  908e48:	0eaa11        	slli	a10, a10, 2
  908e4b:	a8aa      	add.n	a10, a10, a8
  908e4d:	db50      	mov.n	a11, a5
  908e4f:	aa2a      	add.n	a10, a2, a10
  908e51:	c0cc      	movi.n	a12, 12
	sc->sc_vap[vap_index].av_bcbuf = asf_tailq_first(&(sc->sc_bbuf));
  908e53:	a766      	add.n	a6, a6, a7
  908e55:	5bfb28        	call8	907af8 <__adf_os_mem_copy>
  908e58:	272d16        	addmi	a7, a2, 0x1600
  908e5b:	0e6611        	slli	a6, a6, 2
  908e5e:	1569ba        	l32r	a5, 8e3548 <_HIFusb_start+0xa8>
  908e61:	a626      	add.n	a6, a2, a6
  908e63:	877a      	l32i.n	a7, a7, 40
  908e65:	a565      	add.n	a5, a6, a5
  908e67:	9750      	s32i.n	a7, a5, 0
	sc->sc_vap[vap_index].av_valid = 1;
  908e69:	1569b8        	l32r	a5, 8e354c <_HIFusb_start+0xac>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908e6c:	c0e0      	movi.n	a14, 0
	sc->sc_vap[vap_index].av_valid = 1;
  908e6e:	a566      	add.n	a6, a6, a5
  908e70:	c051      	movi.n	a5, 1
  908e72:	256400        	s8i	a5, a6, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908e75:	8a23      	l32i.n	a10, a2, 12
  908e77:	dde0      	mov.n	a13, a14
  908e79:	dc40      	mov.n	a12, a4
  908e7b:	db30      	mov.n	a11, a3
  908e7d:	5bfeba        	call8	908968 <wmi_cmd_rsp>
  908e80:	d10f      	retw.n
	...

00908e84 <ath_vap_delete_tgt>:
{
  908e84:	6c1004        	entry	a1, 32
	vap_index = *(a_uint8_t *)data;
  908e87:	2d5000        	l8ui	a13, a5, 0
	sc->sc_vap[vap_index].av_valid = 0;
  908e8a:	1969b8        	l32r	a9, 8e356c <_HIFusb_start+0xcc>
  908e8d:	0cd811        	slli	a8, a13, 4
  908e90:	ad88      	add.n	a8, a8, a13
  908e92:	0e8811        	slli	a8, a8, 2
  908e95:	a828      	add.n	a8, a2, a8
  908e97:	a989      	add.n	a9, a8, a9
{
  908e99:	030b4f        	extui	a11, a3, 0, 16
	sc->sc_vap[vap_index].av_valid = 0;
  908e9c:	c030      	movi.n	a3, 0
  908e9e:	239400        	s8i	a3, a9, 0
	sc->sc_vap[vap_index].av_bcbuf = NULL;
  908ea1:	1369ba        	l32r	a3, 8e358c <_HIFusb_start+0xec>
  908ea4:	c090      	movi.n	a9, 0
  908ea6:	a388      	add.n	a8, a8, a3
  908ea8:	9980      	s32i.n	a9, a8, 0
  908eaa:	285a45        	movi	a8, 0x545
{
  908ead:	040c4f        	extui	a12, a4, 0, 16
  908eb0:	a828      	add.n	a8, a2, a8
			sc->sc_sta[i].an_valid = 0;
  908eb2:	2f1af7        	movi	a15, 0x1f7
  908eb5:	2e2a0c        	movi	a14, 0x20c
  908eb8:	c0a8      	movi.n	a10, 8
  908eba:	6da80c        	loop	a10, 908eca <ath_vap_delete_tgt+0x46>
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
  908ebd:	238000        	l8ui	a3, a8, 0
  908ec0:	7d3904        	bne	a3, a13, 908ec8 <ath_vap_delete_tgt+0x44>
			sc->sc_sta[i].an_valid = 0;
  908ec3:	af83      	add.n	a3, a8, a15
  908ec5:	293400        	s8i	a9, a3, 0
  908ec8:	ae88      	add.n	a8, a8, a14
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908eca:	c0e0      	movi.n	a14, 0
  908ecc:	8a23      	l32i.n	a10, a2, 12
  908ece:	0eed02        	or	a13, a14, a14
  908ed1:	5bfea5        	call8	908968 <wmi_cmd_rsp>
  908ed4:	d10f      	retw.n
	...

00908ed8 <ath_node_cleanup_tgt>:
{
  908ed8:	6c1004        	entry	a1, 32
	sc->sc_sta[node_index].an_valid = 0;
  908edb:	295000        	l8ui	a9, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908ede:	c0e0      	movi.n	a14, 0
	sc->sc_sta[node_index].an_valid = 0;
  908ee0:	0a9811        	slli	a8, a9, 6
  908ee3:	a988      	add.n	a8, a8, a9
  908ee5:	0f8811        	slli	a8, a8, 1
  908ee8:	a988      	add.n	a8, a8, a9
  908eea:	0e8811        	slli	a8, a8, 2
  908eed:	a828      	add.n	a8, a2, a8
  908eef:	297a3c        	movi	a9, 0x73c
  908ef2:	a988      	add.n	a8, a8, a9
  908ef4:	c090      	movi.n	a9, 0
  908ef6:	298400        	s8i	a9, a8, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908ef9:	8a23      	l32i.n	a10, a2, 12
  908efb:	dde0      	mov.n	a13, a14
  908efd:	040c4f        	extui	a12, a4, 0, 16
  908f00:	030b4f        	extui	a11, a3, 0, 16
  908f03:	5bfe99        	call8	908968 <wmi_cmd_rsp>
  908f06:	d10f      	retw.n

00908f08 <ath_node_create_tgt>:
{
  908f08:	6c1006        	entry	a1, 48
  908f0b:	db50      	mov.n	a11, a5
	node_index = node->ni_nodeindex;
  908f0d:	25500c        	l8ui	a5, a5, 12
	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
  908f10:	275a38        	movi	a7, 0x538
  908f13:	0a5611        	slli	a6, a5, 6
  908f16:	a569      	add.n	a9, a6, a5
  908f18:	0f9911        	slli	a9, a9, 1
  908f1b:	a599      	add.n	a9, a9, a5
  908f1d:	0e9911        	slli	a9, a9, 2
  908f20:	a797      	add.n	a7, a9, a7
  908f22:	a727      	add.n	a7, a2, a7
  908f24:	c1c6      	movi.n	a12, 22
  908f26:	da70      	mov.n	a10, a7
  908f28:	9910      	s32i.n	a9, a1, 0
  908f2a:	5bfaf3        	call8	907af8 <__adf_os_mem_copy>
    	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
  908f2d:	8910      	l32i.n	a9, a1, 0
  908f2f:	285a45        	movi	a8, 0x545
  908f32:	a929      	add.n	a9, a2, a9
  908f34:	a898      	add.n	a8, a9, a8
  908f36:	2a8000        	l8ui	a10, a8, 0
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  908f39:	1c69b4        	l32r	a12, 8e360c <_HIFusb_start+0x16c>
  908f3c:	0ca811        	slli	a8, a10, 4
  908f3f:	aa88      	add.n	a8, a8, a10
  908f41:	0e8811        	slli	a8, a8, 2
  908f44:	2b5a58        	movi	a11, 0x558
  908f47:	ac88      	add.n	a8, a8, a12
  908f49:	ab9b      	add.n	a11, a9, a11
  908f4b:	a828      	add.n	a8, a2, a8
  908f4d:	98b0      	s32i.n	a8, a11, 0
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
  908f4f:	285a46        	movi	a8, 0x546
  908f52:	a899      	add.n	a9, a9, a8
  908f54:	289000        	l8ui	a8, a9, 0
{
  908f57:	03034f        	extui	a3, a3, 0, 16
  908f5a:	04044f        	extui	a4, a4, 0, 16
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
  908f5d:	698111        	bnei	a8, 1, 908f72 <ath_node_create_tgt+0x6a>
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;
  908f60:	0ca911        	slli	a9, a10, 4
  908f63:	aa99      	add.n	a9, a9, a10
  908f65:	0e9911        	slli	a9, a9, 2
  908f68:	1869bb        	l32r	a8, 8e3654 <_HIFusb_start+0x1b4>
  908f6b:	a929      	add.n	a9, a2, a9
  908f6d:	a899      	add.n	a9, a9, a8
  908f6f:	259400        	s8i	a5, a9, 0
	sc->sc_sta[node_index].an_valid = 1;
  908f72:	a568      	add.n	a8, a6, a5
  908f74:	0f8811        	slli	a8, a8, 1
  908f77:	a588      	add.n	a8, a8, a5
  908f79:	0e8811        	slli	a8, a8, 2
  908f7c:	a828      	add.n	a8, a2, a8
  908f7e:	257a3c        	movi	a5, 0x73c
  908f81:	a585      	add.n	a5, a8, a5
  908f83:	c061      	movi.n	a6, 1
  908f85:	265400        	s8i	a6, a5, 0
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  908f88:	255a50        	movi	a5, 0x550
  908f8b:	a585      	add.n	a5, a8, a5
  908f8d:	c060      	movi.n	a6, 0
  908f8f:	265500        	s16i	a6, a5, 0
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
  908f92:	255a52        	movi	a5, 0x552
  908f95:	a585      	add.n	a5, a8, a5
  908f97:	265500        	s16i	a6, a5, 0
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908f9a:	255a54        	movi	a5, 0x554
  908f9d:	a588      	add.n	a8, a8, a5
  908f9f:	c050      	movi.n	a5, 0
	owl_tgt_node_init(&sc->sc_sta[node_index]);
  908fa1:	da70      	mov.n	a10, a7
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908fa3:	9580      	s32i.n	a5, a8, 0
	owl_tgt_node_init(&sc->sc_sta[node_index]);
  908fa5:	5811de        	call8	90d720 <owl_tgt_node_init>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908fa8:	8a23      	l32i.n	a10, a2, 12
  908faa:	de50      	mov.n	a14, a5
  908fac:	dd50      	mov.n	a13, a5
  908fae:	dc40      	mov.n	a12, a4
  908fb0:	db30      	mov.n	a11, a3
  908fb2:	5bfe6d        	call8	908968 <wmi_cmd_rsp>
  908fb5:	d10f      	retw.n
	...

00908fb8 <ath_setcurmode_tgt>:
{
  908fb8:	6c1004        	entry	a1, 32
    __adf_os_mem_set(buf, b, size);
  908fbb:	2a2a08        	movi	a10, 0x208
	ath_setcurmode(sc, mode);
  908fbe:	255100        	l16ui	a5, a5, 0
  908fc1:	2c1a00        	movi	a12, 0x100
  908fc4:	2b0aff        	movi	a11, 255
  908fc7:	aa2a      	add.n	a10, a2, a10
  908fc9:	5bfad0        	call8	907b0c <__adf_os_mem_set>
	rt = sc->sc_rates[mode];
  908fcc:	285c7c        	addi	a8, a5, 124
  908fcf:	0e8811        	slli	a8, a8, 2
  908fd2:	a828      	add.n	a8, a2, a8
  908fd4:	8683      	l32i.n	a6, a8, 12
{
  908fd6:	03034f        	extui	a3, a3, 0, 16
  908fd9:	04044f        	extui	a4, a4, 0, 16
	adf_os_assert(rt != NULL);
  908fdc:	cd65      	bnez.n	a6, 908ff5 <ath_setcurmode_tgt+0x3d>
  908fde:	1868b5        	l32r	a8, 8e32b4 <athos_indirection_table_install+0x1d40>
  908fe1:	1b69bc        	l32r	a11, 8e36d4 <_HIFusb_start+0x234>
  908fe4:	288212        	l32i	a8, a8, 72
  908fe7:	1a6995        	l32r	a10, 8e363c <_HIFusb_start+0x19c>
  908fea:	0b8000        	callx8	a8
  908fed:	186919        	l32r	a8, 8e3454 <athos_indirection_table_install+0x1ee0>
  908ff0:	0c0200        	memw
  908ff3:	8880      	l32i.n	a8, a8, 0
	for (i = 0; i < rt->rateCount; i++) {
  908ff5:	8b60      	l32i.n	a11, a6, 0
  908ff7:	2a6c34        	addi	a10, a6, 52
  908ffa:	c090      	movi.n	a9, 0
		sc->sc_rixmap[rt->info[i].rateCode] = i;
  908ffc:	2c2a08        	movi	a12, 0x208
  908fff:	60000e        	j	909011 <ath_setcurmode_tgt+0x59>
  909002:	28a000        	l8ui	a8, a10, 0
  909005:	2aac14        	addi	a10, a10, 20
  909008:	a828      	add.n	a8, a2, a8
  90900a:	ac88      	add.n	a8, a8, a12
  90900c:	298400        	s8i	a9, a8, 0
	for (i = 0; i < rt->rateCount; i++) {
  90900f:	b199      	addi.n	a9, a9, 1
  909011:	7b92ed        	blt	a9, a11, 909002 <ath_setcurmode_tgt+0x4a>
	sc->sc_currates = rt;
  909014:	262681        	s32i	a6, a2, 0x204
	sc->sc_curmode = mode;
  909017:	2526c2        	s32i	a5, a2, 0x308
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  90901a:	c0d0      	movi.n	a13, 0
  90901c:	b055      	addi.n	a5, a5, -1
  90901e:	c063      	movi.n	a6, 3
  909020:	05d639        	movnez	a6, a13, a5
  909023:	d560      	mov.n	a5, a6
  909025:	262d03        	addmi	a6, a2, 0x300
  909028:	25640c        	s8i	a5, a6, 12
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90902b:	8a23      	l32i.n	a10, a2, 12
  90902d:	ded0      	mov.n	a14, a13
  90902f:	dc40      	mov.n	a12, a4
  909031:	db30      	mov.n	a11, a3
  909033:	5bfe4d        	call8	908968 <wmi_cmd_rsp>
  909036:	d10f      	retw.n

00909038 <ath_flushrecv_tgt>:
{
  909038:	6c1004        	entry	a1, 32
  90903b:	03034f        	extui	a3, a3, 0, 16
  90903e:	04044f        	extui	a4, a4, 0, 16
	asf_tailq_foreach(bf, &sc->sc_rxbuf, bf_list)
  909041:	2522d5        	l32i	a5, a2, 0x354
  909044:	60002e        	j	909076 <ath_flushrecv_tgt+0x3e>
  909047:	000000        	ill
		if (bf->bf_skb != NULL) {
  90904a:	8658      	l32i.n	a6, a5, 32
  90904c:	ca64      	beqz.n	a6, 909074 <ath_flushrecv_tgt+0x3c>
    __adf_nbuf_unmap(osdev, bmap, dir);
  90904e:	8b50      	l32i.n	a11, a5, 0
  909050:	2a2246        	l32i	a10, a2, 0x118
  909053:	c0c1      	movi.n	a12, 1
  909055:	5bf689        	call8	906a7c <__adf_nbuf_unmap>
			ath_free_rx_skb(sc, adf_nbuf_queue_remove(&bf->bf_skbhead));
  909058:	1868b5        	l32r	a8, 8e332c <athos_indirection_table_install+0x1db8>
  90905b:	8720      	l32i.n	a7, a2, 0
    return __adf_nbuf_queue_remove(head);
  90905d:	2a5c14        	addi	a10, a5, 20
  909060:	26829e        	l32i	a6, a8, 0x278
  909063:	5bf672        	call8	906a2c <__adf_nbuf_queue_remove>
  909066:	dca0      	mov.n	a12, a10
  909068:	2b0a03        	movi	a11, 3
  90906b:	da70      	mov.n	a10, a7
  90906d:	0b6000        	callx8	a6
			bf->bf_skb = NULL;
  909070:	c080      	movi.n	a8, 0
  909072:	9858      	s32i.n	a8, a5, 32
	asf_tailq_foreach(bf, &sc->sc_rxbuf, bf_list)
  909074:	8559      	l32i.n	a5, a5, 36
  909076:	655fd0        	bnez	a5, 90904a <ath_flushrecv_tgt+0x12>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909079:	8a23      	l32i.n	a10, a2, 12
  90907b:	de50      	mov.n	a14, a5
  90907d:	dd50      	mov.n	a13, a5
  90907f:	dc40      	mov.n	a12, a4
  909081:	db30      	mov.n	a11, a3
  909083:	5bfe39        	call8	908968 <wmi_cmd_rsp>
  909086:	d10f      	retw.n

00909088 <ath_stoprecv_tgt>:
{
  909088:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  90908b:	252d05        	addmi	a5, a2, 0x500
  90908e:	855b      	l32i.n	a5, a5, 44
{
  909090:	03034f        	extui	a3, a3, 0, 16
	ah->ah_stopPcuReceive(ah);
  909093:	285224        	l32i	a8, a5, 144
  909096:	055a02        	or	a10, a5, a5
  909099:	0b8000        	callx8	a8
	ah->ah_setRxFilter(ah, 0);
  90909c:	8859      	l32i.n	a8, a5, 36
  90909e:	c0b0      	movi.n	a11, 0
  9090a0:	da50      	mov.n	a10, a5
  9090a2:	0b8000        	callx8	a8
	ah->ah_stopDmaReceive(ah);
  9090a5:	285223        	l32i	a8, a5, 140
  9090a8:	da50      	mov.n	a10, a5
  9090aa:	0b8000        	callx8	a8
	sc->sc_rxlink = NULL;
  9090ad:	c0d0      	movi.n	a13, 0
{
  9090af:	04044f        	extui	a4, a4, 0, 16
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9090b2:	8a23      	l32i.n	a10, a2, 12
	sc->sc_rxlink = NULL;
  9090b4:	2d26ef        	s32i	a13, a2, 0x3bc
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9090b7:	ded0      	mov.n	a14, a13
  9090b9:	dc40      	mov.n	a12, a4
  9090bb:	db30      	mov.n	a11, a3
  9090bd:	5bfe2a        	call8	908968 <wmi_cmd_rsp>
  9090c0:	d10f      	retw.n
	...

009090c4 <ath_startrecv_tgt>:
{
  9090c4:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  9090c7:	252d05        	addmi	a5, a2, 0x500
  9090ca:	865b      	l32i.n	a6, a5, 44
	sc->sc_rxbufsize = 1024+512+128;
  9090cc:	256a80        	movi	a5, 0x680
  9090cf:	25264a        	s32i	a5, a2, 0x128
	sc->sc_rxlink = NULL;
  9090d2:	c050      	movi.n	a5, 0
  9090d4:	2526ef        	s32i	a5, a2, 0x3bc
	sc->sc_rxdesc_held = NULL;
  9090d7:	2526db        	s32i	a5, a2, 0x36c
{
  9090da:	03034f        	extui	a3, a3, 0, 16
  9090dd:	04044f        	extui	a4, a4, 0, 16
	asf_tailq_foreach(ds, &sc->sc_rxdesc, ds_list) {
  9090e0:	2522d9        	l32i	a5, a2, 0x364
  9090e3:	600027        	j	90910e <ath_startrecv_tgt+0x4a>
		a_int32_t error = ath_rxdesc_init(sc, ds);
  9090e6:	db50      	mov.n	a11, a5
  9090e8:	da20      	mov.n	a10, a2
  9090ea:	5bfb2f        	call8	907da8 <ath_rxdesc_init>
		if (error != 0) {
  9090ed:	65a049        	bnez	a10, 90913a <ath_startrecv_tgt+0x76>
	asf_tailq_foreach(ds, &sc->sc_rxdesc, ds_list) {
  9090f0:	29504c        	l8ui	a9, a5, 76
  9090f3:	28504d        	l8ui	a8, a5, 77
  9090f6:	089910        	slli	a9, a9, 24
  9090f9:	008811        	slli	a8, a8, 16
  9090fc:	098902        	or	a9, a8, a9
  9090ff:	28504e        	l8ui	a8, a5, 78
  909102:	25504f        	l8ui	a5, a5, 79
  909105:	088811        	slli	a8, a8, 8
  909108:	098802        	or	a8, a8, a9
  90910b:	085502        	or	a5, a5, a8
  90910e:	655fd4        	bnez	a5, 9090e6 <ath_startrecv_tgt+0x22>
	ah->ah_setRxDP(ah, ds->ds_daddr);
  909111:	2822d9        	l32i	a8, a2, 0x364
  909114:	da60      	mov.n	a10, a6
  909116:	258048        	l8ui	a5, a8, 72
  909119:	2b8049        	l8ui	a11, a8, 73
  90911c:	085510        	slli	a5, a5, 24
  90911f:	00bb11        	slli	a11, a11, 16
  909122:	05bb02        	or	a11, a11, a5
  909125:	25804a        	l8ui	a5, a8, 74
  909128:	085511        	slli	a5, a5, 8
  90912b:	0b5502        	or	a5, a5, a11
  90912e:	2b804b        	l8ui	a11, a8, 75
  909131:	28621f        	l32i	a8, a6, 124
  909134:	05bb02        	or	a11, a11, a5
  909137:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90913a:	c0e0      	movi.n	a14, 0
  90913c:	8a23      	l32i.n	a10, a2, 12
  90913e:	dde0      	mov.n	a13, a14
  909140:	dc40      	mov.n	a12, a4
  909142:	033b02        	or	a11, a3, a3
  909145:	5bfe08        	call8	908968 <wmi_cmd_rsp>
  909148:	d10f      	retw.n
	...

0090914c <ath_draintxq_tgt>:
{
  90914c:	6c1006        	entry	a1, 48
  90914f:	04044f        	extui	a4, a4, 0, 16
	sc->sc_tx_draining = 1;
  909152:	252d01        	addmi	a5, a2, 0x100
{
  909155:	03034f        	extui	a3, a3, 0, 16
  909158:	9411      	s32i.n	a4, a1, 4
	ath_tx_status_clear(sc);
  90915a:	022a02        	or	a10, a2, a2
	struct ath_hal *ah = sc->sc_ah;
  90915d:	242d05        	addmi	a4, a2, 0x500
  909160:	27420b        	l32i	a7, a4, 44
{
  909163:	9310      	s32i.n	a3, a1, 0
	ath_tx_status_clear(sc);
  909165:	58117f        	call8	90d764 <ath_tx_status_clear>
	sc->sc_tx_draining = 1;
  909168:	265024        	l8ui	a6, a5, 36
  90916b:	c480      	movi.n	a8, 64
  90916d:	086602        	or	a6, a6, a8
  909170:	265424        	s8i	a6, a5, 36
	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  909173:	867d      	l32i.n	a6, a7, 52
  909175:	2b501c        	l8ui	a11, a5, 28
  909178:	da70      	mov.n	a10, a7
  90917a:	0b6000        	callx8	a6
  90917d:	283acc        	movi	a8, 0x3cc
  909180:	a823      	add.n	a3, a2, a8
  909182:	d930      	mov.n	a9, a3
  909184:	c070      	movi.n	a7, 0
		if (ATH_TXQ_SETUP(sc, i))
  909186:	262d03        	addmi	a6, a2, 0x300
  909189:	2a60c8        	l8ui	a10, a6, 200
  90918c:	007004        	ssr	a7
  90918f:	0a0a1b        	sra	a10, a10
  909192:	7fa70c        	bbci	a10, 31, 9091a2 <ath_draintxq_tgt+0x56>
  909195:	8a4b      	l32i.n	a10, a4, 44
	ah->ah_stopTxDma(ah, txq->axq_qnum);
  909197:	8b90      	l32i.n	a11, a9, 0
  909199:	8dad      	l32i.n	a13, a10, 52
  90919b:	9912      	s32i.n	a9, a1, 8
  90919d:	0bd000        	callx8	a13
  9091a0:	8912      	l32i.n	a9, a1, 8
  9091a2:	b177      	addi.n	a7, a7, 1
  9091a4:	299c20        	addi	a9, a9, 32
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
  9091a7:	6979de        	bnei	a7, 10, 909189 <ath_draintxq_tgt+0x3d>
  9091aa:	270a00        	movi	a7, 0
				tid->sched = AH_FALSE;
  9091ad:	077402        	or	a4, a7, a7
		if (ATH_TXQ_SETUP(sc, i)) {
  9091b0:	2a60c8        	l8ui	a10, a6, 200
  9091b3:	007004        	ssr	a7
  9091b6:	0a0a1b        	sra	a10, a10
  9091b9:	7faf0b        	bbsi	a10, 31, 9091c8 <ath_draintxq_tgt+0x7c>
  9091bc:	b177      	addi.n	a7, a7, 1
  9091be:	233c20        	addi	a3, a3, 32
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
  9091c1:	6979eb        	bnei	a7, 10, 9091b0 <ath_draintxq_tgt+0x64>
  9091c4:	60002e        	j	9091f6 <ath_draintxq_tgt+0xaa>
  9091c7:	00c0c1        	excw
			owltgt_tx_processq(sc, ATH_TXQ(sc,i), OWL_TXQ_STOPPED);
  9091ca:	db30      	mov.n	a11, a3
  9091cc:	da20      	mov.n	a10, a2
  9091ce:	5815b0        	call8	90e890 <owltgt_tx_processq>
  9091d1:	600019        	j	9091ee <ath_draintxq_tgt+0xa2>
				TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
  9091d4:	8ab9      	l32i.n	a10, a11, 36
  9091d6:	8cba      	l32i.n	a12, a11, 40
  9091d8:	c8a4      	beqz.n	a10, 9091e0 <ath_draintxq_tgt+0x94>
  9091da:	9caa      	s32i.n	a12, a10, 40
  9091dc:	600002        	j	9091e2 <ath_draintxq_tgt+0x96>
  9091df:	009c37        	maxu	a12, a9, a0
  9091e2:	8cba      	l32i.n	a12, a11, 40
  9091e4:	9ac0      	s32i.n	a10, a12, 0
				tid->sched = AH_FALSE;
  9091e6:	24b435        	s8i	a4, a11, 53
				ath_tgt_tid_drain(sc,tid);
  9091e9:	da20      	mov.n	a10, a2
  9091eb:	581245        	call8	90db00 <ath_tgt_tid_drain>
			while (!asf_tailq_empty(&txq->axq_tidq)){
  9091ee:	8b36      	l32i.n	a11, a3, 24
  9091f0:	65bfe0        	bnez	a11, 9091d4 <ath_draintxq_tgt+0x88>
  9091f3:	63ffc5        	j	9091bc <ath_draintxq_tgt+0x70>
	sc->sc_tx_draining = 0;
  9091f6:	265024        	l8ui	a6, a5, 36
  9091f9:	27fabf        	movi	a7, -65
  9091fc:	076601        	and	a6, a6, a7
  9091ff:	265424        	s8i	a6, a5, 36
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909202:	c0e0      	movi.n	a14, 0
  909204:	8c11      	l32i.n	a12, a1, 4
  909206:	8b10      	l32i.n	a11, a1, 0
  909208:	8a23      	l32i.n	a10, a2, 12
  90920a:	0eed02        	or	a13, a14, a14
  90920d:	5bfdd6        	call8	908968 <wmi_cmd_rsp>
  909210:	d10f      	retw.n
	...

00909214 <ath_tx_draintxq_tgt>:
{
  909214:	6c1004        	entry	a1, 32
	txq = ATH_TXQ(sc, q);
  909217:	8b50      	l32i.n	a11, a5, 0
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  909219:	da20      	mov.n	a10, a2
	txq = ATH_TXQ(sc, q);
  90921b:	2bbc1e        	addi	a11, a11, 30
  90921e:	0bbb11        	slli	a11, a11, 5
  909221:	bcbb      	addi.n	a11, a11, 12
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  909223:	0b2b08        	add	a11, a2, a11
  909226:	2c0a01        	movi	a12, 1
  909229:	581599        	call8	90e890 <owltgt_tx_processq>
{
  90922c:	03034f        	extui	a3, a3, 0, 16
  90922f:	04044f        	extui	a4, a4, 0, 16
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909232:	c0e0      	movi.n	a14, 0
  909234:	8a23      	l32i.n	a10, a2, 12
  909236:	dde0      	mov.n	a13, a14
  909238:	dc40      	mov.n	a12, a4
  90923a:	033b02        	or	a11, a3, a3
  90923d:	5bfdca        	call8	908968 <wmi_cmd_rsp>
  909240:	d10f      	retw.n
	...

00909244 <ath_aborttx_dma_tgt>:
{
  909244:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  909247:	282d05        	addmi	a8, a2, 0x500
  90924a:	8a8b      	l32i.n	a10, a8, 44
{
  90924c:	03034f        	extui	a3, a3, 0, 16
	ah->ah_abortTxDma(sc->sc_ah);
  90924f:	28a20e        	l32i	a8, a10, 56
{
  909252:	04044f        	extui	a4, a4, 0, 16
	ah->ah_abortTxDma(sc->sc_ah);
  909255:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909258:	c0e0      	movi.n	a14, 0
  90925a:	8a23      	l32i.n	a10, a2, 12
  90925c:	dde0      	mov.n	a13, a14
  90925e:	dc40      	mov.n	a12, a4
  909260:	db30      	mov.n	a11, a3
  909262:	5bfdc1        	call8	908968 <wmi_cmd_rsp>
  909265:	d10f      	retw.n
	...

00909268 <ath_stop_tx_dma_tgt>:
{
  909268:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  90926b:	282d05        	addmi	a8, a2, 0x500
{
  90926e:	03034f        	extui	a3, a3, 0, 16
  909271:	04044f        	extui	a4, a4, 0, 16
	struct ath_hal *ah = sc->sc_ah;
  909274:	8a8b      	l32i.n	a10, a8, 44
	if (data)
  909276:	c850      	beqz.n	a5, 90927a <ath_stop_tx_dma_tgt+0x12>
		q = *(a_uint32_t *)data;
  909278:	8b50      	l32i.n	a11, a5, 0
	ah->ah_stopTxDma(ah, q);
  90927a:	85ad      	l32i.n	a5, a10, 52
  90927c:	0b5000        	callx8	a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90927f:	c0e0      	movi.n	a14, 0
  909281:	8a23      	l32i.n	a10, a2, 12
  909283:	dde0      	mov.n	a13, a14
  909285:	dc40      	mov.n	a12, a4
  909287:	db30      	mov.n	a11, a3
  909289:	5bfdb7        	call8	908968 <wmi_cmd_rsp>
  90928c:	d10f      	retw.n
	...

00909290 <ath_aborttxq_tgt>:
{
  909290:	6c1004        	entry	a1, 32
  909293:	253acc        	movi	a5, 0x3cc
  909296:	03034f        	extui	a3, a3, 0, 16
  909299:	04044f        	extui	a4, a4, 0, 16
  90929c:	a525      	add.n	a5, a2, a5
  90929e:	260a00        	movi	a6, 0
		if (ATH_TXQ_SETUP(sc, i))
  9092a1:	272d03        	addmi	a7, a2, 0x300
  9092a4:	2870c8        	l8ui	a8, a7, 200
  9092a7:	006004        	ssr	a6
  9092aa:	08081b        	sra	a8, a8
  9092ad:	7f8708        	bbci	a8, 31, 9092b9 <ath_aborttxq_tgt+0x29>
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  9092b0:	c0c1      	movi.n	a12, 1
  9092b2:	db50      	mov.n	a11, a5
  9092b4:	da20      	mov.n	a10, a2
  9092b6:	581576        	call8	90e890 <owltgt_tx_processq>
  9092b9:	b166      	addi.n	a6, a6, 1
  9092bb:	255c20        	addi	a5, a5, 32
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++) {
  9092be:	6969e2        	bnei	a6, 10, 9092a4 <ath_aborttxq_tgt+0x14>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9092c1:	c0e0      	movi.n	a14, 0
  9092c3:	8a23      	l32i.n	a10, a2, 12
  9092c5:	dde0      	mov.n	a13, a14
  9092c7:	dc40      	mov.n	a12, a4
  9092c9:	db30      	mov.n	a11, a3
  9092cb:	5bfda7        	call8	908968 <wmi_cmd_rsp>
  9092ce:	d10f      	retw.n

009092d0 <ath_init_tgt>:
{
  9092d0:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  9092d3:	252d05        	addmi	a5, a2, 0x500
  9092d6:	855b      	l32i.n	a5, a5, 44
	sc->sc_imask |= HAL_INT_GTT;
  9092d8:	1869bd        	l32r	a8, 8e39cc <HIFusb_DescTraceDump+0x1e4>
	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  9092db:	2b0a05        	movi	a11, 5
	sc->sc_imask |= HAL_INT_GTT;
  9092de:	2826c4        	s32i	a8, a2, 0x310
	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  9092e1:	da50      	mov.n	a10, a5
{
  9092e3:	03034f        	extui	a3, a3, 0, 16
  9092e6:	04044f        	extui	a4, a4, 0, 16
	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  9092e9:	580664        	call8	90ac7c <ath_hal_getcapability>
  9092ec:	c8aa      	beqz.n	a10, 9092fa <ath_init_tgt+0x2a>
		sc->sc_imask |= HAL_INT_CST;
  9092ee:	2822c4        	l32i	a8, a2, 0x310
  9092f1:	1969be        	l32r	a9, 8e39ec <HIFusb_DescTraceDump+0x204>
  9092f4:	098802        	or	a8, a8, a9
  9092f7:	2826c4        	s32i	a8, a2, 0x310
#include <adf_os_irq_pvt.h>

static inline int
adf_os_setup_intr(adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    return __adf_os_setup_intr(osdev, fn);
  9092fa:	1b69bf        	l32r	a11, 8e39f8 <HIFusb_DescTraceDump+0x210>
  9092fd:	2a2246        	l32i	a10, a2, 0x118
  909300:	580654        	call8	90ac54 <__adf_os_setup_intr>
	ah->ah_setInterrupts(ah, sc->sc_imask);
  909303:	2b22c4        	l32i	a11, a2, 0x310
  909306:	285228        	l32i	a8, a5, 160
  909309:	da50      	mov.n	a10, a5
  90930b:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90930e:	c0e0      	movi.n	a14, 0
  909310:	8a23      	l32i.n	a10, a2, 12
  909312:	dde0      	mov.n	a13, a14
  909314:	dc40      	mov.n	a12, a4
  909316:	033b02        	or	a11, a3, a3
  909319:	5bfd93        	call8	908968 <wmi_cmd_rsp>
  90931c:	d10f      	retw.n
	...

00909320 <ath_enable_intr_tgt>:
{
  909320:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  909323:	282d05        	addmi	a8, a2, 0x500
{
  909326:	03034f        	extui	a3, a3, 0, 16
  909329:	04044f        	extui	a4, a4, 0, 16
	struct ath_hal *ah = sc->sc_ah;
  90932c:	8a8b      	l32i.n	a10, a8, 44
	if (data)
  90932e:	645002        	beqz	a5, 909334 <ath_enable_intr_tgt+0x14>
		intr = (*(a_uint32_t *)data);
  909331:	2b5200        	l32i	a11, a5, 0
	if (intr & HAL_INT_SWBA) {
  909334:	1968f2        	l32r	a9, 8e36fc <_HIFusb_isr_handler+0x18>
  909337:	2822c4        	l32i	a8, a2, 0x310
  90933a:	79b006        	bnone	a11, a9, 909344 <ath_enable_intr_tgt+0x24>
		sc->sc_imask |= HAL_INT_SWBA;
  90933d:	098802        	or	a8, a8, a9
  909340:	600006        	j	90934a <ath_enable_intr_tgt+0x2a>
  909343:	001569        	excw
		sc->sc_imask &= ~HAL_INT_SWBA;
  909346:	c005      	movi.n	a0, 5
  909348:	8801      	l32i.n	a8, a0, 4
	if (intr & HAL_INT_BMISS) {
  90934a:	1969c1        	l32r	a9, 8e3a50 <HIFusb_DescTraceDump+0x268>
		sc->sc_imask &= ~HAL_INT_SWBA;
  90934d:	2826c4        	s32i	a8, a2, 0x310
	if (intr & HAL_INT_BMISS) {
  909350:	79b008        	bnone	a11, a9, 90935c <ath_enable_intr_tgt+0x3c>
		sc->sc_imask |= HAL_INT_BMISS;
  909353:	2822c4        	l32i	a8, a2, 0x310
  909356:	098802        	or	a8, a8, a9
  909359:	2826c4        	s32i	a8, a2, 0x310
	ah->ah_setInterrupts(ah, sc->sc_imask);
  90935c:	2b22c4        	l32i	a11, a2, 0x310
  90935f:	25a228        	l32i	a5, a10, 160
  909362:	0b5000        	callx8	a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
  909365:	c0e0      	movi.n	a14, 0
  909367:	8a23      	l32i.n	a10, a2, 12
  909369:	dde0      	mov.n	a13, a14
  90936b:	dc40      	mov.n	a12, a4
  90936d:	db30      	mov.n	a11, a3
  90936f:	5bfd7e        	call8	908968 <wmi_cmd_rsp>
  909372:	d10f      	retw.n

00909374 <ath_disable_intr_tgt>:
{
  909374:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  909377:	282d05        	addmi	a8, a2, 0x500
  90937a:	8a8b      	l32i.n	a10, a8, 44
	ah->ah_setInterrupts(ah, 0);
  90937c:	2b0a00        	movi	a11, 0
  90937f:	28a228        	l32i	a8, a10, 160
{
  909382:	03034f        	extui	a3, a3, 0, 16
	ah->ah_setInterrupts(ah, 0);
  909385:	0b8000        	callx8	a8
{
  909388:	04044f        	extui	a4, a4, 0, 16
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
  90938b:	c0e0      	movi.n	a14, 0
  90938d:	8a23      	l32i.n	a10, a2, 12
  90938f:	dde0      	mov.n	a13, a14
  909391:	dc40      	mov.n	a12, a4
  909393:	db30      	mov.n	a11, a3
  909395:	5bfd74        	call8	908968 <wmi_cmd_rsp>
  909398:	d10f      	retw.n
	...

0090939c <ath_get_tgt_version>:
{
  90939c:	6c1006        	entry	a1, 48
	ver.major = ATH_VERSION_MAJOR;
  90939f:	c081      	movi.n	a8, 1
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9093a1:	8a23      	l32i.n	a10, a2, 12
	ver.major = ATH_VERSION_MAJOR;
  9093a3:	281500        	s16i	a8, a1, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9093a6:	c0e4      	movi.n	a14, 4
	ver.minor = ATH_VERSION_MINOR;
  9093a8:	c084      	movi.n	a8, 4
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9093aa:	dd10      	mov.n	a13, a1
  9093ac:	040c4f        	extui	a12, a4, 0, 16
  9093af:	030b4f        	extui	a11, a3, 0, 16
	ver.minor = ATH_VERSION_MINOR;
  9093b2:	281501        	s16i	a8, a1, 2
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9093b5:	5bfd6c        	call8	908968 <wmi_cmd_rsp>
  9093b8:	d10f      	retw.n
	...

009093bc <handle_echo_command>:
{
  9093bc:	6c1004        	entry	a1, 32
	wmi_cmd_rsp(pContext, WMI_ECHO_CMDID, SeqNo, buffer, Length);
  9093bf:	de60      	mov.n	a14, a6
  9093c1:	dd50      	mov.n	a13, a5
  9093c3:	040c4f        	extui	a12, a4, 0, 16
  9093c6:	c0b1      	movi.n	a11, 1
  9093c8:	da20      	mov.n	a10, a2
  9093ca:	5bfd67        	call8	908968 <wmi_cmd_rsp>
  9093cd:	d10f      	retw.n
	...

009093d0 <ath_get_minrateidx>:
{
  9093d0:	6c1004        	entry	a1, 32
	if (sc->sc_curmode == IEEE80211_MODE_11NG)
  9093d3:	2822c2        	l32i	a8, a2, 0x308
  9093d6:	698104        	bnei	a8, 1, 9093de <ath_get_minrateidx+0xe>
		return avp->av_minrateidx[0];
  9093d9:	223040        	l8ui	a2, a3, 64
  9093dc:	d10f      	retw.n
	return 0;
  9093de:	c020      	movi.n	a2, 0
	else if (sc->sc_curmode == IEEE80211_MODE_11NA)
  9093e0:	728902        	bne	a8, a2, 9093e6 <ath_get_minrateidx+0x16>
		return avp->av_minrateidx[1];
  9093e3:	223041        	l8ui	a2, a3, 65
}
  9093e6:	d10f      	retw.n

009093e8 <tgt_HTCRecv_beaconhandler>:
{
  9093e8:	6c101c        	entry	a1, 224
	struct ath_hal *ah = sc->sc_ah;
  9093eb:	265d05        	addmi	a6, a5, 0x500
  9093ee:	866b      	l32i.n	a6, a6, 44
	if (!bc_hdr) {
  9093f0:	cd35      	bnez.n	a3, 909409 <tgt_HTCRecv_beaconhandler+0x21>
    __adf_nbuf_peek_header(buf, addr, len);
  9093f2:	231c20        	addi	a3, a1, 32
  9093f5:	2c3c70        	addi	a12, a3, 112
  9093f8:	2b3c74        	addi	a11, a3, 116
  9093fb:	da40      	mov.n	a10, a4
  9093fd:	5bf622        	call8	906c88 <__adf_nbuf_peek_header>
		bhdr = (ath_beacon_hdr_t *)anbdata;
  909400:	271225        	l32i	a7, a1, 148
  909403:	600011        	j	909418 <tgt_HTCRecv_beaconhandler+0x30>
  909406:	000000        	ill
		adf_os_print("found bc_hdr! 0x%x\n", bc_hdr);
  909409:	1868b5        	l32r	a8, 8e36e0 <_HIFusb_start+0x240>
  90940c:	1a69c2        	l32r	a10, 8e3b14 <bGet_descriptor+0x78>
  90940f:	288212        	l32i	a8, a8, 72
  909412:	033b02        	or	a11, a3, a3
  909415:	0b8000        	callx8	a8
	vap_index = bhdr->vap_index;
  909418:	277000        	l8ui	a7, a7, 0
	adf_os_assert(vap_index < TARGET_VAP_MAX);
  90941b:	6e7217        	bltui	a7, 2, 909436 <tgt_HTCRecv_beaconhandler+0x4e>
  90941e:	1368b5        	l32r	a3, 8e36f4 <_HIFusb_isr_handler+0x10>
  909421:	1b69c3        	l32r	a11, 8e3b30 <bGet_descriptor+0x94>
  909424:	233212        	l32i	a3, a3, 72
  909427:	1a6995        	l32r	a10, 8e3a7c <HIFusb_DescTraceDump+0x294>
  90942a:	0b3000        	callx8	a3
  90942d:	136919        	l32r	a3, 8e3894 <HIFusb_DescTraceDump+0xac>
  909430:	0c0200        	memw
  909433:	233200        	l32i	a3, a3, 0
    return __adf_nbuf_pull_head(buf, size);
  909436:	c0b4      	movi.n	a11, 4
  909438:	044a02        	or	a10, a4, a4
	bf = sc->sc_vap[vap_index].av_bcbuf;
  90943b:	0c7311        	slli	a3, a7, 4
  90943e:	5bf546        	call8	906958 <__adf_nbuf_pull_head>
  909441:	a733      	add.n	a3, a3, a7
  909443:	0e3311        	slli	a3, a3, 2
  909446:	1869ba        	l32r	a8, 8e3b30 <bGet_descriptor+0x94>
  909449:	a353      	add.n	a3, a5, a3
  90944b:	a833      	add.n	a3, a3, a8
  90944d:	8330      	l32i.n	a3, a3, 0
	adf_os_assert(bf);
  90944f:	cd35      	bnez.n	a3, 909468 <tgt_HTCRecv_beaconhandler+0x80>
  909451:	1868b5        	l32r	a8, 8e3728 <_HIFusb_isr_handler+0x44>
  909454:	1b69c3        	l32r	a11, 8e3b60 <bSet_configuration+0xc>
  909457:	288212        	l32i	a8, a8, 72
  90945a:	1a6995        	l32r	a10, 8e3ab0 <bGet_descriptor+0x14>
  90945d:	0b8000        	callx8	a8
  909460:	186919        	l32r	a8, 8e38c4 <HIFusb_DescTraceDump+0xdc>
  909463:	0c0200        	memw
  909466:	8880      	l32i.n	a8, a8, 0
	bf->bf_endpt = EndPt;
  909468:	223623        	s32i	a2, a3, 140
	if (bf->bf_skb) {
  90946b:	8238      	l32i.n	a2, a3, 32
  90946d:	c92f      	beqz.n	a2, 909490 <tgt_HTCRecv_beaconhandler+0xa8>
    __adf_nbuf_unmap(osdev, bmap, dir);
  90946f:	8b30      	l32i.n	a11, a3, 0
  909471:	2a5246        	l32i	a10, a5, 0x118
  909474:	c0c0      	movi.n	a12, 0
  909476:	5bf581        	call8	906a7c <__adf_nbuf_unmap>
    return __adf_nbuf_push_head(buf, size);
  909479:	8a38      	l32i.n	a10, a3, 32
  90947b:	c0b4      	movi.n	a11, 4
  90947d:	5bf52b        	call8	90692c <__adf_nbuf_push_head>
		ath_free_tx_skb(sc->tgt_htc_handle, bf->bf_endpt, bf->bf_skb);
  909480:	1268b5        	l32r	a2, 8e3754 <_HIFusb_isr_handler+0x70>
  909483:	8c38      	l32i.n	a12, a3, 32
  909485:	222282        	l32i	a2, a2, 0x208
  909488:	2b3223        	l32i	a11, a3, 140
  90948b:	8a52      	l32i.n	a10, a5, 8
  90948d:	0b2000        	callx8	a2
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  909490:	2a5246        	l32i	a10, a5, 0x118
  909493:	8b30      	l32i.n	a11, a3, 0
  909495:	c0d0      	movi.n	a13, 0
  909497:	dc40      	mov.n	a12, a4
	bf->bf_skb = nbuf;
  909499:	9438      	s32i.n	a4, a3, 32
  90949b:	5bf575        	call8	906a70 <__adf_nbuf_map>
    __adf_nbuf_dmamap_info(bmap, sg);
  90949e:	8a30      	l32i.n	a10, a3, 0
  9094a0:	b43b      	addi.n	a11, a3, 4
	struct ath_hal *ah = sc->sc_ah;
  9094a2:	225d05        	addmi	a2, a5, 0x500
  9094a5:	5bf57a        	call8	906a90 <__adf_nbuf_dmamap_info>
  9094a8:	822b      	l32i.n	a2, a2, 44
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  9094aa:	2c0a70        	movi	a12, 112
  9094ad:	c0b0      	movi.n	a11, 0
  9094af:	2a1c20        	addi	a10, a1, 32
	adf_nbuf_t skb = bf->bf_skb;
  9094b2:	8438      	l32i.n	a4, a3, 32
	struct ath_hal *ah = sc->sc_ah;
  9094b4:	22162d        	s32i	a2, a1, 180
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  9094b7:	5b7664        	call8	8e6e48 <memset>
	ds = bf->bf_desc;
  9094ba:	883c      	l32i.n	a8, a3, 48
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9094bc:	2a3008        	l8ui	a10, a3, 8
	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9094bf:	0c7b11        	slli	a11, a7, 4
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9094c2:	2a8404        	s8i	a10, a8, 4
  9094c5:	2a3009        	l8ui	a10, a3, 9
	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9094c8:	a7bb      	add.n	a11, a11, a7
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9094ca:	2a8405        	s8i	a10, a8, 5
  9094cd:	2a300a        	l8ui	a10, a3, 10
	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9094d0:	1769b4        	l32r	a7, 8e3ba0 <bSet_configuration+0x4c>
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9094d3:	2a8406        	s8i	a10, a8, 6
	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9094d6:	0ebb11        	slli	a11, a11, 2
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9094d9:	2a300b        	l8ui	a10, a3, 11
	ds->ds_link = 0;
  9094dc:	c090      	movi.n	a9, 0
	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9094de:	a7bb      	add.n	a11, a11, a7
	ds->ds_link = 0;
  9094e0:	298400        	s8i	a9, a8, 0
  9094e3:	298401        	s8i	a9, a8, 1
  9094e6:	298402        	s8i	a9, a8, 2
  9094e9:	298403        	s8i	a9, a8, 3
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9094ec:	2a8407        	s8i	a10, a8, 7
	rix = ath_get_minrateidx(sc, avp);
  9094ef:	ab5b      	add.n	a11, a5, a11
  9094f1:	055a02        	or	a10, a5, a5
  9094f4:	28162b        	s32i	a8, a1, 172
  9094f7:	29162c        	s32i	a9, a1, 176
  9094fa:	5bffb5        	call8	9093d0 <ath_get_minrateidx>
	rate = rt->info[rix].rateCode;
  9094fd:	0ea711        	slli	a7, a10, 2
  909500:	2b5281        	l32i	a11, a5, 0x204
  909503:	aa7a      	add.n	a10, a7, a10
  909505:	0eaa11        	slli	a10, a10, 2
  909508:	aaba      	add.n	a10, a11, a10
  90950a:	2aa034        	l8ui	a10, a10, 52
	ah->ah_setupTxDesc(ds
  90950d:	222217        	l32i	a2, a2, 92
	rate = rt->info[rix].rateCode;
  909510:	2a1628        	s32i	a10, a1, 160
    return (__adf_nbuf_len(buf));
  909513:	044a02        	or	a10, a4, a4
  909516:	5bf5d4        	call8	906c68 <__adf_nbuf_len>
	ah->ah_setupTxDesc(ds
  909519:	c072      	movi.n	a7, 2
  90951b:	29122c        	l32i	a9, a1, 176
  90951e:	28122b        	l32i	a8, a1, 172
  909521:	9712      	s32i.n	a7, a1, 8
  909523:	270aff        	movi	a7, 255
  909526:	9711      	s32i.n	a7, a1, 4
  909528:	2f1228        	l32i	a15, a1, 160
  90952b:	c071      	movi.n	a7, 1
  90952d:	9914      	s32i.n	a9, a1, 16
  90952f:	9913      	s32i.n	a9, a1, 12
  909531:	b4ab      	addi.n	a11, a10, 4
  909533:	c3ef      	movi.n	a14, 63
  909535:	c0d3      	movi.n	a13, 3
  909537:	c1c8      	movi.n	a12, 24
  909539:	da80      	mov.n	a10, a8
  90953b:	271600        	s32i	a7, a1, 0
  90953e:	0b2000        	callx8	a2
	ah->ah_fillTxDesc(ds
  909541:	22122d        	l32i	a2, a1, 180
  909544:	044a02        	or	a10, a4, a4
  909547:	2f2218        	l32i	a15, a2, 96
  90954a:	2f162a        	s32i	a15, a1, 168
  90954d:	5bf5c6        	call8	906c68 <__adf_nbuf_len>
  909550:	28122b        	l32i	a8, a1, 172
  909553:	2f122a        	l32i	a15, a1, 168
			   , asf_roundup(adf_nbuf_len(skb), 4)
  909556:	b3aa      	addi.n	a10, a10, 3
	ah->ah_fillTxDesc(ds
  909558:	c7bc      	movi.n	a11, -4
  90955a:	de80      	mov.n	a14, a8
  90955c:	dd70      	mov.n	a13, a7
  90955e:	dc70      	mov.n	a12, a7
  909560:	0bab01        	and	a11, a10, a11
  909563:	da80      	mov.n	a10, a8
  909565:	0bf000        	callx8	a15
	series[0].Rate = rate;
  909568:	241228        	l32i	a4, a1, 160
	series[0].RateFlags = 0;
  90956b:	29122c        	l32i	a9, a1, 176
	series[0].Rate = rate;
  90956e:	9419      	s32i.n	a4, a1, 36
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  909570:	245d16        	addmi	a4, a5, 0x1600
  909573:	244026        	l8ui	a4, a4, 38
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  909576:	28122b        	l32i	a8, a1, 172
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  909579:	941b      	s32i.n	a4, a1, 44
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  90957b:	24122d        	l32i	a4, a1, 180
  90957e:	dc90      	mov.n	a12, a9
  909580:	224210        	l32i	a2, a4, 64
  909583:	db90      	mov.n	a11, a9
  909585:	da80      	mov.n	a10, a8
	series[0].RateFlags = 0;
  909587:	991c      	s32i.n	a9, a1, 48
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  909589:	df90      	mov.n	a15, a9
  90958b:	c0e4      	movi.n	a14, 4
  90958d:	2d1c20        	addi	a13, a1, 32
	series[0].Tries = 1;
  909590:	9718      	s32i.n	a7, a1, 32
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  909592:	0b2000        	callx8	a2
	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  909595:	255d01        	addmi	a5, a5, 0x100
  909598:	22620d        	l32i	a2, a6, 52
  90959b:	2b501c        	l8ui	a11, a5, 28
  90959e:	066a02        	or	a10, a6, a6
  9095a1:	0b2000        	callx8	a2
	ah->ah_setTxDP(ah, sc->sc_bhalq, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  9095a4:	2b501c        	l8ui	a11, a5, 28
  9095a7:	826a      	l32i.n	a2, a6, 40
  9095a9:	8c3c      	l32i.n	a12, a3, 48
  9095ab:	da60      	mov.n	a10, a6
  9095ad:	0b2000        	callx8	a2
	ah->ah_startTxDma(ah, sc->sc_bhalq);
  9095b0:	2b501c        	l8ui	a11, a5, 28
  9095b3:	826c      	l32i.n	a2, a6, 48
  9095b5:	da60      	mov.n	a10, a6
  9095b7:	0b2000        	callx8	a2
  9095ba:	d10f      	retw.n

009095bc <ath_tgt_attach>:
	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
{
  9095bc:	6c100e        	entry	a1, 112
 * @return int
 */
static inline int
__adf_os_pci_config_read8(adf_os_device_t osdev, int offset, a_uint8_t *val)
{
    (*val) = wlan_pci_config_read(offset, 1);
  9095bf:	2b0a01        	movi	a11, 1
  9095c2:	2a0a0c        	movi	a10, 12
  9095c5:	580131        	call8	909a8c <wlan_pci_config_read>
  9095c8:	0a0a47        	extui	a10, a10, 0, 8
	a_uint8_t csz;

	adf_os_pci_config_read8(osdev, ATH_PCI_CACHE_LINE_SIZE, &csz);

	if (csz == 0)
		csz = 16;
  9095cb:	c150      	movi.n	a5, 16
  9095cd:	0a5a38        	moveqz	a10, a5, a10
	sc->sc_cachelsz = csz << 2;
  9095d0:	0eaa11        	slli	a10, a10, 2
  9095d3:	2a3596        	s16i	a10, a3, 0x12c
    __adf_os_init_bh(hdl, bh, func, arg);
  9095d6:	1b69c4        	l32r	a11, 8e3ce8 <bSet_configuration+0x194>
  9095d9:	2a3a14        	movi	a10, 0x314

	sc->sc_dev = osdev;
  9095dc:	243646        	s32i	a4, a3, 0x118
	sc->sc_hdl = osdev;
  9095df:	243645        	s32i	a4, a3, 0x114
  9095e2:	dc30      	mov.n	a12, a3
  9095e4:	aa3a      	add.n	a10, a3, a10
  9095e6:	5bf9b9        	call8	907ccc <__adf_os_init_bh$isra$5>
  9095e9:	1b69c5        	l32r	a11, 8e3d00 <bSet_configuration+0x1ac>
  9095ec:	2a5a1c        	movi	a10, 0x51c
  9095ef:	033c02        	or	a12, a3, a3
  9095f2:	0a3a08        	add	a10, a3, a10
  9095f5:	5bf9b5        	call8	907ccc <__adf_os_init_bh$isra$5>
  9095f8:	1b69c6        	l32r	a11, 8e3d10 <bSet_configuration+0x1bc>
  9095fb:	2a3a24        	movi	a10, 0x324
  9095fe:	dc30      	mov.n	a12, a3
  909600:	aa3a      	add.n	a10, a3, a10
  909602:	5bf9b2        	call8	907ccc <__adf_os_init_bh$isra$5>
  909605:	1b69c7        	l32r	a11, 8e3d24 <bSet_configuration+0x1d0>
  909608:	2a3a44        	movi	a10, 0x344
  90960b:	033c02        	or	a12, a3, a3
  90960e:	0a3a08        	add	a10, a3, a10
  909611:	5bf9ae        	call8	907ccc <__adf_os_init_bh$isra$5>
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_txtq, owl_tgt_tx_tasklet, sc);
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_bmisstq, ath_bmiss_tasklet, sc);
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_fataltq, ath_fatal_tasklet, sc);

	flags |= AH_USE_EEPROM;
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
  909614:	2c3246        	l32i	a12, a3, 0x118
  909617:	2e1c34        	addi	a14, a1, 52
  90961a:	c0d1      	movi.n	a13, 1
  90961c:	033b02        	or	a11, a3, a3
  90961f:	da20      	mov.n	a10, a2
  909621:	5bf911        	call8	907a68 <_ath_hal_attach_tgt>
  909624:	0aa402        	or	a4, a10, a10
	if (ah == NULL) {
  909627:	64a3e5        	beqz	a10, 909a10 <ath_tgt_attach+0x454>
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  90962a:	1668b5        	l32r	a6, 8e3900 <HIFusb_DescTraceDump+0x118>
		error = ENXIO;
		goto bad;
	}
	sc->sc_ah = ah;
  90962d:	223d05        	addmi	a2, a3, 0x500
  909630:	2a260b        	s32i	a10, a2, 44
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  909633:	276299        	l32i	a7, a6, 0x264
  909636:	2a3245        	l32i	a10, a3, 0x114
  909639:	0b7000        	callx8	a7
	sc->tgt_hif_handle = HIF_init(0);
  90963c:	276270        	l32i	a7, a6, 0x1c0
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  90963f:	2a3600        	s32i	a10, a3, 0
	sc->tgt_hif_handle = HIF_init(0);
  909642:	2a0a00        	movi	a10, 0
  909645:	0b7000        	callx8	a7
	htc_conf.CreditSize = 320;
  909648:	271a40        	movi	a7, 0x140
  90964b:	9714      	s32i.n	a7, a1, 16
	htc_conf.CreditNumber = ATH_TXBUF;
  90964d:	c27d      	movi.n	a7, 45
  90964f:	9715      	s32i.n	a7, a1, 20
	htc_conf.OSHandle = sc->sc_hdl;
  909651:	273245        	l32i	a7, a3, 0x114
	sc->tgt_hif_handle = HIF_init(0);
  909654:	9a31      	s32i.n	a10, a3, 4
	htc_conf.OSHandle = sc->sc_hdl;
  909656:	9716      	s32i.n	a7, a1, 24
	htc_conf.PoolHandle = sc->pool_handle;
  909658:	8730      	l32i.n	a7, a3, 0
	htc_conf.HIFHandle = sc->tgt_hif_handle;
  90965a:	9a17      	s32i.n	a10, a1, 28
	htc_conf.PoolHandle = sc->pool_handle;
  90965c:	9718      	s32i.n	a7, a1, 32
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
  90965e:	1a69c8        	l32r	a10, 8e3d80 <bSet_configuration+0x22c>
  909661:	27627e        	l32i	a7, a6, 0x1f8
  909664:	a51b      	add.n	a11, a1, a5
  909666:	0b7000        	callx8	a7
	init_htc_handle = sc->tgt_htc_handle;
  909669:	176907        	l32r	a7, 8e3a88 <HIFusb_DescTraceDump+0x2a0>
	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  90966c:	1d69c9        	l32r	a13, 8e3d90 <bSet_configuration+0x23c>
	init_htc_handle = sc->tgt_htc_handle;
  90966f:	9a70      	s32i.n	a10, a7, 0
	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  909671:	a53b      	add.n	a11, a3, a5
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
  909673:	9a32      	s32i.n	a10, a3, 8
	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  909675:	2c1a01        	movi	a12, 0x101
  909678:	da30      	mov.n	a10, a3
  90967a:	5bf934        	call8	907b4c <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_cab_service, WMI_CAB_SVC, tgt_HTCRecv_cabhandler);
  90967d:	1d69ca        	l32r	a13, 8e3da8 <bSet_configuration+0x254>
  909680:	2c1a02        	movi	a12, 0x102
  909683:	2b3c2c        	addi	a11, a3, 44
  909686:	033a02        	or	a10, a3, a3
  909689:	5bf930        	call8	907b4c <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_uapsd_service, WMI_UAPSD_SVC, tgt_HTCRecv_uapsdhandler);
  90968c:	1d69cb        	l32r	a13, 8e3db8 <bSet_configuration+0x264>
  90968f:	2c1a03        	movi	a12, 0x103
  909692:	2b3c48        	addi	a11, a3, 72
  909695:	da30      	mov.n	a10, a3
  909697:	5bf92d        	call8	907b4c <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_mgmt_service, WMI_MGMT_SVC, tgt_HTCRecv_mgmthandler);
  90969a:	1d69cc        	l32r	a13, 8e3dcc <bSet_configuration+0x278>
  90969d:	2c1a04        	movi	a12, 0x104
  9096a0:	2b3c64        	addi	a11, a3, 100
  9096a3:	033a02        	or	a10, a3, a3
  9096a6:	5bf929        	call8	907b4c <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_BE_service, WMI_DATA_BE_SVC, tgt_HTCRecvMessageHandler);
  9096a9:	1769cd        	l32r	a7, 8e3de0 <bSet_configuration+0x28c>
  9096ac:	2b0ab8        	movi	a11, 184
  9096af:	dd70      	mov.n	a13, a7
  9096b1:	2c1a07        	movi	a12, 0x107
  9096b4:	ab3b      	add.n	a11, a3, a11
  9096b6:	033a02        	or	a10, a3, a3
  9096b9:	5bf924        	call8	907b4c <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_BK_service, WMI_DATA_BK_SVC, tgt_HTCRecvMessageHandler);
  9096bc:	2b0ad4        	movi	a11, 212
  9096bf:	dd70      	mov.n	a13, a7
  9096c1:	2c1a08        	movi	a12, 0x108
  9096c4:	ab3b      	add.n	a11, a3, a11
  9096c6:	033a02        	or	a10, a3, a3
  9096c9:	5bf920        	call8	907b4c <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_VI_service, WMI_DATA_VI_SVC, tgt_HTCRecvMessageHandler);
  9096cc:	2b0a9c        	movi	a11, 156
  9096cf:	dd70      	mov.n	a13, a7
  9096d1:	2c1a06        	movi	a12, 0x106
  9096d4:	ab3b      	add.n	a11, a3, a11
  9096d6:	033a02        	or	a10, a3, a3
  9096d9:	5bf91c        	call8	907b4c <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_VO_service, WMI_DATA_VO_SVC, tgt_HTCRecvMessageHandler);
  9096dc:	2b0a80        	movi	a11, 128
  9096df:	dd70      	mov.n	a13, a7
  9096e1:	2c1a05        	movi	a12, 0x105
  9096e4:	ab3b      	add.n	a11, a3, a11
  9096e6:	033a02        	or	a10, a3, a3
  9096e9:	5bf918        	call8	907b4c <tgt_reg_service>
    return __adf_os_mem_alloc(size);
  9096ec:	da50      	mov.n	a10, a5
  9096ee:	5bf8fd        	call8	907ae4 <__adf_os_mem_alloc>
    A_MEMZERO(buf,size);
  9096f1:	8864      	l32i.n	a8, a6, 16
  9096f3:	dc50      	mov.n	a12, a5
  9096f5:	c0b0      	movi.n	a11, 0
  9096f7:	d7a0      	mov.n	a7, a10
  9096f9:	0b8000        	callx8	a8
	Magpie_Sys_Commands_Tbl->NumberOfEntries = WMI_DISPATCH_ENTRY_COUNT(Magpie_Sys_DispatchEntries);
  9096fc:	c280      	movi.n	a8, 32
  9096fe:	9872      	s32i.n	a8, a7, 8
	Magpie_Sys_Commands_Tbl->pTable = Magpie_Sys_DispatchEntries;
  909700:	1869ce        	l32r	a8, 8e3e38 <bSet_configuration+0x2e4>
  909703:	dc50      	mov.n	a12, a5
  909705:	9873      	s32i.n	a8, a7, 12
  909707:	8864      	l32i.n	a8, a6, 16
  909709:	c0b0      	movi.n	a11, 0
  90970b:	2a1c24        	addi	a10, a1, 36
  90970e:	0b8000        	callx8	a8
	wmiConfig.HtcHandle = sc->tgt_htc_handle;
  909711:	8532      	l32i.n	a5, a3, 8
	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
  909713:	2a1c24        	addi	a10, a1, 36
	wmiConfig.HtcHandle = sc->tgt_htc_handle;
  909716:	9519      	s32i.n	a5, a1, 36
	wmiConfig.PoolHandle = sc->pool_handle;
  909718:	8530      	l32i.n	a5, a3, 0
  90971a:	951a      	s32i.n	a5, a1, 40
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
  90971c:	c052      	movi.n	a5, 2
  90971e:	951b      	s32i.n	a5, a1, 44
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;
  909720:	c058      	movi.n	a5, 8
  909722:	951c      	s32i.n	a5, a1, 48
	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
  909724:	25628b        	l32i	a5, a6, 0x22c
  909727:	0b5000        	callx8	a5
  90972a:	9a33      	s32i.n	a10, a3, 12
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);
  90972c:	25628c        	l32i	a5, a6, 0x230
  90972f:	db70      	mov.n	a11, a7
	Magpie_Sys_Commands_Tbl->pContext = sc;
  909731:	9371      	s32i.n	a3, a7, 4
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);
  909733:	0b5000        	callx8	a5
	HTC_Ready(sc->tgt_htc_handle);
  909736:	8a32      	l32i.n	a10, a3, 8
  909738:	256281        	l32i	a5, a6, 0x204

	tgt_hif_htc_wmi_init(sc);

	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;
  90973b:	c079      	movi.n	a7, 9
	HTC_Ready(sc->tgt_htc_handle);
  90973d:	0b5000        	callx8	a5
	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;
  909740:	253d01        	addmi	a5, a3, 0x100
  909743:	27541c        	s8i	a7, a5, 28
	struct ath_hal *ah = sc->sc_ah;
  909746:	8a2b      	l32i.n	a10, a2, 44
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NA);
  909748:	1b69cf        	l32r	a11, 8e3e84 <bStandardCommand+0x20>
  90974b:	85a5      	l32i.n	a5, a10, 20
  90974d:	0b5000        	callx8	a5
  909750:	2a367f        	s32i	a10, a3, 0x1fc
	struct ath_hal *ah = sc->sc_ah;
  909753:	8a2b      	l32i.n	a10, a2, 44
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NG);
  909755:	1b69d0        	l32r	a11, 8e3e98 <bStandardCommand+0x34>
  909758:	85a5      	l32i.n	a5, a10, 20
  90975a:	0b5000        	callx8	a5
  90975d:	2a3680        	s32i	a10, a3, 0x200

	ath_rate_setup(sc, IEEE80211_MODE_11NA);
	ath_rate_setup(sc, IEEE80211_MODE_11NG);

	sc->sc_rc = ath_rate_attach(sc);
  909760:	da30      	mov.n	a10, a3
  909762:	580d66        	call8	90ccfc <ath_rate_attach>
  909765:	2a3648        	s32i	a10, a3, 0x120
	if (sc->sc_rc == NULL) {
  909768:	64a295        	beqz	a10, 909a01 <ath_tgt_attach+0x445>
  90976b:	1769d1        	l32r	a7, 8e3eb0 <bStandardCommand+0x4c>
  90976e:	257a40        	movi	a5, 0x740
  909771:	a535      	add.n	a5, a3, a5
  909773:	073708        	add	a7, a3, a7
  909776:	282a0c        	movi	a8, 0x20c
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
		sc->sc_sta[i].an_rcnode = adf_os_mem_alloc(sc->sc_rc->arc_space);
  909779:	293248        	l32i	a9, a3, 0x120
  90977c:	8a90      	l32i.n	a10, a9, 0
  90977e:	281613        	s32i	a8, a1, 76
  909781:	5bf8d8        	call8	907ae4 <__adf_os_mem_alloc>
  909784:	281213        	l32i	a8, a1, 76
  909787:	9a50      	s32i.n	a10, a5, 0
  909789:	a855      	add.n	a5, a5, a8
	for (i=0; i < TARGET_NODE_MAX; i++) {
  90978b:	7759ea        	bne	a5, a7, 909779 <ath_tgt_attach+0x1bd>
	if(ath_numrxbufs == -1)
  90978e:	1569ab        	l32r	a5, 8e3e3c <bSet_configuration+0x2e8>
  909791:	8750      	l32i.n	a7, a5, 0
  909793:	697005        	bnei	a7, -1, 90979c <ath_tgt_attach+0x1e0>
		ath_numrxbufs = ATH_RXBUF;
  909796:	270a14        	movi	a7, 20
  909799:	275600        	s32i	a7, a5, 0
	if (ath_numrxdescs == -1)
  90979c:	1769d2        	l32r	a7, 8e3ee4 <bStandardCommand+0x80>
  90979f:	8570      	l32i.n	a5, a7, 0
  9097a1:	695003        	bnei	a5, -1, 9097a8 <ath_tgt_attach+0x1ec>
		ath_numrxdescs = ATH_RXDESC;
  9097a4:	c154      	movi.n	a5, 20
  9097a6:	9570      	s32i.n	a5, a7, 0
	error = ath_descdma_setup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  9097a8:	253a74        	movi	a5, 0x374
  9097ab:	a535      	add.n	a5, a3, a5
  9097ad:	251610        	s32i	a5, a1, 64
  9097b0:	253a54        	movi	a5, 0x354
  9097b3:	a535      	add.n	a5, a3, a5
  9097b5:	c584      	movi.n	a8, 84
  9097b7:	251611        	s32i	a5, a1, 68
  9097ba:	9810      	s32i.n	a8, a1, 0
  9097bc:	251a18        	movi	a5, 0x118
  9097bf:	a535      	add.n	a5, a3, a5
  9097c1:	8e70      	l32i.n	a14, a7, 0
  9097c3:	1d69d3        	l32r	a13, 8e3f10 <bStandardCommand+0xac>
  9097c6:	2c1211        	l32i	a12, a1, 68
  9097c9:	2b1210        	l32i	a11, a1, 64
  9097cc:	2f0a68        	movi	a15, 104
  9097cf:	da50      	mov.n	a10, a5
  9097d1:	5bfa82        	call8	9081dc <ath_descdma_setup$isra$22$constprop$28>
	if (error != 0)
  9097d4:	65a229        	bnez	a10, 909a01 <ath_tgt_attach+0x445>
	asf_tailq_init(&sc->sc_rxdesc);
  9097d7:	283a64        	movi	a8, 0x364
  9097da:	a838      	add.n	a8, a3, a8
  9097dc:	2836da        	s32i	a8, a3, 0x368
	asf_tailq_init(&sc->sc_rxdesc_idle);
  9097df:	283a5c        	movi	a8, 0x35c
  9097e2:	a838      	add.n	a8, a3, a8
  9097e4:	2836d8        	s32i	a8, a3, 0x360
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
  9097e7:	2732de        	l32i	a7, a3, 0x378
	asf_tailq_init(&sc->sc_rxdesc);
  9097ea:	2a36d9        	s32i	a10, a3, 0x364
	asf_tailq_init(&sc->sc_rxdesc_idle);
  9097ed:	2a36d7        	s32i	a10, a3, 0x35c
	struct ath_rx_desc *ds_prev = NULL;
  9097f0:	d8a0      	mov.n	a8, a10
	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9097f2:	dca0      	mov.n	a12, a10
  9097f4:	6000d6        	j	9098ce <ath_tgt_attach+0x312>
  9097f7:	00002a        	muluh	a0, a0, a0
		if (ds->ds_nbuf != ADF_NBUF_NULL) {
  9097fa:	703429        	ball	a3, a0, 909827 <ath_tgt_attach+0x26b>
  9097fd:	703508        	bbc	a3, a0, 909809 <ath_tgt_attach+0x24d>
  909800:	aa10      	add.n	a0, a1, a10
  909802:	009911        	slli	a9, a9, 16
  909805:	0a9a02        	or	a10, a9, a10
  909808:	297036        	l8ui	a9, a7, 54
  90980b:	089911        	slli	a9, a9, 8
  90980e:	0a9902        	or	a9, a9, a10
  909811:	2a7037        	l8ui	a10, a7, 55
  909814:	09a902        	or	a9, a10, a9
  909817:	64900e        	beqz	a9, 909829 <ath_tgt_attach+0x26d>
			ds->ds_nbuf = ADF_NBUF_NULL;
  90981a:	290a00        	movi	a9, 0
  90981d:	297434        	s8i	a9, a7, 52
  909820:	297435        	s8i	a9, a7, 53
  909823:	297436        	s8i	a9, a7, 54
  909826:	297437        	s8i	a9, a7, 55
    return (__adf_nbuf_dmamap_create(osdev, dmap));
  909829:	2a3246        	l32i	a10, a3, 0x118
  90982c:	2b7c38        	addi	a11, a7, 56
  90982f:	281613        	s32i	a8, a1, 76
  909832:	2c1612        	s32i	a12, a1, 72
  909835:	5bf487        	call8	906a54 <__adf_nbuf_dmamap_create>
		if (adf_nbuf_dmamap_create(sc->sc_dev, &ds->ds_dmap) != A_STATUS_OK) {
  909838:	281213        	l32i	a8, a1, 76
  90983b:	2c1212        	l32i	a12, a1, 72
  90983e:	64a01a        	beqz	a10, 90985c <ath_tgt_attach+0x2a0>
			adf_os_assert(0);
  909841:	296212        	l32i	a9, a6, 72
  909844:	1b69d4        	l32r	a11, 8e3f94 <bStandardCommand+0x130>
  909847:	1a6995        	l32r	a10, 8e3e9c <bStandardCommand+0x38>
  90984a:	0b9000        	callx8	a9
  90984d:	196919        	l32r	a9, 8e3cb4 <bSet_configuration+0x160>
  909850:	2c1212        	l32i	a12, a1, 72
  909853:	0c0200        	memw
  909856:	299200        	l32i	a9, a9, 0
  909859:	281213        	l32i	a8, a1, 76
		ds->ds_daddr = DS2PHYS(&sc->sc_rxdma, ds);
  90985c:	2932de        	l32i	a9, a3, 0x378
  90985f:	2a32e0        	l32i	a10, a3, 0x380
  909862:	09790c        	sub	a9, a7, a9
  909865:	aa99      	add.n	a9, a9, a10
  909867:	098d57        	extui	a13, a9, 24, 8
  90986a:	090b57        	extui	a11, a9, 16, 8
  90986d:	098a47        	extui	a10, a9, 8, 8
  909870:	090947        	extui	a9, a9, 0, 8
  909873:	2d7448        	s8i	a13, a7, 72
  909876:	2b7449        	s8i	a11, a7, 73
  909879:	2a744a        	s8i	a10, a7, 74
  90987c:	29744b        	s8i	a9, a7, 75
		if (ds_prev) {
  90987f:	c88a      	beqz.n	a8, 90988d <ath_tgt_attach+0x2d1>
			ds_prev->ds_link = ds->ds_daddr;
  909881:	2d8400        	s8i	a13, a8, 0
  909884:	2b8401        	s8i	a11, a8, 1
  909887:	2a8402        	s8i	a10, a8, 2
  90988a:	298403        	s8i	a9, a8, 3
		ds->ds_link = 0;
  90988d:	c080      	movi.n	a8, 0
  90988f:	287400        	s8i	a8, a7, 0
  909892:	287401        	s8i	a8, a7, 1
  909895:	287402        	s8i	a8, a7, 2
  909898:	287403        	s8i	a8, a7, 3
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
  90989b:	28744c        	s8i	a8, a7, 76
  90989e:	28744d        	s8i	a8, a7, 77
  9098a1:	28744e        	s8i	a8, a7, 78
  9098a4:	28744f        	s8i	a8, a7, 79
  9098a7:	2832da        	l32i	a8, a3, 0x368
	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9098aa:	b1cc      	addi.n	a12, a12, 1
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
  9098ac:	088957        	extui	a9, a8, 24, 8
  9098af:	297450        	s8i	a9, a7, 80
  9098b2:	080957        	extui	a9, a8, 16, 8
  9098b5:	297451        	s8i	a9, a7, 81
  9098b8:	088947        	extui	a9, a8, 8, 8
  9098bb:	287453        	s8i	a8, a7, 83
  9098be:	297452        	s8i	a9, a7, 82
  9098c1:	9780      	s32i.n	a7, a8, 0
  9098c3:	287c4c        	addi	a8, a7, 76
  9098c6:	2836da        	s32i	a8, a3, 0x368
	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9098c9:	d870      	mov.n	a8, a7
  9098cb:	277c54        	addi	a7, a7, 84
  9098ce:	1a69d2        	l32r	a10, 8e4018 <bStandardCommand+0x1b4>
  9098d1:	89a0      	l32i.n	a9, a10, 0
  9098d3:	79cb02        	bgeu	a12, a9, 9098d9 <ath_tgt_attach+0x31d>
  9098d6:	63ff1f        	j	9097f9 <ath_tgt_attach+0x23d>
	error = ath_descdma_setup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  9098d9:	263a8c        	movi	a6, 0x38c
  9098dc:	273ac0        	movi	a7, 0x3c0
  9098df:	290a88        	movi	a9, 136
  9098e2:	a636      	add.n	a6, a3, a6
  9098e4:	a737      	add.n	a7, a3, a7
  9098e6:	1d69d5        	l32r	a13, 8e403c <bStandardCommand+0x1d8>
  9098e9:	9910      	s32i.n	a9, a1, 0
  9098eb:	2f0a94        	movi	a15, 148
  9098ee:	c2ee      	movi.n	a14, 46
  9098f0:	dc70      	mov.n	a12, a7
  9098f2:	db60      	mov.n	a11, a6
  9098f4:	da50      	mov.n	a10, a5
  9098f6:	291612        	s32i	a9, a1, 72
  9098f9:	5bfa38        	call8	9081dc <ath_descdma_setup$isra$22$constprop$28>
  9098fc:	d8a0      	mov.n	a8, a10
	if (error != 0) {
  9098fe:	291212        	l32i	a9, a1, 72
  909901:	c8a3      	beqz.n	a10, 909908 <ath_tgt_attach+0x34c>
  909903:	60002d        	j	909934 <ath_tgt_attach+0x378>
  909906:	00001c        	mul16u	a0, a0, a0
	error = ath_descdma_setup(sc, &sc->sc_bdma, (ath_bufhead *)&sc->sc_bbuf,
  909909:	69d71d        	bnei	a13, 7, 90992a <ath_tgt_attach+0x36e>
  90990c:	69d62b        	bnei	a13, 6, 90993b <ath_tgt_attach+0x37f>
  90990f:	3aa499        	excw
  909912:	102f0a        	l32r	a0, 8d553c <_bss_end+0x3c262c>
  909915:	94c0      	s32i.n	a4, a12, 0
  909917:	e1          	.byte 0xe1
  909918:	ac3c      	add.n	a12, a3, a12
  90991a:	ab3b      	add.n	a11, a3, a11
  90991c:	da50      	mov.n	a10, a5
  90991e:	281613        	s32i	a8, a1, 76
  909921:	5bfa2e        	call8	9081dc <ath_descdma_setup$isra$22$constprop$28>
	if (error != 0) {
  909924:	281213        	l32i	a8, a1, 76
  909927:	c9a9      	beqz.n	a10, 909944 <ath_tgt_attach+0x388>
		ath_descdma_cleanup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  909929:	dd80      	mov.n	a13, a8
  90992b:	dc70      	mov.n	a12, a7
  90992d:	db60      	mov.n	a11, a6
  90992f:	da30      	mov.n	a10, a3
  909931:	5bf8c0        	call8	907c34 <ath_descdma_cleanup>
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  909934:	2c1211        	l32i	a12, a1, 68
  909937:	2b1210        	l32i	a11, a1, 64
  90993a:	c0d1      	movi.n	a13, 1
  90993c:	da30      	mov.n	a10, a3
  90993e:	5bf8bd        	call8	907c34 <ath_descdma_cleanup>
  909941:	6000bc        	j	909a01 <ath_tgt_attach+0x445>
	bf = asf_tailq_first(&sc->sc_txbuf);
  909944:	2532f0        	l32i	a5, a3, 0x3c0
	bf->bf_isaggr = bf->bf_isretried = bf->bf_retries = 0;
  909947:	c67f      	movi.n	a7, -17
  909949:	265087        	l8ui	a6, a5, 135
  90994c:	2a5486        	s8i	a10, a5, 134
  90994f:	076601        	and	a6, a6, a7
  909952:	27fadf        	movi	a7, -33
  909955:	076601        	and	a6, a6, a7
  909958:	265487        	s8i	a6, a5, 135
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90995b:	8659      	l32i.n	a6, a5, 36
  90995d:	875a      	l32i.n	a7, a5, 40
  90995f:	c866      	beqz.n	a6, 909969 <ath_tgt_attach+0x3ad>
  909961:	976a      	s32i.n	a7, a6, 40
  909963:	600005        	j	90996c <ath_tgt_attach+0x3b0>
  909966:	000000        	ill
  909969:	2736f1        	s32i	a7, a3, 0x3c4
  90996c:	875a      	l32i.n	a7, a5, 40
	error = ath_desc_alloc(sc);
	if (error != 0) {
		goto bad;
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);
  90996e:	c0b3      	movi.n	a11, 3
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  909970:	9670      	s32i.n	a6, a7, 0
	sc->sc_txbuf_held = bf;
  909972:	2536dc        	s32i	a5, a3, 0x370
	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);
  909975:	1669d2        	l32r	a6, 8e40c0 <bStandardCommand+0x25c>
  909978:	1568b5        	l32r	a5, 8e3c4c <bSet_configuration+0xf8>
  90997b:	8c60      	l32i.n	a12, a6, 0
  90997d:	25529b        	l32i	a5, a5, 0x26c
  909980:	8a30      	l32i.n	a10, a3, 0
  909982:	2d6a80        	movi	a13, 0x680
  909985:	0b5000        	callx8	a5
  909988:	c060      	movi.n	a6, 0
  90998a:	253acc        	movi	a5, 0x3cc
  90998d:	a535      	add.n	a5, a3, a5
	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  90998f:	d860      	mov.n	a8, a6
		txq->axq_link = NULL;
  909991:	d760      	mov.n	a7, a6
		sc->sc_txqsetup |= 1<<qnum;
  909993:	c0b1      	movi.n	a11, 1
  909995:	c09a      	movi.n	a9, 10
  909997:	6d9825        	loop	a9, 9099c0 <ath_tgt_attach+0x404>
		asf_tailq_init(&txq->axq_q);
  90999a:	b85a      	addi.n	a10, a5, 8
  90999c:	9a53      	s32i.n	a10, a5, 12
		asf_tailq_init(&txq->axq_tidq);
  90999e:	2a5c18        	addi	a10, a5, 24
  9099a1:	9a57      	s32i.n	a10, a5, 28
		sc->sc_txqsetup |= 1<<qnum;
  9099a3:	008104        	ssl	a8
  9099a6:	00ba1a        	sll	a10, a11
		txq->axq_qnum = qnum;
  9099a9:	9850      	s32i.n	a8, a5, 0
		txq->axq_link = NULL;
  9099ab:	9751      	s32i.n	a7, a5, 4
		asf_tailq_init(&txq->axq_q);
  9099ad:	9752      	s32i.n	a7, a5, 8
		txq->axq_depth = 0;
  9099af:	9754      	s32i.n	a7, a5, 16
		txq->axq_linkbuf = NULL;
  9099b1:	9755      	s32i.n	a7, a5, 20
		asf_tailq_init(&txq->axq_tidq);
  9099b3:	9756      	s32i.n	a7, a5, 24
		sc->sc_txqsetup |= 1<<qnum;
  9099b5:	06a602        	or	a6, a10, a6
  9099b8:	060647        	extui	a6, a6, 0, 8
	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  9099bb:	b188      	addi.n	a8, a8, 1
  9099bd:	255c20        	addi	a5, a5, 32
  9099c0:	253d03        	addmi	a5, a3, 0x300
  9099c3:	2654c8        	s8i	a6, a5, 200
	sc->sc_uapsdq  = &sc->sc_txq[UAPSDQ_NUM];
  9099c6:	254aec        	movi	a5, 0x4ec
  9099c9:	a535      	add.n	a5, a3, a5
  9099cb:	952d      	s32i.n	a5, a2, 52
	sc->sc_cabq    = &sc->sc_txq[CABQ_NUM];
  9099cd:	254acc        	movi	a5, 0x4cc
  9099d0:	a535      	add.n	a5, a3, a5
  9099d2:	952c      	s32i.n	a5, a2, 48
	sc->sc_ac2q[WME_AC_BE]  = &sc->sc_txq[0];
  9099d4:	253acc        	movi	a5, 0x3cc
  9099d7:	a535      	add.n	a5, a3, a5
  9099d9:	9523      	s32i.n	a5, a2, 12
	sc->sc_ac2q[WME_AC_BK]  = &sc->sc_txq[1];
  9099db:	253aec        	movi	a5, 0x3ec
  9099de:	a535      	add.n	a5, a3, a5
  9099e0:	9524      	s32i.n	a5, a2, 16
	sc->sc_ac2q[WME_AC_VI]  = &sc->sc_txq[2];
  9099e2:	254a0c        	movi	a5, 0x40c
  9099e5:	a535      	add.n	a5, a3, a5
  9099e7:	9525      	s32i.n	a5, a2, 20
	sc->sc_ac2q[WME_AC_VO]  = &sc->sc_txq[3];
  9099e9:	254a2c        	movi	a5, 0x42c
  9099ec:	a535      	add.n	a5, a3, a5
  9099ee:	9526      	s32i.n	a5, a2, 24

	ath_tgt_txq_setup(sc);
	sc->sc_imask =0;
	ah->ah_setInterrupts(ah, 0);
  9099f0:	224228        	l32i	a2, a4, 160
	sc->sc_imask =0;
  9099f3:	2736c4        	s32i	a7, a3, 0x310
	ah->ah_setInterrupts(ah, 0);
  9099f6:	c0b0      	movi.n	a11, 0
  9099f8:	da40      	mov.n	a10, a4
  9099fa:	0b2000        	callx8	a2

	return 0;
  9099fd:	c020      	movi.n	a2, 0
  9099ff:	d10f      	retw.n
bad:
bad2:
	ath_desc_free(sc);
  909a01:	da30      	mov.n	a10, a3
  909a03:	5bf9e3        	call8	908190 <ath_desc_free>
	if (ah)
		ah->ah_detach(ah);
  909a06:	8246      	l32i.n	a2, a4, 24
  909a08:	da40      	mov.n	a10, a4
  909a0a:	0b2000        	callx8	a2
}
  909a0d:	d10f      	retw.n
  909a0f:	00da30        	excw
	ath_desc_free(sc);
  909a12:	5bf9df        	call8	908190 <ath_desc_free>
  909a15:	63fff4        	j	909a0d <ath_tgt_attach+0x451>

00909a18 <ath_detach>:
	HIF_shutdown(sc->tgt_hif_handle);
	BUF_Pool_shutdown(sc->pool_handle);
}

a_int32_t ath_detach(struct ath_softc_tgt *sc)
{
  909a18:	6c1004        	entry	a1, 32
	WMI_Shutdown(sc->tgt_wmi_handle);
  909a1b:	1368b5        	l32r	a3, 8e3cf0 <bSet_configuration+0x19c>
  909a1e:	8a23      	l32i.n	a10, a2, 12
  909a20:	283292        	l32i	a8, a3, 0x248
  909a23:	0b8000        	callx8	a8
	HTC_Shutdown(sc->tgt_htc_handle);
  909a26:	8a22      	l32i.n	a10, a2, 8
  909a28:	28327f        	l32i	a8, a3, 0x1fc
  909a2b:	0b8000        	callx8	a8
	HIF_shutdown(sc->tgt_hif_handle);
  909a2e:	8a21      	l32i.n	a10, a2, 4
  909a30:	283271        	l32i	a8, a3, 0x1c4
  909a33:	0b8000        	callx8	a8
	BUF_Pool_shutdown(sc->pool_handle);
  909a36:	8a20      	l32i.n	a10, a2, 0
  909a38:	23329a        	l32i	a3, a3, 0x268
  909a3b:	0b3000        	callx8	a3
	tgt_hif_htc_wmi_shutdown(sc);
}
  909a3e:	d10f      	retw.n

00909a40 <wlan_pci_module_init>:
adf_drv_info_t* g_wlan_drv = NULL;
adf_drv_handle_t g_wlan_drv_handle = NULL;
adf_os_drv_intr g_wlan_intr = NULL;

void wlan_pci_module_init(void)
{
  909a40:	6c1004        	entry	a1, 32
	if (g_pci_init_func != NULL) {
  909a43:	1869d8        	l32r	a8, 8e41a4 <bStandardCommand+0x340>
  909a46:	8a80      	l32i.n	a10, a8, 0
  909a48:	c8a1      	beqz.n	a10, 909a4d <wlan_pci_module_init+0xd>
		g_pci_init_func();
  909a4a:	0ba000        	callx8	a10
  909a4d:	d10f      	retw.n
	...

00909a50 <wlan_pci_register_drv>:
	}
}

void wlan_pci_register_drv(adf_drv_info_t *drv)
{
  909a50:	6c1004        	entry	a1, 32
	g_wlan_drv = drv;
  909a53:	1869d9        	l32r	a8, 8e41b8 <bStandardCommand+0x354>
  909a56:	9280      	s32i.n	a2, a8, 0
  909a58:	d10f      	retw.n
	...

00909a5c <wlan_pci_config_write>:
mem_fail:
	return;
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
{
  909a5c:	6c1006        	entry	a1, 48
#if MAGPIE_ENABLE_PCIE == 1
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
  909a5f:	1869da        	l32r	a8, 8e41c8 <bStandardCommand+0x364>
  909a62:	c7ac      	movi.n	a10, -4
  909a64:	a828      	add.n	a8, a2, a8
  909a66:	0a8801        	and	a8, a8, a10
	A_UINT8 *ptr = (A_UINT8 *)addr;
	A_UINT8 *valptr = (A_UINT8 *)&val;
	int idx = offset & 0x3;
  909a69:	020241        	extui	a2, a2, 0, 2
  909a6c:	028202        	or	a2, a8, a2
{
  909a6f:	9310      	s32i.n	a3, a1, 0
  909a71:	d910      	mov.n	a9, a1
	int i;

	for (i = 0; i < width; i++) {
  909a73:	d820      	mov.n	a8, a2
  909a75:	600007        	j	909a80 <wlan_pci_config_write+0x24>
		ptr[idx + i] = valptr[3-i];
  909a78:	2a9004        	l8ui	a10, a9, 4
  909a7b:	2a8400        	s8i	a10, a8, 0
  909a7e:	b188      	addi.n	a8, a8, 1
	for (i = 0; i < width; i++) {
  909a80:	028a0c        	sub	a10, a8, a2
  909a83:	b099      	addi.n	a9, a9, -1
  909a85:	74a2ef        	blt	a10, a4, 909a78 <wlan_pci_config_write+0x1c>
	}
#endif

	return 0;
}
  909a88:	c020      	movi.n	a2, 0
  909a8a:	d10f      	retw.n

00909a8c <wlan_pci_config_read>:

int wlan_pci_config_read(int offset, int width)
{
  909a8c:	6c1006        	entry	a1, 48
#if MAGPIE_ENABLE_PCIE == 0
	return 0;
#else
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
  909a8f:	1969da        	l32r	a9, 8e41f8 <bStandardCommand+0x394>
  909a92:	c78c      	movi.n	a8, -4
  909a94:	a929      	add.n	a9, a2, a9
  909a96:	089901        	and	a9, a9, a8
	unsigned long value = *((unsigned long *)addr);
  909a99:	8890      	l32i.n	a8, a9, 0
	A_UINT8 *ptr = (A_UINT8 *)&value;
	int idx = offset & 0x3;
	int result = 0;
	int i;

	for (i = 0; i < width; i++) {
  909a9b:	c090      	movi.n	a9, 0
	unsigned long value = *((unsigned long *)addr);
  909a9d:	9810      	s32i.n	a8, a1, 0
  909a9f:	c78f      	movi.n	a8, -1
  909aa1:	028803        	xor	a8, a8, a2
  909aa4:	080841        	extui	a8, a8, 0, 2
  909aa7:	a818      	add.n	a8, a1, a8
	int result = 0;
  909aa9:	d290      	mov.n	a2, a9
	for (i = 0; i < width; i++) {
  909aab:	600014        	j	909ac3 <wlan_pci_config_read+0x37>
  909aae:	00002a        	muluh	a0, a0, a0
		result |= (ptr[ 3 - (idx + i)] << (8*i));
  909ab1:	8000      	l32i.n	a0, a0, 0
  909ab3:	0d9b11        	slli	a11, a9, 3
  909ab6:	00b104        	ssl	a11
  909ab9:	00aa1a        	sll	a10, a10
  909abc:	0a2202        	or	a2, a2, a10
	for (i = 0; i < width; i++) {
  909abf:	b199      	addi.n	a9, a9, 1
  909ac1:	b088      	addi.n	a8, a8, -1
  909ac3:	7392e9        	blt	a9, a3, 909ab0 <wlan_pci_config_read+0x24>
	}

	return result;
#endif
}
  909ac6:	d10f      	retw.n

00909ac8 <wlan_pci_probe>:
{
  909ac8:	6c100a        	entry	a1, 80
	adf_os_resource_t       drv_res = {0};
  909acb:	c1c8      	movi.n	a12, 24
  909acd:	2b0a00        	movi	a11, 0
  909ad0:	011a02        	or	a10, a1, a1
  909ad3:	5b74dd        	call8	8e6e48 <memset>
	adf_os_attach_data_t    drv_data = {{0}};
  909ad6:	c1c0      	movi.n	a12, 16
  909ad8:	2b0a00        	movi	a11, 0
  909adb:	2a1c18        	addi	a10, a1, 24
  909ade:	5b74da        	call8	8e6e48 <memset>
	A_PRINTF("<wlan_pci_probe>: Attaching the driver\n");
  909ae1:	1268b5        	l32r	a2, 8e3db8 <bSet_configuration+0x264>
  909ae4:	1a69db        	l32r	a10, 8e4250 <bStandardCommand+0x3ec>
  909ae7:	232212        	l32i	a3, a2, 72
  909aea:	0b3000        	callx8	a3
	vendor_id = wlan_pci_config_read(0, 2);
  909aed:	c0b2      	movi.n	a11, 2
  909aef:	c0a0      	movi.n	a10, 0
  909af1:	5bffe6        	call8	909a8c <wlan_pci_config_read>
	device_id = wlan_pci_config_read(2, 2);
  909af4:	c0b2      	movi.n	a11, 2
	vendor_id = wlan_pci_config_read(0, 2);
  909af6:	d3a0      	mov.n	a3, a10
	device_id = wlan_pci_config_read(2, 2);
  909af8:	dab0      	mov.n	a10, a11
  909afa:	5bffe4        	call8	909a8c <wlan_pci_config_read>
	A_PRINTF("<wlan_pci_probe>: Vendor id 0x%x Dev id 0x%x\n", vendor_id, device_id);
  909afd:	282212        	l32i	a8, a2, 72
  909b00:	0aac02        	or	a12, a10, a10
  909b03:	1a69dc        	l32r	a10, 8e4274 <bStandardCommand+0x410>
  909b06:	033b02        	or	a11, a3, a3
  909b09:	0b8000        	callx8	a8
	if (vendor_id != ATHEROS_VENDOR_ID) {
  909b0c:	1869dd        	l32r	a8, 8e4280 <bStandardCommand+0x41c>
  909b0f:	783109        	beq	a3, a8, 909b1c <wlan_pci_probe+0x54>
		A_PRINTF("<wlan_pci_probe>: Atheros card not found\n");
  909b12:	222212        	l32i	a2, a2, 72
  909b15:	1a69de        	l32r	a10, 8e4290 <bStandardCommand+0x42c>
  909b18:	600012        	j	909b2e <wlan_pci_probe+0x66>
  909b1b:	002822        	excw
	sc = A_ALLOCRAM(sizeof(__adf_softc_t));
  909b1e:	52c0b4        	call0	8b9df0 <_bss_end+0x3a6ee0>
  909b21:	c0a0      	movi.n	a10, 0
  909b23:	0b8000        	callx8	a8
	if (!sc) {
  909b26:	ccaa      	bnez.n	a10, 909b34 <wlan_pci_probe+0x6c>
		A_PRINTF("Cannot malloc softc\n");
  909b28:	222212        	l32i	a2, a2, 72
  909b2b:	1a69df        	l32r	a10, 8e42a8 <bStandardCommand+0x444>
  909b2e:	0b2000        	callx8	a2
	return;
  909b31:	d10f      	retw.n
  909b33:	00c224        	excw
	drv_data.pci.device    = AR5416_DEVID_PCIE;
  909b36:	9217      	s32i.n	a2, a1, 28
	drv_res.start  = (a_uint32_t) 0;
  909b38:	1269e0        	l32r	a2, 8e42b8 <bStandardCommand+0x454>
	drv_data.pci.subvendor = 0;
  909b3b:	c0d0      	movi.n	a13, 0
	drv_res.start  = (a_uint32_t) 0;
  909b3d:	9210      	s32i.n	a2, a1, 0
	drv_res.end    = 0;
  909b3f:	9212      	s32i.n	a2, a1, 8
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909b41:	1269d9        	l32r	a2, 8e42a8 <bStandardCommand+0x444>
	drv_data.pci.vendor    = 0x168c;
  909b44:	9316      	s32i.n	a3, a1, 24
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909b46:	8220      	l32i.n	a2, a2, 0
	drv_res.start  = (a_uint32_t) 0;
  909b48:	1369e0        	l32r	a3, 8e42c8 <bStandardCommand+0x464>
	drv_data.pci.subvendor = 0;
  909b4b:	9d18      	s32i.n	a13, a1, 32
	drv_data.pci.subdevice = 0;
  909b4d:	9d19      	s32i.n	a13, a1, 36
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909b4f:	8220      	l32i.n	a2, a2, 0
	drv_res.start  = (a_uint32_t) 0;
  909b51:	9311      	s32i.n	a3, a1, 4
	drv_res.end    = 0;
  909b53:	9313      	s32i.n	a3, a1, 12
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
  909b55:	9d14      	s32i.n	a13, a1, 16
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909b57:	2c1c18        	addi	a12, a1, 24
  909b5a:	c0b1      	movi.n	a11, 1
  909b5c:	da10      	mov.n	a10, a1
  909b5e:	0b2000        	callx8	a2
  909b61:	1269e1        	l32r	a2, 8e42e8 <bStandardCommand+0x484>
  909b64:	9a20      	s32i.n	a10, a2, 0
  909b66:	d10f      	retw.n

00909b68 <wlan_pci_isr>:

void wlan_pci_isr()
{
  909b68:	6c1004        	entry	a1, 32
	if (g_wlan_intr != NULL && g_wlan_drv_handle != NULL) {
  909b6b:	1869e2        	l32r	a8, 8e42f4 <bStandardCommand+0x490>
  909b6e:	8880      	l32i.n	a8, a8, 0
  909b70:	c888      	beqz.n	a8, 909b7c <wlan_pci_isr+0x14>
  909b72:	1969e1        	l32r	a9, 8e42f8 <bStandardCommand+0x494>
  909b75:	8a90      	l32i.n	a10, a9, 0
  909b77:	c8a1      	beqz.n	a10, 909b7c <wlan_pci_isr+0x14>
		g_wlan_intr(g_wlan_drv_handle);
  909b79:	0b8000        	callx8	a8
  909b7c:	d10f      	retw.n
	...

00909b80 <_HTC_Shutdown>:

	return pHTC;
}

LOCAL void _HTC_Shutdown(htc_handle_t htcHandle)
{
  909b80:	6c1004        	entry	a1, 32
  909b83:	d10f      	retw.n
  909b85:	000000        	ill

00909b88 <_HTC_RegisterService>:

	adf_os_mem_free(pHTC);
}

LOCAL void _HTC_RegisterService(htc_handle_t htcHandle, HTC_SERVICE *pService)
{
  909b88:	6c1004        	entry	a1, 32
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;

        /* add it to the list */
	pService->pNext = pHTC->pServiceList;
  909b8b:	282290        	l32i	a8, a2, 0x240
  909b8e:	9830      	s32i.n	a8, a3, 0
	pHTC->pServiceList = pService;
  909b90:	232690        	s32i	a3, a2, 0x240
  909b93:	d10f      	retw.n
  909b95:	000000        	ill

00909b98 <_HTC_GetReservedHeadroom>:
void _HTC_ResumeRecv(HTC_ENDPOINT_ID EndpointID)
{
}

int _HTC_GetReservedHeadroom(htc_handle_t htcHandle)
{
  909b98:	6c1004        	entry	a1, 32
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;

	return HTC_HDR_LENGTH + HIF_get_reserved_headroom(pHTC->hifHandle);
  909b9b:	1868b5        	l32r	a8, 8e3e70 <bStandardCommand+0xc>
  909b9e:	2a229a        	l32i	a10, a2, 0x268
  909ba1:	28827a        	l32i	a8, a8, 0x1e8
  909ba4:	0b8000        	callx8	a8
}
  909ba7:	b8a2      	addi.n	a2, a10, 8
  909ba9:	d10f      	retw.n
	...

00909bac <HTCSendDoneHandler>:
		HTCCheckAndSendCreditReport(pHTC, HTC_ANY_ENDPOINT_MASK,NULL,ENDPOINT_MAX);
	}
}

LOCAL void HTCSendDoneHandler(adf_nbuf_t buf, void *context)
{
  909bac:	6c1004        	entry	a1, 32
    return (__adf_nbuf_get_priv(buf));
  909baf:	022a02        	or	a10, a2, a2
  909bb2:	5bf38e        	call8	9069ec <__adf_nbuf_get_priv>
	A_UINT8 current_eid;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	HTC_BUF_CONTEXT *ctx;

	ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(buf);
	current_eid = ctx->end_point;
  909bb5:	24a000        	l8ui	a4, a10, 0
    return __adf_nbuf_pull_head(buf, size);
  909bb8:	c0b8      	movi.n	a11, 8
  909bba:	022a02        	or	a10, a2, a2
  909bbd:	5bf366        	call8	906958 <__adf_nbuf_pull_head>
	/* Walk through the buffers and fixup the ones we used for HTC headers.
	 * The buffer list may contain more than one string of HTC buffers comprising of an
	 * HTC message so we need to check every buffer */
	adf_nbuf_pull_head(buf, HTC_HDR_LENGTH);

	pHTC->Endpoints[current_eid].pService->
  909bc0:	0f4811        	slli	a8, a4, 1
  909bc3:	a488      	add.n	a8, a8, a4
  909bc5:	0d8811        	slli	a8, a8, 3
  909bc8:	a833      	add.n	a3, a3, a8
  909bca:	8332      	l32i.n	a3, a3, 8
  909bcc:	db20      	mov.n	a11, a2
  909bce:	8832      	l32i.n	a8, a3, 8
  909bd0:	8c36      	l32i.n	a12, a3, 24
  909bd2:	044a02        	or	a10, a4, a4
  909bd5:	0b8000        	callx8	a8
  909bd8:	d10f      	retw.n
	...

00909bdc <HTC_AssembleBuffers>:
{
  909bdc:	6c1004        	entry	a1, 32
	BUF_Pool_create_pool(pHTC->PoolHandle, POOL_ID_HTC_CONTROL, Count, Size);
  909bdf:	1868b5        	l32r	a8, 8e3eb4 <bStandardCommand+0x50>
  909be2:	2a229b        	l32i	a10, a2, 0x26c
  909be5:	28829b        	l32i	a8, a8, 0x26c
  909be8:	dd40      	mov.n	a13, a4
  909bea:	dc30      	mov.n	a12, a3
  909bec:	c0b0      	movi.n	a11, 0
  909bee:	0b8000        	callx8	a8
  909bf1:	d10f      	retw.n
	...

00909bf4 <_HTC_Init>:
{
  909bf4:	6c1006        	entry	a1, 48
    return A_ALLOCRAM(size);
  909bf7:	1468b5        	l32r	a4, 8e3ecc <bStandardCommand+0x68>
  909bfa:	022502        	or	a5, a2, a2
  909bfd:	224252        	l32i	a2, a4, 0x148
  909c00:	2b2a74        	movi	a11, 0x274
  909c03:	c0a0      	movi.n	a10, 0
  909c05:	0b2000        	callx8	a2
    A_MEMZERO(buf,size);
  909c08:	8844      	l32i.n	a8, a4, 16
  909c0a:	2c2a74        	movi	a12, 0x274
  909c0d:	c0b0      	movi.n	a11, 0
    return A_ALLOCRAM(size);
  909c0f:	d2a0      	mov.n	a2, a10
    A_MEMZERO(buf,size);
  909c11:	0b8000        	callx8	a8
	pHTC->OSHandle = pConfig->OSHandle;
  909c14:	8832      	l32i.n	a8, a3, 8
	pHTC->hifHandle = pConfig->HIFHandle;
  909c16:	8a33      	l32i.n	a10, a3, 12
	pHTC->OSHandle = pConfig->OSHandle;
  909c18:	9820      	s32i.n	a8, a2, 0
	pHTC->PoolHandle = pConfig->PoolHandle;
  909c1a:	8834      	l32i.n	a8, a3, 16
	HIF_register_callback(pConfig->HIFHandle, &hifCBConfig);
  909c1c:	db10      	mov.n	a11, a1
	pHTC->PoolHandle = pConfig->PoolHandle;
  909c1e:	28269b        	s32i	a8, a2, 0x26c
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
  909c21:	284287        	l32i	a8, a4, 0x21c
	pHTC->hifHandle = pConfig->HIFHandle;
  909c24:	2a269a        	s32i	a10, a2, 0x268
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
  909c27:	9810      	s32i.n	a8, a1, 0
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
  909c29:	284286        	l32i	a8, a4, 0x218
	hifCBConfig.context = pHTC;
  909c2c:	9212      	s32i.n	a2, a1, 8
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
  909c2e:	9811      	s32i.n	a8, a1, 4
	HIF_register_callback(pConfig->HIFHandle, &hifCBConfig);
  909c30:	284272        	l32i	a8, a4, 0x1c8
  909c33:	0b8000        	callx8	a8
		pHTC->NumBuffersForCreditRpts = HTC_DEFAULT_NUM_CTRL_BUFFERS;
  909c36:	c086      	movi.n	a8, 6
  909c38:	282696        	s32i	a8, a2, 0x258
		pHTC->MaxEpPendingCreditRpts = HTC_DEFAULT_MAX_EP_PENDING_CREDIT_REPORTS;
  909c3b:	c083      	movi.n	a8, 3
  909c3d:	282699        	s32i	a8, a2, 0x264
	pHTC->CtrlBufferAllocSize = MIN_CREDIT_BUFFER_ALLOC_SIZE * pHTC->NumBuffersForCreditRpts;
  909c40:	280ad8        	movi	a8, 216
  909c43:	282697        	s32i	a8, a2, 0x25c
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
  909c46:	8830      	l32i.n	a8, a3, 0
	pHTC->TotalCredits = pConfig->CreditNumber;
  909c48:	8331      	l32i.n	a3, a3, 4
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
  909c4a:	282691        	s32i	a8, a2, 0x244
	pHTC->TotalCredits = pConfig->CreditNumber;
  909c4d:	232694        	s32i	a3, a2, 0x250
	pHTC->TotalCreditsAssigned = 0;
  909c50:	c030      	movi.n	a3, 0
  909c52:	232695        	s32i	a3, a2, 0x254
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
  909c55:	234288        	l32i	a3, a4, 0x220
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
  909c58:	c18c      	movi.n	a8, 28
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
  909c5a:	23268a        	s32i	a3, a2, 0x228
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
  909c5d:	234289        	l32i	a3, a4, 0x224
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID,
  909c60:	2a229a        	l32i	a10, a2, 0x268
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
  909c63:	23268b        	s32i	a3, a2, 0x22c
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
  909c66:	232d02        	addmi	a3, a2, 0x200
  909c69:	28351d        	s16i	a8, a3, 58
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
  909c6c:	c480      	movi.n	a8, 64
  909c6e:	28351c        	s16i	a8, a3, 56
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
  909c71:	232a24        	movi	a3, 0x224
  909c74:	032308        	add	a3, a2, a3
  909c77:	9322      	s32i.n	a3, a2, 8
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID,
  909c79:	23427c        	l32i	a3, a4, 0x1f0
  909c7c:	2c2c18        	addi	a12, a2, 24
  909c7f:	2b2c19        	addi	a11, a2, 25
	pHTC->HTCControlService.ServiceCtx = pHTC;
  909c82:	22268f        	s32i	a2, a2, 0x23c
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID,
  909c85:	0b3000        	callx8	a3
	HIF_config_pipe(pHTC->hifHandle, pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 1);
  909c88:	2b2019        	l8ui	a11, a2, 25
  909c8b:	234275        	l32i	a3, a4, 0x1d4
  909c8e:	2a229a        	l32i	a10, a2, 0x268
  909c91:	c0c1      	movi.n	a12, 1
  909c93:	0b3000        	callx8	a3
	pHTC->CurrentEpIndex = ENDPOINT1;
  909c96:	c031      	movi.n	a3, 1
  909c98:	232688        	s32i	a3, a2, 0x220
	HTC_AssembleBuffers(pHTC, 4, MAX_HTC_SETUP_MSG_SIZE);
  909c9b:	da20      	mov.n	a10, a2
	pHTC->SetupCompleteCb = SetupComplete;
  909c9d:	252693        	s32i	a5, a2, 0x24c
	HTC_AssembleBuffers(pHTC, 4, MAX_HTC_SETUP_MSG_SIZE);
  909ca0:	c4c0      	movi.n	a12, 64
  909ca2:	2b0a04        	movi	a11, 4
  909ca5:	5bffcd        	call8	909bdc <HTC_AssembleBuffers>
	HIF_start(pHTC->hifHandle);
  909ca8:	2a229a        	l32i	a10, a2, 0x268
  909cab:	234274        	l32i	a3, a4, 0x1d0
  909cae:	0b3000        	callx8	a3
}
  909cb1:	d10f      	retw.n
	...

00909cb4 <_HTC_PauseRecv>:
  909cb4:	6c1004        	entry	a1, 32
  909cb7:	d10f      	retw.n
  909cb9:	000000        	ill

00909cbc <_HTC_ResumeRecv>:
{
  909cbc:	6c1004        	entry	a1, 32
  909cbf:	d10f      	retw.n
  909cc1:	000000        	ill

00909cc4 <htc_module_install>:
{
  909cc4:	6c1004        	entry	a1, 32
	pAPIs->_HTC_Init = _HTC_Init;
  909cc7:	1869e3        	l32r	a8, 8e4454 <bStandardCommand+0x5f0>
  909cca:	9820      	s32i.n	a8, a2, 0
	pAPIs->_HTC_ReturnBuffers = _HTC_ReturnBuffers;
  909ccc:	1869e4        	l32r	a8, 8e445c <bStandardCommand+0x5f8>
  909ccf:	9824      	s32i.n	a8, a2, 16
	pAPIs->_HTC_ReturnBuffersList = _HTC_ReturnBuffersList;
  909cd1:	1869e5        	l32r	a8, 8e4468 <bStandardCommand+0x604>
  909cd4:	9825      	s32i.n	a8, a2, 20
	pAPIs->_HTC_Ready = _HTC_Ready;
  909cd6:	1869e6        	l32r	a8, 8e4470 <bStandardCommand+0x60c>
  909cd9:	9823      	s32i.n	a8, a2, 12
	pAPIs->_HTC_RegisterService = _HTC_RegisterService;
  909cdb:	1869e7        	l32r	a8, 8e4478 <bStandardCommand+0x614>
  909cde:	9822      	s32i.n	a8, a2, 8
	pAPIs->_HTC_SendMsg = _HTC_SendMsg;
  909ce0:	1869e8        	l32r	a8, 8e4480 <bStandardCommand+0x61c>
  909ce3:	9826      	s32i.n	a8, a2, 24
	pAPIs->_HTC_Shutdown = _HTC_Shutdown;
  909ce5:	1869e9        	l32r	a8, 8e448c <bStandardCommand+0x628>
  909ce8:	9821      	s32i.n	a8, a2, 4
	pAPIs->_HTC_GetReservedHeadroom = _HTC_GetReservedHeadroom;
  909cea:	1869ea        	l32r	a8, 8e4494 <bStandardCommand+0x630>
  909ced:	9827      	s32i.n	a8, a2, 28
	pAPIs->_HTC_MsgRecvHandler = HTCMsgRecvHandler;
  909cef:	1869eb        	l32r	a8, 8e449c <bStandardCommand+0x638>
  909cf2:	9828      	s32i.n	a8, a2, 32
	pAPIs->_HTC_SendDoneHandler = HTCSendDoneHandler;
  909cf4:	1869ec        	l32r	a8, 8e44a4 <bStandardCommand+0x640>
  909cf7:	9829      	s32i.n	a8, a2, 36
	pAPIs->_HTC_ControlSvcProcessMsg = HTCControlSvcProcessMsg;
  909cf9:	1869ed        	l32r	a8, 8e44b0 <bStandardCommand+0x64c>
  909cfc:	982a      	s32i.n	a8, a2, 40
	pAPIs->_HTC_ControlSvcProcessSendComplete = HTCControlSvcProcessSendComplete;
  909cfe:	1869ee        	l32r	a8, 8e44b8 <bStandardCommand+0x654>
  909d01:	982b      	s32i.n	a8, a2, 44
  909d03:	d10f      	retw.n
  909d05:	000000        	ill

00909d08 <HTCFreeMsgBuffer>:
{
  909d08:	6c1004        	entry	a1, 32
	BUF_Pool_free_buf(pHTC->PoolHandle, POOL_ID_HTC_CONTROL, buf);
  909d0b:	1868b5        	l32r	a8, 8e3fe0 <bStandardCommand+0x17c>
  909d0e:	2a229b        	l32i	a10, a2, 0x26c
  909d11:	28829e        	l32i	a8, a8, 0x278
  909d14:	dc30      	mov.n	a12, a3
  909d16:	2b0a00        	movi	a11, 0
  909d19:	0b8000        	callx8	a8
  909d1c:	d10f      	retw.n
	...

00909d20 <HTCAllocMsgBuffer>:
{
  909d20:	6c1004        	entry	a1, 32
	return BUF_Pool_alloc_buf(pHTC->PoolHandle,
  909d23:	1868b5        	l32r	a8, 8e3ff8 <bStandardCommand+0x194>
{
  909d26:	da20      	mov.n	a10, a2
	return BUF_Pool_alloc_buf(pHTC->PoolHandle,
  909d28:	22829c        	l32i	a2, a8, 0x270
  909d2b:	288285        	l32i	a8, a8, 0x214
  909d2e:	23a29b        	l32i	a3, a10, 0x26c
  909d31:	0b8000        	callx8	a8
  909d34:	dca0      	mov.n	a12, a10
  909d36:	c0b0      	movi.n	a11, 0
  909d38:	da30      	mov.n	a10, a3
  909d3a:	0b2000        	callx8	a2
}
  909d3d:	d2a0      	mov.n	a2, a10
  909d3f:	d10f      	retw.n
  909d41:	000000        	ill

00909d44 <_HTC_Ready>:
{
  909d44:	6c1004        	entry	a1, 32
	pBuffer = HTCAllocMsgBuffer(pHTC);
  909d47:	022a02        	or	a10, a2, a2
  909d4a:	5bfff5        	call8	909d20 <HTCAllocMsgBuffer>
    return __adf_nbuf_put_tail(buf, size);
  909d4d:	c0b8      	movi.n	a11, 8
  909d4f:	d4a0      	mov.n	a4, a10
  909d51:	5bf3a2        	call8	906bdc <__adf_nbuf_put_tail>
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));
  909d54:	1568b5        	l32r	a5, 8e4028 <bStandardCommand+0x1c4>
  909d57:	c0c8      	movi.n	a12, 8
  909d59:	8854      	l32i.n	a8, a5, 16
  909d5b:	c0b0      	movi.n	a11, 0
  909d5d:	d3a0      	mov.n	a3, a10
  909d5f:	0b8000        	callx8	a8
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
  909d62:	c081      	movi.n	a8, 1
  909d64:	283401        	s8i	a8, a3, 1
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  909d67:	282291        	l32i	a8, a2, 0x244
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
  909d6a:	c0b0      	movi.n	a11, 0
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  909d6c:	08084f        	extui	a8, a8, 0, 16
  909d6f:	088914        	srli	a9, a8, 8
  909d72:	283405        	s8i	a8, a3, 5
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909d75:	282294        	l32i	a8, a2, 0x250
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  909d78:	293404        	s8i	a9, a3, 4
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909d7b:	08084f        	extui	a8, a8, 0, 16
  909d7e:	088914        	srli	a9, a8, 8
  909d81:	283403        	s8i	a8, a3, 3
	pReady->MaxEndpoints = ENDPOINT_MAX;
  909d84:	c186      	movi.n	a8, 22
  909d86:	283406        	s8i	a8, a3, 6
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
  909d89:	2b3400        	s8i	a11, a3, 0
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909d8c:	293402        	s8i	a9, a3, 2
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  909d8f:	235284        	l32i	a3, a5, 0x210
  909d92:	dc40      	mov.n	a12, a4
  909d94:	da20      	mov.n	a10, a2
  909d96:	0b3000        	callx8	a3
  909d99:	d10f      	retw.n
	...

00909d9c <HTCCheckAndSendCreditReport>:
{
  909d9c:	6c1004        	entry	a1, 32
		if (!(pHTC->EpHostNeedsCreditMap & EpMask)) {
  909d9f:	282285        	l32i	a8, a2, 0x214
  909da2:	78305a        	bnone	a3, a8, 909e00 <HTCCheckAndSendCreditReport+0x64>
		if (!(pHTC->EpCreditPendingMap & EpMask)) {
  909da5:	282286        	l32i	a8, a2, 0x218
  909da8:	783054        	bnone	a3, a8, 909e00 <HTCCheckAndSendCreditReport+0x64>
		if (pEndpoint != NULL) {
  909dab:	c945      	beqz.n	a4, 909dc4 <HTCCheckAndSendCreditReport+0x28>
			if (pEndpoint->CreditReturnThreshhold != 0) {
  909dad:	234904        	l16si	a3, a4, 8
  909db0:	c834      	beqz.n	a3, 909db8 <HTCCheckAndSendCreditReport+0x1c>
				if (pEndpoint->CreditsToReturn < pEndpoint->CreditReturnThreshhold) {
  909db2:	284900        	l16si	a8, a4, 0
  909db5:	738247        	blt	a8, a3, 909e00 <HTCCheckAndSendCreditReport+0x64>
			if (pEndpoint->PendingCreditReports >= pHTC->MaxEpPendingCreditRpts) {
  909db8:	8844      	l32i.n	a8, a4, 16
  909dba:	232299        	l32i	a3, a2, 0x264
  909dbd:	738203        	blt	a8, a3, 909dc4 <HTCCheckAndSendCreditReport+0x28>
  909dc0:	600009        	j	909dcd <HTCCheckAndSendCreditReport+0x31>
  909dc3:	00da20        	excw
		pCredBuffer = HTCAllocMsgBuffer(pHTC);
  909dc6:	5bffd6        	call8	909d20 <HTCAllocMsgBuffer>
  909dc9:	d3a0      	mov.n	a3, a10
		if (NULL == pCredBuffer) {
  909dcb:	ccae      	bnez.n	a10, 909ddd <HTCCheckAndSendCreditReport+0x41>
			pHTC->StateFlags |= HTC_SEND_CREDIT_UPDATE_SOON;
  909dcd:	232292        	l32i	a3, a2, 0x248
  909dd0:	c042      	movi.n	a4, 2
  909dd2:	043302        	or	a3, a3, a4
  909dd5:	232692        	s32i	a3, a2, 0x248
  909dd8:	d10f      	retw.n
  909dda:	000000        	ill
    return (__adf_nbuf_get_priv(buf));
  909ddd:	5bf303        	call8	9069ec <__adf_nbuf_get_priv>
		if (pEndpoint != NULL) {
  909de0:	c84d      	beqz.n	a4, 909df1 <HTCCheckAndSendCreditReport+0x55>
			pEndpoint->PendingCreditReports++;
  909de2:	8844      	l32i.n	a8, a4, 16
  909de4:	b188      	addi.n	a8, a8, 1
  909de6:	9844      	s32i.n	a8, a4, 16
			ctx->htc_flags = Eid | HTC_FLAGS_CREDIT_RPT;
  909de8:	240a20        	movi	a4, 32
  909deb:	045502        	or	a5, a5, a4
  909dee:	25a401        	s8i	a5, a10, 1
		HTC_SendMsg(pHTC, ENDPOINT0, pCredBuffer);
  909df1:	1468b5        	l32r	a4, 8e40c8 <bStandardCommand+0x264>
  909df4:	dc30      	mov.n	a12, a3
  909df6:	244284        	l32i	a4, a4, 0x210
  909df9:	c0b0      	movi.n	a11, 0
  909dfb:	da20      	mov.n	a10, a2
  909dfd:	0b4000        	callx8	a4
  909e00:	d10f      	retw.n
	...

00909e04 <ReturnBuffers>:
{
  909e04:	6c1004        	entry	a1, 32
    return __adf_nbuf_push_head(buf, size);
  909e07:	c0b8      	movi.n	a11, 8
  909e09:	da40      	mov.n	a10, a4
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);
  909e0b:	0f3611        	slli	a6, a3, 1
  909e0e:	5bf2c7        	call8	90692c <__adf_nbuf_push_head>
  909e11:	a366      	add.n	a6, a6, a3
  909e13:	1868b5        	l32r	a8, 8e40e8 <bStandardCommand+0x284>
  909e16:	0d6611        	slli	a6, a6, 3
  909e19:	a627      	add.n	a7, a2, a6
  909e1b:	288277        	l32i	a8, a8, 0x1dc
  909e1e:	2b7019        	l8ui	a11, a7, 25
  909e21:	2a229a        	l32i	a10, a2, 0x268
  909e24:	dc40      	mov.n	a12, a4
  909e26:	0b8000        	callx8	a8
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  909e29:	242292        	l32i	a4, a2, 0x248
  909e2c:	7f4730        	bbci	a4, 31, 909e60 <ReturnBuffers+0x5c>
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
  909e2f:	287102        	l16ui	a8, a7, 4
		A_UINT32    epCreditMask = (1 << EndpointID);
  909e32:	c0b1      	movi.n	a11, 1
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
  909e34:	b188      	addi.n	a8, a8, 1
  909e36:	287502        	s16i	a8, a7, 4
		pHTC->Endpoints[EndpointID].CreditsConsumed -= (A_INT16)nbufs;
  909e39:	287107        	l16ui	a8, a7, 14
		A_UINT32    epCreditMask = (1 << EndpointID);
  909e3c:	003104        	ssl	a3
  909e3f:	00bb1a        	sll	a11, a11
		pHTC->Endpoints[EndpointID].CreditsConsumed -= (A_INT16)nbufs;
  909e42:	b088      	addi.n	a8, a8, -1
  909e44:	287507        	s16i	a8, a7, 14
		pHTC->EpCreditPendingMap |= epCreditMask;
  909e47:	272286        	l32i	a7, a2, 0x218
  909e4a:	0b7702        	or	a7, a7, a11
  909e4d:	272686        	s32i	a7, a2, 0x218
		if (sendCreditFlag) {
  909e50:	c954      	beqz.n	a5, 909e68 <ReturnBuffers+0x64>
			HTCCheckAndSendCreditReport(pHTC, epCreditMask,&pHTC->Endpoints[EndpointID],EndpointID);
  909e52:	b46c      	addi.n	a12, a6, 4
  909e54:	dd30      	mov.n	a13, a3
  909e56:	ac2c      	add.n	a12, a2, a12
  909e58:	da20      	mov.n	a10, a2
  909e5a:	5bffd0        	call8	909d9c <HTCCheckAndSendCreditReport>
  909e5d:	d10f      	retw.n
  909e5f:	002322        	excw
		pHTC->TotalCredits += nbufs;
  909e62:	94b1      	s32i.n	a4, a11, 4
  909e64:	332326        	excw
  909e67:	94d1      	s32i.n	a4, a13, 4
  909e69:	0f0000        	callx12	a0

00909e6c <_HTC_ReturnBuffers>:
{
  909e6c:	6c1004        	entry	a1, 32
	ReturnBuffers(htcHandle, EndpointID, pBuffers, TRUE);
  909e6f:	c0d1      	movi.n	a13, 1
  909e71:	dc40      	mov.n	a12, a4
  909e73:	db30      	mov.n	a11, a3
  909e75:	da20      	mov.n	a10, a2
  909e77:	5bffe3        	call8	909e04 <ReturnBuffers>
  909e7a:	d10f      	retw.n

00909e7c <_HTC_ReturnBuffersList>:
{
  909e7c:	6c1006        	entry	a1, 48
    return (__adf_nbuf_queue_first(head));
  909e7f:	da10      	mov.n	a10, a1
  909e81:	9410      	s32i.n	a4, a1, 0
  909e83:	9511      	s32i.n	a5, a1, 4
  909e85:	9612      	s32i.n	a6, a1, 8
  909e87:	5bf38c        	call8	906cb8 <__adf_nbuf_queue_first>
  909e8a:	d4a0      	mov.n	a4, a10
		ReturnBuffers(htcHandle, EndpointID, tmpNbuf, FALSE);
  909e8c:	c050      	movi.n	a5, 0
	while (netbuf) {
  909e8e:	600014        	j	909ea6 <_HTC_ReturnBuffersList+0x2a>
    return (__adf_nbuf_queue_next(buf));
  909e91:	da40      	mov.n	a10, a4
  909e93:	5bf38b        	call8	906cc0 <__adf_nbuf_queue_next>
  909e96:	d6a0      	mov.n	a6, a10
		ReturnBuffers(htcHandle, EndpointID, tmpNbuf, FALSE);
  909e98:	dc40      	mov.n	a12, a4
  909e9a:	dd50      	mov.n	a13, a5
  909e9c:	db30      	mov.n	a11, a3
  909e9e:	022a02        	or	a10, a2, a2
  909ea1:	5bffd8        	call8	909e04 <ReturnBuffers>
		netbuf = adf_nbuf_queue_next(netbuf);
  909ea4:	d460      	mov.n	a4, a6
	while (netbuf) {
  909ea6:	654fe7        	bnez	a4, 909e91 <_HTC_ReturnBuffersList+0x15>
	HTCCheckAndSendCreditReport(pHTC, (1 << EndpointID),&pHTC->Endpoints[EndpointID],EndpointID);
  909ea9:	0f3c11        	slli	a12, a3, 1
  909eac:	a3cc      	add.n	a12, a12, a3
  909eae:	0dcc11        	slli	a12, a12, 3
  909eb1:	b4cc      	addi.n	a12, a12, 4
  909eb3:	c0b1      	movi.n	a11, 1
  909eb5:	dd30      	mov.n	a13, a3
  909eb7:	ac2c      	add.n	a12, a2, a12
  909eb9:	003104        	ssl	a3
  909ebc:	00bb1a        	sll	a11, a11
  909ebf:	da20      	mov.n	a10, a2
  909ec1:	5bffb6        	call8	909d9c <HTCCheckAndSendCreditReport>
  909ec4:	d10f      	retw.n
	...

00909ec8 <HTCControlSvcProcessSendComplete>:
{
  909ec8:	6c1004        	entry	a1, 32
    return (__adf_nbuf_get_priv(buf));
  909ecb:	da30      	mov.n	a10, a3
  909ecd:	5bf2c7        	call8	9069ec <__adf_nbuf_get_priv>
	if ( ctx->htc_flags & HTC_FLAGS_CREDIT_RPT ) {
  909ed0:	28a001        	l8ui	a8, a10, 1
  909ed3:	7a8712        	bbci	a8, 26, 909ee9 <HTCControlSvcProcessSendComplete+0x21>
		creditRptEndpoint = ctx->htc_flags & HTC_FLAGS_CRPT_EP_MASK;
  909ed6:	080944        	extui	a9, a8, 0, 5
		pHTC->Endpoints[creditRptEndpoint].PendingCreditReports--;
  909ed9:	0f9811        	slli	a8, a9, 1
  909edc:	a988      	add.n	a8, a8, a9
  909ede:	0d8811        	slli	a8, a8, 3
  909ee1:	a848      	add.n	a8, a4, a8
  909ee3:	8985      	l32i.n	a9, a8, 20
  909ee5:	b099      	addi.n	a9, a9, -1
  909ee7:	9985      	s32i.n	a9, a8, 20
	HTCFreeMsgBuffer(pHTC, pBuffers);
  909ee9:	db30      	mov.n	a11, a3
  909eeb:	da40      	mov.n	a10, a4
  909eed:	5bff86        	call8	909d08 <HTCFreeMsgBuffer>
	if (pHTC->StateFlags & HTC_SEND_CREDIT_UPDATE_SOON) {
  909ef0:	284292        	l32i	a8, a4, 0x248
  909ef3:	7e8712        	bbci	a8, 30, 909f09 <HTCControlSvcProcessSendComplete+0x41>
		pHTC->StateFlags &= ~HTC_SEND_CREDIT_UPDATE_SOON;
  909ef6:	c73d      	movi.n	a3, -3
  909ef8:	038801        	and	a8, a8, a3
  909efb:	284692        	s32i	a8, a4, 0x248
		HTCCheckAndSendCreditReport(pHTC, HTC_ANY_ENDPOINT_MASK,NULL,ENDPOINT_MAX);
  909efe:	c1d6      	movi.n	a13, 22
  909f00:	c0c0      	movi.n	a12, 0
  909f02:	c7bf      	movi.n	a11, -1
  909f04:	da40      	mov.n	a10, a4
  909f06:	5bffa5        	call8	909d9c <HTCCheckAndSendCreditReport>
  909f09:	d10f      	retw.n
	...

00909f0c <HTCProcessConnectMsg>:
{
  909f0c:	6c1008        	entry	a1, 64
	int metaDataOutLen = 0;
  909f0f:	c070      	movi.n	a7, 0
  909f11:	9710      	s32i.n	a7, a1, 0
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  909f13:	283002        	l8ui	a8, a3, 2
	pBuffer = HTCAllocMsgBuffer(pHTC);
  909f16:	da20      	mov.n	a10, a2
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  909f18:	088411        	slli	a4, a8, 8
  909f1b:	283003        	l8ui	a8, a3, 3
	HTC_SERVICE *pService = pHTC->pServiceList;
  909f1e:	252290        	l32i	a5, a2, 0x240
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  909f21:	048802        	or	a8, a8, a4
	pBuffer = HTCAllocMsgBuffer(pHTC);
  909f24:	9814      	s32i.n	a8, a1, 16
  909f26:	5bff7e        	call8	909d20 <HTCAllocMsgBuffer>
    return __adf_nbuf_put_tail(buf, size);
  909f29:	c0ba      	movi.n	a11, 10
  909f2b:	d6a0      	mov.n	a6, a10
  909f2d:	5bf32b        	call8	906bdc <__adf_nbuf_put_tail>
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  909f30:	1968b5        	l32r	a9, 8e4204 <bStandardCommand+0x3a0>
  909f33:	c0ca      	movi.n	a12, 10
  909f35:	8d94      	l32i.n	a13, a9, 16
  909f37:	db70      	mov.n	a11, a7
  909f39:	d4a0      	mov.n	a4, a10
  909f3b:	0bd000        	callx8	a13
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  909f3e:	8814      	l32i.n	a8, a1, 16
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
  909f40:	c093      	movi.n	a9, 3
  909f42:	294401        	s8i	a9, a4, 1
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  909f45:	088914        	srli	a9, a8, 8
  909f48:	294402        	s8i	a9, a4, 2
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
  909f4b:	274400        	s8i	a7, a4, 0
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  909f4e:	284403        	s8i	a8, a4, 3
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
  909f51:	c195      	movi.n	a9, 21
	while (pService) {
  909f53:	600077        	j	909fce <HTCProcessConnectMsg+0xc2>
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
  909f56:	2b2288        	l32i	a11, a2, 0x220
  909f59:	7b9279        	blt	a9, a11, 909fd6 <HTCProcessConnectMsg+0xca>
		if (serviceId == pService->ServiceID) {
  909f5c:	2a5108        	l16ui	a10, a5, 16
  909f5f:	78a969        	bne	a10, a8, 909fcc <HTCProcessConnectMsg+0xc0>
			if (pMsg->ServiceMetaLength != 0) {
  909f62:	2d3008        	l8ui	a13, a3, 8
				pMetaDataIN = ((A_UINT8 *)pMsg) + sizeof(HTC_CONNECT_SERVICE_MSG);
  909f65:	c080      	movi.n	a8, 0
  909f67:	ba3c      	addi.n	a12, a3, 10
  909f69:	0d8c38        	moveqz	a12, a8, a13
			connectStatus = pService->ProcessConnect(pService,
  909f6c:	8853      	l32i.n	a8, a5, 12
  909f6e:	df10      	mov.n	a15, a1
  909f70:	ba4e      	addi.n	a14, a4, 10
  909f72:	055a02        	or	a10, a5, a5
  909f75:	0b8000        	callx8	a8
			if (HTC_SERVICE_SUCCESS == connectStatus) {
  909f78:	65a05c        	bnez	a10, 909fd8 <HTCProcessConnectMsg+0xcc>
				pRspMsg->ServiceMetaLength = (A_UINT8)metaDataOutLen;
  909f7b:	8810      	l32i.n	a8, a1, 0
  909f7d:	284408        	s8i	a8, a4, 8
				pRspMsg->EndpointID = pHTC->CurrentEpIndex;
  909f80:	292288        	l32i	a9, a2, 0x220
  909f83:	294405        	s8i	a9, a4, 5
				pRspMsg->MaxMsgSize = adf_os_htons((A_UINT16)pService->MaxSvcMsgSize);
  909f86:	285014        	l8ui	a8, a5, 20
  909f89:	284406        	s8i	a8, a4, 6
  909f8c:	285015        	l8ui	a8, a5, 21
  909f8f:	284407        	s8i	a8, a4, 7
  909f92:	0f9811        	slli	a8, a9, 1
  909f95:	a988      	add.n	a8, a8, a9
  909f97:	0d8811        	slli	a8, a8, 3
  909f9a:	a828      	add.n	a8, a2, a8
				pHTC->Endpoints[pHTC->CurrentEpIndex].pService = pService;
  909f9c:	9582      	s32i.n	a5, a8, 8
				pHTC->Endpoints[pHTC->CurrentEpIndex].ConnectionFlags = pMsg->ConnectionFlags;
  909f9e:	2b3004        	l8ui	a11, a3, 4
  909fa1:	08bc11        	slli	a12, a11, 8
  909fa4:	2b3005        	l8ui	a11, a3, 5
  909fa7:	0cbb02        	or	a11, a11, a12
  909faa:	2b8508        	s16i	a11, a8, 16
				pHTC->Endpoints[pHTC->CurrentEpIndex].DownLinkPipeID = pMsg->DownLinkPipeID;
  909fad:	2b3006        	l8ui	a11, a3, 6
  909fb0:	2b8418        	s8i	a11, a8, 24
				pHTC->Endpoints[pHTC->CurrentEpIndex].UpLinkPipeID = pMsg->UpLinkPipeID;
  909fb3:	233007        	l8ui	a3, a3, 7
  909fb6:	238419        	s8i	a3, a8, 25
				pService->ServiceFlags |= HTC_SERVICE_FLAGS_CONNECTED;
  909fb9:	235109        	l16ui	a3, a5, 18
  909fbc:	c081      	movi.n	a8, 1
  909fbe:	083302        	or	a3, a3, a8
  909fc1:	235509        	s16i	a3, a5, 18
				pHTC->CurrentEpIndex++;
  909fc4:	b193      	addi.n	a3, a9, 1
  909fc6:	232688        	s32i	a3, a2, 0x220
  909fc9:	60000b        	j	909fd8 <HTCProcessConnectMsg+0xcc>
		pService = pService->pNext;
  909fcc:	8550      	l32i.n	a5, a5, 0
	while (pService) {
  909fce:	655f84        	bnez	a5, 909f56 <HTCProcessConnectMsg+0x4a>
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
  909fd1:	c0a1      	movi.n	a10, 1
  909fd3:	600001        	j	909fd8 <HTCProcessConnectMsg+0xcc>
			connectStatus = HTC_SERVICE_NO_RESOURCES;
  909fd6:	c0a3      	movi.n	a10, 3
	pRspMsg->Status = connectStatus;
  909fd8:	2a4404        	s8i	a10, a4, 4
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  909fdb:	1468b5        	l32r	a4, 8e42b0 <bStandardCommand+0x44c>
  909fde:	dc60      	mov.n	a12, a6
  909fe0:	234284        	l32i	a3, a4, 0x210
  909fe3:	c0b0      	movi.n	a11, 0
  909fe5:	da20      	mov.n	a10, a2
  909fe7:	0b3000        	callx8	a3
  909fea:	d10f      	retw.n

00909fec <HTCProcessConfigPipeMsg>:
{
  909fec:	6c1004        	entry	a1, 32
	pBuffer = HTCAllocMsgBuffer(pHTC);
  909fef:	022a02        	or	a10, a2, a2
  909ff2:	5bff4b        	call8	909d20 <HTCAllocMsgBuffer>
  909ff5:	c0b4      	movi.n	a11, 4
  909ff7:	d6a0      	mov.n	a6, a10
  909ff9:	5bf2f8        	call8	906bdc <__adf_nbuf_put_tail>
	A_MEMZERO(pRspMsg,sizeof(HTC_CONFIG_PIPE_RESPONSE_MSG));
  909ffc:	1568b5        	l32r	a5, 8e42d0 <bStandardCommand+0x46c>
  909fff:	c0b0      	movi.n	a11, 0
  90a001:	8854      	l32i.n	a8, a5, 16
  90a003:	c0c4      	movi.n	a12, 4
  90a005:	d4a0      	mov.n	a4, a10
  90a007:	0b8000        	callx8	a8
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONFIG_PIPE_RESPONSE_ID);
  90a00a:	c080      	movi.n	a8, 0
  90a00c:	284400        	s8i	a8, a4, 0
  90a00f:	280a06        	movi	a8, 6
  90a012:	284401        	s8i	a8, a4, 1
	pRspMsg->PipeID = pMsg->PipeID;
  90a015:	2b3002        	l8ui	a11, a3, 2
  90a018:	2b4402        	s8i	a11, a4, 2
	if ( HIF_is_pipe_supported(pHTC->hifHandle, pMsg->PipeID) ) {
  90a01b:	285278        	l32i	a8, a5, 0x1e0
  90a01e:	2a229a        	l32i	a10, a2, 0x268
  90a021:	0b8000        	callx8	a8
  90a024:	c9a4      	beqz.n	a10, 90a03c <HTCProcessConfigPipeMsg+0x50>
		pRspMsg->Status = 0;
  90a026:	c080      	movi.n	a8, 0
  90a028:	284403        	s8i	a8, a4, 3
	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
  90a02b:	2c3003        	l8ui	a12, a3, 3
  90a02e:	282295        	l32i	a8, a2, 0x254
  90a031:	292294        	l32i	a9, a2, 0x250
  90a034:	a8c8      	add.n	a8, a12, a8
  90a036:	78921a        	blt	a9, a8, 90a054 <HTCProcessConfigPipeMsg+0x68>
  90a039:	600004        	j	90a041 <HTCProcessConfigPipeMsg+0x55>
		pRspMsg->Status = 1;
  90a03c:	c031      	movi.n	a3, 1
  90a03e:	600014        	j	90a056 <HTCProcessConfigPipeMsg+0x6a>
		pHTC->TotalCreditsAssigned += pMsg->CreditCount;
  90a041:	282695        	s32i	a8, a2, 0x254
	HIF_config_pipe(pHTC->hifHandle, pMsg->PipeID, pMsg->CreditCount);
  90a044:	245275        	l32i	a4, a5, 0x1d4
  90a047:	2b3002        	l8ui	a11, a3, 2
  90a04a:	2a229a        	l32i	a10, a2, 0x268
  90a04d:	0b4000        	callx8	a4
  90a050:	600005        	j	90a059 <HTCProcessConfigPipeMsg+0x6d>
  90a053:	00c032        	sext	a0, a12, 7
		pRspMsg->Status = 2;
  90a056:	234403        	s8i	a3, a4, 3
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  90a059:	235284        	l32i	a3, a5, 0x210
  90a05c:	dc60      	mov.n	a12, a6
  90a05e:	c0b0      	movi.n	a11, 0
  90a060:	da20      	mov.n	a10, a2
  90a062:	0b3000        	callx8	a3
  90a065:	d10f      	retw.n
	...

0090a068 <HTCControlSvcProcessMsg>:
{
  90a068:	6c1006        	entry	a1, 48
  90a06b:	1668b5        	l32r	a6, 8e4340 <bStandardCommand+0x4dc>
	adf_os_assert(hdr_buf == ADF_NBUF_NULL);
  90a06e:	643013        	beqz	a3, 90a085 <HTCControlSvcProcessMsg+0x1d>
  90a071:	236212        	l32i	a3, a6, 72
  90a074:	1b69ef        	l32r	a11, 8e4830 <bStandardCommand+0x9cc>
  90a077:	1a69f0        	l32r	a10, 8e4838 <bStandardCommand+0x9d4>
  90a07a:	0b3000        	callx8	a3
  90a07d:	136919        	l32r	a3, 8e44e4 <bStandardCommand+0x680>
  90a080:	0c0200        	memw
  90a083:	8330      	l32i.n	a3, a3, 0
    __adf_nbuf_peek_header(buf, addr, len);
  90a085:	b41b      	addi.n	a11, a1, 4
  90a087:	dc10      	mov.n	a12, a1
  90a089:	da40      	mov.n	a10, a4
  90a08b:	5bf2ff        	call8	906c88 <__adf_nbuf_peek_header>
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;
  90a08e:	8b11      	l32i.n	a11, a1, 4
	switch ( adf_os_ntohs(pMsg->MessageID) ) {
  90a090:	28b000        	l8ui	a8, a11, 0
  90a093:	088311        	slli	a3, a8, 8
  90a096:	28b001        	l8ui	a8, a11, 1
  90a099:	038802        	or	a8, a8, a3
		setupComplete = TRUE;
  90a09c:	c031      	movi.n	a3, 1
	switch ( adf_os_ntohs(pMsg->MessageID) ) {
  90a09e:	688416        	beqi	a8, 4, 90a0b8 <HTCControlSvcProcessMsg+0x50>
  90a0a1:	68850c        	beqi	a8, 5, 90a0b1 <HTCControlSvcProcessMsg+0x49>
  90a0a4:	69820e        	bnei	a8, 2, 90a0b6 <HTCControlSvcProcessMsg+0x4e>
		HTCProcessConnectMsg(pHTC, (HTC_CONNECT_SERVICE_MSG *)pMsg);
  90a0a7:	da50      	mov.n	a10, a5
  90a0a9:	5bff98        	call8	909f0c <HTCProcessConnectMsg>
  90a0ac:	600006        	j	90a0b6 <HTCControlSvcProcessMsg+0x4e>
  90a0af:	0000da        	excw
		HTCProcessConfigPipeMsg(pHTC, (HTC_CONFIG_PIPE_MSG *)pMsg);
  90a0b2:	505bff        	call0	9210b0 <_etext+0x11e9f>
  90a0b5:	cec0      	bnez.n	a12, 90a0d9 <HTCControlSvcProcessMsg+0x71>
	A_BOOL setupComplete = FALSE;
  90a0b7:	302852        	excw
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  90a0ba:	927f      	s32i.n	a2, a7, 60
  90a0bc:	870b      	l32i.n	a7, a0, 44
		HTC_ReturnBuffers(pHTC, ENDPOINT0,pBuffers);
  90a0be:	226282        	l32i	a2, a6, 0x208
  90a0c1:	dc40      	mov.n	a12, a4
  90a0c3:	c0b0      	movi.n	a11, 0
  90a0c5:	da50      	mov.n	a10, a5
  90a0c7:	60001b        	j	90a0e6 <HTCControlSvcProcessMsg+0x7e>
    return __adf_nbuf_push_head(buf, size);
  90a0ca:	c0b8      	movi.n	a11, 8
  90a0cc:	da40      	mov.n	a10, a4
  90a0ce:	5bf217        	call8	90692c <__adf_nbuf_push_head>
		HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);
  90a0d1:	0f2811        	slli	a8, a2, 1
  90a0d4:	a288      	add.n	a8, a8, a2
  90a0d6:	0d8811        	slli	a8, a8, 3
  90a0d9:	a858      	add.n	a8, a5, a8
  90a0db:	226277        	l32i	a2, a6, 0x1dc
  90a0de:	2b8019        	l8ui	a11, a8, 25
  90a0e1:	2a529a        	l32i	a10, a5, 0x268
  90a0e4:	dc40      	mov.n	a12, a4
  90a0e6:	0b2000        	callx8	a2
	if (setupComplete) {
  90a0e9:	c931      	beqz.n	a3, 90a0fe <HTCControlSvcProcessMsg+0x96>
		pHTC->StateFlags |= HTC_STATE_SETUP_COMPLETE;
  90a0eb:	225292        	l32i	a2, a5, 0x248
  90a0ee:	c031      	movi.n	a3, 1
  90a0f0:	032202        	or	a2, a2, a3
  90a0f3:	225692        	s32i	a2, a5, 0x248
		if (pHTC->SetupCompleteCb != NULL) {
  90a0f6:	225293        	l32i	a2, a5, 0x24c
  90a0f9:	c821      	beqz.n	a2, 90a0fe <HTCControlSvcProcessMsg+0x96>
			pHTC->SetupCompleteCb();
  90a0fb:	0b2000        	callx8	a2
  90a0fe:	d10f      	retw.n

0090a100 <AdjustCreditThreshold>:
					  buf,
					  pHTC->Endpoints[current_eid].pService->ServiceCtx);
}

LOCAL void AdjustCreditThreshold(HTC_ENDPOINT  *pEndpoint)
{
  90a100:	6c1004        	entry	a1, 32
	A_INT16 creditsOutstanding = pEndpoint->CreditsToReturn + pEndpoint->CreditsConsumed;
  90a103:	292105        	l16ui	a9, a2, 10
  90a106:	282100        	l16ui	a8, a2, 0
  90a109:	a988      	add.n	a8, a8, a9
        /* set the new threshold based on the number of credits that have been consumed
         * and which have not been returned by the app.
         * Note: it is okay for this threshold to be zero which indicates no threshold
         * is in use */
	switch (pEndpoint->ConnectionFlags & HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_MASK) {
  90a10b:	292106        	l16ui	a9, a2, 12
	A_INT16 creditsOutstanding = pEndpoint->CreditsToReturn + pEndpoint->CreditsConsumed;
  90a10e:	088832        	sext	a8, a8, 15
	switch (pEndpoint->ConnectionFlags & HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_MASK) {
  90a111:	090941        	extui	a9, a9, 0, 2
  90a114:	68910d        	beqi	a9, 1, 90a125 <AdjustCreditThreshold+0x25>
  90a117:	c894      	beqz.n	a9, 90a11f <AdjustCreditThreshold+0x1f>
  90a119:	68920f        	beqi	a9, 2, 90a12c <AdjustCreditThreshold+0x2c>
  90a11c:	600017        	j	90a137 <AdjustCreditThreshold+0x37>
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_ONE_FOURTH :
		creditsOutstanding >>= 2;
  90a11f:	082812        	srai	a8, a8, 2
		break;
  90a122:	600011        	j	90a137 <AdjustCreditThreshold+0x37>
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_ONE_HALF :
		creditsOutstanding >>= 1;
  90a125:	081812        	srai	a8, a8, 1
		break;
  90a128:	60000b        	j	90a137 <AdjustCreditThreshold+0x37>
  90a12b:	000f89        	excw
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_THREE_FOURTHS :
		creditsOutstanding = (creditsOutstanding * 3) >> 2;
  90a12e:	11a898        	l32r	a1, 8f4390 <memset+0xd548>
  90a131:	082812        	srai	a8, a8, 2
  90a134:	088832        	sext	a8, a8, 15
		break;
		/* default case is unity */
	}

	pEndpoint->CreditReturnThreshhold = creditsOutstanding;
  90a137:	282504        	s16i	a8, a2, 8
  90a13a:	d10f      	retw.n

0090a13c <_HTC_SendMsg>:
{
  90a13c:	6c1008        	entry	a1, 64
    return (__adf_nbuf_get_priv(buf));
  90a13f:	044a02        	or	a10, a4, a4
  90a142:	5bf22a        	call8	9069ec <__adf_nbuf_get_priv>
  90a145:	d5a0      	mov.n	a5, a10
    return (__adf_nbuf_len(buf));
  90a147:	da40      	mov.n	a10, a4
  90a149:	5bf2c7        	call8	906c68 <__adf_nbuf_len>
  90a14c:	9a10      	s32i.n	a10, a1, 0
    return __adf_nbuf_push_head(buf, size);
  90a14e:	c0b8      	movi.n	a11, 8
  90a150:	da40      	mov.n	a10, a4
  90a152:	5bf1f6        	call8	90692c <__adf_nbuf_push_head>
	ctx->htc_flags |= HTC_FLAGS_BUF_HDR;
  90a155:	285001        	l8ui	a8, a5, 1
  90a158:	c490      	movi.n	a9, 64
  90a15a:	098802        	or	a8, a8, a9
  90a15d:	285401        	s8i	a8, a5, 1
	ctx->end_point = EndpointID;
  90a160:	030847        	extui	a8, a3, 0, 8
  90a163:	285400        	s8i	a8, a5, 0
	pHTCHdr->Flags = 0;
  90a166:	c050      	movi.n	a5, 0
  90a168:	25a401        	s8i	a5, a10, 1
		pipeMaxLen = HIF_get_max_msg_len(pHTC->hifHandle,
  90a16b:	0f3511        	slli	a5, a3, 1
  90a16e:	a355      	add.n	a5, a5, a3
	pHTCHdr->EndpointID = EndpointID;
  90a170:	28a400        	s8i	a8, a10, 0
		pipeMaxLen = HIF_get_max_msg_len(pHTC->hifHandle,
  90a173:	0d5511        	slli	a5, a5, 3
  90a176:	1868b5        	l32r	a8, 8e444c <bStandardCommand+0x5e8>
  90a179:	a525      	add.n	a5, a2, a5
  90a17b:	2b5018        	l8ui	a11, a5, 24
  90a17e:	288279        	l32i	a8, a8, 0x1e4
  90a181:	d6a0      	mov.n	a6, a10
  90a183:	2a229a        	l32i	a10, a2, 0x268
  90a186:	0b8000        	callx8	a8
  90a189:	d5a0      	mov.n	a5, a10
    return (__adf_nbuf_headroom(buf));
  90a18b:	da40      	mov.n	a10, a4
  90a18d:	5bf2ac        	call8	906c40 <__adf_nbuf_headroom>
		roomForPipeMaxLen = pipeMaxLen - adf_nbuf_headroom(pBuffers) - adf_nbuf_len(pBuffers);
  90a190:	0a550c        	sub	a5, a5, a10
    return (__adf_nbuf_len(buf));
  90a193:	da40      	mov.n	a10, a4
  90a195:	5bf2b4        	call8	906c68 <__adf_nbuf_len>
  90a198:	0a550c        	sub	a5, a5, a10
    return (__adf_nbuf_tailroom(buf));
  90a19b:	da40      	mov.n	a10, a4
  90a19d:	5bf2ab        	call8	906c4c <__adf_nbuf_tailroom>
		room = adf_os_min( adf_nbuf_tailroom(pBuffers), roomForPipeMaxLen);
  90a1a0:	75ab06        	bgeu	a10, a5, 90a1aa <_HTC_SendMsg+0x6e>
  90a1a3:	da40      	mov.n	a10, a4
  90a1a5:	5bf2a9        	call8	906c4c <__adf_nbuf_tailroom>
  90a1a8:	d5a0      	mov.n	a5, a10
		if (room < (int)(sizeof(HTC_CREDIT_REPORT) + sizeof(HTC_RECORD_HDR))) {
  90a1aa:	6b5402        	bgei	a5, 4, 90a1b0 <_HTC_SendMsg+0x74>
  90a1ad:	6000ad        	j	90a25e <_HTC_SendMsg+0x122>
		creditsPendingMap = pHTC->EpCreditPendingMap;
  90a1b0:	272286        	l32i	a7, a2, 0x218
		if (creditsPendingMap) {
  90a1b3:	6470a7        	beqz	a7, 90a25e <_HTC_SendMsg+0x122>
    return __adf_nbuf_put_tail(buf, size);
  90a1b6:	c0b2      	movi.n	a11, 2
  90a1b8:	da40      	mov.n	a10, a4
  90a1ba:	5bf288        	call8	906bdc <__adf_nbuf_put_tail>
			pRecHdr->RecordID = HTC_RECORD_CREDITS;
  90a1bd:	c091      	movi.n	a9, 1
  90a1bf:	29a400        	s8i	a9, a10, 0
			pRecHdr->Length = 0;
  90a1c2:	c090      	movi.n	a9, 0
  90a1c4:	29a401        	s8i	a9, a10, 1
  90a1c7:	dea0      	mov.n	a14, a10
			room -= sizeof(HTC_RECORD_HDR);
  90a1c9:	255cfe        	addi	a5, a5, -2
  90a1cc:	b429      	addi.n	a9, a2, 4
			totalReportBytes += sizeof(HTC_RECORD_HDR);
  90a1ce:	c0c2      	movi.n	a12, 2
			for (i = 0;
  90a1d0:	c0d0      	movi.n	a13, 0
  90a1d2:	600069        	j	90a23f <_HTC_SendMsg+0x103>
				compareMask = (1 << i);
  90a1d5:	c081      	movi.n	a8, 1
  90a1d7:	00d104        	ssl	a13
  90a1da:	008f1a        	sll	a15, a8
				if (compareMask & creditsPendingMap) {
  90a1dd:	7f7059        	bnone	a7, a15, 90a23a <_HTC_SendMsg+0xfe>
  90a1e0:	c0b2      	movi.n	a11, 2
  90a1e2:	da40      	mov.n	a10, a4
  90a1e4:	9915      	s32i.n	a9, a1, 20
  90a1e6:	9c13      	s32i.n	a12, a1, 12
  90a1e8:	9d12      	s32i.n	a13, a1, 8
  90a1ea:	9e14      	s32i.n	a14, a1, 16
  90a1ec:	9f11      	s32i.n	a15, a1, 4
  90a1ee:	5bf27b        	call8	906bdc <__adf_nbuf_put_tail>
					pCreditRpt->EndpointID = i;
  90a1f1:	8d12      	l32i.n	a13, a1, 8
					creditsPendingMap &= ~(compareMask);
  90a1f3:	8f11      	l32i.n	a15, a1, 4
					pCreditRpt->EndpointID = i;
  90a1f5:	2da400        	s8i	a13, a10, 0
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a1f8:	8915      	l32i.n	a9, a1, 20
					creditsPendingMap &= ~(compareMask);
  90a1fa:	c7bf      	movi.n	a11, -1
  90a1fc:	0fbf03        	xor	a15, a11, a15
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a1ff:	2b9100        	l16ui	a11, a9, 0
					creditsPendingMap &= ~(compareMask);
  90a202:	0f7701        	and	a7, a7, a15
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a205:	2ba401        	s8i	a11, a10, 1
					pHTC->Endpoints[i].CreditsToReturn = 0;
  90a208:	c0a0      	movi.n	a10, 0
  90a20a:	2a9500        	s16i	a10, a9, 0
					CHECK_AND_ADJUST_CREDIT_THRESHOLD(&pHTC->Endpoints[i]);
  90a20d:	2a9106        	l16ui	a10, a9, 12
  90a210:	8c13      	l32i.n	a12, a1, 12
  90a212:	8e14      	l32i.n	a14, a1, 16
  90a214:	7da710        	bbci	a10, 29, 90a228 <_HTC_SendMsg+0xec>
  90a217:	da90      	mov.n	a10, a9
  90a219:	9915      	s32i.n	a9, a1, 20
  90a21b:	9d12      	s32i.n	a13, a1, 8
  90a21d:	5bffb8        	call8	90a100 <AdjustCreditThreshold>
  90a220:	8e14      	l32i.n	a14, a1, 16
  90a222:	8d12      	l32i.n	a13, a1, 8
  90a224:	8c13      	l32i.n	a12, a1, 12
  90a226:	8915      	l32i.n	a9, a1, 20
					pRecHdr->Length += sizeof(HTC_CREDIT_REPORT);
  90a228:	2ae001        	l8ui	a10, a14, 1
					room -= sizeof(HTC_CREDIT_REPORT);
  90a22b:	255cfe        	addi	a5, a5, -2
					pRecHdr->Length += sizeof(HTC_CREDIT_REPORT);
  90a22e:	2aac02        	addi	a10, a10, 2
  90a231:	2ae401        	s8i	a10, a14, 1
					totalReportBytes += sizeof(HTC_CREDIT_REPORT);
  90a234:	2ccc02        	addi	a12, a12, 2
					if ( room < sizeof(HTC_CREDIT_REPORT) ) {
  90a237:	6e5209        	bltui	a5, 2, 90a244 <_HTC_SendMsg+0x108>
			     i++) {
  90a23a:	b1dd      	addi.n	a13, a13, 1
  90a23c:	299c18        	addi	a9, a9, 24
			for (i = 0;
  90a23f:	c871      	beqz.n	a7, 90a244 <_HTC_SendMsg+0x108>
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT));
  90a241:	6b5290        	bgei	a5, 2, 90a1d5 <_HTC_SendMsg+0x99>
			pHTC->EpCreditPendingMap = creditsPendingMap;
  90a244:	272686        	s32i	a7, a2, 0x218
		if (totalReportBytes <= 0) {
  90a247:	6ac113        	blti	a12, 1, 90a25e <_HTC_SendMsg+0x122>
		pHTCHdr->Flags |= HTC_FLAGS_RECV_TRAILER;
  90a24a:	256001        	l8ui	a5, a6, 1
  90a24d:	c082      	movi.n	a8, 2
  90a24f:	085502        	or	a5, a5, a8
  90a252:	256401        	s8i	a5, a6, 1
		totsz += totalReportBytes;
  90a255:	8510      	l32i.n	a5, a1, 0
		pHTCHdr->ControlBytes[0] = totalReportBytes;
  90a257:	2c6404        	s8i	a12, a6, 4
		totsz += totalReportBytes;
  90a25a:	ac55      	add.n	a5, a5, a12
  90a25c:	9510      	s32i.n	a5, a1, 0
	pHTCHdr->PayloadLen = adf_os_htons(totsz);
  90a25e:	8810      	l32i.n	a8, a1, 0
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);
  90a260:	2a229a        	l32i	a10, a2, 0x268
	pHTCHdr->PayloadLen = adf_os_htons(totsz);
  90a263:	08074f        	extui	a7, a8, 0, 16
  90a266:	078514        	srli	a5, a7, 8
  90a269:	256402        	s8i	a5, a6, 2
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);
  90a26c:	0f3511        	slli	a5, a3, 1
  90a26f:	a353      	add.n	a3, a5, a3
  90a271:	0d3311        	slli	a3, a3, 3
  90a274:	1568b5        	l32r	a5, 8e4548 <bStandardCommand+0x6e4>
	pHTCHdr->PayloadLen = adf_os_htons(totsz);
  90a277:	276403        	s8i	a7, a6, 3
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);
  90a27a:	a323      	add.n	a3, a2, a3
  90a27c:	255276        	l32i	a5, a5, 0x1d8
  90a27f:	2b3018        	l8ui	a11, a3, 24
  90a282:	044c02        	or	a12, a4, a4
  90a285:	0b5000        	callx8	a5
  90a288:	d10f      	retw.n
	...

0090a28c <HTCMsgRecvHandler>:

}

/* callback from the mailbox hardware layer when a full message arrives */
LOCAL void HTCMsgRecvHandler(adf_nbuf_t hdr_buf, adf_nbuf_t buffer, void *context)
{
  90a28c:	6c1008        	entry	a1, 64
  90a28f:	9315      	s32i.n	a3, a1, 20
	a_uint32_t anblen;
	HTC_FRAME_HDR *pHTCHdr;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	adf_nbuf_t tmp_nbuf;

	if (hdr_buf == ADF_NBUF_NULL) {
  90a291:	022339        	movnez	a3, a2, a2
    __adf_nbuf_peek_header(buf, addr, len);
  90a294:	dc10      	mov.n	a12, a1
  90a296:	b41b      	addi.n	a11, a1, 4
  90a298:	da30      	mov.n	a10, a3
  90a29a:	5bf27b        	call8	906c88 <__adf_nbuf_peek_header>
	else {
		tmp_nbuf = hdr_buf;
	}

	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);
	pHTCHdr = (HTC_FRAME_HDR *)anbdata;
  90a29d:	8511      	l32i.n	a5, a1, 4
	if (hdr_buf == ADF_NBUF_NULL) {
  90a29f:	d730      	mov.n	a7, a3
	eid = pHTCHdr->EndpointID;

	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;

	if (pHTCHdr->Flags & HTC_FLAGS_CREDIT_REDISTRIBUTION) {
  90a2a1:	265001        	l8ui	a6, a5, 1
  90a2a4:	7d6702        	bbci	a6, 29, 90a2aa <HTCMsgRecvHandler+0x1e>
  90a2a7:	60009d        	j	90a348 <HTCMsgRecvHandler+0xbc>
	eid = pHTCHdr->EndpointID;
  90a2aa:	235000        	l8ui	a3, a5, 0
		 * Byte 0 */
		RedistributeCredit(tmp_nbuf, pHTCHdr->ControlBytes[0]);
		return;
	}

	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  90a2ad:	254292        	l32i	a5, a4, 0x248
  90a2b0:	03094f        	extui	a9, a3, 0, 16
  90a2b3:	7f5711        	bbci	a5, 31, 90a2c8 <HTCMsgRecvHandler+0x3c>
  90a2b6:	0f9511        	slli	a5, a9, 1
  90a2b9:	a955      	add.n	a5, a5, a9
  90a2bb:	0d5511        	slli	a5, a5, 3
  90a2be:	a545      	add.n	a5, a4, a5
		/* after setup we keep track of credit consumption to allow us to
		 * adjust thresholds to reduce credit dribbling */
		pEndpoint->CreditsConsumed ++;
  90a2c0:	2a5107        	l16ui	a10, a5, 14
  90a2c3:	b1aa      	addi.n	a10, a10, 1
  90a2c5:	2a5507        	s16i	a10, a5, 14
	pEndpoint = &pHTC->Endpoints[eid];
  90a2c8:	0f9511        	slli	a5, a9, 1
  90a2cb:	a955      	add.n	a5, a5, a9
  90a2cd:	0d5511        	slli	a5, a5, 3
  90a2d0:	b455      	addi.n	a5, a5, 4
	eidMask = 1 << eid;
  90a2d2:	c091      	movi.n	a9, 1
	pEndpoint = &pHTC->Endpoints[eid];
  90a2d4:	a545      	add.n	a5, a4, a5
  90a2d6:	9514      	s32i.n	a5, a1, 16
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  90a2d8:	096b01        	and	a11, a6, a9
	eidMask = 1 << eid;
  90a2db:	003104        	ssl	a3
  90a2de:	00951a        	sll	a5, a9
  90a2e1:	2a4285        	l32i	a10, a4, 0x214
  90a2e4:	009104        	ssl	a9
  90a2e7:	00361a        	sll	a6, a3
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  90a2ea:	c9bb      	beqz.n	a11, 90a309 <HTCMsgRecvHandler+0x7d>
		/* the host is running low (or is out) of credits on this
		 * endpoint, update mask */
		pHTC->EpHostNeedsCreditMap |= eidMask;
  90a2ec:	05aa02        	or	a10, a10, a5
  90a2ef:	2a4685        	s32i	a10, a4, 0x214
		/* check and set new threshold since host has reached a low credit situation */
		CHECK_AND_ADJUST_CREDIT_THRESHOLD(pEndpoint);
  90a2f2:	a36a      	add.n	a10, a6, a3
  90a2f4:	0daa11        	slli	a10, a10, 3
  90a2f7:	aa4a      	add.n	a10, a4, a10
  90a2f9:	2aa108        	l16ui	a10, a10, 16
  90a2fc:	7da71e        	bbci	a10, 29, 90a31e <HTCMsgRecvHandler+0x92>
  90a2ff:	8a14      	l32i.n	a10, a1, 16
  90a301:	5bff7f        	call8	90a100 <AdjustCreditThreshold>
  90a304:	600016        	j	90a31e <HTCMsgRecvHandler+0x92>
  90a307:	0000c7        	excw
	} else {
		/* clear the flag */
		pHTC->EpHostNeedsCreditMap &= ~(eidMask);
  90a30a:	cf05      	bnez.n	a0, 90a343 <HTCMsgRecvHandler+0xb7>
  90a30c:	cc03      	bnez.n	a0, 90a313 <HTCMsgRecvHandler+0x87>
  90a30e:	0caa01        	and	a10, a10, a12
  90a311:	2a4685        	s32i	a10, a4, 0x214
		pEndpoint->CreditReturnThreshhold = 0;
  90a314:	a36a      	add.n	a10, a6, a3
  90a316:	0daa11        	slli	a10, a10, 3
  90a319:	aa4a      	add.n	a10, a4, a10
  90a31b:	2ba506        	s16i	a11, a10, 12
	 *        as the result of parsing this message.  In either case, if there are
	 *        pending credits and the host needs them, a credit report will be sent either through
	 *        the response message trailer or a NULL message through HTC_ReturnBuffers().
	 */

	pEndpoint->pService->ProcessRecvMsg(eid, hdr_buf, buffer, pEndpoint->pService->ServiceCtx);
  90a31e:	a366      	add.n	a6, a6, a3
  90a320:	0d6611        	slli	a6, a6, 3
    return __adf_nbuf_pull_head(buf, size);
  90a323:	c0b8      	movi.n	a11, 8
  90a325:	da70      	mov.n	a10, a7
  90a327:	064608        	add	a6, a4, a6
  90a32a:	5bf18b        	call8	906958 <__adf_nbuf_pull_head>
  90a32d:	8662      	l32i.n	a6, a6, 8
  90a32f:	8c15      	l32i.n	a12, a1, 20
  90a331:	8d66      	l32i.n	a13, a6, 24
  90a333:	8761      	l32i.n	a7, a6, 4
  90a335:	db20      	mov.n	a11, a2
  90a337:	033a02        	or	a10, a3, a3
  90a33a:	0b7000        	callx8	a7

	/* Calls to HTC_ReturnBuffers drives the endpoint credit reporting state machine.
	 * We do not want to delay credits for too long in the event that the application is
	 * holding onto buffers for excessive periods of time.  This gives us "some" better
	 * opportunities to send up credits. */
	HTCCheckAndSendCreditReport(pHTC, eidMask, pEndpoint, eid);
  90a33d:	8c14      	l32i.n	a12, a1, 16
  90a33f:	dd30      	mov.n	a13, a3
  90a341:	db50      	mov.n	a11, a5
  90a343:	da40      	mov.n	a10, a4
  90a345:	5bfe95        	call8	909d9c <HTCCheckAndSendCreditReport>
  90a348:	d10f      	retw.n
	...

0090a34c <RedistributeCredit>:
{
  90a34c:	6c1004        	entry	a1, 32
  90a34f:	d10f      	retw.n
  90a351:	000000        	ill

0090a354 <WMIServiceConnect>:
                                 HTC_ENDPOINT_ID eid,
                                 A_UINT8 *pDataIn,
                                 int LengthIn,
                                 A_UINT8 *pDataOut,
                                 int *pLengthOut)
{
  90a354:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)pService->ServiceCtx;

        /* save the eid to use */
	pWMI->ControlEp = eid;
  90a357:	8826      	l32i.n	a8, a2, 24
  90a359:	938a      	s32i.n	a3, a8, 40
	return HTC_SERVICE_SUCCESS;
}
  90a35b:	c020      	movi.n	a2, 0
  90a35d:	d10f      	retw.n
	...

0090a360 <_WMI_GetPendingEventsCount>:

	return pWMI;
}

static int _WMI_GetPendingEventsCount(wmi_handle_t handle)
{
  90a360:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	return pWMI->PendingEvents;
}
  90a363:	8222      	l32i.n	a2, a2, 8
  90a365:	d10f      	retw.n
	...

0090a368 <_WMI_GetControlEp>:

static int  _WMI_GetControlEp(wmi_handle_t handle)
{
  90a368:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	return pWMI->ControlEp;
}
  90a36b:	822a      	l32i.n	a2, a2, 40
  90a36d:	d10f      	retw.n
	...

0090a370 <_WMI_RegisterDispatchTable>:

static void _WMI_RegisterDispatchTable(wmi_handle_t handle,
				       WMI_DISPATCH_TABLE *pDispatchTable)
{
  90a370:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;

	if (NULL == pWMI->pDispatchHead) {
  90a373:	882b      	l32i.n	a8, a2, 44
  90a375:	cc83      	bnez.n	a8, 90a37c <_WMI_RegisterDispatchTable+0xc>
		pWMI->pDispatchHead = pDispatchTable;
  90a377:	932b      	s32i.n	a3, a2, 44
  90a379:	600003        	j	90a380 <_WMI_RegisterDispatchTable+0x10>
		pWMI->pDispatchTail = pDispatchTable;
	} else {
		/* link to the tail */
		pWMI->pDispatchTail->pNext = pDispatchTable;
  90a37c:	882c      	l32i.n	a8, a2, 48
  90a37e:	9380      	s32i.n	a3, a8, 0
		pWMI->pDispatchTail = pDispatchTable;
  90a380:	932c      	s32i.n	a3, a2, 48
  90a382:	d10f      	retw.n

0090a384 <_WMI_Shutdown>:

	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);
}

static void _WMI_Shutdown(wmi_handle_t handle)
{
  90a384:	6c1004        	entry	a1, 32
  90a387:	d10f      	retw.n
  90a389:	000000        	ill

0090a38c <WMIRecvMessageHandler>:
{
  90a38c:	6c1006        	entry	a1, 48
	adf_os_assert(hdr_buf == ADF_NBUF_NULL);
  90a38f:	643016        	beqz	a3, 90a3a9 <WMIRecvMessageHandler+0x1d>
  90a392:	1368b5        	l32r	a3, 8e4668 <bStandardCommand+0x804>
  90a395:	1b69f1        	l32r	a11, 8e4b5c <mUsbEPinHighBandSet+0x1bc>
  90a398:	233212        	l32i	a3, a3, 72
  90a39b:	1a69f2        	l32r	a10, 8e4b64 <mUsbEPinHighBandSet+0x1c4>
  90a39e:	0b3000        	callx8	a3
  90a3a1:	136919        	l32r	a3, 8e4808 <bStandardCommand+0x9a4>
  90a3a4:	0c0200        	memw
  90a3a7:	8330      	l32i.n	a3, a3, 0
    return (__adf_nbuf_len(buf));
  90a3a9:	da40      	mov.n	a10, a4
  90a3ab:	5bf22f        	call8	906c68 <__adf_nbuf_len>
  90a3ae:	d3a0      	mov.n	a3, a10
		if (length < sizeof(WMI_CMD_HDR)) {
  90a3b0:	6ea44d        	bltui	a10, 4, 90a401 <WMIRecvMessageHandler+0x75>
    __adf_nbuf_peek_header(buf, addr, len);
  90a3b3:	b41b      	addi.n	a11, a1, 4
  90a3b5:	dc10      	mov.n	a12, a1
  90a3b7:	da40      	mov.n	a10, a4
  90a3b9:	5bf233        	call8	906c88 <__adf_nbuf_peek_header>
		cmdHdr = (WMI_CMD_HDR *)anbdata;
  90a3bc:	8911      	l32i.n	a9, a1, 4
		length = length - sizeof(WMI_CMD_HDR);
  90a3be:	2e3cfc        	addi	a14, a3, -4
		cmd = adf_os_ntohs(cmdHdr->commandId);
  90a3c1:	2b9000        	l8ui	a11, a9, 0
  90a3c4:	239001        	l8ui	a3, a9, 1
  90a3c7:	08bb11        	slli	a11, a11, 8
		pCurrentTable = pWMI->pDispatchHead;
  90a3ca:	885b      	l32i.n	a8, a5, 44
		cmd = adf_os_ntohs(cmdHdr->commandId);
  90a3cc:	0b3b02        	or	a11, a3, a11
		pCmdBuffer = anbdata + sizeof(WMI_CMD_HDR);
  90a3cf:	b49d      	addi.n	a13, a9, 4
		while (pCurrentTable != NULL) {
  90a3d1:	600029        	j	90a3fe <WMIRecvMessageHandler+0x72>
			pCurrentEntry = pCurrentTable->pTable;
  90a3d4:	8a83      	l32i.n	a10, a8, 12
			for (i = 0; i < pCurrentTable->NumberOfEntries; i++, pCurrentEntry++) {
  90a3d6:	8382      	l32i.n	a3, a8, 8
  90a3d8:	c0c0      	movi.n	a12, 0
  90a3da:	600014        	j	90a3f2 <WMIRecvMessageHandler+0x66>
				if (pCurrentEntry->CmdID == cmd) {
  90a3dd:	2fa102        	l16ui	a15, a10, 4
  90a3e0:	7bf90a        	bne	a15, a11, 90a3ee <WMIRecvMessageHandler+0x62>
					if ((pCurrentEntry->CheckLength != 0) &&
  90a3e3:	2ca103        	l16ui	a12, a10, 6
  90a3e6:	c8ce      	beqz.n	a12, 90a3f8 <WMIRecvMessageHandler+0x6c>
  90a3e8:	7ce210        	blt	a14, a12, 90a3fc <WMIRecvMessageHandler+0x70>
  90a3eb:	600009        	j	90a3f8 <WMIRecvMessageHandler+0x6c>
			for (i = 0; i < pCurrentTable->NumberOfEntries; i++, pCurrentEntry++) {
  90a3ee:	b1cc      	addi.n	a12, a12, 1
  90a3f0:	b8aa      	addi.n	a10, a10, 8
  90a3f2:	73c2e7        	blt	a12, a3, 90a3dd <WMIRecvMessageHandler+0x51>
  90a3f5:	600003        	j	90a3fc <WMIRecvMessageHandler+0x70>
					pCmdHandler = pCurrentEntry->pCmdHandler;
  90a3f8:	8fa0      	l32i.n	a15, a10, 0
			if (pCmdHandler != NULL) {
  90a3fa:	cdf4      	bnez.n	a15, 90a412 <WMIRecvMessageHandler+0x86>
			pCurrentTable = pCurrentTable->pNext;
  90a3fc:	8880      	l32i.n	a8, a8, 0
		while (pCurrentTable != NULL) {
  90a3fe:	658fd2        	bnez	a8, 90a3d4 <WMIRecvMessageHandler+0x48>
	HTC_ReturnBuffers(pWMI->HtcHandle, EndPt, pHTCBuf);
  90a401:	1368b5        	l32r	a3, 8e46d8 <bStandardCommand+0x874>
  90a404:	8a50      	l32i.n	a10, a5, 0
  90a406:	233282        	l32i	a3, a3, 0x208
  90a409:	dc40      	mov.n	a12, a4
  90a40b:	db20      	mov.n	a11, a2
  90a40d:	0b3000        	callx8	a3
}
  90a410:	d10f      	retw.n
		seq = adf_os_ntohs(cmdHdr->seqNo);
  90a412:	2a9002        	l8ui	a10, a9, 2
  90a415:	2c9003        	l8ui	a12, a9, 3
  90a418:	08aa11        	slli	a10, a10, 8
		pCmdHandler(pContext, cmd, seq, pCmdBuffer, length);
  90a41b:	0acc02        	or	a12, a12, a10
  90a41e:	2a8201        	l32i	a10, a8, 4
  90a421:	0bf000        	callx8	a15
  90a424:	63ffd9        	j	90a401 <WMIRecvMessageHandler+0x75>
	...

0090a428 <_WMI_SendCompleteHandler>:
{
  90a428:	6c1004        	entry	a1, 32
    return (__adf_nbuf_get_priv(buf));
  90a42b:	da30      	mov.n	a10, a3
  90a42d:	5bf16f        	call8	9069ec <__adf_nbuf_get_priv>
	if ( ctx->EventClass == WMI_EVT_CLASS_CMD_EVENT ) {
  90a430:	8ba1      	l32i.n	a11, a10, 4
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
  90a432:	c091      	movi.n	a9, 1
  90a434:	c080      	movi.n	a8, 0
  90a436:	0b9838        	moveqz	a8, a9, a11
  90a439:	db80      	mov.n	a11, a8
	BUF_Pool_free_buf(pWMI->PoolHandle, poolId, pHTCBuf);
  90a43b:	1868b5        	l32r	a8, 8e4710 <bStandardCommand+0x8ac>
  90a43e:	8a41      	l32i.n	a10, a4, 4
  90a440:	28829e        	l32i	a8, a8, 0x278
  90a443:	dc30      	mov.n	a12, a3
  90a445:	a9bb      	add.n	a11, a11, a9
  90a447:	0b8000        	callx8	a8
  90a44a:	d10f      	retw.n

0090a44c <_WMI_AllocEvent>:
{
  90a44c:	6c1004        	entry	a1, 32
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle,
  90a44f:	1868b5        	l32r	a8, 8e4724 <bStandardCommand+0x8c0>
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
  90a452:	c0b0      	movi.n	a11, 0
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle,
  90a454:	25829c        	l32i	a5, a8, 0x270
  90a457:	8a20      	l32i.n	a10, a2, 0
  90a459:	288285        	l32i	a8, a8, 0x214
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
  90a45c:	c041      	movi.n	a4, 1
  90a45e:	03b439        	movnez	a4, a11, a3
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle,
  90a461:	8621      	l32i.n	a6, a2, 4
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
  90a463:	b144      	addi.n	a4, a4, 1
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle,
  90a465:	0b8000        	callx8	a8
  90a468:	b4ac      	addi.n	a12, a10, 4
  90a46a:	db40      	mov.n	a11, a4
  90a46c:	da60      	mov.n	a10, a6
  90a46e:	0b5000        	callx8	a5
  90a471:	d2a0      	mov.n	a2, a10
	if ( buf != NULL ) {
  90a473:	c8a3      	beqz.n	a10, 90a47a <_WMI_AllocEvent+0x2e>
  90a475:	5bf15d        	call8	9069ec <__adf_nbuf_get_priv>
		ctx->EventClass = EventClass;
  90a478:	93a1      	s32i.n	a3, a10, 4
}
  90a47a:	d10f      	retw.n

0090a47c <_WMI_SendEvent>:
{
  90a47c:	6c1004        	entry	a1, 32
    return __adf_nbuf_push_head(buf, size);
  90a47f:	2b0a04        	movi	a11, 4
  90a482:	033a02        	or	a10, a3, a3
  90a485:	5bf129        	call8	90692c <__adf_nbuf_push_head>
  90a488:	04044f        	extui	a4, a4, 0, 16
  90a48b:	05054f        	extui	a5, a5, 0, 16
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, commandId, adf_os_htons(EventId));
  90a48e:	24a401        	s8i	a4, a10, 1
  90a491:	048814        	srli	a8, a4, 8
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, seqNo, adf_os_htons(SeqNo));
  90a494:	058414        	srli	a4, a5, 8
  90a497:	24a402        	s8i	a4, a10, 2
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);
  90a49a:	1468b5        	l32r	a4, 8e4770 <bStandardCommand+0x90c>
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, commandId, adf_os_htons(EventId));
  90a49d:	28a400        	s8i	a8, a10, 0
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, seqNo, adf_os_htons(SeqNo));
  90a4a0:	25a403        	s8i	a5, a10, 3
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);
  90a4a3:	244284        	l32i	a4, a4, 0x210
  90a4a6:	8b2a      	l32i.n	a11, a2, 40
  90a4a8:	8a20      	l32i.n	a10, a2, 0
  90a4aa:	033c02        	or	a12, a3, a3
  90a4ad:	0b4000        	callx8	a4
  90a4b0:	d10f      	retw.n
	...

0090a4b4 <_WMI_Init>:
{
  90a4b4:	6c1004        	entry	a1, 32
    return A_ALLOCRAM(size);
  90a4b7:	1368b5        	l32r	a3, 8e478c <bStandardCommand+0x928>
  90a4ba:	d420      	mov.n	a4, a2
  90a4bc:	223252        	l32i	a2, a3, 0x148
  90a4bf:	c3b8      	movi.n	a11, 56
  90a4c1:	c0a0      	movi.n	a10, 0
  90a4c3:	0b2000        	callx8	a2
  90a4c6:	d2a0      	mov.n	a2, a10
	if (pWMI == NULL) {
  90a4c8:	64a055        	beqz	a10, 90a521 <_WMI_Init+0x6d>
	pWMI->pDispatchHead = NULL;
  90a4cb:	c080      	movi.n	a8, 0
  90a4cd:	98ab      	s32i.n	a8, a10, 44
	pWMI->HtcHandle = pWmiConfig->HtcHandle;
  90a4cf:	8840      	l32i.n	a8, a4, 0
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
  90a4d1:	8a41      	l32i.n	a10, a4, 4
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY,
  90a4d3:	8c42      	l32i.n	a12, a4, 8
	pWMI->HtcHandle = pWmiConfig->HtcHandle;
  90a4d5:	9820      	s32i.n	a8, a2, 0
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY,
  90a4d7:	28329b        	l32i	a8, a3, 0x26c
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
  90a4da:	9a21      	s32i.n	a10, a2, 4
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY,
  90a4dc:	2d0a70        	movi	a13, 112
  90a4df:	2b0a01        	movi	a11, 1
  90a4e2:	0b8000        	callx8	a8
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_EVENT,
  90a4e5:	28329b        	l32i	a8, a3, 0x26c
  90a4e8:	8a41      	l32i.n	a10, a4, 4
  90a4ea:	8c43      	l32i.n	a12, a4, 12
  90a4ec:	c0b2      	movi.n	a11, 2
  90a4ee:	2d0a70        	movi	a13, 112
  90a4f1:	0b8000        	callx8	a8
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
  90a4f4:	283293        	l32i	a8, a3, 0x24c
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a4f7:	8a40      	l32i.n	a10, a4, 0
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
  90a4f9:	9824      	s32i.n	a8, a2, 16
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
  90a4fb:	283290        	l32i	a8, a3, 0x240
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a4fe:	bc2b      	addi.n	a11, a2, 12
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
  90a500:	9825      	s32i.n	a8, a2, 20
	pWMI->WMIControlService.ProcessConnect = A_INDIR(wmi_svc_api._WMI_ServiceConnect);
  90a502:	283294        	l32i	a8, a3, 0x250
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a505:	233280        	l32i	a3, a3, 0x200
	pWMI->WMIControlService.ProcessConnect = A_INDIR(wmi_svc_api._WMI_ServiceConnect);
  90a508:	9826      	s32i.n	a8, a2, 24
	pWMI->WMIControlService.MaxSvcMsgSize = WMI_SVC_MSG_SIZE + sizeof(WMI_CMD_HDR);
  90a50a:	286a04        	movi	a8, 0x604
  90a50d:	282510        	s16i	a8, a2, 32
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE;
  90a510:	280a64        	movi	a8, 100
  90a513:	282511        	s16i	a8, a2, 34
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
  90a516:	281a00        	movi	a8, 0x100
  90a519:	28250e        	s16i	a8, a2, 28
	pWMI->WMIControlService.ServiceCtx = pWMI;
  90a51c:	9229      	s32i.n	a2, a2, 36
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a51e:	0b3000        	callx8	a3
}
  90a521:	d10f      	retw.n
	...

0090a524 <WMI_service_module_install>:

	adf_os_mem_free(pWMI);
}

void WMI_service_module_install(WMI_SVC_APIS *pTbl)
{
  90a524:	6c1004        	entry	a1, 32
	pTbl->_WMI_Init                     = _WMI_Init;
  90a527:	1869f3        	l32r	a8, 8e4cf4 <mUsbEPinHighBandSet+0x354>
  90a52a:	9820      	s32i.n	a8, a2, 0
	pTbl->_WMI_RegisterDispatchTable    = _WMI_RegisterDispatchTable;
  90a52c:	1869f4        	l32r	a8, 8e4cfc <mUsbEPinHighBandSet+0x35c>
  90a52f:	9821      	s32i.n	a8, a2, 4
	pTbl->_WMI_AllocEvent               = _WMI_AllocEvent;
  90a531:	1869f5        	l32r	a8, 8e4d08 <mUsbEPinHighBandSet+0x368>
  90a534:	9822      	s32i.n	a8, a2, 8
	pTbl->_WMI_SendEvent                = _WMI_SendEvent;
  90a536:	1869f6        	l32r	a8, 8e4d10 <mUsbEPinHighBandSet+0x370>
  90a539:	9823      	s32i.n	a8, a2, 12
	pTbl->_WMI_SendCompleteHandler      = _WMI_SendCompleteHandler;
  90a53b:	1869f7        	l32r	a8, 8e4d18 <mUsbEPinHighBandSet+0x378>
  90a53e:	9825      	s32i.n	a8, a2, 20
	pTbl->_WMI_GetPendingEventsCount    = _WMI_GetPendingEventsCount;
  90a540:	1869f8        	l32r	a8, 8e4d20 <mUsbEPinHighBandSet+0x380>
  90a543:	9824      	s32i.n	a8, a2, 16
	pTbl->_WMI_GetControlEp             = _WMI_GetControlEp;
  90a545:	1869f9        	l32r	a8, 8e4d2c <mUsbEPinHighBandSet+0x38c>
  90a548:	9826      	s32i.n	a8, a2, 24
	pTbl->_WMI_Shutdown                 = _WMI_Shutdown;
  90a54a:	1869fa        	l32r	a8, 8e4d34 <mUsbEPinHighBandSet+0x394>
  90a54d:	9827      	s32i.n	a8, a2, 28
	pTbl->_WMI_RecvMessageHandler       = WMIRecvMessageHandler;
  90a54f:	1869fb        	l32r	a8, 8e4d3c <mUsbEPinHighBandSet+0x39c>
  90a552:	9828      	s32i.n	a8, a2, 32
	pTbl->_WMI_ServiceConnect           = WMIServiceConnect;
  90a554:	1869fc        	l32r	a8, 8e4d44 <mUsbEPinHighBandSet+0x3a4>
  90a557:	9829      	s32i.n	a8, a2, 36
  90a559:	d10f      	retw.n
	...

0090a55c <io32_rmw>:
{
  90a55c:	6c1006        	entry	a1, 48
  90a55f:	0c0200        	memw
  90a562:	9210      	s32i.n	a2, a1, 0
	val = ioread32(addr);
  90a564:	0c0200        	memw
  90a567:	8810      	l32i.n	a8, a1, 0
	return *(const volatile uint32_t *) addr;
  90a569:	0c0200        	memw
  90a56c:	8980      	l32i.n	a9, a8, 0
	val &= ~clr;
  90a56e:	c78f      	movi.n	a8, -1
  90a570:	048403        	xor	a4, a8, a4
  90a573:	094401        	and	a4, a4, a9
	iowrite32(addr, val);
  90a576:	0c0200        	memw
  90a579:	8810      	l32i.n	a8, a1, 0
	val |= set;
  90a57b:	034402        	or	a4, a4, a3
	*(volatile uint32_t *) addr = b;
  90a57e:	0c0200        	memw
  90a581:	9480      	s32i.n	a4, a8, 0
  90a583:	d10f      	retw.n
  90a585:	000000        	ill

0090a588 <_fw_restore_dma_fifo>:
	/* deassert eth_pll bypass mode and trigger update bit */
	io32_clr(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
}

static void _fw_restore_dma_fifo(void)
{
  90a588:	6c1004        	entry	a1, 32
	io32_clr(0x5601C, BIT18);
  90a58b:	1c69c1        	l32r	a12, 8e4c90 <mUsbEPinHighBandSet+0x2f0>
  90a58e:	1a69fd        	l32r	a10, 8e4d84 <mUsbEPinHighBandSet+0x3e4>
  90a591:	c0b0      	movi.n	a11, 0
  90a593:	5bfff2        	call8	90a55c <io32_rmw>

	/* reset pcie_rc shift */
	io32_clr(0x50010, BIT10 | BIT8 | BIT7);
  90a596:	1268e2        	l32r	a2, 8e4920 <mUsbFIFOMap+0xc>
  90a599:	2c5a80        	movi	a12, 0x580
  90a59c:	2b0a00        	movi	a11, 0
  90a59f:	022a02        	or	a10, a2, a2
  90a5a2:	5bffee        	call8	90a55c <io32_rmw>
	A_DELAY_USECS(1);
  90a5a5:	1368b5        	l32r	a3, 8e487c <bStandardCommand+0xa18>
  90a5a8:	c0a1      	movi.n	a10, 1
  90a5aa:	28323b        	l32i	a8, a3, 236
  90a5ad:	0b8000        	callx8	a8
	io32_set(0x50010, BIT10 | BIT8 | BIT7);
  90a5b0:	da20      	mov.n	a10, a2
  90a5b2:	c0c0      	movi.n	a12, 0
  90a5b4:	2b5a80        	movi	a11, 0x580
  90a5b7:	5bffe9        	call8	90a55c <io32_rmw>

	/* reset pci_rc phy */
	io32_set(MAGPIE_REG_RST_RESET_ADDR,
  90a5ba:	da20      	mov.n	a10, a2
  90a5bc:	c0c0      	movi.n	a12, 0
  90a5be:	2b5ac0        	movi	a11, 0x5c0
  90a5c1:	5bffe6        	call8	90a55c <io32_rmw>
		 PCI_RC_PHY_SHIFT_RESET_BIT
		 | PCI_RC_PLL_RESET_BIT | PCI_RC_PHY_RESET_BIT
		 | PCI_RC_RESET_BIT);
	A_DELAY_USECS(20);
  90a5c4:	22323b        	l32i	a2, a3, 236
  90a5c7:	c1a4      	movi.n	a10, 20
  90a5c9:	0b2000        	callx8	a2

	// enable dma swap function
	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  90a5cc:	1268f4        	l32r	a2, 8e499c <mUsbEPMxPtSzLow+0x20>
  90a5cf:	c081      	movi.n	a8, 1
  90a5d1:	0c0200        	memw
  90a5d4:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  90a5d6:	1268f5        	l32r	a2, 8e49ac <mUsbEPinHighBandSet+0xc>
  90a5d9:	0c0200        	memw
  90a5dc:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  90a5de:	1268f6        	l32r	a2, 8e49b8 <mUsbEPinHighBandSet+0x18>
  90a5e1:	0c0200        	memw
  90a5e4:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  90a5e6:	1268f7        	l32r	a2, 8e49c4 <mUsbEPinHighBandSet+0x24>
  90a5e9:	0c0200        	memw
  90a5ec:	9820      	s32i.n	a8, a2, 0
  90a5ee:	d10f      	retw.n

0090a5f0 <_fw_reset_dma_fifo>:
{
  90a5f0:	6c1012        	entry	a1, 144
  90a5f3:	1269fe        	l32r	a2, 8e4dec <mUsbEPinHighBandSet+0x44c>
	val |= set;
  90a5f6:	c140      	movi.n	a4, 16
	return *(const volatile uint8_t *) addr;
  90a5f8:	232000        	l8ui	a3, a2, 0
	A_PRINTF("_fw_reset_dma_fifo\n");
  90a5fb:	1a6a00        	l32r	a10, 8e4dfc <mUsbEPinHighBandSet+0x45c>
  90a5fe:	030347        	extui	a3, a3, 0, 8
	val |= set;
  90a601:	043302        	or	a3, a3, a4
  90a604:	030347        	extui	a3, a3, 0, 8
	*(volatile uint8_t *) addr = b;
  90a607:	0c0200        	memw
  90a60a:	232400        	s8i	a3, a2, 0
  90a60d:	1369ff        	l32r	a3, 8e4e0c <mUsbEPinHighBandSet+0x46c>
	mUSB_STATUS_IN_INT_DISABLE();
  90a610:	250ac0        	movi	a5, 192
	return *(const volatile uint8_t *) addr;
  90a613:	223000        	l8ui	a2, a3, 0
  90a616:	020247        	extui	a2, a2, 0, 8
	val |= set;
  90a619:	042202        	or	a2, a2, a4
  90a61c:	020247        	extui	a2, a2, 0, 8
	*(volatile uint8_t *) addr = b;
  90a61f:	0c0200        	memw
  90a622:	223400        	s8i	a2, a3, 0
	A_PRINTF("_fw_reset_dma_fifo\n");
  90a625:	1268b5        	l32r	a2, 8e48fc <mUsbEPMap+0x4>
  90a628:	232212        	l32i	a3, a2, 72
  90a62b:	0b3000        	callx8	a3
	return *(const volatile uint8_t *) addr;
  90a62e:	1468fb        	l32r	a4, 8e4a1c <mUsbEPinHighBandSet+0x7c>
	return *(const volatile uint32_t *) addr;
  90a631:	166a01        	l32r	a6, 8e4e38 <mUsbEPinHighBandSet+0x498>
	return *(const volatile uint8_t *) addr;
  90a634:	234000        	l8ui	a3, a4, 0
	A_PRINTF("org 0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a637:	1a6a02        	l32r	a10, 8e4e40 <mUsbEPinHighBandSet+0x4a0>
  90a63a:	030347        	extui	a3, a3, 0, 8
	mUSB_STATUS_IN_INT_DISABLE();
  90a63d:	053302        	or	a3, a3, a5
	*(volatile uint8_t *) addr = b;
  90a640:	0c0200        	memw
  90a643:	234400        	s8i	a3, a4, 0
	*(volatile uint32_t *) addr = b;
  90a646:	1468bd        	l32r	a4, 8e493c <mUsbFIFOConfig+0x8>
  90a649:	1368b8        	l32r	a3, 8e492c <mUsbFIFOMap+0x18>
  90a64c:	0c0200        	memw
  90a64f:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint32_t *) addr;
  90a651:	0c0200        	memw
  90a654:	8b60      	l32i.n	a11, a6, 0
	A_PRINTF("org 0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a656:	232212        	l32i	a3, a2, 72
  90a659:	0b3000        	callx8	a3
  90a65c:	156a03        	l32r	a5, 8e4e68 <mUsbEPinHighBandSet+0x4c8>
	A_PRINTF("org 0x404C  0x%x ......\n", ioread32(0x10ff404C));
  90a65f:	232212        	l32i	a3, a2, 72
  90a662:	0c0200        	memw
  90a665:	8b50      	l32i.n	a11, a5, 0
  90a667:	1a6a04        	l32r	a10, 8e4e78 <mUsbEPinHighBandSet+0x4d8>
  90a66a:	0b3000        	callx8	a3
  90a66d:	146a05        	l32r	a4, 8e4e84 <mUsbEPinHighBandSet+0x4e4>
	A_PRINTF("org 0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90a670:	232212        	l32i	a3, a2, 72
  90a673:	0c0200        	memw
  90a676:	8b40      	l32i.n	a11, a4, 0
  90a678:	1a6a06        	l32r	a10, 8e4e90 <mUsbEPinHighBandSet+0x4f0>
  90a67b:	0b3000        	callx8	a3
	*(volatile uint32_t *) addr = b;
  90a67e:	136a07        	l32r	a3, 8e4e9c <mUsbEPinHighBandSet+0x4fc>
	A_DELAY_USECS(1000);
  90a681:	28223b        	l32i	a8, a2, 236
  90a684:	0c0200        	memw
  90a687:	234600        	s32i	a3, a4, 0
  90a68a:	230a00        	movi	a3, 0
  90a68d:	0c0200        	memw
  90a690:	235600        	s32i	a3, a5, 0
  90a693:	2a3ae8        	movi	a10, 0x3e8
  90a696:	0b8000        	callx8	a8
	return *(const volatile uint32_t *) addr;
  90a699:	0c0200        	memw
  90a69c:	2b6200        	l32i	a11, a6, 0
	A_PRINTF("0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a69f:	1a6a08        	l32r	a10, 8e4ec0 <mUsbEPinHighBandSet+0x520>
  90a6a2:	262212        	l32i	a6, a2, 72
  90a6a5:	0b6000        	callx8	a6
  90a6a8:	0c0200        	memw
  90a6ab:	8b50      	l32i.n	a11, a5, 0
	A_PRINTF("0x404C  0x%x ......\n", ioread32(0x10ff404C));
  90a6ad:	1a6a09        	l32r	a10, 8e4ed4 <mUsbEPinHighBandSet+0x534>
  90a6b0:	252212        	l32i	a5, a2, 72
  90a6b3:	0b5000        	callx8	a5
  90a6b6:	0c0200        	memw
  90a6b9:	8b40      	l32i.n	a11, a4, 0
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90a6bb:	1a6a0a        	l32r	a10, 8e4ee4 <mUsbEPinHighBandSet+0x544>
  90a6be:	242212        	l32i	a4, a2, 72
  90a6c1:	0b4000        	callx8	a4
		A_PRINTF("turn_off_merlin_ep_start ......\n");
  90a6c4:	1a6a0b        	l32r	a10, 8e4ef0 <mUsbEPinHighBandSet+0x550>
  90a6c7:	242212        	l32i	a4, a2, 72
  90a6ca:	0b4000        	callx8	a4
		A_DELAY_USECS(measure_time);
  90a6cd:	24223b        	l32i	a4, a2, 236
  90a6d0:	da30      	mov.n	a10, a3
  90a6d2:	0b4000        	callx8	a4
		default_data[0] = 0x9248fd00;
  90a6d5:	146a0c        	l32r	a4, 8e4f08 <mUsbEPinHighBandSet+0x568>
  90a6d8:	156a15        	l32r	a5, 8e4f2c <mUsbEPinHighBandSet+0x58c>
  90a6db:	0c0200        	memw
  90a6de:	9410      	s32i.n	a4, a1, 0
		default_data[1] = 0x24924924;
  90a6e0:	146a0d        	l32r	a4, 8e4f14 <mUsbEPinHighBandSet+0x574>
  90a6e3:	0c0200        	memw
  90a6e6:	9411      	s32i.n	a4, a1, 4
		default_data[2] = 0xa8000019;
  90a6e8:	146a0e        	l32r	a4, 8e4f20 <mUsbEPinHighBandSet+0x580>
  90a6eb:	0c0200        	memw
  90a6ee:	9412      	s32i.n	a4, a1, 8
		default_data[3] = 0x17160820;
  90a6f0:	146a0f        	l32r	a4, 8e4f2c <mUsbEPinHighBandSet+0x58c>
  90a6f3:	0c0200        	memw
  90a6f6:	9413      	s32i.n	a4, a1, 12
		default_data[4] = 0x25980560;
  90a6f8:	146a10        	l32r	a4, 8e4f38 <mUsbEPinHighBandSet+0x598>
  90a6fb:	0c0200        	memw
  90a6fe:	9414      	s32i.n	a4, a1, 16
		default_data[5] = 0xc1c00000;
  90a700:	146a11        	l32r	a4, 8e4f44 <mUsbEPinHighBandSet+0x5a4>
  90a703:	0c0200        	memw
  90a706:	9415      	s32i.n	a4, a1, 20
		default_data[6] = 0x1aaabe40;
  90a708:	146a12        	l32r	a4, 8e4f50 <mUsbEPinHighBandSet+0x5b0>
  90a70b:	0c0200        	memw
  90a70e:	9416      	s32i.n	a4, a1, 24
		default_data[7] = 0xbe105554;
  90a710:	146a13        	l32r	a4, 8e4f5c <mUsbEPinHighBandSet+0x5bc>
  90a713:	0c0200        	memw
  90a716:	9417      	s32i.n	a4, a1, 28
		default_data[8] = 0x00043007;
  90a718:	146a14        	l32r	a4, 8e4f68 <vbuf_module_install+0x8>
  90a71b:	0c0200        	memw
  90a71e:	9418      	s32i.n	a4, a1, 32
			A_DELAY_USECS(10);
  90a720:	24223b        	l32i	a4, a2, 236
  90a723:	c0aa      	movi.n	a10, 10
  90a725:	0b4000        	callx8	a4
			iowrite32(0x10ff4040, default_data[i]);
  90a728:	0e3411        	slli	a4, a3, 2
  90a72b:	a414      	add.n	a4, a1, a4
  90a72d:	0c0200        	memw
  90a730:	8440      	l32i.n	a4, a4, 0
		for(i=0; i<9; i++)
  90a732:	b133      	addi.n	a3, a3, 1
	*(volatile uint32_t *) addr = b;
  90a734:	0c0200        	memw
  90a737:	245600        	s32i	a4, a5, 0
  90a73a:	240a09        	movi	a4, 9
  90a73d:	7439df        	bne	a3, a4, 90a720 <_fw_reset_dma_fifo+0x130>
		A_DELAY_USECS(10);
  90a740:	23223b        	l32i	a3, a2, 236
  90a743:	2a0a0a        	movi	a10, 10
  90a746:	0b3000        	callx8	a3
  90a749:	136a16        	l32r	a3, 8e4fa4 <vbuf_module_install+0x44>
  90a74c:	c041      	movi.n	a4, 1
  90a74e:	0c0200        	memw
  90a751:	9430      	s32i.n	a4, a3, 0
		A_PRINTF("turn_off_merlin_ep_end ......\n");
  90a753:	1a6a17        	l32r	a10, 8e4fb0 <vbuf_module_install+0x50>
  90a756:	232212        	l32i	a3, a2, 72
  90a759:	0b3000        	callx8	a3
	A_PRINTF("turn_off_magpie_ep_start ......\n");
  90a75c:	1a6a18        	l32r	a10, 8e4fbc <vbuf_module_install+0x5c>
  90a75f:	232212        	l32i	a3, a2, 72
  90a762:	0b3000        	callx8	a3
	A_DELAY_USECS(measure_time);
  90a765:	23223b        	l32i	a3, a2, 236
  90a768:	c0a0      	movi.n	a10, 0
  90a76a:	0b3000        	callx8	a3
	io32_set(0x40040, BIT0 | BIT1);
  90a76d:	1a6a19        	l32r	a10, 8e4fd4 <vbuf_module_install+0x74>
  90a770:	c0c0      	movi.n	a12, 0
  90a772:	2b0a03        	movi	a11, 3
  90a775:	5bff79        	call8	90a55c <io32_rmw>
	default_data[0] = 0x9248fd00;
  90a778:	136a0c        	l32r	a3, 8e4fa8 <vbuf_module_install+0x48>
	return *(const volatile uint32_t *) addr;
  90a77b:	156a1a        	l32r	a5, 8e4fe4 <vbuf_module_install+0x84>
  90a77e:	0c0200        	memw
  90a781:	9319      	s32i.n	a3, a1, 36
	default_data[1] = 0x24924924;
  90a783:	136a0d        	l32r	a3, 8e4fb8 <vbuf_module_install+0x58>
  90a786:	0c0200        	memw
  90a789:	931a      	s32i.n	a3, a1, 40
	default_data[2] = 0xa8000019;
  90a78b:	136a0e        	l32r	a3, 8e4fc4 <vbuf_module_install+0x64>
  90a78e:	0c0200        	memw
  90a791:	931b      	s32i.n	a3, a1, 44
	default_data[3] = 0x17160820;
  90a793:	136a0f        	l32r	a3, 8e4fd0 <vbuf_module_install+0x70>
  90a796:	0c0200        	memw
  90a799:	931c      	s32i.n	a3, a1, 48
	default_data[4] = 0x25980560;
  90a79b:	136a10        	l32r	a3, 8e4fdc <vbuf_module_install+0x7c>
  90a79e:	0c0200        	memw
  90a7a1:	931d      	s32i.n	a3, a1, 52
	default_data[5] = 0xc1c00000;
  90a7a3:	136a11        	l32r	a3, 8e4fe8 <vbuf_module_install+0x88>
  90a7a6:	0c0200        	memw
  90a7a9:	931e      	s32i.n	a3, a1, 56
	default_data[6] = 0x1aaabe40;
  90a7ab:	136a12        	l32r	a3, 8e4ff4 <vbuf_module_install+0x94>
  90a7ae:	0c0200        	memw
  90a7b1:	931f      	s32i.n	a3, a1, 60
	default_data[7] = 0xbe105554;
  90a7b3:	136a13        	l32r	a3, 8e5000 <vbuf_module_install+0xa0>
  90a7b6:	0c0200        	memw
  90a7b9:	231610        	s32i	a3, a1, 64
	default_data[8] = 0x00043007;
  90a7bc:	136a14        	l32r	a3, 8e500c <vbuf_module_install+0xac>
  90a7bf:	0c0200        	memw
  90a7c2:	231611        	s32i	a3, a1, 68
	for(i=0; i<9; i++)
  90a7c5:	230a00        	movi	a3, 0
  90a7c8:	0c0200        	memw
  90a7cb:	8450      	l32i.n	a4, a5, 0
			if (ioread32(0x40028) & BIT31)
  90a7cd:	674ff7        	bgez	a4, 90a7c8 <_fw_reset_dma_fifo+0x1d8>
		A_DELAY_USECS(1);
  90a7d0:	24223b        	l32i	a4, a2, 236
  90a7d3:	c0a1      	movi.n	a10, 1
  90a7d5:	0b4000        	callx8	a4
		iowrite32(0x40024, default_data[i]);
  90a7d8:	0e3411        	slli	a4, a3, 2
  90a7db:	a414      	add.n	a4, a1, a4
  90a7dd:	0c0200        	memw
  90a7e0:	8649      	l32i.n	a6, a4, 36
  90a7e2:	146a1b        	l32r	a4, 8e5050 <vdesc_module_install+0x40>
	for(i=0; i<9; i++)
  90a7e5:	b133      	addi.n	a3, a3, 1
	*(volatile uint32_t *) addr = b;
  90a7e7:	0c0200        	memw
  90a7ea:	9640      	s32i.n	a6, a4, 0
  90a7ec:	c049      	movi.n	a4, 9
  90a7ee:	7439d6        	bne	a3, a4, 90a7c8 <_fw_reset_dma_fifo+0x1d8>
	io32_clr(0x40040, BIT0 | BIT1);
  90a7f1:	136a19        	l32r	a3, 8e5058 <vdesc_module_install+0x48>
  90a7f4:	c041      	movi.n	a4, 1
  90a7f6:	c0c3      	movi.n	a12, 3
  90a7f8:	c0b0      	movi.n	a11, 0
  90a7fa:	da30      	mov.n	a10, a3
  90a7fc:	0c0200        	memw
  90a7ff:	9450      	s32i.n	a4, a5, 0
  90a801:	5bff56        	call8	90a55c <io32_rmw>
	A_PRINTF("turn_off_magpie_ep_end ......\n");
  90a804:	1a6a1c        	l32r	a10, 8e5074 <vdesc_module_install+0x64>
  90a807:	252212        	l32i	a5, a2, 72
  90a80a:	0b5000        	callx8	a5
	A_PRINTF("turn_off_magpie_rc_start ......\n");
  90a80d:	1a6a1d        	l32r	a10, 8e5084 <vdesc_module_install+0x74>
  90a810:	252212        	l32i	a5, a2, 72
  90a813:	0b5000        	callx8	a5
	A_DELAY_USECS(measure_time);
  90a816:	25223b        	l32i	a5, a2, 236
  90a819:	c0a0      	movi.n	a10, 0
  90a81b:	0b5000        	callx8	a5
	io32_clr(0x40040, BIT0);
  90a81e:	da30      	mov.n	a10, a3
  90a820:	dc40      	mov.n	a12, a4
  90a822:	2b0a00        	movi	a11, 0
  90a825:	5bff4d        	call8	90a55c <io32_rmw>
	A_PRINTF("turn_off_phy_rc\n");
  90a828:	1a6a1e        	l32r	a10, 8e50a0 <vdesc_module_install+0x90>
  90a82b:	232212        	l32i	a3, a2, 72
  90a82e:	0b3000        	callx8	a3
	default_data[0] = 0x9248fd00;
  90a831:	136a0c        	l32r	a3, 8e5064 <vdesc_module_install+0x54>
	return *(const volatile uint32_t *) addr;
  90a834:	156a1a        	l32r	a5, 8e509c <vdesc_module_install+0x8c>
  90a837:	0c0200        	memw
  90a83a:	231612        	s32i	a3, a1, 72
	default_data[1] = 0x24924924;
  90a83d:	136a0d        	l32r	a3, 8e5074 <vdesc_module_install+0x64>
  90a840:	0c0200        	memw
  90a843:	231613        	s32i	a3, a1, 76
	default_data[2] = 0xa8000019;
  90a846:	136a0e        	l32r	a3, 8e5080 <vdesc_module_install+0x70>
  90a849:	0c0200        	memw
  90a84c:	231614        	s32i	a3, a1, 80
	default_data[3] = 0x13160820;//PwdClk1MHz=0
  90a84f:	136a1f        	l32r	a3, 8e50cc <vdesc_module_install+0xbc>
  90a852:	0c0200        	memw
  90a855:	231615        	s32i	a3, a1, 84
	default_data[4] = 0x25980560;
  90a858:	136a10        	l32r	a3, 8e5098 <vdesc_module_install+0x88>
  90a85b:	0c0200        	memw
  90a85e:	231616        	s32i	a3, a1, 88
	default_data[5] = 0xc1c00000;
  90a861:	136a11        	l32r	a3, 8e50a8 <vdesc_module_install+0x98>
  90a864:	0c0200        	memw
  90a867:	231617        	s32i	a3, a1, 92
	default_data[6] = 0x1aaabe40;
  90a86a:	136a12        	l32r	a3, 8e50b4 <vdesc_module_install+0xa4>
  90a86d:	0c0200        	memw
  90a870:	231618        	s32i	a3, a1, 96
	default_data[7] = 0xbe105554;
  90a873:	136a13        	l32r	a3, 8e50c0 <vdesc_module_install+0xb0>
  90a876:	0c0200        	memw
  90a879:	231619        	s32i	a3, a1, 100
	default_data[8] = 0x00043007;
  90a87c:	136a14        	l32r	a3, 8e50cc <vdesc_module_install+0xbc>
  90a87f:	0c0200        	memw
  90a882:	23161a        	s32i	a3, a1, 104
	for(i=0; i<9; i++)
  90a885:	230a00        	movi	a3, 0
  90a888:	0c0200        	memw
  90a88b:	8450      	l32i.n	a4, a5, 0
			if (ioread32(0x40028) & BIT31)
  90a88d:	674ff7        	bgez	a4, 90a888 <_fw_reset_dma_fifo+0x298>
		A_DELAY_USECS(1);
  90a890:	24223b        	l32i	a4, a2, 236
  90a893:	c0a1      	movi.n	a10, 1
  90a895:	0b4000        	callx8	a4
		iowrite32(0x40024, default_data[i]);
  90a898:	0e3411        	slli	a4, a3, 2
  90a89b:	a414      	add.n	a4, a1, a4
  90a89d:	0c0200        	memw
  90a8a0:	264212        	l32i	a6, a4, 72
  90a8a3:	146a1b        	l32r	a4, 8e5110 <vdesc_module_install+0x100>
	for(i=0; i<9; i++)
  90a8a6:	b133      	addi.n	a3, a3, 1
	*(volatile uint32_t *) addr = b;
  90a8a8:	0c0200        	memw
  90a8ab:	9640      	s32i.n	a6, a4, 0
  90a8ad:	240a09        	movi	a4, 9
  90a8b0:	7439d4        	bne	a3, a4, 90a888 <_fw_reset_dma_fifo+0x298>
	A_PRINTF("turn_off_magpie_rc_end ......down\n");
  90a8b3:	232212        	l32i	a3, a2, 72
  90a8b6:	c061      	movi.n	a6, 1
  90a8b8:	1a6a20        	l32r	a10, 8e5138 <vdesc_module_install+0x128>
  90a8bb:	0c0200        	memw
  90a8be:	265600        	s32i	a6, a5, 0
  90a8c1:	0b3000        	callx8	a3
	A_DELAY_USECS(measure_time);
  90a8c4:	23223b        	l32i	a3, a2, 236
  90a8c7:	c0a0      	movi.n	a10, 0
  90a8c9:	0b3000        	callx8	a3
	return *(const volatile uint32_t *) addr;
  90a8cc:	136a21        	l32r	a3, 8e5150 <vdesc_module_install+0x140>
	A_PRINTF("0x4001C  %p ......\n", ioread32(0x4001c));
  90a8cf:	1a6a22        	l32r	a10, 8e5158 <vdesc_module_install+0x148>
  90a8d2:	0c0200        	memw
  90a8d5:	8b30      	l32i.n	a11, a3, 0
  90a8d7:	232212        	l32i	a3, a2, 72
  90a8da:	0b3000        	callx8	a3
  90a8dd:	136a19        	l32r	a3, 8e5144 <vdesc_module_install+0x134>
	A_PRINTF("0x40040  %p ......\n", ioread32(0x40040));
  90a8e0:	1a6a23        	l32r	a10, 8e516c <vdesc_module_install+0x15c>
  90a8e3:	0c0200        	memw
  90a8e6:	8b30      	l32i.n	a11, a3, 0
  90a8e8:	232212        	l32i	a3, a2, 72
  90a8eb:	0b3000        	callx8	a3
  90a8ee:	1369fd        	l32r	a3, 8e50e4 <vdesc_module_install+0xd4>
	A_PRINTF(" before pwd PCIE PLL CFG:0x5601C: 0x%08x\n",
  90a8f1:	242212        	l32i	a4, a2, 72
  90a8f4:	0c0200        	memw
  90a8f7:	2b3200        	l32i	a11, a3, 0
  90a8fa:	1a6a24        	l32r	a10, 8e518c <vdesc_module_install+0x17c>
  90a8fd:	0b4000        	callx8	a4
	io32_set(0x5601C, BIT18);
  90a900:	1b69c1        	l32r	a11, 8e5004 <vbuf_module_install+0xa4>
  90a903:	2c0a00        	movi	a12, 0
  90a906:	033a02        	or	a10, a3, a3
  90a909:	5bff14        	call8	90a55c <io32_rmw>
  90a90c:	0c0200        	memw
  90a90f:	8b30      	l32i.n	a11, a3, 0
	A_PRINTF(" after pwd PCIE PLL CFG:0x5601C:  0x%08x\n",
  90a911:	1a6a25        	l32r	a10, 8e51a8 <vdesc_module_install+0x198>
  90a914:	232212        	l32i	a3, a2, 72
  90a917:	0b3000        	callx8	a3
	io32_set(0x50010, BIT13 | BIT12
  90a91a:	1468e2        	l32r	a4, 8e4ca4 <mUsbEPinHighBandSet+0x304>
  90a91d:	1b6a26        	l32r	a11, 8e51b8 <vdesc_module_install+0x1a8>
  90a920:	2c0a00        	movi	a12, 0
  90a923:	da40      	mov.n	a10, a4
  90a925:	5bff0d        	call8	90a55c <io32_rmw>
	*(volatile uint32_t *) addr = b;
  90a928:	156a27        	l32r	a5, 8e51c4 <vdesc_module_install+0x1b4>
  90a92b:	230a00        	movi	a3, 0
  90a92e:	0c0200        	memw
  90a931:	9350      	s32i.n	a3, a5, 0
	A_DELAY_USECS(10);
  90a933:	25223b        	l32i	a5, a2, 236
  90a936:	2a0a0a        	movi	a10, 10
  90a939:	0b5000        	callx8	a5
  90a93c:	1568f1        	l32r	a5, 8e4d00 <mUsbEPinHighBandSet+0x360>
	io32_set(0x50010, BIT4);
  90a93f:	dc30      	mov.n	a12, a3
  90a941:	c1b0      	movi.n	a11, 16
  90a943:	da40      	mov.n	a10, a4
  90a945:	0c0200        	memw
  90a948:	9350      	s32i.n	a3, a5, 0
  90a94a:	5bff04        	call8	90a55c <io32_rmw>
	A_DELAY_USECS(5);
  90a94d:	22223b        	l32i	a2, a2, 236
  90a950:	c0a5      	movi.n	a10, 5
  90a952:	0b2000        	callx8	a2
	io32_clr(0x50010, BIT4);
  90a955:	c1c0      	movi.n	a12, 16
  90a957:	033b02        	or	a11, a3, a3
  90a95a:	044a02        	or	a10, a4, a4
  90a95d:	5bfeff        	call8	90a55c <io32_rmw>
  90a960:	0c0200        	memw
  90a963:	9650      	s32i.n	a6, a5, 0
  90a965:	d10f      	retw.n
	...

0090a968 <_fw_usb_suspend_reboot>:
{
  90a968:	6c1004        	entry	a1, 32
	_fw_reset_dma_fifo();
  90a96b:	5bff21        	call8	90a5f0 <_fw_reset_dma_fifo>
	_fw_restore_dma_fifo();
  90a96e:	5bff06        	call8	90a588 <_fw_restore_dma_fifo>
  90a971:	1268e9        	l32r	a2, 8e4d18 <mUsbEPinHighBandSet+0x378>
  90a974:	c181      	movi.n	a8, 17
  90a976:	0c0200        	memw
  90a979:	282600        	s32i	a8, a2, 0
	A_DELAY_USECS(100); /* wait for stable */
  90a97c:	1268b5        	l32r	a2, 8e4c50 <mUsbEPinHighBandSet+0x2b0>
  90a97f:	2a0a64        	movi	a10, 100
  90a982:	28223b        	l32i	a8, a2, 236
  90a985:	0b8000        	callx8	a8
  90a988:	1968f2        	l32r	a9, 8e4d50 <mUsbEPinHighBandSet+0x3b0>
  90a98b:	1868ea        	l32r	a8, 8e4d34 <mUsbEPinHighBandSet+0x394>
	A_DELAY_USECS(100); /* wait for stable */
  90a98e:	2a0a64        	movi	a10, 100
  90a991:	0c0200        	memw
  90a994:	9980      	s32i.n	a9, a8, 0
  90a996:	28223b        	l32i	a8, a2, 236
  90a999:	0b8000        	callx8	a8
	A_UART_HWINIT((40*1000*1000), 19200);
  90a99c:	28221a        	l32i	a8, a2, 104
  90a99f:	1b6972        	l32r	a11, 8e4f68 <vbuf_module_install+0x8>
  90a9a2:	1a68b4        	l32r	a10, 8e4c74 <mUsbEPinHighBandSet+0x2d4>
  90a9a5:	0b8000        	callx8	a8
	A_CLOCK_INIT(40);
  90a9a8:	282238        	l32i	a8, a2, 224
  90a9ab:	c2a8      	movi.n	a10, 40
  90a9ad:	0b8000        	callx8	a8
	if (!bEepromExist) { /* jump to flash boot (eeprom data in flash) */
  90a9b0:	1868b7        	l32r	a8, 8e4c8c <mUsbEPinHighBandSet+0x2ec>
  90a9b3:	298100        	l16ui	a9, a8, 0
  90a9b6:	282212        	l32i	a8, a2, 72
  90a9b9:	cc9f      	bnez.n	a9, 90a9cc <_fw_usb_suspend_reboot+0x64>
		bJumptoFlash = TRUE;
  90a9bb:	1268b6        	l32r	a2, 8e4c94 <mUsbEPinHighBandSet+0x2f4>
  90a9be:	c091      	movi.n	a9, 1
		A_PRINTF("Jump to Flash BOOT\n");
  90a9c0:	1a6a28        	l32r	a10, 8e5260 <vdesc_module_install+0x250>
		bJumptoFlash = TRUE;
  90a9c3:	292500        	s16i	a9, a2, 0
		A_PRINTF("Jump to Flash BOOT\n");
  90a9c6:	0b8000        	callx8	a8
		app_start();
  90a9c9:	5bed8d        	call8	906000 <app_start>
		A_PRINTF("receive the suspend command...\n");
  90a9cc:	1a6a29        	l32r	a10, 8e5270 <vdesc_module_install+0x260>
  90a9cf:	0b8000        	callx8	a8
		A_USB_JUMP_BOOT();
  90a9d2:	22222c        	l32i	a2, a2, 176
  90a9d5:	0b2000        	callx8	a2
  90a9d8:	d10f      	retw.n
	...

0090a9dc <zfTurnOffPower_patch>:
{
  90a9dc:	6c1004        	entry	a1, 32
	A_PRINTF("+++ goto suspend ......\n");
  90a9df:	1268b5        	l32r	a2, 8e4cb4 <mUsbEPinHighBandSet+0x314>
  90a9e2:	1a6a2a        	l32r	a10, 8e528c <vdesc_module_install+0x27c>
  90a9e5:	232212        	l32i	a3, a2, 72
  90a9e8:	c151      	movi.n	a5, 17
  90a9ea:	0b3000        	callx8	a3
	io32_set(0x10000, BIT3);
  90a9ed:	1368f2        	l32r	a3, 8e4db8 <mUsbEPinHighBandSet+0x418>
  90a9f0:	c0c0      	movi.n	a12, 0
  90a9f2:	c0b8      	movi.n	a11, 8
  90a9f4:	da30      	mov.n	a10, a3
  90a9f6:	5bfed9        	call8	90a55c <io32_rmw>
	A_DELAY_USECS(100);
  90a9f9:	24223b        	l32i	a4, a2, 236
  90a9fc:	2a0a64        	movi	a10, 100
  90a9ff:	0b4000        	callx8	a4
  90aa02:	1468e9        	l32r	a4, 8e4da8 <mUsbEPinHighBandSet+0x408>
	A_DELAY_USECS(100); // wait for stable
  90aa05:	2a0a64        	movi	a10, 100
  90aa08:	0c0200        	memw
  90aa0b:	254600        	s32i	a5, a4, 0
  90aa0e:	24223b        	l32i	a4, a2, 236
  90aa11:	0b4000        	callx8	a4
  90aa14:	1468ea        	l32r	a4, 8e4dbc <mUsbEPinHighBandSet+0x41c>
	A_DELAY_USECS(100); // wait for stable
  90aa17:	2a0a64        	movi	a10, 100
  90aa1a:	0c0200        	memw
  90aa1d:	9340      	s32i.n	a3, a4, 0
  90aa1f:	24223b        	l32i	a4, a2, 236
  90aa22:	0b4000        	callx8	a4
	A_UART_HWINIT((40*1000*1000), 19200);
  90aa25:	1b6972        	l32r	a11, 8e4ff0 <vbuf_module_install+0x90>
  90aa28:	24221a        	l32i	a4, a2, 104
  90aa2b:	1a68b4        	l32r	a10, 8e4cfc <mUsbEPinHighBandSet+0x35c>
  90aa2e:	0b4000        	callx8	a4
	A_CLOCK_INIT(40);
  90aa31:	242238        	l32i	a4, a2, 224
  90aa34:	c2a8      	movi.n	a10, 40
  90aa36:	0b4000        	callx8	a4
	io32_set(MAGPIE_REG_ETH_PLL_ADDR, BIT16);
  90aa39:	176a2b        	l32r	a7, 8e52e8 <vdesc_module_install+0x2d8>
  90aa3c:	db30      	mov.n	a11, a3
  90aa3e:	da70      	mov.n	a10, a7
  90aa40:	c0c0      	movi.n	a12, 0
  90aa42:	5bfec6        	call8	90a55c <io32_rmw>
	io32_set(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
  90aa45:	166a2c        	l32r	a6, 8e52f8 <vdesc_module_install+0x2e8>
  90aa48:	db50      	mov.n	a11, a5
  90aa4a:	da60      	mov.n	a10, a6
  90aa4c:	c0c0      	movi.n	a12, 0
  90aa4e:	5bfec3        	call8	90a55c <io32_rmw>
	io32_set(MAGPIE_REG_SUSPEND_ENABLE_ADDR, 0x10 << 8);
  90aa51:	146a2e        	l32r	a4, 8e530c <vdesc_module_install+0x2fc>
  90aa54:	1b6a2d        	l32r	a11, 8e5308 <vdesc_module_install+0x2f8>
  90aa57:	2c0a00        	movi	a12, 0
  90aa5a:	044a02        	or	a10, a4, a4
  90aa5d:	5bfebf        	call8	90a55c <io32_rmw>
	A_DELAY_USECS(100);
  90aa60:	22223b        	l32i	a2, a2, 236
  90aa63:	2a0a64        	movi	a10, 100
  90aa66:	0b2000        	callx8	a2
  90aa69:	186a30        	l32r	a8, 8e532c <vdesc_module_install+0x31c>
  90aa6c:	126a2f        	l32r	a2, 8e5328 <vdesc_module_install+0x318>
	io32_set(MAGPIE_REG_SUSPEND_ENABLE_ADDR, BIT0);
  90aa6f:	da40      	mov.n	a10, a4
  90aa71:	0c0200        	memw
  90aa74:	9820      	s32i.n	a8, a2, 0
  90aa76:	186a32        	l32r	a8, 8e5340 <vdesc_module_install+0x330>
  90aa79:	126a31        	l32r	a2, 8e5340 <vdesc_module_install+0x330>
  90aa7c:	c0c0      	movi.n	a12, 0
  90aa7e:	0c0200        	memw
  90aa81:	9820      	s32i.n	a8, a2, 0
  90aa83:	c0b1      	movi.n	a11, 1
  90aa85:	5bfeb5        	call8	90a55c <io32_rmw>
	io32_clr(MAGPIE_REG_ETH_PLL_ADDR, BIT16);
  90aa88:	dc30      	mov.n	a12, a3
  90aa8a:	da70      	mov.n	a10, a7
  90aa8c:	c0b0      	movi.n	a11, 0
  90aa8e:	5bfeb3        	call8	90a55c <io32_rmw>
	io32_clr(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
  90aa91:	055c02        	or	a12, a5, a5
  90aa94:	066a02        	or	a10, a6, a6
  90aa97:	2b0a00        	movi	a11, 0
  90aa9a:	5bfeb0        	call8	90a55c <io32_rmw>
	_fw_restore_dma_fifo();
  90aa9d:	5bfeba        	call8	90a588 <_fw_restore_dma_fifo>
	io32_clr(MAGPIE_REG_SUSPEND_ENABLE_ADDR, BIT0);
  90aaa0:	da40      	mov.n	a10, a4
  90aaa2:	c0c1      	movi.n	a12, 1
  90aaa4:	c0b0      	movi.n	a11, 0
  90aaa6:	5bfead        	call8	90a55c <io32_rmw>
	io32_clr(0x52028, BIT8 | BIT12 | BIT16);
  90aaa9:	1c6a33        	l32r	a12, 8e5378 <vdesc_module_install+0x368>
  90aaac:	1a6a34        	l32r	a10, 8e537c <vdesc_module_install+0x36c>
  90aaaf:	c0b0      	movi.n	a11, 0
  90aab1:	5bfeaa        	call8	90a55c <io32_rmw>
  90aab4:	d10f      	retw.n
	...

0090aab8 <zfResetUSBFIFO_patch>:
{
  90aab8:	6c1004        	entry	a1, 32
	return *(const volatile uint32_t *) addr;
  90aabb:	126a35        	l32r	a2, 8e5390 <vdesc_module_install+0x380>
	A_PRINTF("0x9808  0x%x ......\n", ioread32(0x10ff9808));
  90aabe:	1a6a36        	l32r	a10, 8e5398 <vdesc_module_install+0x388>
  90aac1:	0c0200        	memw
  90aac4:	2b2200        	l32i	a11, a2, 0
  90aac7:	1268b5        	l32r	a2, 8e4d9c <mUsbEPinHighBandSet+0x3fc>
  90aaca:	232212        	l32i	a3, a2, 72
  90aacd:	0b3000        	callx8	a3
  90aad0:	14699a        	l32r	a4, 8e5138 <vdesc_module_install+0x128>
	A_PRINTF("0x7890  0x%x ......\n", ioread32(0x10ff7890));
  90aad3:	136a37        	l32r	a3, 8e53b0 <vdesc_module_install+0x3a0>
  90aad6:	282212        	l32i	a8, a2, 72
  90aad9:	0c0200        	memw
  90aadc:	2b4200        	l32i	a11, a4, 0
  90aadf:	da30      	mov.n	a10, a3
  90aae1:	0b8000        	callx8	a8
  90aae4:	0c0200        	memw
  90aae7:	8b40      	l32i.n	a11, a4, 0
	A_PRINTF("0x7890  0x%x ......\n", ioread32(0x10ff7890));
  90aae9:	242212        	l32i	a4, a2, 72
  90aaec:	da30      	mov.n	a10, a3
  90aaee:	0b4000        	callx8	a4
  90aaf1:	136a05        	l32r	a3, 8e5308 <vdesc_module_install+0x2f8>
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90aaf4:	222212        	l32i	a2, a2, 72
  90aaf7:	0c0200        	memw
  90aafa:	8b30      	l32i.n	a11, a3, 0
  90aafc:	1a6a0a        	l32r	a10, 8e5324 <vdesc_module_install+0x314>
  90aaff:	0b2000        	callx8	a2
	_fw_reset_dma_fifo();
  90ab02:	5bfebb        	call8	90a5f0 <_fw_reset_dma_fifo>
  90ab05:	d10f      	retw.n
	...

0090ab08 <cmnos_clock_init_patch>:
extern a_uint32_t cticks;

// clock change
//
void cmnos_clock_init_patch(a_uint32_t refclk)
{
  90ab08:	6c1004        	entry	a1, 32
    ref_clk = refclk;
  90ab0b:	186a38        	l32r	a8, 8e53ec <vdesc_module_install+0x3dc>
  90ab0e:	9280      	s32i.n	a2, a8, 0
  90ab10:	d10f      	retw.n
	...

0090ab14 <cmnos_refclk_speed_get_patch>:
}

// retrieve current clock setting
a_uint32_t cmnos_refclk_speed_get_patch(void)
{
  90ab14:	6c1004        	entry	a1, 32
    return ref_clk;
}
  90ab17:	186a38        	l32r	a8, 8e53f8 <vdesc_module_install+0x3e8>
  90ab1a:	8280      	l32i.n	a2, a8, 0
  90ab1c:	d10f      	retw.n
	...

0090ab20 <cmnos_delay_us_patch>:


// software emulate delay function
void cmnos_delay_us_patch(int us)
{
  90ab20:	6c1004        	entry	a1, 32
    a_uint32_t start_time = NOW();
  90ab23:	5b6f8d        	call8	8e6958 <xthal_get_ccount>
    unsigned int num_ticks = us*ref_clk; // system_freq == number of ticks per 1us
  90ab26:	186a38        	l32r	a8, 8e5408 <vdesc_module_install+0x3f8>
    a_uint32_t start_time = NOW();
  90ab29:	d3a0      	mov.n	a3, a10
    unsigned int num_ticks = us*ref_clk; // system_freq == number of ticks per 1us
  90ab2b:	288200        	l32i	a8, a8, 0
  90ab2e:	082228        	mull	a2, a2, a8

    while ( (NOW() - start_time) < num_ticks) {
  90ab31:	5b6f89        	call8	8e6958 <xthal_get_ccount>
  90ab34:	03aa0c        	sub	a10, a10, a3
  90ab37:	72a3f6        	bltu	a10, a2, 90ab31 <cmnos_delay_us_patch+0x11>
        /* busy spin */
        ;
    }
}
  90ab3a:	d10f      	retw.n

0090ab3c <cmnos_tick_patch>:


// software emulate microsecond ticks
void cmnos_tick_patch(void)
{
  90ab3c:	6c1004        	entry	a1, 32
    static a_uint32_t last_tick = 0;
    a_uint32_t current_tick = NOW();
  90ab3f:	5b6f86        	call8	8e6958 <xthal_get_ccount>
    a_uint32_t delta_tick;

    delta_tick = (A_UINT32 ) (current_tick - last_tick)/(ref_clk<<10);
  90ab42:	186a38        	l32r	a8, 8e5424 <vdesc_module_install+0x414>
  90ab45:	126a39        	l32r	a2, 8e542c <vdesc_module_install+0x41c>
    a_uint32_t current_tick = NOW();
  90ab48:	d3a0      	mov.n	a3, a10
    delta_tick = (A_UINT32 ) (current_tick - last_tick)/(ref_clk<<10);
  90ab4a:	8b80      	l32i.n	a11, a8, 0
  90ab4c:	2a2200        	l32i	a10, a2, 0
  90ab4f:	06bb11        	slli	a11, a11, 10
  90ab52:	0a3a0c        	sub	a10, a3, a10
  90ab55:	5b6fbd        	call8	8e6a4c <__udivsi3>

    if( delta_tick > 0 )
  90ab58:	c8a0      	beqz.n	a10, 90ab5c <cmnos_tick_patch+0x20>
        last_tick = current_tick;
  90ab5a:	9320      	s32i.n	a3, a2, 0

    cticks += delta_tick;
  90ab5c:	196a3a        	l32r	a9, 8e5444 <vdesc_module_install+0x434>
  90ab5f:	8890      	l32i.n	a8, a9, 0
  90ab61:	aa8a      	add.n	a10, a8, a10
  90ab63:	9a90      	s32i.n	a10, a9, 0
  90ab65:	d10f      	retw.n
	...

0090ab68 <cmnos_milliseconds_patch>:
}

// get current sysmem up time in milliseconds based
a_uint32_t cmnos_milliseconds_patch(void)
{
  90ab68:	6c1004        	entry	a1, 32
    cmnos_tick_patch();
  90ab6b:	5bfff4        	call8	90ab3c <cmnos_tick_patch>

    return (cticks);
}
  90ab6e:	186a3a        	l32r	a8, 8e5458 <vdesc_module_install+0x448>
  90ab71:	8280      	l32i.n	a2, a8, 0
  90ab73:	d10f      	retw.n
  90ab75:	000000        	ill

0090ab78 <_HIFusb_get_max_msg_len_patch>:

/*
 * -- support more than 64 bytes command on ep4 --
 */
int _HIFusb_get_max_msg_len_patch(hif_handle_t handle, int pipe)
{
  90ab78:	6c1004        	entry	a1, 32
    switch(pipe) {
  90ab7b:	233cfd        	addi	a3, a3, -3
        case HIF_USB_PIPE_INTERRUPT:
        case HIF_USB_PIPE_COMMAND:
            return 512;

        default:
            return 1600;
  90ab7e:	226a40        	movi	a2, 0x640
    switch(pipe) {
  90ab81:	6f3202        	bgeui	a3, 2, 90ab87 <_HIFusb_get_max_msg_len_patch+0xf>
            return 512;
  90ab84:	222a00        	movi	a2, 0x200
    }
}
  90ab87:	d10f      	retw.n
  90ab89:	000000        	ill

0090ab8c <_HIFusb_isr_handler_patch>:

/*
 * -- move the usb_task to here --
 */
void _HIFusb_isr_handler_patch(hif_handle_t h)
{
  90ab8c:	6c1004        	entry	a1, 32
    A_USB_FW_TASK();
  90ab8f:	1868b5        	l32r	a8, 8e4e64 <mUsbEPinHighBandSet+0x4c4>
  90ab92:	28821e        	l32i	a8, a8, 120
  90ab95:	0b8000        	callx8	a8

    _HIFusb_isr_handler(h);
  90ab98:	da20      	mov.n	a10, a2
  90ab9a:	5b62d2        	call8	8e36e4 <_HIFusb_isr_handler>
  90ab9d:	d10f      	retw.n
	...

0090aba0 <_HIFusb_start_patch>:
 * - update DMA_START bit4 to 1
 * - update DESC_START_ADDR
 * - update DMA_START bit 0
 */
void _HIFusb_start_patch(hif_handle_t handle)
{
  90aba0:	6c1004        	entry	a1, 32
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
  90aba3:	1c6a3b        	l32r	a12, 8e5490 <vdesc_module_install+0x480>
  90aba6:	c0d0      	movi.n	a13, 0
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
  90aba8:	1b6a3c        	l32r	a11, 8e5498 <vdesc_module_install+0x488>
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
  90abab:	0c0200        	memw
  90abae:	9dc0      	s32i.n	a13, a12, 0
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
  90abb0:	196a3d        	l32r	a9, 8e54a4 <vdesc_module_install+0x494>
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
  90abb3:	0c0200        	memw
  90abb6:	9db0      	s32i.n	a13, a11, 0
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
  90abb8:	186a3e        	l32r	a8, 8e54b0 <vdesc_module_install+0x4a0>
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
  90abbb:	0c0200        	memw
  90abbe:	9d90      	s32i.n	a13, a9, 0
{
  90abc0:	da20      	mov.n	a10, a2
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
  90abc2:	0c0200        	memw
  90abc5:	2d8600        	s32i	a13, a8, 0

    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
  90abc8:	0c0200        	memw
  90abcb:	8dc0      	l32i.n	a13, a12, 0
  90abcd:	65dff7        	bnez	a13, 90abc8 <_HIFusb_start_patch+0x28>
	   !MAGPIE_REG_USB_RX0_DMA_START &&
  90abd0:	0c0200        	memw
  90abd3:	8db0      	l32i.n	a13, a11, 0
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
  90abd5:	65dfef        	bnez	a13, 90abc8 <_HIFusb_start_patch+0x28>
	   !MAGPIE_REG_USB_RX1_DMA_START &&
  90abd8:	0c0200        	memw
  90abdb:	8d90      	l32i.n	a13, a9, 0
	   !MAGPIE_REG_USB_RX0_DMA_START &&
  90abdd:	65dfe7        	bnez	a13, 90abc8 <_HIFusb_start_patch+0x28>
	   !MAGPIE_REG_USB_RX2_DMA_START )
  90abe0:	0c0200        	memw
  90abe3:	8d80      	l32i.n	a13, a8, 0
	   !MAGPIE_REG_USB_RX1_DMA_START &&
  90abe5:	65dfdf        	bnez	a13, 90abc8 <_HIFusb_start_patch+0x28>
        {
            MAGPIE_REG_USB_TX0_DMA_START = MAGPIE_REG_USB_TX0_DMA_START|BIT4;
  90abe8:	0c0200        	memw
  90abeb:	8ec0      	l32i.n	a14, a12, 0
  90abed:	c1d0      	movi.n	a13, 16
  90abef:	0dee02        	or	a14, a14, a13
  90abf2:	0c0200        	memw
  90abf5:	9ec0      	s32i.n	a14, a12, 0
            MAGPIE_REG_USB_RX0_DMA_START = MAGPIE_REG_USB_RX0_DMA_START|BIT4;
  90abf7:	0c0200        	memw
  90abfa:	8cb0      	l32i.n	a12, a11, 0
  90abfc:	0dcc02        	or	a12, a12, a13
  90abff:	0c0200        	memw
  90ac02:	9cb0      	s32i.n	a12, a11, 0
            MAGPIE_REG_USB_RX1_DMA_START = MAGPIE_REG_USB_RX1_DMA_START|BIT4;
  90ac04:	0c0200        	memw
  90ac07:	8b90      	l32i.n	a11, a9, 0
  90ac09:	0dbb02        	or	a11, a11, a13
  90ac0c:	0c0200        	memw
  90ac0f:	9b90      	s32i.n	a11, a9, 0
            MAGPIE_REG_USB_RX2_DMA_START = MAGPIE_REG_USB_RX2_DMA_START|BIT4;
  90ac11:	0c0200        	memw
  90ac14:	8980      	l32i.n	a9, a8, 0
  90ac16:	0d9d02        	or	a13, a9, a13
  90ac19:	0c0200        	memw
  90ac1c:	9d80      	s32i.n	a13, a8, 0
            break;
        }
    }
    _HIFusb_start(handle);
  90ac1e:	5b6220        	call8	8e34a0 <_HIFusb_start>
  90ac21:	d10f      	retw.n
	...

0090ac24 <__adf_os_dmamem_alloc>:
 * @return void* (Virtual address)
 */
inline void*
__adf_os_dmamem_alloc(__adf_os_device_t osdev, adf_os_size_t size,
                      a_bool_t coherent, __adf_os_dma_map_t *dmap)
{
  90ac24:	6c1004        	entry	a1, 32
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
  90ac27:	1668b5        	l32r	a6, 8e4efc <mUsbEPinHighBandSet+0x55c>
  90ac2a:	c0bc      	movi.n	a11, 12
  90ac2c:	226252        	l32i	a2, a6, 0x148
  90ac2f:	c0a0      	movi.n	a10, 0
  90ac31:	0b2000        	callx8	a2
  90ac34:	9a50      	s32i.n	a10, a5, 0
  90ac36:	d4a0      	mov.n	a4, a10
    (*dmap)->ds_len = size;

    return (*dmap)->ds_addr;

fail_malloc:
    return NULL;
  90ac38:	d2a0      	mov.n	a2, a10
	if((*dmap) == NULL){
  90ac3a:	c9a2      	beqz.n	a10, 90ac50 <__adf_os_dmamem_alloc+0x2c>
    (*dmap)->ds_addr = A_ALLOCRAM(size);
  90ac3c:	226252        	l32i	a2, a6, 0x148
  90ac3f:	db30      	mov.n	a11, a3
  90ac41:	c0a0      	movi.n	a10, 0
  90ac43:	0b2000        	callx8	a2
    (*dmap)->ds_len = size;
  90ac46:	8250      	l32i.n	a2, a5, 0
    (*dmap)->ds_addr = A_ALLOCRAM(size);
  90ac48:	9a41      	s32i.n	a10, a4, 4
    (*dmap)->ds_len = size;
  90ac4a:	232504        	s16i	a3, a2, 8
    return (*dmap)->ds_addr;
  90ac4d:	222201        	l32i	a2, a2, 4
}
  90ac50:	d10f      	retw.n
	...

0090ac54 <__adf_os_setup_intr>:
 * @return int
 */

int
__adf_os_setup_intr(__adf_os_device_t  osdev, adf_os_drv_intr fn)
{
  90ac54:	6c1004        	entry	a1, 32
    g_wlan_intr = fn;
  90ac57:	1869e2        	l32r	a8, 8e53e0 <vdesc_module_install+0x3d0>

    return 0;
}
  90ac5a:	c020      	movi.n	a2, 0
    g_wlan_intr = fn;
  90ac5c:	9380      	s32i.n	a3, a8, 0
}
  90ac5e:	d10f      	retw.n

0090ac60 <__adf_os_free_intr>:
 * @param[in] dev
 * @param[in] sc
 */
void
__adf_os_free_intr(__adf_os_device_t osdev)
{
  90ac60:	6c1004        	entry	a1, 32
    g_wlan_intr = NULL;
  90ac63:	1869e2        	l32r	a8, 8e53ec <vdesc_module_install+0x3dc>
  90ac66:	c090      	movi.n	a9, 0
  90ac68:	9980      	s32i.n	a9, a8, 0
  90ac6a:	d10f      	retw.n

0090ac6c <ath_hal_attach_tgt>:

struct ath_hal*
ath_hal_attach_tgt(a_uint32_t devid,HAL_SOFTC sc,
		   adf_os_device_t dev,
		   a_uint32_t flags, HAL_STATUS *error)
{
  90ac6c:	6c1004        	entry	a1, 32
	struct ath_hal *ah = AH_NULL;

	ah = ar5416Attach(sc, dev, error);
  90ac6f:	dc60      	mov.n	a12, a6
  90ac71:	db40      	mov.n	a11, a4
  90ac73:	da30      	mov.n	a10, a3
  90ac75:	5804da        	call8	90bfe0 <ar5416Attach>

	return ah;
}
  90ac78:	d2a0      	mov.n	a2, a10
  90ac7a:	d10f      	retw.n

0090ac7c <ath_hal_getcapability>:

HAL_STATUS
ath_hal_getcapability(struct ath_hal *ah, HAL_CAPABILITY_TYPE type)
{
  90ac7c:	6c1004        	entry	a1, 32
	const HAL_CAPABILITIES *pCap = &AH_PRIVATE(ah)->ah_caps;
	switch (type) {
  90ac7f:	683111        	beqi	a3, 1, 90ac94 <ath_hal_getcapability+0x18>
  90ac82:	c93e      	beqz.n	a3, 90aca4 <ath_hal_getcapability+0x28>
	case HAL_CAP_BSSIDMASK:
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
	case HAL_CAP_VEOL:
		return pCap->halVEOLSupport ? HAL_OK : HAL_ENOTSUPP;
	default:
		return HAL_EINVAL;
  90ac84:	223cfe        	addi	a2, a3, -2
  90ac87:	c081      	movi.n	a8, 1
  90ac89:	c030      	movi.n	a3, 0
  90ac8b:	028338        	moveqz	a3, a8, a2
  90ac8e:	bc32      	addi.n	a2, a3, 12
  90ac90:	d10f      	retw.n
  90ac92:	000013        	srai	a0, a0, 16
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
  90ac95:	69d022        	bnei	a13, -1, 90acbb <ath_hal_computetxtime+0x7>
  90ac98:	222b03        	l32ai	a2, a2, 12
  90ac9b:	2201c0        	l16ui	a2, a0, 0x180
  90ac9e:	306000        	excw
  90aca1:	070000        	callx4	a0
		return pCap->halVEOLSupport ? HAL_OK : HAL_ENOTSUPP;
  90aca4:	22222b        	l32i	a2, a2, 172
  90aca7:	02f240        	extui	a2, a2, 15, 1
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
  90acaa:	c08d      	movi.n	a8, 13
  90acac:	028338        	moveqz	a3, a8, a2
  90acaf:	d230      	mov.n	a2, a3
	}
}
  90acb1:	d10f      	retw.n
	...

0090acb4 <ath_hal_computetxtime>:

a_uint16_t
ath_hal_computetxtime(struct ath_hal *ah,
		      const HAL_RATE_TABLE *rates, a_uint32_t frameLen, a_uint16_t rateix,
		      HAL_BOOL shortPreamble)
{
  90acb4:	6c1004        	entry	a1, 32
  90acb7:	05024f        	extui	a2, a5, 0, 16
	a_uint32_t bitsPerSymbol, numBits, numSymbols, phyTime, txTime;
	a_uint32_t kbps;

	kbps = rates->info[rateix].rateKbps;
  90acba:	0e2511        	slli	a5, a2, 2
  90acbd:	a255      	add.n	a5, a5, a2
  90acbf:	0e5511        	slli	a5, a5, 2
  90acc2:	a533      	add.n	a3, a3, a5
  90acc4:	8b3c      	l32i.n	a11, a3, 48

	/*
	 * index can be invalid duting dynamic Turbo transitions.
	 */
	if(kbps == 0) return 0;
  90acc6:	c020      	movi.n	a2, 0
  90acc8:	72b159        	beq	a11, a2, 90ad25 <ath_hal_computetxtime+0x71>
	switch (rates->info[rateix].phy) {
  90accb:	253029        	l8ui	a5, a3, 41
  90acce:	725106        	beq	a5, a2, 90acd8 <ath_hal_computetxtime+0x24>
  90acd1:	68522c        	beqi	a5, 2, 90ad01 <ath_hal_computetxtime+0x4d>
  90acd4:	60004a        	j	90ad22 <ath_hal_computetxtime+0x6e>
  90acd7:	00250a        	addx4	a5, a2, a0

	case IEEE80211_T_CCK:
		phyTime = CCK_PREAMBLE_BITS + CCK_PLCP_BITS;
  90acda:	c0c8      	movi.n	a12, 8
		if (shortPreamble && rates->info[rateix].shortPreamble)
  90acdc:	672330        	bgez	a2, 90b010 <ar5416ProcRxDescFast_20+0xf4>
  90acdf:	35220a        	excw
			phyTime >>= 1;
  90ace2:	600325        	j	90b00b <ar5416ProcRxDescFast_20+0xef>
  90ace5:	390d42        	excw
		numBits = frameLen << 3;
  90ace8:	11084a        	l32r	a1, 8cce10 <_bss_end+0x3b9f00>
		txTime = phyTime + ((numBits * 1000)/kbps);
  90aceb:	1102aa        	l32r	a1, 8cb794 <_bss_end+0x3b8884>
  90acee:	0c0eaa        	excw
  90acf1:	11a2aa        	l32r	a1, 8f379c <memset+0xc954>
  90acf4:	0daa11        	slli	a10, a10, 3
  90acf7:	5b6f55        	call8	8e6a4c <__udivsi3>
		/* TODO: make sure the same value of txTime can use in all device */
		if (ath_hal_getcapability(ah, HAL_CAP_HT) != HAL_OK)
			txTime = txTime + CCK_SIFS_TIME;
  90acfa:	baa2      	addi.n	a2, a10, 10
  90acfc:	a522      	add.n	a2, a2, a5
  90acfe:	600020        	j	90ad22 <ath_hal_computetxtime+0x6e>
		break;
	case IEEE80211_T_OFDM:
		/* full rate channel */
		bitsPerSymbol   = (kbps * OFDM_SYMBOL_TIME) / 1000;
  90ad01:	0eb211        	slli	a2, a11, 2
  90ad04:	1b6a3f        	l32r	a11, 8e5600 <vdesc_module_install+0x5f0>
		HALASSERT(bitsPerSymbol != 0);

		numBits = OFDM_PLCP_BITS + (frameLen << 3);
  90ad07:	0d4411        	slli	a4, a4, 3
		bitsPerSymbol   = (kbps * OFDM_SYMBOL_TIME) / 1000;
  90ad0a:	0b222a        	muluh	a2, a2, a11
		numSymbols = asf_howmany(numBits, bitsPerSymbol);
  90ad0d:	2a4c15        	addi	a10, a4, 21
		bitsPerSymbol   = (kbps * OFDM_SYMBOL_TIME) / 1000;
  90ad10:	026214        	srli	a2, a2, 6
		numSymbols = asf_howmany(numBits, bitsPerSymbol);
  90ad13:	022b02        	or	a11, a2, a2
  90ad16:	02aa08        	add	a10, a10, a2
  90ad19:	5b6f4c        	call8	8e6a4c <__udivsi3>
		txTime = OFDM_PREAMBLE_TIME + (numSymbols * OFDM_SYMBOL_TIME);
  90ad1c:	0ea211        	slli	a2, a10, 2
		/* TODO: make sure the same value of txTime can use in all device */
		if (ath_hal_getcapability(ah, HAL_CAP_HT) != HAL_OK)
			txTime = txTime + OFDM_SIFS_TIME;
  90ad1f:	222c24        	addi	a2, a2, 36
		break;
	default:
		txTime = 0;
		break;
	}
	return txTime;
  90ad22:	02024f        	extui	a2, a2, 0, 16
}
  90ad25:	d10f      	retw.n
	...

0090ad28 <ath_hal_get_curmode>:
#undef OFDM_SYMBOL_TIME

#ifdef MAGPIE_MERLIN
a_uint32_t
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
  90ad28:	6c1004        	entry	a1, 32

	if (IS_CHAN_B(chan))
		return HAL_MODE_11B;

	HALASSERT(0);
	return HAL_MODE_11NG;
  90ad2b:	1269d0        	l32r	a2, 8e546c <vdesc_module_install+0x45c>
	if (!chan)
  90ad2e:	643043        	beqz	a3, 90ad75 <ath_hal_get_curmode+0x4d>
	if (IS_CHAN_NA(chan))
  90ad31:	8831      	l32i.n	a8, a3, 4
  90ad33:	1968db        	l32r	a9, 8e50a0 <vdesc_module_install+0x90>
		return HAL_MODE_11NA;
  90ad36:	1269cf        	l32r	a2, 8e5474 <vdesc_module_install+0x464>
	if (IS_CHAN_NA(chan))
  90ad39:	098301        	and	a3, a8, a9
  90ad3c:	793135        	beq	a3, a9, 90ad75 <ath_hal_get_curmode+0x4d>
	if (IS_CHAN_A(chan))
  90ad3f:	291a40        	movi	a9, 0x140
  90ad42:	098301        	and	a3, a8, a9
		return HAL_MODE_11A;
  90ad45:	c021      	movi.n	a2, 1
	if (IS_CHAN_A(chan))
  90ad47:	79312a        	beq	a3, a9, 90ad75 <ath_hal_get_curmode+0x4d>
	if (IS_CHAN_NG(chan))
  90ad4a:	196a40        	l32r	a9, 8e564c <vdesc_module_install+0x63c>
	return HAL_MODE_11NG;
  90ad4d:	1269d0        	l32r	a2, 8e5490 <vdesc_module_install+0x480>
	if (IS_CHAN_NG(chan))
  90ad50:	098301        	and	a3, a8, a9
  90ad53:	79311e        	beq	a3, a9, 90ad75 <ath_hal_get_curmode+0x4d>
	if (IS_CHAN_G(chan))
  90ad56:	290ad0        	movi	a9, 208
  90ad59:	098901        	and	a9, a8, a9
  90ad5c:	230ac0        	movi	a3, 192
		return HAL_MODE_11G;
  90ad5f:	c028      	movi.n	a2, 8
	if (IS_CHAN_G(chan))
  90ad61:	739110        	beq	a9, a3, 90ad75 <ath_hal_get_curmode+0x4d>
	if (IS_CHAN_B(chan))
  90ad64:	220aa0        	movi	a2, 160
  90ad67:	028801        	and	a8, a8, a2
		return HAL_MODE_11B;
  90ad6a:	1369d0        	l32r	a3, 8e54ac <vdesc_module_install+0x49c>
  90ad6d:	02880c        	sub	a8, a8, a2
  90ad70:	c024      	movi.n	a2, 4
  90ad72:	083239        	movnez	a2, a3, a8
}
  90ad75:	d10f      	retw.n
	...

0090ad78 <ath_hal_wait>:

#endif

HAL_BOOL
ath_hal_wait(struct ath_hal *ah, a_uint32_t reg, a_uint32_t mask, a_uint32_t val)
{
  90ad78:	6c1004        	entry	a1, 32
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
			if ((ioread32_mac(reg) & mask) == val)
  90ad7b:	1869a1        	l32r	a8, 8e5400 <vdesc_module_install+0x3f0>
{
  90ad7e:	223ae8        	movi	a2, 0x3e8
			if ((ioread32_mac(reg) & mask) == val)
  90ad81:	083308        	add	a3, a3, a8
  90ad84:	0c0200        	memw
  90ad87:	8830      	l32i.n	a8, a3, 0
  90ad89:	084801        	and	a8, a4, a8
  90ad8c:	78510d        	beq	a5, a8, 90ad9d <ath_hal_wait+0x25>
				return AH_TRUE;
			OS_DELAY(10);
  90ad8f:	2a0a0a        	movi	a10, 10
  90ad92:	222cff        	addi	a2, a2, -1
  90ad95:	5bf33e        	call8	907a90 <ath_hal_delay>
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
  90ad98:	652fe8        	bnez	a2, 90ad84 <ath_hal_wait+0xc>
  90ad9b:	d10f      	retw.n
				return AH_TRUE;
  90ad9d:	c021      	movi.n	a2, 1
	}
	return AH_FALSE;

#undef AH_TIMEOUT_11N
#undef AH_TIMEOUT_11G
}
  90ad9f:	d10f      	retw.n
  90ada1:	000000        	ill

0090ada4 <ar5416IsInterruptPending>:
/**********************/
/* Interrupt Handling */
/**********************/

HAL_BOOL ar5416IsInterruptPending(struct ath_hal *ah)
{
  90ada4:	6c1004        	entry	a1, 32
  90ada7:	126a41        	l32r	a2, 8e56ac <vdesc_module_install+0x69c>
  90adaa:	0c0200        	memw
  90adad:	8820      	l32i.n	a8, a2, 0
		ioread32_mac(AR_INTR_ASYNC_CAUSE);
	/*
	 * Some platforms trigger our ISR before applying power to
	 * the card, so make sure.
	 */
	return ((host_isr != AR_INTR_SPURIOUS) && (host_isr & AR_INTR_MAC_IRQ));
  90adaf:	c020      	movi.n	a2, 0
  90adb1:	081940        	extui	a9, a8, 1, 1
  90adb4:	b188      	addi.n	a8, a8, 1
  90adb6:	089239        	movnez	a2, a9, a8
}
  90adb9:	d10f      	retw.n
	...

0090adbc <ar5416SetInterrupts>:
	return AH_TRUE;
}

HAL_INT
ar5416SetInterrupts(struct ath_hal *ah, HAL_INT ints)
{
  90adbc:	6c1004        	entry	a1, 32
	struct ath_hal_5416 *ahp = AH5416(ah);
	a_uint32_t omask = ahp->ah_maskReg;
  90adbf:	2b2236        	l32i	a11, a2, 216
	a_uint32_t mask;

	if (omask & HAL_INT_GLOBAL) {
  90adc2:	67b00e        	bgez	a11, 90add4 <ar5416SetInterrupts+0x18>
  90adc5:	186a42        	l32r	a8, 8e56d0 <vdesc_module_install+0x6c0>
	*(volatile uint32_t *) addr = b;
  90adc8:	c090      	movi.n	a9, 0
  90adca:	0c0200        	memw
  90adcd:	9980      	s32i.n	a9, a8, 0
	return *(const volatile uint32_t *) addr;
  90adcf:	0c0200        	memw
  90add2:	8880      	l32i.n	a8, a8, 0
		iowrite32_mac(AR_IER, AR_IER_DISABLE);
		(void) ioread32_mac(AR_IER);
	}

	mask = ints & HAL_INT_COMMON;
  90add4:	186a43        	l32r	a8, 8e56e0 <vdesc_module_install+0x6d0>
#else
		mask |= AR_IMR_TXOK;
		mask |= AR_IMR_TXDESC;
#endif
		mask |= AR_IMR_TXERR;
		mask |= AR_IMR_TXEOL;
  90add7:	295ac0        	movi	a9, 0x5c0
	mask = ints & HAL_INT_COMMON;
  90adda:	083801        	and	a8, a3, a8
	if (ints & HAL_INT_TX) {
  90addd:	036a40        	extui	a10, a3, 6, 1
		mask |= AR_IMR_TXEOL;
  90ade0:	098902        	or	a9, a8, a9
  90ade3:	0a9839        	movnez	a8, a9, a10
	if (ints & HAL_INT_RX) {
		mask |= AR_IMR_RXERR;
#ifdef AR5416_INT_MITIGATION
		mask |=  AR_IMR_RXMINTR | AR_IMR_RXINTM;
#else
		mask |= AR_IMR_RXOK | AR_IMR_RXDESC;
  90ade6:	c097      	movi.n	a9, 7
  90ade8:	098902        	or	a9, a8, a9
	if (ints & HAL_INT_RX) {
  90adeb:	030a40        	extui	a10, a3, 0, 1
		mask |= AR_IMR_RXOK | AR_IMR_RXDESC;
  90adee:	0a9839        	movnez	a8, a9, a10
#endif
	}

	if (ints & (HAL_INT_GTT | HAL_INT_CST)) {
  90adf1:	196a44        	l32r	a9, 8e5704 <vdesc_module_install+0x6f4>
  90adf4:	793005        	bnone	a3, a9, 90adfd <ar5416SetInterrupts+0x41>
		mask |= AR_IMR_BCNMISC;
  90adf7:	196a45        	l32r	a9, 8e570c <vdesc_module_install+0x6fc>
  90adfa:	098802        	or	a8, a8, a9
  90adfd:	196a46        	l32r	a9, 8e5718 <vdesc_module_install+0x708>
	*(volatile uint32_t *) addr = b;
  90ae00:	0c0200        	memw
  90ae03:	9890      	s32i.n	a8, a9, 0
	return *(const volatile uint32_t *) addr;
  90ae05:	0c0200        	memw
  90ae08:	8890      	l32i.n	a8, a9, 0
	}

	iowrite32_mac(AR_IMR, mask);
	(void) ioread32_mac(AR_IMR);
	ahp->ah_maskReg = ints;
  90ae0a:	232636        	s32i	a3, a2, 216

	/* Re-enable interrupts if they were enabled before. */
	if (ints & HAL_INT_GLOBAL) {
  90ae0d:	67300f        	bgez	a3, 90ae20 <ar5416SetInterrupts+0x64>
  90ae10:	136a42        	l32r	a3, 8e5718 <vdesc_module_install+0x708>
	*(volatile uint32_t *) addr = b;
  90ae13:	c021      	movi.n	a2, 1
  90ae15:	0c0200        	memw
  90ae18:	9230      	s32i.n	a2, a3, 0
	return *(const volatile uint32_t *) addr;
  90ae1a:	0c0200        	memw
  90ae1d:	223200        	l32i	a2, a3, 0
	*(volatile uint32_t *) addr = b;
  90ae20:	126a47        	l32r	a2, 8e573c <vdesc_module_install+0x72c>
  90ae23:	c032      	movi.n	a3, 2
  90ae25:	0c0200        	memw
  90ae28:	9320      	s32i.n	a3, a2, 0
  90ae2a:	126a48        	l32r	a2, 8e574c <vdesc_module_install+0x73c>
  90ae2d:	0c0200        	memw
  90ae30:	9320      	s32i.n	a3, a2, 0
  90ae32:	126a49        	l32r	a2, 8e5758 <vdesc_module_install+0x748>
  90ae35:	136a4a        	l32r	a3, 8e5760 <vdesc_module_install+0x750>
  90ae38:	0c0200        	memw
  90ae3b:	9320      	s32i.n	a3, a2, 0
	iowrite32_mac(AR_INTR_ASYNC_ENABLE, AR_INTR_MAC_IRQ);
	iowrite32_mac(AR_INTR_ASYNC_MASK, AR_INTR_MAC_IRQ);
	iowrite32_mac(AR_INTR_SYNC_ENABLE, AR_INTR_SYNC_ALL);

	return omask;
}
  90ae3d:	d2b0      	mov.n	a2, a11
  90ae3f:	d10f      	retw.n
  90ae41:	000000        	ill

0090ae44 <ar5416GetTsf64>:
/****************/

#define ATH9K_HTC_MAX_TSF_READ 3

u_int64_t ar5416GetTsf64(struct ath_hal *ah)
{
  90ae44:	6c1004        	entry	a1, 32
	return *(const volatile uint32_t *) addr;
  90ae47:	186a4b        	l32r	a8, 8e5774 <vdesc_module_install+0x764>
  90ae4a:	1b6a4c        	l32r	a11, 8e577c <vdesc_module_install+0x76c>
  90ae4d:	0c0200        	memw
  90ae50:	8a80      	l32i.n	a10, a8, 0
  90ae52:	c093      	movi.n	a9, 3
  90ae54:	0c0200        	memw
  90ae57:	83b0      	l32i.n	a3, a11, 0
  90ae59:	0c0200        	memw
  90ae5c:	8280      	l32i.n	a2, a8, 0

	tsf_upper1 = ioread32_mac(AR_TSF_U32);
	for (i = 0; i < ATH9K_HTC_MAX_TSF_READ; i++) {
		tsf_lower = ioread32_mac(AR_TSF_L32);
		tsf_upper2 = ioread32_mac(AR_TSF_U32);
		if (tsf_upper2 == tsf_upper1)
  90ae5e:	7a2106        	beq	a2, a10, 90ae68 <ar5416GetTsf64+0x24>
  90ae61:	b099      	addi.n	a9, a9, -1
  90ae63:	da20      	mov.n	a10, a2
	for (i = 0; i < ATH9K_HTC_MAX_TSF_READ; i++) {
  90ae65:	659feb        	bnez	a9, 90ae54 <ar5416GetTsf64+0x10>
			break;
		tsf_upper1 = tsf_upper2;
	}

	return (((u_int64_t)tsf_upper2 << 32) | tsf_lower);
}
  90ae68:	d10f      	retw.n
	...

0090ae6c <ar5416SetRxDP>:

/******/
/* RX */
/******/
void ar5416SetRxDP(struct ath_hal *ah, a_uint32_t rxdp)
{
  90ae6c:	6c1004        	entry	a1, 32
  90ae6f:	186a4d        	l32r	a8, 8e57a4 <vdesc_module_install+0x794>
	*(volatile uint32_t *) addr = b;
  90ae72:	0c0200        	memw
  90ae75:	9380      	s32i.n	a3, a8, 0
  90ae77:	d10f      	retw.n
  90ae79:	000000        	ill

0090ae7c <ar5416EnableReceive>:
			     & ~AR_RXCFG_ZLFDMA);
	}
}

void ar5416EnableReceive(struct ath_hal *ah)
{
  90ae7c:	6c1004        	entry	a1, 32
  90ae7f:	186a4e        	l32r	a8, 8e57b8 <vdesc_module_install+0x7a8>
  90ae82:	c094      	movi.n	a9, 4
  90ae84:	0c0200        	memw
  90ae87:	9980      	s32i.n	a9, a8, 0
  90ae89:	d10f      	retw.n
	...

0090ae8c <ar5416StopPcuReceive>:
	iowrite32_mac(AR_CR, AR_CR_RXE);
}

void ar5416StopPcuReceive(struct ath_hal *ah)
{
  90ae8c:	6c1004        	entry	a1, 32
	return *(const volatile uint32_t *) addr;
  90ae8f:	196a4f        	l32r	a9, 8e57cc <vdesc_module_install+0x7bc>
	OS_REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_RX_DIS);
  90ae92:	c2a0      	movi.n	a10, 32
  90ae94:	0c0200        	memw
  90ae97:	8890      	l32i.n	a8, a9, 0
  90ae99:	0a8802        	or	a8, a8, a10
	*(volatile uint32_t *) addr = b;
  90ae9c:	0c0200        	memw
  90ae9f:	9890      	s32i.n	a8, a9, 0
  90aea1:	d10f      	retw.n
	...

0090aea4 <ar5416SetupRxDesc_20>:
}

HAL_BOOL ar5416SetupRxDesc_20(struct ath_rx_desc *ds,
			      a_uint32_t size, a_uint32_t flags)
{
  90aea4:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	HALASSERT((size &~ AR_BufLen) == 0);

	ads->ds_ctl1 = size & AR_BufLen;
  90aea7:	03084b        	extui	a8, a3, 0, 12
	if (flags & HAL_RXDESC_INTREQ)
  90aeaa:	7a4f16        	bbsi	a4, 26, 90aec4 <ar5416SetupRxDesc_20+0x20>
	ads->ds_ctl1 = size & AR_BufLen;
  90aead:	088957        	extui	a9, a8, 24, 8
  90aeb0:	29240c        	s8i	a9, a2, 12
  90aeb3:	088814        	srli	a8, a8, 8
  90aeb6:	c090      	movi.n	a9, 0
  90aeb8:	29240d        	s8i	a9, a2, 13
  90aebb:	28240e        	s8i	a8, a2, 14
  90aebe:	23240f        	s8i	a3, a2, 15
  90aec1:	60001a        	j	90aedf <ar5416SetupRxDesc_20+0x3b>
		ads->ds_ctl1 |= AR_RxIntrReq;
  90aec4:	1369a0        	l32r	a3, 8e5544 <vdesc_module_install+0x534>
  90aec7:	038802        	or	a8, a8, a3
  90aeca:	088357        	extui	a3, a8, 24, 8
  90aecd:	23240c        	s8i	a3, a2, 12
  90aed0:	080357        	extui	a3, a8, 16, 8
  90aed3:	23240d        	s8i	a3, a2, 13
  90aed6:	088347        	extui	a3, a8, 8, 8
  90aed9:	23240e        	s8i	a3, a2, 14
  90aedc:	28240f        	s8i	a8, a2, 15

	/* this should be enough */
	ads->ds_rxstatus8 &= ~AR_RxDone;
  90aedf:	292030        	l8ui	a9, a2, 48
  90aee2:	c73e      	movi.n	a3, -2
  90aee4:	089810        	slli	a8, a9, 24
  90aee7:	292031        	l8ui	a9, a2, 49
  90aeea:	009911        	slli	a9, a9, 16
  90aeed:	089902        	or	a9, a9, a8
  90aef0:	282032        	l8ui	a8, a2, 50
  90aef3:	088811        	slli	a8, a8, 8
  90aef6:	098902        	or	a9, a8, a9
  90aef9:	282033        	l8ui	a8, a2, 51
  90aefc:	098802        	or	a8, a8, a9
  90aeff:	038801        	and	a8, a8, a3
  90af02:	088357        	extui	a3, a8, 24, 8
  90af05:	232430        	s8i	a3, a2, 48
  90af08:	080357        	extui	a3, a8, 16, 8
  90af0b:	232431        	s8i	a3, a2, 49
  90af0e:	088347        	extui	a3, a8, 8, 8
  90af11:	232432        	s8i	a3, a2, 50
  90af14:	282433        	s8i	a8, a2, 51

	return AH_TRUE;
}
  90af17:	c021      	movi.n	a2, 1
  90af19:	d10f      	retw.n
	...

0090af1c <ar5416ProcRxDescFast_20>:

HAL_STATUS ar5416ProcRxDescFast_20(struct ath_hal *ah, struct ath_rx_desc *ds,
				   a_uint32_t pa, struct ath_desc *nds,
				   struct ath_rx_status *rx_stats)
{
  90af1c:	6c1004        	entry	a1, 32
	struct ar5416_desc ads;
	struct ar5416_desc *adsp = AR5416DESC(ds);
	struct ar5416_desc *ands = AR5416DESC(nds);

	if ((adsp->ds_rxstatus8 & AR_RxDone) == 0)
  90af1f:	223030        	l8ui	a2, a3, 48
  90af22:	082810        	slli	a8, a2, 24
  90af25:	223031        	l8ui	a2, a3, 49
  90af28:	002211        	slli	a2, a2, 16
  90af2b:	082202        	or	a2, a2, a8
  90af2e:	283032        	l8ui	a8, a3, 50
  90af31:	088811        	slli	a8, a8, 8
  90af34:	028202        	or	a2, a8, a2
  90af37:	283033        	l8ui	a8, a3, 51
  90af3a:	028802        	or	a8, a8, a2
		return HAL_EINPROGRESS;
  90af3d:	c02f      	movi.n	a2, 15
	if ((adsp->ds_rxstatus8 & AR_RxDone) == 0)
  90af3f:	7f8f02        	bbsi	a8, 31, 90af45 <ar5416ProcRxDescFast_20+0x29>
  90af42:	6001b0        	j	90b0f6 <ar5416ProcRxDescFast_20+0x1da>
	/*
	 * Given the use of a self-linked tail be very sure that the hw is
	 * done with this descriptor; the hw may have done this descriptor
	 * once and picked it up again...make sure the hw has moved on.
	 */
	if ((ands->ds_rxstatus8 & AR_RxDone) == 0
  90af45:	255033        	l8ui	a5, a5, 51
  90af48:	7f5f0d        	bbsi	a5, 31, 90af59 <ar5416ProcRxDescFast_20+0x3d>
	return *(const volatile uint32_t *) addr;
  90af4b:	156a4d        	l32r	a5, 8e5880 <vdesc_module_install+0x870>
  90af4e:	0c0200        	memw
  90af51:	8550      	l32i.n	a5, a5, 0
	    && ioread32_mac(AR_RXDP) == pa)
  90af53:	754902        	bne	a4, a5, 90af59 <ar5416ProcRxDescFast_20+0x3d>
  90af56:	60019c        	j	90b0f6 <ar5416ProcRxDescFast_20+0x1da>
	 * Next we fill in all values in a caller passed stack variable.
	 * This reduces the number of uncached accesses.
	 * Do this copy here, after the check so that when the checks fail, we
	 * dont end up copying the entire stats uselessly.
	 */
	ads.u.rx = adsp->u.rx;
  90af59:	223010        	l8ui	a2, a3, 16
  90af5c:	293018        	l8ui	a9, a3, 24
  90af5f:	082a10        	slli	a10, a2, 24
  90af62:	223011        	l8ui	a2, a3, 17
  90af65:	089910        	slli	a9, a9, 24
  90af68:	002211        	slli	a2, a2, 16
  90af6b:	0a2202        	or	a2, a2, a10
  90af6e:	2a3012        	l8ui	a10, a3, 18
  90af71:	2b301c        	l8ui	a11, a3, 28
  90af74:	08aa11        	slli	a10, a10, 8
  90af77:	02a202        	or	a2, a10, a2
  90af7a:	2a3013        	l8ui	a10, a3, 19
  90af7d:	08bb10        	slli	a11, a11, 24
  90af80:	02aa02        	or	a10, a10, a2
  90af83:	223014        	l8ui	a2, a3, 20
  90af86:	2c3020        	l8ui	a12, a3, 32
  90af89:	082e10        	slli	a14, a2, 24
  90af8c:	223015        	l8ui	a2, a3, 21
  90af8f:	08cc10        	slli	a12, a12, 24
  90af92:	002211        	slli	a2, a2, 16
  90af95:	0e2202        	or	a2, a2, a14
  90af98:	2e3016        	l8ui	a14, a3, 22
  90af9b:	2d3024        	l8ui	a13, a3, 36
  90af9e:	08ee11        	slli	a14, a14, 8
  90afa1:	02e202        	or	a2, a14, a2
  90afa4:	2e3017        	l8ui	a14, a3, 23
  90afa7:	08dd10        	slli	a13, a13, 24
  90afaa:	02ee02        	or	a14, a14, a2
  90afad:	223019        	l8ui	a2, a3, 25
  90afb0:	24301b        	l8ui	a4, a3, 27
  90afb3:	002211        	slli	a2, a2, 16
  90afb6:	092902        	or	a9, a2, a9
  90afb9:	22301a        	l8ui	a2, a3, 26
  90afbc:	2f3028        	l8ui	a15, a3, 40
  90afbf:	082211        	slli	a2, a2, 8
  90afc2:	092202        	or	a2, a2, a9
  90afc5:	29301d        	l8ui	a9, a3, 29
  90afc8:	024202        	or	a2, a4, a2
  90afcb:	009911        	slli	a9, a9, 16
  90afce:	0b9b02        	or	a11, a9, a11
  90afd1:	29301e        	l8ui	a9, a3, 30
  90afd4:	24301f        	l8ui	a4, a3, 31
  90afd7:	089911        	slli	a9, a9, 8
  90afda:	0b9902        	or	a9, a9, a11
  90afdd:	2b3021        	l8ui	a11, a3, 33
  90afe0:	08ff10        	slli	a15, a15, 24
  90afe3:	00bb11        	slli	a11, a11, 16
  90afe6:	0cbc02        	or	a12, a11, a12
  90afe9:	2b3022        	l8ui	a11, a3, 34
  90afec:	094902        	or	a9, a4, a9
  90afef:	08bb11        	slli	a11, a11, 8
  90aff2:	0cbb02        	or	a11, a11, a12
  90aff5:	2c3025        	l8ui	a12, a3, 37
  90aff8:	243023        	l8ui	a4, a3, 35
  90affb:	00cc11        	slli	a12, a12, 16
  90affe:	0dcd02        	or	a13, a12, a13
  90b001:	2c3026        	l8ui	a12, a3, 38
  90b004:	0b4b02        	or	a11, a4, a11
  90b007:	08cc11        	slli	a12, a12, 8
  90b00a:	0dcc02        	or	a12, a12, a13
  90b00d:	2d3029        	l8ui	a13, a3, 41
  90b010:	243027        	l8ui	a4, a3, 39
  90b013:	00dd11        	slli	a13, a13, 16
  90b016:	0fdf02        	or	a15, a13, a15
  90b019:	2d302a        	l8ui	a13, a3, 42
  90b01c:	23302b        	l8ui	a3, a3, 43
  90b01f:	08dd11        	slli	a13, a13, 8
  90b022:	0fdd02        	or	a13, a13, a15
  90b025:	0d3d02        	or	a13, a3, a13

	rx_stats->rs_status = 0;
  90b028:	c030      	movi.n	a3, 0
  90b02a:	23640a        	s8i	a3, a6, 10
	rx_stats->rs_flags = 0;
  90b02d:	23641a        	s8i	a3, a6, 26

	rx_stats->rs_datalen = ads.ds_rxstatus1 & AR_DataLen;
  90b030:	0e034b        	extui	a3, a14, 0, 12
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;
  90b033:	9261      	s32i.n	a2, a6, 4
	rx_stats->rs_datalen = ads.ds_rxstatus1 & AR_DataLen;
  90b035:	236504        	s16i	a3, a6, 8
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;
  90b038:	c020      	movi.n	a2, 0
  90b03a:	9260      	s32i.n	a2, a6, 0

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined =
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
  90b03c:	0b8257        	extui	a2, a11, 24, 8
	rx_stats->rs_rssi_combined =
  90b03f:	22640c        	s8i	a2, a6, 12
	rx_stats->rs_rssi_ctl0 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt00);
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
  90b042:	0a8214        	srli	a2, a10, 8
  90b045:	22640e        	s8i	a2, a6, 14
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
  90b048:	0a025f        	extui	a2, a10, 16, 16
  90b04b:	22640f        	s8i	a2, a6, 15
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
  90b04e:	0b8214        	srli	a2, a11, 8
  90b051:	226411        	s8i	a2, a6, 17
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
  90b054:	0b025f        	extui	a2, a11, 16, 16
  90b057:	226412        	s8i	a2, a6, 18
	rx_stats->rs_rssi_ctl0 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt00);
  90b05a:	2a640d        	s8i	a10, a6, 13
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
  90b05d:	2b6410        	s8i	a11, a6, 16
	ads.u.rx = adsp->u.rx;
  90b060:	0c4c02        	or	a12, a4, a12
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
  90b063:	089246        	extui	a2, a8, 9, 7
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
  90b066:	778f02        	bbsi	a8, 23, 90b06c <ar5416ProcRxDescFast_20+0x150>
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
  90b069:	22faff        	movi	a2, -1
  90b06c:	226413        	s8i	a2, a6, 19
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
  90b06f:	081250        	extui	a2, a8, 17, 1
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
  90b072:	090340        	extui	a3, a9, 0, 1
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
  90b075:	0a8a57        	extui	a10, a10, 24, 8
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;
  90b078:	0ece40        	extui	a14, a14, 12, 1
	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
  90b07b:	226417        	s8i	a2, a6, 23
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b07e:	091940        	extui	a9, a9, 1, 1
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
  90b081:	080250        	extui	a2, a8, 16, 1
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
  90b084:	0e3311        	slli	a3, a3, 2
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b087:	0d9911        	slli	a9, a9, 3
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
  90b08a:	2a6414        	s8i	a10, a6, 20
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;
  90b08d:	2e6416        	s8i	a14, a6, 22
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
  90b090:	226418        	s8i	a2, a6, 24
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b093:	093302        	or	a3, a3, a9

	if (ads.ds_rxstatus8 & AR_PreDelimCRCErr)
  90b096:	798f04        	bbsi	a8, 25, 90b09e <ar5416ProcRxDescFast_20+0x182>
  90b099:	600006        	j	90b0a3 <ar5416ProcRxDescFast_20+0x187>
  90b09c:	0000c1        	excw
		rx_stats->rs_flags |= HAL_RX_DELIM_CRC_PRE;
  90b09f:	200233        	l32i	a0, a0, 204
  90b0a2:	022364        	excw
  90b0a5:	1a7d86        	l32r	a10, 8ea6c0 <memset+0x3878>
	if (ads.ds_rxstatus8 & AR_PostDelimCRCErr)
  90b0a8:	0a2260        	excw
		rx_stats->rs_flags |= HAL_RX_DELIM_CRC_POST;
  90b0ab:	1ac230        	l32r	a10, 8fb96c <memset+0x14b24>
  90b0ae:	032202        	or	a2, a2, a3
  90b0b1:	22641a        	s8i	a2, a6, 26
	if (ads.ds_rxstatus8 & AR_DecryptBusyErr)
  90b0b4:	71860a        	bbci	a8, 1, 90b0c2 <ar5416ProcRxDescFast_20+0x1a6>
		rx_stats->rs_flags |= HAL_RX_DECRYPT_BUSY;
  90b0b7:	22601a        	l8ui	a2, a6, 26
  90b0ba:	c430      	movi.n	a3, 64
  90b0bc:	032202        	or	a2, a2, a3
  90b0bf:	22641a        	s8i	a2, a6, 26

	if ((ads.ds_rxstatus8 & AR_RxFrameOK) == 0) {
  90b0c2:	c032      	movi.n	a3, 2
  90b0c4:	738826        	bany	a8, a3, 90b0ee <ar5416ProcRxDescFast_20+0x1d2>
		 * when a CRC error is detected, but these are specious.
		 * Consequently we filter them out here so we don't
		 * confuse and/or complicate drivers.
		 */
		if (ads.ds_rxstatus8 & AR_CRCErr)
			rx_stats->rs_status |= HAL_RXERR_CRC;
  90b0c7:	c021      	movi.n	a2, 1
		if (ads.ds_rxstatus8 & AR_CRCErr)
  90b0c9:	7d8f1e        	bbsi	a8, 29, 90b0eb <ar5416ProcRxDescFast_20+0x1cf>
		else if (ads.ds_rxstatus8 & AR_PHYErr) {
  90b0cc:	c120      	movi.n	a2, 16
  90b0ce:	72800b        	bnone	a8, a2, 90b0dd <ar5416ProcRxDescFast_20+0x1c1>
			a_uint32_t phyerr;

			rx_stats->rs_status |= HAL_RXERR_PHY;
			phyerr = MS(ads.ds_rxstatus8, AR_PHYErrCode);
  90b0d1:	088814        	srli	a8, a8, 8
			rx_stats->rs_status |= HAL_RXERR_PHY;
  90b0d4:	23640a        	s8i	a3, a6, 10
			rx_stats->rs_phyerr = phyerr;
  90b0d7:	28640b        	s8i	a8, a6, 11
  90b0da:	600010        	j	90b0ee <ar5416ProcRxDescFast_20+0x1d2>
		} else if (ads.ds_rxstatus8 & AR_DecryptCRCErr)
  90b0dd:	c038      	movi.n	a3, 8
  90b0df:	738005        	bnone	a8, a3, 90b0e8 <ar5416ProcRxDescFast_20+0x1cc>
			rx_stats->rs_status |= HAL_RXERR_DECRYPT;
  90b0e2:	23640a        	s8i	a3, a6, 10
  90b0e5:	600005        	j	90b0ee <ar5416ProcRxDescFast_20+0x1d2>
		else if (ads.ds_rxstatus8 & AR_MichaelErr)
  90b0e8:	7a8702        	bbci	a8, 26, 90b0ee <ar5416ProcRxDescFast_20+0x1d2>
			rx_stats->rs_status |= HAL_RXERR_MIC;
  90b0eb:	22640a        	s8i	a2, a6, 10
	}
	rx_stats->evm0=ads.AR_RxEVM0;
  90b0ee:	9b67      	s32i.n	a11, a6, 28
	rx_stats->evm1=ads.AR_RxEVM1;
  90b0f0:	9c68      	s32i.n	a12, a6, 32
	rx_stats->evm2=ads.AR_RxEVM2;
  90b0f2:	9d69      	s32i.n	a13, a6, 36

	return HAL_OK;
  90b0f4:	c020      	movi.n	a2, 0
}
  90b0f6:	d10f      	retw.n

0090b0f8 <ar5416UpdateTxTrigLevel>:
/******/
/* TX */
/******/

HAL_BOOL ar5416UpdateTxTrigLevel(struct ath_hal *ah, HAL_BOOL bIncTrigLevel)
{
  90b0f8:	6c1004        	entry	a1, 32
        HAL_INT omask;

        /*
         * Disable interrupts while futzing with the fifo level.
         */
        omask = ar5416SetInterrupts(ah, ahp->ah_maskReg &~ HAL_INT_GLOBAL);
  90b0fb:	146a50        	l32r	a4, 8e5a3c <vdesc_module_install+0xa2c>
  90b0fe:	2b2236        	l32i	a11, a2, 216
  90b101:	da20      	mov.n	a10, a2
  90b103:	04bb01        	and	a11, a11, a4
  90b106:	5bff2d        	call8	90adbc <ar5416SetInterrupts>
  90b109:	146a51        	l32r	a4, 8e5a50 <vdesc_module_install+0xa40>
  90b10c:	0c0200        	memw
  90b10f:	8940      	l32i.n	a9, a4, 0

	txcfg = ioread32_mac(AR_TXCFG);
        curLevel = MS(txcfg, AR_FTRIG);
  90b111:	094445        	extui	a4, a9, 4, 6
        newLevel = curLevel;

        if (bIncTrigLevel)  {
  90b114:	c83a      	beqz.n	a3, 90b122 <ar5416UpdateTxTrigLevel+0x2a>
		if (curLevel < MAX_TX_FIFO_THRESHOLD)
  90b116:	c38f      	movi.n	a8, 63
  90b118:	d340      	mov.n	a3, a4
  90b11a:	784128        	beq	a4, a8, 90b146 <ar5416UpdateTxTrigLevel+0x4e>
			newLevel ++;
  90b11d:	b143      	addi.n	a3, a4, 1
  90b11f:	600006        	j	90b129 <ar5416UpdateTxTrigLevel+0x31>
  90b122:	d340      	mov.n	a3, a4
        } else if (curLevel > MIN_TX_FIFO_THRESHOLD)
  90b124:	6e421e        	bltui	a4, 2, 90b146 <ar5416UpdateTxTrigLevel+0x4e>
                newLevel--;
  90b127:	b043      	addi.n	a3, a4, -1
        if (newLevel != curLevel)
  90b129:	743119        	beq	a3, a4, 90b146 <ar5416UpdateTxTrigLevel+0x4e>
		iowrite32_mac(AR_TXCFG,
  90b12c:	2b3af0        	movi	a11, 0x3f0
  90b12f:	0c3811        	slli	a8, a3, 4
  90b132:	0b8801        	and	a8, a8, a11
  90b135:	2bca0f        	movi	a11, 0xfffffc0f
  90b138:	0b9901        	and	a9, a9, a11
  90b13b:	098802        	or	a8, a8, a9
  90b13e:	196a51        	l32r	a9, 8e5a84 <vdesc_module_install+0xa74>
	*(volatile uint32_t *) addr = b;
  90b141:	0c0200        	memw
  90b144:	9890      	s32i.n	a8, a9, 0
			     (txcfg & ~AR_FTRIG) | SM(newLevel, AR_FTRIG));

        /* re-enable chip interrupts */
        ar5416SetInterrupts(ah, omask);
  90b146:	dba0      	mov.n	a11, a10
  90b148:	da20      	mov.n	a10, a2

        return (newLevel != curLevel);
  90b14a:	03440c        	sub	a4, a4, a3
        ar5416SetInterrupts(ah, omask);
  90b14d:	5bff1b        	call8	90adbc <ar5416SetInterrupts>
        return (newLevel != curLevel);
  90b150:	c031      	movi.n	a3, 1
  90b152:	c020      	movi.n	a2, 0
  90b154:	043239        	movnez	a2, a3, a4
}
  90b157:	d10f      	retw.n
  90b159:	000000        	ill

0090b15c <ar5416SetTxDP>:

HAL_BOOL ar5416SetTxDP(struct ath_hal *ah, a_uint32_t q, a_uint32_t txdp)
{
  90b15c:	6c1004        	entry	a1, 32
         * Make sure that TXE is deasserted before setting the TXDP.  If TXE
         * is still asserted, setting TXDP will have no effect.
         */
	HALASSERT((ioread32_mac(AR_Q_TXE) & (1 << q)) == 0);

	iowrite32_mac(AR_QTXDP(q), txdp);
  90b15f:	186a52        	l32r	a8, 8e5aa8 <vdesc_module_install+0xa98>
  90b162:	0e3311        	slli	a3, a3, 2
  90b165:	a833      	add.n	a3, a3, a8
  90b167:	0c0200        	memw
  90b16a:	9430      	s32i.n	a4, a3, 0

        return AH_TRUE;
}
  90b16c:	c021      	movi.n	a2, 1
  90b16e:	d10f      	retw.n

0090b170 <ar5416StartTxDma>:

HAL_BOOL ar5416StartTxDma(struct ath_hal *ah, a_uint32_t q)
{
  90b170:	6c1004        	entry	a1, 32
        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

        /* Check to be sure we're not enabling a q that has its TXD bit set. */
	HALASSERT((ioread32_mac(AR_Q_TXD) & (1 << q)) == 0);

	iowrite32_mac(AR_Q_TXE, 1 << q);
  90b173:	c021      	movi.n	a2, 1
  90b175:	186a53        	l32r	a8, 8e5ac4 <vdesc_module_install+0xab4>
  90b178:	003104        	ssl	a3
  90b17b:	00231a        	sll	a3, a2
  90b17e:	0c0200        	memw
  90b181:	9380      	s32i.n	a3, a8, 0

        return AH_TRUE;
}
  90b183:	d10f      	retw.n
  90b185:	000000        	ill

0090b188 <ar5416NumTxPending>:

a_uint32_t ar5416NumTxPending(struct ath_hal *ah, a_uint32_t q)
{
  90b188:	6c1004        	entry	a1, 32
        a_uint32_t npend;

        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);
        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	npend = ioread32_mac(AR_QSTS(q))
  90b18b:	186a54        	l32r	a8, 8e5adc <vdesc_module_install+0xacc>
  90b18e:	0e3211        	slli	a2, a3, 2
  90b191:	a822      	add.n	a2, a2, a8
	return *(const volatile uint32_t *) addr;
  90b193:	0c0200        	memw
  90b196:	8220      	l32i.n	a2, a2, 0
  90b198:	020241        	extui	a2, a2, 0, 2
		& AR_Q_STS_PEND_FR_CNT;
        if (npend == 0) {
  90b19b:	cd25      	bnez.n	a2, 90b1b4 <ar5416NumTxPending+0x2c>
  90b19d:	186a53        	l32r	a8, 8e5aec <vdesc_module_install+0xadc>
  90b1a0:	0c0200        	memw
  90b1a3:	8980      	l32i.n	a9, a8, 0
                /*
                 * Pending frame count (PFC) can momentarily go to zero
                 * while TXE remains asserted.  In other words a PFC of
                 * zero is not sufficient to say that the queue has stopped.
                 */
		if (ioread32_mac(AR_Q_TXE) & (1 << q))
  90b1a5:	280a01        	movi	a8, 1
  90b1a8:	003104        	ssl	a3
  90b1ab:	00831a        	sll	a3, a8
  90b1ae:	093301        	and	a3, a3, a9
  90b1b1:	038239        	movnez	a2, a8, a3
			iowrite32_mac(AR_Q_RDYTIMESHDN, 1 << q);
                }
        }
#endif
        return npend;
}
  90b1b4:	d10f      	retw.n
	...

0090b1b8 <ar5416SetupTxDesc_20>:
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90b1b8:	6c1004        	entry	a1, 32

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90b1bb:	29205c        	l8ui	a9, a2, 92
{
  90b1be:	d820      	mov.n	a8, a2
        ads->ds_txstatus9 &= ~AR_TxDone;
  90b1c0:	089210        	slli	a2, a9, 24
  90b1c3:	29805d        	l8ui	a9, a8, 93
{
  90b1c6:	8a1a      	l32i.n	a10, a1, 40
        ads->ds_txstatus9 &= ~AR_TxDone;
  90b1c8:	009911        	slli	a9, a9, 16
  90b1cb:	029902        	or	a9, a9, a2
  90b1ce:	22805e        	l8ui	a2, a8, 94
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b1d1:	03034b        	extui	a3, a3, 0, 12
        ads->ds_txstatus9 &= ~AR_TxDone;
  90b1d4:	082211        	slli	a2, a2, 8
  90b1d7:	092902        	or	a9, a2, a9
  90b1da:	22805f        	l8ui	a2, a8, 95
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b1dd:	1c6a55        	l32r	a12, 8e5b34 <vdesc_module_install+0xb24>
        ads->ds_txstatus9 &= ~AR_TxDone;
  90b1e0:	092202        	or	a2, a2, a9
  90b1e3:	c79e      	movi.n	a9, -2
  90b1e5:	092201        	and	a2, a2, a9
  90b1e8:	028957        	extui	a9, a2, 24, 8
  90b1eb:	29845c        	s8i	a9, a8, 92
  90b1ee:	020957        	extui	a9, a2, 16, 8
  90b1f1:	29845d        	s8i	a9, a8, 93
  90b1f4:	028947        	extui	a9, a2, 8, 8
  90b1f7:	29845e        	s8i	a9, a8, 94
		| (txPower << AR_XmitPower_S)
  90b1fa:	c39f      	movi.n	a9, 63
  90b1fc:	096936        	minu	a9, a6, a9
  90b1ff:	009911        	slli	a9, a9, 16
  90b202:	039302        	or	a3, a9, a3
        ads->ds_txstatus9 &= ~AR_TxDone;
  90b205:	22845f        	s8i	a2, a8, 95
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b208:	c290      	movi.n	a9, 32
  90b20a:	126a45        	l32r	a2, 8e5b20 <vdesc_module_install+0xb10>
  90b20d:	09a901        	and	a9, a10, a9
  90b210:	092939        	movnez	a9, a2, a9
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b213:	c0e0      	movi.n	a14, 0
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b215:	039902        	or	a9, a9, a3
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b218:	d2c0      	mov.n	a2, a12
  90b21a:	0a0340        	extui	a3, a10, 0, 1
  90b21d:	03e238        	moveqz	a2, a14, a3
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);
  90b220:	c1f0      	movi.n	a15, 16
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b222:	092902        	or	a9, a2, a9
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);
  90b225:	126a56        	l32r	a2, 8e5b80 <vdesc_module_install+0xb70>
  90b228:	0fa301        	and	a3, a10, a15
  90b22b:	032339        	movnez	a3, a2, a3
  90b22e:	093902        	or	a9, a3, a9
        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b231:	098257        	extui	a2, a9, 24, 8
  90b234:	228408        	s8i	a2, a8, 8
  90b237:	090257        	extui	a2, a9, 16, 8

        ads->ds_ctl1 = (type << AR_FrameType_S)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  90b23a:	c032      	movi.n	a3, 2
        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b23c:	228409        	s8i	a2, a8, 9
  90b23f:	098247        	extui	a2, a9, 8, 8
  90b242:	22840a        	s8i	a2, a8, 10
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  90b245:	03a201        	and	a2, a10, a3
        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b248:	0c5510        	slli	a5, a5, 20
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  90b24b:	02ec38        	moveqz	a12, a14, a2
  90b24e:	05c202        	or	a2, a12, a5
        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b251:	028557        	extui	a5, a2, 24, 8
  90b254:	25840c        	s8i	a5, a8, 12
  90b257:	020557        	extui	a5, a2, 16, 8
  90b25a:	25840d        	s8i	a5, a8, 13
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b25d:	8c18      	l32i.n	a12, a1, 32
        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b25f:	028547        	extui	a5, a2, 8, 8
  90b262:	25840e        	s8i	a5, a8, 14
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b265:	156a59        	l32r	a5, 8e5bcc <vdesc_module_install+0xbbc>
  90b268:	00f104        	ssl	a15
  90b26b:	00cc1a        	sll	a12, a12
  90b26e:	05cc01        	and	a12, a12, a5
  90b271:	0c8557        	extui	a5, a12, 24, 8
  90b274:	258410        	s8i	a5, a8, 16
  90b277:	0c0557        	extui	a5, a12, 16, 8
  90b27a:	258411        	s8i	a5, a8, 17
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);
  90b27d:	078557        	extui	a5, a7, 24, 8
  90b280:	258414        	s8i	a5, a8, 20
  90b283:	070557        	extui	a5, a7, 16, 8
  90b286:	258415        	s8i	a5, a8, 21
  90b289:	078547        	extui	a5, a7, 8, 8
        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b28c:	29840b        	s8i	a9, a8, 11
        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b28f:	22840f        	s8i	a2, a8, 15
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b292:	2e8412        	s8i	a14, a8, 18
  90b295:	2e8413        	s8i	a14, a8, 19
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);
  90b298:	258416        	s8i	a5, a8, 22
  90b29b:	278417        	s8i	a7, a8, 23
{
  90b29e:	8d19      	l32i.n	a13, a1, 36
  90b2a0:	2b120b        	l32i	a11, a1, 44

        ads->ds_ctl7 = SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel0)
  90b2a3:	2e8424        	s8i	a14, a8, 36
  90b2a6:	238425        	s8i	a3, a8, 37
  90b2a9:	23fa84        	movi	a3, -124
  90b2ac:	238427        	s8i	a3, a8, 39
  90b2af:	2f8426        	s8i	a15, a8, 38
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel1)
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel2)
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel3);

        if (keyIx != HAL_TXKEYIX_INVALID) {
  90b2b2:	230aff        	movi	a3, 255
  90b2b5:	73d13b        	beq	a13, a3, 90b2f4 <ar5416SetupTxDesc_20+0x13c>
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
  90b2b8:	136a5a        	l32r	a3, 8e5c20 <vdesc_module_install+0xc10>
  90b2bb:	03d511        	slli	a5, a13, 13
  90b2be:	035501        	and	a5, a5, a3
  90b2c1:	025502        	or	a5, a5, a2
  90b2c4:	058257        	extui	a2, a5, 24, 8
  90b2c7:	22840c        	s8i	a2, a8, 12
  90b2ca:	050257        	extui	a2, a5, 16, 8
  90b2cd:	22840d        	s8i	a2, a8, 13
  90b2d0:	058247        	extui	a2, a5, 8, 8
  90b2d3:	22840e        	s8i	a2, a8, 14
                ads->ds_ctl0 |= AR_DestIdxValid;
  90b2d6:	126a5b        	l32r	a2, 8e5c44 <vdesc_module_install+0xc34>
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
  90b2d9:	25840f        	s8i	a5, a8, 15
                ads->ds_ctl0 |= AR_DestIdxValid;
  90b2dc:	029902        	or	a9, a9, a2
  90b2df:	098257        	extui	a2, a9, 24, 8
  90b2e2:	228408        	s8i	a2, a8, 8
  90b2e5:	090257        	extui	a2, a9, 16, 8
  90b2e8:	228409        	s8i	a2, a8, 9
  90b2eb:	098247        	extui	a2, a9, 8, 8
  90b2ee:	22840a        	s8i	a2, a8, 10
  90b2f1:	29840b        	s8i	a9, a8, 11
        }

        if (flags & RTSCTS) {
  90b2f4:	c03c      	movi.n	a3, 12
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
        }
        return AH_TRUE;
  90b2f6:	c021      	movi.n	a2, 1
        if (flags & RTSCTS) {
  90b2f8:	73a802        	bany	a10, a3, 90b2fe <ar5416SetupTxDesc_20+0x146>
  90b2fb:	60009d        	j	90b39c <ar5416SetupTxDesc_20+0x1e4>
                if (!isValidTxRate(rtsctsRate)) {
  90b2fe:	136a5c        	l32r	a3, 8e5c70 <vdesc_module_install+0xc60>
  90b301:	00b004        	ssr	a11
  90b304:	03031b        	sra	a3, a3
  90b307:	023301        	and	a3, a3, a2
  90b30a:	64308c        	beqz	a3, 90b39a <ar5416SetupTxDesc_20+0x1e2>
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b30d:	298008        	l8ui	a9, a8, 8
  90b310:	238009        	l8ui	a3, a8, 9
  90b313:	089910        	slli	a9, a9, 24
  90b316:	003311        	slli	a3, a3, 16
  90b319:	093902        	or	a9, a3, a9
  90b31c:	23800a        	l8ui	a3, a8, 10
  90b31f:	1d6a57        	l32r	a13, 8e5c7c <vdesc_module_install+0xc6c>
  90b322:	083311        	slli	a3, a3, 8
  90b325:	093302        	or	a3, a3, a9
  90b328:	29800b        	l8ui	a9, a8, 11
  90b32b:	c050      	movi.n	a5, 0
  90b32d:	039302        	or	a3, a9, a3
  90b330:	c098      	movi.n	a9, 8
  90b332:	09a901        	and	a9, a10, a9
  90b335:	095d38        	moveqz	a13, a5, a9
  90b338:	d9d0      	mov.n	a9, a13
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
  90b33a:	c0d4      	movi.n	a13, 4
  90b33c:	0daa01        	and	a10, a10, a13
  90b33f:	1d6a58        	l32r	a13, 8e5ca0 <vdesc_module_install+0xc90>
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b342:	039902        	or	a9, a9, a3
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
  90b345:	0a5d38        	moveqz	a13, a5, a10
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b348:	0d9902        	or	a9, a9, a13
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b34b:	851c      	l32i.n	a5, a1, 48
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b34d:	098357        	extui	a3, a9, 24, 8
  90b350:	238408        	s8i	a3, a8, 8
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b353:	05054e        	extui	a5, a5, 0, 15
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b356:	090357        	extui	a3, a9, 16, 8
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b359:	0c5c02        	or	a12, a5, a12
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b35c:	238409        	s8i	a3, a8, 9
  90b35f:	098347        	extui	a3, a9, 8, 8
  90b362:	23840a        	s8i	a3, a8, 10
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b365:	0c8357        	extui	a3, a12, 24, 8
  90b368:	238410        	s8i	a3, a8, 16
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b36b:	0cbb10        	slli	a11, a11, 20
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b36e:	0c0357        	extui	a3, a12, 16, 8
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b371:	07b702        	or	a7, a11, a7
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b374:	238411        	s8i	a3, a8, 17
  90b377:	0c8346        	extui	a3, a12, 8, 7
  90b37a:	238412        	s8i	a3, a8, 18
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b37d:	078357        	extui	a3, a7, 24, 8
  90b380:	238414        	s8i	a3, a8, 20
  90b383:	070357        	extui	a3, a7, 16, 8
  90b386:	238415        	s8i	a3, a8, 21
  90b389:	078347        	extui	a3, a7, 8, 8
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b38c:	29840b        	s8i	a9, a8, 11
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b38f:	2c8413        	s8i	a12, a8, 19
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b392:	238416        	s8i	a3, a8, 22
  90b395:	278417        	s8i	a7, a8, 23
  90b398:	d10f      	retw.n
                        return AH_FALSE;
  90b39a:	d230      	mov.n	a2, a3

#undef RTSCTS
}
  90b39c:	d10f      	retw.n
	...

0090b3a0 <ar5416FillTxDesc_20>:

HAL_BOOL ar5416FillTxDesc_20(struct ath_tx_desc *ds,
			     a_uint32_t segLen, HAL_BOOL firstSeg, HAL_BOOL lastSeg,
			     const struct ath_tx_desc *ds0)
{
  90b3a0:	6c1004        	entry	a1, 32
        struct ar5416_desc *ads = AR5416DESC(ds);

        HALASSERT((segLen &~ AR_BufLen) == 0);

        if (firstSeg) {
  90b3a3:	644045        	beqz	a4, 90b3ec <ar5416FillTxDesc_20+0x4c>
                /*
                 * First descriptor, don't clobber xmit control data
                 * setup by ar5416SetupTxDesc.
                 */
                ads->ds_ctl1 |= segLen | (lastSeg ? 0 : AR_TxMore);
  90b3a6:	24200c        	l8ui	a4, a2, 12
  90b3a9:	c060      	movi.n	a6, 0
  90b3ab:	084810        	slli	a8, a4, 24
  90b3ae:	24200d        	l8ui	a4, a2, 13
  90b3b1:	004411        	slli	a4, a4, 16
  90b3b4:	084402        	or	a4, a4, a8
  90b3b7:	28200e        	l8ui	a8, a2, 14
  90b3ba:	088811        	slli	a8, a8, 8
  90b3bd:	048402        	or	a4, a8, a4
  90b3c0:	28200f        	l8ui	a8, a2, 15
  90b3c3:	048802        	or	a8, a8, a4
  90b3c6:	146a2d        	l32r	a4, 8e5c7c <vdesc_module_install+0xc6c>
  90b3c9:	038302        	or	a3, a8, a3
  90b3cc:	054638        	moveqz	a6, a4, a5
  90b3cf:	063302        	or	a3, a3, a6
  90b3d2:	038457        	extui	a4, a3, 24, 8
  90b3d5:	24240c        	s8i	a4, a2, 12
  90b3d8:	030457        	extui	a4, a3, 16, 8
  90b3db:	24240d        	s8i	a4, a2, 13
  90b3de:	038447        	extui	a4, a3, 8, 8
  90b3e1:	d560      	mov.n	a5, a6
  90b3e3:	24240e        	s8i	a4, a2, 14
  90b3e6:	23240f        	s8i	a3, a2, 15
  90b3e9:	6000cb        	j	90b4b8 <ar5416FillTxDesc_20+0x118>
        } else if (lastSeg) {
  90b3ec:	645089        	beqz	a5, 90b479 <ar5416FillTxDesc_20+0xd9>
                /*
                 * Last descriptor in a multi-descriptor frame,
                 * copy the multi-rate transmit parameters from
                 * the first frame for processing on completion.
                 */
                ads->ds_ctl0 = 0;
  90b3ef:	242408        	s8i	a4, a2, 8
  90b3f2:	242409        	s8i	a4, a2, 9
  90b3f5:	24240a        	s8i	a4, a2, 10
  90b3f8:	24240b        	s8i	a4, a2, 11
                ads->ds_ctl1 = segLen;
  90b3fb:	038457        	extui	a4, a3, 24, 8
  90b3fe:	24240c        	s8i	a4, a2, 12
  90b401:	030457        	extui	a4, a3, 16, 8
  90b404:	24240d        	s8i	a4, a2, 13
  90b407:	038447        	extui	a4, a3, 8, 8
  90b40a:	24240e        	s8i	a4, a2, 14
  90b40d:	23240f        	s8i	a3, a2, 15
                ads->ds_ctl2 = AR5416DESC_CONST(ds0)->ds_ctl2;
  90b410:	256010        	l8ui	a5, a6, 16
  90b413:	085310        	slli	a3, a5, 24
  90b416:	256011        	l8ui	a5, a6, 17
  90b419:	005511        	slli	a5, a5, 16
  90b41c:	035502        	or	a5, a5, a3
  90b41f:	236012        	l8ui	a3, a6, 18
  90b422:	083311        	slli	a3, a3, 8
  90b425:	053502        	or	a5, a3, a5
  90b428:	236013        	l8ui	a3, a6, 19
  90b42b:	053302        	or	a3, a3, a5
  90b42e:	038457        	extui	a4, a3, 24, 8
  90b431:	242410        	s8i	a4, a2, 16
  90b434:	030457        	extui	a4, a3, 16, 8
  90b437:	242411        	s8i	a4, a2, 17
  90b43a:	038447        	extui	a4, a3, 8, 8
  90b43d:	242412        	s8i	a4, a2, 18
  90b440:	232413        	s8i	a3, a2, 19
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
  90b443:	256014        	l8ui	a5, a6, 20
  90b446:	085310        	slli	a3, a5, 24
  90b449:	256015        	l8ui	a5, a6, 21
  90b44c:	005511        	slli	a5, a5, 16
  90b44f:	035502        	or	a5, a5, a3
  90b452:	236016        	l8ui	a3, a6, 22
  90b455:	083311        	slli	a3, a3, 8
  90b458:	053502        	or	a5, a3, a5
  90b45b:	236017        	l8ui	a3, a6, 23
  90b45e:	053302        	or	a3, a3, a5
  90b461:	038457        	extui	a4, a3, 24, 8
  90b464:	242414        	s8i	a4, a2, 20
  90b467:	030457        	extui	a4, a3, 16, 8
  90b46a:	242415        	s8i	a4, a2, 21
  90b46d:	038447        	extui	a4, a3, 8, 8
  90b470:	242416        	s8i	a4, a2, 22
  90b473:	232417        	s8i	a3, a2, 23
  90b476:	60003e        	j	90b4b8 <ar5416FillTxDesc_20+0x118>
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b479:	146a2d        	l32r	a4, 8e5d30 <vdesc_module_install+0xd20>
                ads->ds_ctl0 = 0;
  90b47c:	252408        	s8i	a5, a2, 8
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b47f:	043302        	or	a3, a3, a4
  90b482:	038457        	extui	a4, a3, 24, 8
  90b485:	24240c        	s8i	a4, a2, 12
  90b488:	030457        	extui	a4, a3, 16, 8
  90b48b:	24240d        	s8i	a4, a2, 13
  90b48e:	038447        	extui	a4, a3, 8, 8
                ads->ds_ctl0 = 0;
  90b491:	252409        	s8i	a5, a2, 9
  90b494:	25240a        	s8i	a5, a2, 10
  90b497:	25240b        	s8i	a5, a2, 11
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b49a:	24240e        	s8i	a4, a2, 14
  90b49d:	23240f        	s8i	a3, a2, 15
                ads->ds_ctl2 = 0;
  90b4a0:	252410        	s8i	a5, a2, 16
  90b4a3:	252411        	s8i	a5, a2, 17
  90b4a6:	252412        	s8i	a5, a2, 18
  90b4a9:	252413        	s8i	a5, a2, 19
                ads->ds_ctl3 = 0;
  90b4ac:	252414        	s8i	a5, a2, 20
  90b4af:	252415        	s8i	a5, a2, 21
  90b4b2:	252416        	s8i	a5, a2, 22
  90b4b5:	252417        	s8i	a5, a2, 23
        }
        ads->ds_txstatus0 = ads->ds_txstatus1 = 0;
  90b4b8:	c030      	movi.n	a3, 0
  90b4ba:	23243c        	s8i	a3, a2, 60
  90b4bd:	23243d        	s8i	a3, a2, 61
  90b4c0:	23243e        	s8i	a3, a2, 62
  90b4c3:	23243f        	s8i	a3, a2, 63
  90b4c6:	232438        	s8i	a3, a2, 56
  90b4c9:	232439        	s8i	a3, a2, 57
  90b4cc:	23243a        	s8i	a3, a2, 58
  90b4cf:	23243b        	s8i	a3, a2, 59

        return AH_TRUE;
}
  90b4d2:	c021      	movi.n	a2, 1
  90b4d4:	d10f      	retw.n
	...

0090b4d8 <ar5416FillKeyTxDesc_20>:

HAL_BOOL ar5416FillKeyTxDesc_20(struct ath_tx_desc *ds,
				HAL_KEY_TYPE keyType)
{
  90b4d8:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b4db:	186a5d        	l32r	a8, 8e5e50 <vdesc_module_install+0xe40>
  90b4de:	063310        	slli	a3, a3, 26
  90b4e1:	083301        	and	a3, a3, a8
  90b4e4:	038357        	extui	a3, a3, 24, 8
  90b4e7:	232420        	s8i	a3, a2, 32
  90b4ea:	c030      	movi.n	a3, 0
  90b4ec:	232421        	s8i	a3, a2, 33
  90b4ef:	232422        	s8i	a3, a2, 34
  90b4f2:	232423        	s8i	a3, a2, 35
	return AH_TRUE;
}
  90b4f5:	c021      	movi.n	a2, 1
  90b4f7:	d10f      	retw.n
  90b4f9:	000000        	ill

0090b4fc <ar5416ProcTxDesc_20>:

HAL_STATUS ar5416ProcTxDesc_20(struct ath_hal *ah, struct ath_tx_desc *gds)
{
  90b4fc:	6c1004        	entry	a1, 32
        struct ar5416_desc *ads = AR5416DESC(gds);
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;

        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
  90b4ff:	28305c        	l8ui	a8, a3, 92
  90b502:	088910        	slli	a9, a8, 24
  90b505:	28305d        	l8ui	a8, a3, 93
  90b508:	008811        	slli	a8, a8, 16
  90b50b:	098802        	or	a8, a8, a9
  90b50e:	29305e        	l8ui	a9, a3, 94
  90b511:	089911        	slli	a9, a9, 8
  90b514:	089802        	or	a8, a9, a8
  90b517:	29305f        	l8ui	a9, a3, 95
  90b51a:	089902        	or	a9, a9, a8
                return HAL_EINPROGRESS;
  90b51d:	c08f      	movi.n	a8, 15
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
  90b51f:	7f9f02        	bbsi	a9, 31, 90b525 <ar5416ProcTxDesc_20+0x29>
  90b522:	60027a        	j	90b7a0 <ar5416ProcTxDesc_20+0x2a4>

        ads->ds_txstatus9 &= ~AR_TxDone;
  90b525:	c78e      	movi.n	a8, -2
  90b527:	089801        	and	a8, a9, a8
  90b52a:	088a57        	extui	a10, a8, 24, 8
  90b52d:	2a345c        	s8i	a10, a3, 92
  90b530:	080a57        	extui	a10, a8, 16, 8
  90b533:	2a345d        	s8i	a10, a3, 93
  90b536:	28345f        	s8i	a8, a3, 95
  90b539:	088a47        	extui	a10, a8, 8, 8

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90b53c:	08184b        	extui	a8, a8, 1, 12
        ads->ds_txstatus9 &= ~AR_TxDone;
  90b53f:	2a345e        	s8i	a10, a3, 94
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90b542:	088a14        	srli	a10, a8, 8
  90b545:	2a3464        	s8i	a10, a3, 100
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90b548:	2a3040        	l8ui	a10, a3, 64
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90b54b:	283465        	s8i	a8, a3, 101
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90b54e:	08a810        	slli	a8, a10, 24
  90b551:	2a3041        	l8ui	a10, a3, 65
        ads->ds_txstatus9 &= ~AR_TxDone;
  90b554:	c0b0      	movi.n	a11, 0
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90b556:	00aa11        	slli	a10, a10, 16
  90b559:	08aa02        	or	a10, a10, a8
  90b55c:	283042        	l8ui	a8, a3, 66
        ds->ds_txstat.ts_status = 0;
  90b55f:	2b3466        	s8i	a11, a3, 102
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90b562:	088811        	slli	a8, a8, 8
  90b565:	0a8a02        	or	a10, a8, a10
  90b568:	283043        	l8ui	a8, a3, 67
        ds->ds_txstat.ts_flags  = 0;
  90b56b:	2b3467        	s8i	a11, a3, 103
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90b56e:	0a8802        	or	a8, a8, a10
  90b571:	088a57        	extui	a10, a8, 24, 8
  90b574:	2a3460        	s8i	a10, a3, 96
  90b577:	080a57        	extui	a10, a8, 16, 8
  90b57a:	2a3461        	s8i	a10, a3, 97
  90b57d:	088a47        	extui	a10, a8, 8, 8
  90b580:	2a3462        	s8i	a10, a3, 98
  90b583:	283463        	s8i	a8, a3, 99

        if (ads->ds_txstatus1 & AR_ExcessiveRetries)
  90b586:	2a303c        	l8ui	a10, a3, 60
  90b589:	28303d        	l8ui	a8, a3, 61
  90b58c:	08aa10        	slli	a10, a10, 24
  90b58f:	008811        	slli	a8, a8, 16
  90b592:	0a8a02        	or	a10, a8, a10
  90b595:	28303e        	l8ui	a8, a3, 62
  90b598:	088811        	slli	a8, a8, 8
  90b59b:	0a8802        	or	a8, a8, a10
  90b59e:	2a303f        	l8ui	a10, a3, 63
  90b5a1:	08a802        	or	a8, a10, a8
  90b5a4:	7e8704        	bbci	a8, 30, 90b5ac <ar5416ProcTxDesc_20+0xb0>
                ds->ds_txstat.ts_status |= HAL_TXERR_XRETRY;
  90b5a7:	c0a1      	movi.n	a10, 1
  90b5a9:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus1 & AR_Filtered)
  90b5ac:	7c870a        	bbci	a8, 28, 90b5ba <ar5416ProcTxDesc_20+0xbe>
                ds->ds_txstat.ts_status |= HAL_TXERR_FILT;
  90b5af:	2a3066        	l8ui	a10, a3, 102
  90b5b2:	c0b2      	movi.n	a11, 2
  90b5b4:	0baa02        	or	a10, a10, a11
  90b5b7:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus1 & AR_FIFOUnderrun)
  90b5ba:	c0a4      	movi.n	a10, 4
  90b5bc:	7a8008        	bnone	a8, a10, 90b5c8 <ar5416ProcTxDesc_20+0xcc>
                ds->ds_txstat.ts_status |= HAL_TXERR_FIFO;
  90b5bf:	2b3066        	l8ui	a11, a3, 102
  90b5c2:	0baa02        	or	a10, a10, a11
  90b5c5:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus9 & AR_TxOpExceeded)
  90b5c8:	7e960a        	bbci	a9, 14, 90b5d6 <ar5416ProcTxDesc_20+0xda>
		ds->ds_txstat.ts_status |= HAL_TXERR_XTXOP;
  90b5cb:	293066        	l8ui	a9, a3, 102
  90b5ce:	c0a8      	movi.n	a10, 8
  90b5d0:	0a9902        	or	a9, a9, a10
  90b5d3:	293466        	s8i	a9, a3, 102
        if (ads->ds_txstatus1 & AR_TxTimerExpired)
  90b5d6:	7c860a        	bbci	a8, 12, 90b5e4 <ar5416ProcTxDesc_20+0xe8>
		ds->ds_txstat.ts_status |= HAL_TXERR_TIMER_EXPIRED;
  90b5d9:	293066        	l8ui	a9, a3, 102
  90b5dc:	c1a0      	movi.n	a10, 16
  90b5de:	0a9902        	or	a9, a9, a10
  90b5e1:	293466        	s8i	a9, a3, 102

        if (ads->ds_txstatus1 & AR_DescCfgErr)
  90b5e4:	7d8604        	bbci	a8, 13, 90b5ec <ar5416ProcTxDesc_20+0xf0>
		ds->ds_txstat.ts_flags |= HAL_TX_DESC_CFG_ERR;
  90b5e7:	c094      	movi.n	a9, 4
  90b5e9:	293467        	s8i	a9, a3, 103
        if (ads->ds_txstatus1 & AR_TxDataUnderrun) {
  90b5ec:	7e8611        	bbci	a8, 14, 90b601 <ar5416ProcTxDesc_20+0x105>
		ds->ds_txstat.ts_flags |= HAL_TX_DATA_UNDERRUN;
  90b5ef:	283067        	l8ui	a8, a3, 103
  90b5f2:	c098      	movi.n	a9, 8
  90b5f4:	098802        	or	a8, a8, a9
  90b5f7:	283467        	s8i	a8, a3, 103
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
  90b5fa:	c0b1      	movi.n	a11, 1
  90b5fc:	da20      	mov.n	a10, a2
  90b5fe:	5bfebe        	call8	90b0f8 <ar5416UpdateTxTrigLevel>
	}
        if (ads->ds_txstatus1 & AR_TxDelimUnderrun) {
  90b601:	28303d        	l8ui	a8, a3, 61
  90b604:	7f8711        	bbci	a8, 31, 90b619 <ar5416ProcTxDesc_20+0x11d>
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
  90b607:	283067        	l8ui	a8, a3, 103
  90b60a:	c190      	movi.n	a9, 16
  90b60c:	098802        	or	a8, a8, a9
  90b60f:	283467        	s8i	a8, a3, 103
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
  90b612:	c0b1      	movi.n	a11, 1
  90b614:	da20      	mov.n	a10, a2
  90b616:	5bfeb8        	call8	90b0f8 <ar5416UpdateTxTrigLevel>
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
  90b619:	293038        	l8ui	a9, a3, 56
  90b61c:	283039        	l8ui	a8, a3, 57
  90b61f:	089910        	slli	a9, a9, 24
  90b622:	008811        	slli	a8, a8, 16
  90b625:	098902        	or	a9, a8, a9
  90b628:	28303a        	l8ui	a8, a3, 58
  90b62b:	22303b        	l8ui	a2, a3, 59
  90b62e:	088811        	slli	a8, a8, 8
  90b631:	098802        	or	a8, a8, a9
  90b634:	082802        	or	a8, a2, a8
  90b637:	718671        	bbci	a8, 1, 90b6ac <ar5416ProcTxDesc_20+0x1b0>
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
  90b63a:	223067        	l8ui	a2, a3, 103
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90b63d:	2a3044        	l8ui	a10, a3, 68
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
  90b640:	290a01        	movi	a9, 1
  90b643:	092202        	or	a2, a2, a9
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90b646:	08a910        	slli	a9, a10, 24
  90b649:	2a3045        	l8ui	a10, a3, 69
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
  90b64c:	223467        	s8i	a2, a3, 103
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90b64f:	00aa11        	slli	a10, a10, 16
  90b652:	09aa02        	or	a10, a10, a9
  90b655:	293046        	l8ui	a9, a3, 70
  90b658:	089911        	slli	a9, a9, 8
  90b65b:	0a9a02        	or	a10, a9, a10
  90b65e:	293047        	l8ui	a9, a3, 71
  90b661:	0a9902        	or	a9, a9, a10
  90b664:	098257        	extui	a2, a9, 24, 8
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90b667:	2a3048        	l8ui	a10, a3, 72
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90b66a:	223474        	s8i	a2, a3, 116
  90b66d:	090257        	extui	a2, a9, 16, 8
  90b670:	223475        	s8i	a2, a3, 117
  90b673:	293477        	s8i	a9, a3, 119
  90b676:	098247        	extui	a2, a9, 8, 8
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90b679:	08a910        	slli	a9, a10, 24
  90b67c:	2a3049        	l8ui	a10, a3, 73
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90b67f:	223476        	s8i	a2, a3, 118
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90b682:	00aa11        	slli	a10, a10, 16
  90b685:	09aa02        	or	a10, a10, a9
  90b688:	29304a        	l8ui	a9, a3, 74
  90b68b:	089911        	slli	a9, a9, 8
  90b68e:	0a9a02        	or	a10, a9, a10
  90b691:	29304b        	l8ui	a9, a3, 75
  90b694:	0a9902        	or	a9, a9, a10
  90b697:	098257        	extui	a2, a9, 24, 8
  90b69a:	223478        	s8i	a2, a3, 120
  90b69d:	090257        	extui	a2, a9, 16, 8
  90b6a0:	223479        	s8i	a2, a3, 121
  90b6a3:	098247        	extui	a2, a9, 8, 8
  90b6a6:	22347a        	s8i	a2, a3, 122
  90b6a9:	29347b        	s8i	a9, a3, 123
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined =
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90b6ac:	2a304c        	l8ui	a10, a3, 76
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  90b6af:	22305d        	l8ui	a2, a3, 93
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90b6b2:	08a910        	slli	a9, a10, 24
  90b6b5:	2a304d        	l8ui	a10, a3, 77
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  90b6b8:	025241        	extui	a2, a2, 5, 2
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90b6bb:	00aa11        	slli	a10, a10, 16
  90b6be:	09aa02        	or	a10, a10, a9
  90b6c1:	29304e        	l8ui	a9, a3, 78
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  90b6c4:	223468        	s8i	a2, a3, 104
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90b6c7:	089911        	slli	a9, a9, 8
  90b6ca:	0a9a02        	or	a10, a9, a10
  90b6cd:	29304f        	l8ui	a9, a3, 79
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
  90b6d0:	088214        	srli	a2, a8, 8
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90b6d3:	0a9902        	or	a9, a9, a10
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
  90b6d6:	28346a        	s8i	a8, a3, 106
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90b6d9:	08085f        	extui	a8, a8, 16, 16
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90b6dc:	098a57        	extui	a10, a9, 24, 8
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
  90b6df:	22346b        	s8i	a2, a3, 107
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90b6e2:	28346c        	s8i	a8, a3, 108
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
  90b6e5:	098214        	srli	a2, a9, 8
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
  90b6e8:	09085f        	extui	a8, a9, 16, 16
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
  90b6eb:	29346d        	s8i	a9, a3, 109
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90b6ee:	29347f        	s8i	a9, a3, 127
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90b6f1:	293050        	l8ui	a9, a3, 80
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
  90b6f4:	28346f        	s8i	a8, a3, 111
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90b6f7:	28347d        	s8i	a8, a3, 125
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90b6fa:	089810        	slli	a8, a9, 24
  90b6fd:	293051        	l8ui	a9, a3, 81
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
  90b700:	22346e        	s8i	a2, a3, 110
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90b703:	009911        	slli	a9, a9, 16
  90b706:	089902        	or	a9, a9, a8
  90b709:	283052        	l8ui	a8, a3, 82
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90b70c:	22347e        	s8i	a2, a3, 126
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90b70f:	088811        	slli	a8, a8, 8
  90b712:	098902        	or	a9, a8, a9
  90b715:	283053        	l8ui	a8, a3, 83
        ds->ds_txstat.ts_rssi_combined =
  90b718:	2a3469        	s8i	a10, a3, 105
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90b71b:	098802        	or	a8, a8, a9
  90b71e:	088257        	extui	a2, a8, 24, 8
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90b721:	293054        	l8ui	a9, a3, 84
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90b724:	223480        	s8i	a2, a3, 128
  90b727:	080257        	extui	a2, a8, 16, 8
  90b72a:	223481        	s8i	a2, a3, 129
  90b72d:	283483        	s8i	a8, a3, 131
  90b730:	088247        	extui	a2, a8, 8, 8
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90b733:	089810        	slli	a8, a9, 24
  90b736:	293055        	l8ui	a9, a3, 85
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90b739:	223482        	s8i	a2, a3, 130
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90b73c:	009911        	slli	a9, a9, 16
  90b73f:	089902        	or	a9, a9, a8
  90b742:	283056        	l8ui	a8, a3, 86
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90b745:	2a347c        	s8i	a10, a3, 124
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90b748:	088811        	slli	a8, a8, 8
  90b74b:	098902        	or	a9, a8, a9
  90b74e:	283057        	l8ui	a8, a3, 87
  90b751:	098802        	or	a8, a8, a9
  90b754:	088257        	extui	a2, a8, 24, 8
  90b757:	223484        	s8i	a2, a3, 132
  90b75a:	080257        	extui	a2, a8, 16, 8
  90b75d:	223485        	s8i	a2, a3, 133
  90b760:	088247        	extui	a2, a8, 8, 8
  90b763:	223486        	s8i	a2, a3, 134
  90b766:	283487        	s8i	a8, a3, 135
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
  90b769:	29303c        	l8ui	a9, a3, 60
  90b76c:	089810        	slli	a8, a9, 24
  90b76f:	29303d        	l8ui	a9, a3, 61
  90b772:	009911        	slli	a9, a9, 16
  90b775:	089902        	or	a9, a9, a8
  90b778:	28303e        	l8ui	a8, a3, 62
  90b77b:	088811        	slli	a8, a8, 8
  90b77e:	098902        	or	a9, a8, a9
  90b781:	28303f        	l8ui	a8, a3, 63
  90b784:	098802        	or	a8, a8, a9
  90b787:	084243        	extui	a2, a8, 4, 4
  90b78a:	223470        	s8i	a2, a3, 112
        ds->ds_txstat.ts_longretry = MS(ads->ds_txstatus1, AR_DataFailCnt);
  90b78d:	088243        	extui	a2, a8, 8, 4
  90b790:	223471        	s8i	a2, a3, 113
        ds->ds_txstat.ts_virtcol = MS(ads->ds_txstatus1, AR_VirtRetryCnt);
  90b793:	08c843        	extui	a8, a8, 12, 4
        ds->ds_txstat.ts_antenna = 0;		/* ignored for owl */
  90b796:	c020      	movi.n	a2, 0
        ds->ds_txstat.ts_virtcol = MS(ads->ds_txstatus1, AR_VirtRetryCnt);
  90b798:	283472        	s8i	a8, a3, 114
        ds->ds_txstat.ts_antenna = 0;		/* ignored for owl */
  90b79b:	223473        	s8i	a2, a3, 115

        return HAL_OK;
  90b79e:	c080      	movi.n	a8, 0
}
  90b7a0:	d280      	mov.n	a2, a8
  90b7a2:	d10f      	retw.n

0090b7a4 <ar5416Set11nTxDesc_20>:

void ar5416Set11nTxDesc_20(struct ath_tx_desc *ds,
			   a_uint32_t pktLen, HAL_PKT_TYPE type, a_uint32_t txPower,
			   a_uint32_t keyIx, HAL_KEY_TYPE keyType,
			   a_uint32_t flags)
{
  90b7a4:	6c1004        	entry	a1, 32
  90b7a7:	8818      	l32i.n	a8, a1, 32
  90b7a9:	c39f      	movi.n	a9, 63
  90b7ab:	095536        	minu	a5, a5, a9

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
  90b7ae:	2a1a00        	movi	a10, 0x100
        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b7b1:	03094b        	extui	a9, a3, 0, 12
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
  90b7b4:	136a2d        	l32r	a3, 8e6068 <vdesc_module_install+0x1058>
  90b7b7:	0a8a01        	and	a10, a8, a10
  90b7ba:	0a3a39        	movnez	a10, a3, a10
		| SM(txPower, AR_XmitPower)
  90b7bd:	136a60        	l32r	a3, 8e6140 <vdesc_module_install+0x1130>
  90b7c0:	005511        	slli	a5, a5, 16
  90b7c3:	035301        	and	a3, a5, a3
  90b7c6:	093302        	or	a3, a3, a9
		| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0)
  90b7c9:	156a58        	l32r	a5, 8e612c <vdesc_module_install+0x111c>
  90b7cc:	c094      	movi.n	a9, 4
  90b7ce:	098901        	and	a9, a8, a9
  90b7d1:	095939        	movnez	a9, a5, a9
		| SM(txPower, AR_XmitPower)
  90b7d4:	0a3302        	or	a3, a3, a10
		| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0)
  90b7d7:	039302        	or	a3, a9, a3
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b7da:	156a45        	l32r	a5, 8e60f0 <vdesc_module_install+0x10e0>
  90b7dd:	c290      	movi.n	a9, 32
  90b7df:	098901        	and	a9, a8, a9
  90b7e2:	095939        	movnez	a9, a5, a9
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b7e5:	1a6a55        	l32r	a10, 8e613c <vdesc_module_install+0x112c>
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b7e8:	039902        	or	a9, a9, a3
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b7eb:	080540        	extui	a5, a8, 0, 1
  90b7ee:	c030      	movi.n	a3, 0
  90b7f0:	053a38        	moveqz	a10, a3, a5
  90b7f3:	09a502        	or	a5, a10, a9
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
  90b7f6:	1a6a56        	l32r	a10, 8e6150 <vdesc_module_install+0x1140>
  90b7f9:	290a10        	movi	a9, 16
  90b7fc:	098901        	and	a9, a8, a9
  90b7ff:	09a939        	movnez	a9, a10, a9
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
  90b802:	1b6a5b        	l32r	a11, 8e6170 <vdesc_module_install+0x1160>
  90b805:	2a0aff        	movi	a10, 255
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
  90b808:	059902        	or	a9, a9, a5
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
  90b80b:	0a650c        	sub	a5, a6, a10
  90b80e:	053b38        	moveqz	a11, a3, a5
  90b811:	09b502        	or	a5, a11, a9
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);
  90b814:	290a08        	movi	a9, 8
  90b817:	1b6a57        	l32r	a11, 8e6174 <vdesc_module_install+0x1164>
  90b81a:	098901        	and	a9, a8, a9
  90b81d:	09b939        	movnez	a9, a11, a9
  90b820:	059902        	or	a9, a9, a5
        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b823:	098557        	extui	a5, a9, 24, 8
  90b826:	252408        	s8i	a5, a2, 8
  90b829:	090557        	extui	a5, a9, 16, 8
  90b82c:	252409        	s8i	a5, a2, 9
  90b82f:	098547        	extui	a5, a9, 8, 8
  90b832:	25240a        	s8i	a5, a2, 10
  90b835:	29240b        	s8i	a9, a2, 11

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b838:	7a6108        	beq	a6, a10, 90b844 <ar5416Set11nTxDesc_20+0xa0>
  90b83b:	136a5a        	l32r	a3, 8e61a4 <vdesc_module_install+0x1194>
  90b83e:	036611        	slli	a6, a6, 13
  90b841:	036301        	and	a3, a6, a3
		| SM(type, AR_FrameType)
  90b844:	166943        	l32r	a6, 8e5d50 <vdesc_module_install+0xd40>
  90b847:	0c4410        	slli	a4, a4, 20
  90b84a:	064401        	and	a4, a4, a6
  90b84d:	034402        	or	a4, a4, a3
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
  90b850:	156a55        	l32r	a5, 8e61a4 <vdesc_module_install+0x1194>
  90b853:	c032      	movi.n	a3, 2
  90b855:	038301        	and	a3, a8, a3
  90b858:	035339        	movnez	a3, a5, a3
  90b85b:	043402        	or	a4, a3, a4
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
  90b85e:	156a5e        	l32r	a5, 8e61d8 <vdesc_module_install+0x11c8>
  90b861:	c430      	movi.n	a3, 64
  90b863:	038301        	and	a3, a8, a3
  90b866:	035339        	movnez	a3, a5, a3
  90b869:	043302        	or	a3, a3, a4
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);
  90b86c:	240a80        	movi	a4, 128
  90b86f:	048801        	and	a8, a8, a4
  90b872:	146a5f        	l32r	a4, 8e61f0 <vdesc_module_install+0x11e0>

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b875:	067710        	slli	a7, a7, 26
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);
  90b878:	084839        	movnez	a8, a4, a8
  90b87b:	038802        	or	a8, a8, a3
        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b87e:	088357        	extui	a3, a8, 24, 8
  90b881:	23240c        	s8i	a3, a2, 12
  90b884:	080357        	extui	a3, a8, 16, 8
  90b887:	23240d        	s8i	a3, a2, 13
  90b88a:	088347        	extui	a3, a8, 8, 8
  90b88d:	23240e        	s8i	a3, a2, 14
        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b890:	136a5d        	l32r	a3, 8e6204 <vdesc_module_install+0x11f4>
        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b893:	28240f        	s8i	a8, a2, 15
        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b896:	037701        	and	a7, a7, a3
  90b899:	078757        	extui	a7, a7, 24, 8
  90b89c:	c030      	movi.n	a3, 0
  90b89e:	272420        	s8i	a7, a2, 32
  90b8a1:	232421        	s8i	a3, a2, 33
  90b8a4:	232422        	s8i	a3, a2, 34
  90b8a7:	232423        	s8i	a3, a2, 35
  90b8aa:	d10f      	retw.n

0090b8ac <ar5416Set11nRateScenario_20>:

void ar5416Set11nRateScenario_20(struct ath_tx_desc *ds,
				 a_uint32_t durUpdateEn, a_uint32_t rtsctsRate,
				 HAL_11N_RATE_SERIES series[], a_uint32_t nseries,
				 a_uint32_t flags)
{
  90b8ac:	6c1006        	entry	a1, 48
  90b8af:	9412      	s32i.n	a4, a1, 8
	(void)nseries;

	/*
	* Rate control settings override
	*/
	ds_ctl0 = ads->ds_ctl0;
  90b8b1:	242008        	l8ui	a4, a2, 8

	if (flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA)) {
  90b8b4:	c08c      	movi.n	a8, 12
	ds_ctl0 = ads->ds_ctl0;
  90b8b6:	084610        	slli	a6, a4, 24
  90b8b9:	242009        	l8ui	a4, a2, 9
  90b8bc:	004411        	slli	a4, a4, 16
  90b8bf:	064402        	or	a4, a4, a6
  90b8c2:	26200a        	l8ui	a6, a2, 10
  90b8c5:	086611        	slli	a6, a6, 8
  90b8c8:	046402        	or	a4, a6, a4
  90b8cb:	26200b        	l8ui	a6, a2, 11
  90b8ce:	046602        	or	a6, a6, a4
			ds_ctl0 |= AR_CTSEnable;
		}
	} else {
		/* this line is only difference between merlin and k2
		 * Current one is for merlin */
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
  90b8d1:	146a63        	l32r	a4, 8e6260 <vdesc_module_install+0x1250>
  90b8d4:	046401        	and	a4, a6, a4
	if (flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA)) {
  90b8d7:	78701a        	bnone	a7, a8, 90b8f5 <ar5416Set11nRateScenario_20+0x49>
		if (flags & HAL_TXDESC_RTSENA) {
  90b8da:	7d770b        	bbci	a7, 29, 90b8e9 <ar5416Set11nRateScenario_20+0x3d>
			ds_ctl0 &= ~AR_CTSEnable;
  90b8dd:	146a50        	l32r	a4, 8e6220 <vdesc_module_install+0x1210>
  90b8e0:	046601        	and	a6, a6, a4
			ds_ctl0 |= AR_RTSEnable;
  90b8e3:	146a58        	l32r	a4, 8e6244 <vdesc_module_install+0x1234>
  90b8e6:	600008        	j	90b8f2 <ar5416Set11nRateScenario_20+0x46>
			ds_ctl0 &= ~AR_RTSEnable;
  90b8e9:	146a62        	l32r	a4, 8e6274 <vdesc_module_install+0x1264>
  90b8ec:	046601        	and	a6, a6, a4
			ds_ctl0 |= AR_CTSEnable;
  90b8ef:	146a57        	l32r	a4, 8e624c <vdesc_module_install+0x123c>
  90b8f2:	046402        	or	a4, a6, a4
	}

	ads->ds_ctl0 = ds_ctl0;
  90b8f5:	048657        	extui	a6, a4, 24, 8
  90b8f8:	262408        	s8i	a6, a2, 8
  90b8fb:	040657        	extui	a6, a4, 16, 8
  90b8fe:	262409        	s8i	a6, a2, 9
  90b901:	24240b        	s8i	a4, a2, 11
  90b904:	048647        	extui	a6, a4, 8, 8

	ads->ds_ctl2 = set11nTries(series, 0)
  90b907:	8450      	l32i.n	a4, a5, 0
	ads->ds_ctl0 = ds_ctl0;
  90b909:	26240a        	s8i	a6, a2, 10
	ads->ds_ctl2 = set11nTries(series, 0)
  90b90c:	166a59        	l32r	a6, 8e6270 <vdesc_module_install+0x1260>
  90b90f:	004411        	slli	a4, a4, 16
  90b912:	064401        	and	a4, a4, a6
				   | set11nTries(series, 1)
  90b915:	8657      	l32i.n	a6, a5, 28
  90b917:	176943        	l32r	a7, 8e5e24 <vdesc_module_install+0xe14>
  90b91a:	0c6610        	slli	a6, a6, 20
  90b91d:	076601        	and	a6, a6, a7
  90b920:	064402        	or	a4, a4, a6
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
  90b923:	265215        	l32i	a6, a5, 84
				   | set11nTries(series, 2)
  90b926:	176a64        	l32r	a7, 8e62b8 <vdesc_module_install+0x12a8>
				   | set11nTries(series, 3)
  90b929:	046610        	slli	a6, a6, 28
  90b92c:	064402        	or	a4, a4, a6
				   | set11nTries(series, 2)
  90b92f:	865e      	l32i.n	a6, a5, 56
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b931:	c0c0      	movi.n	a12, 0
				   | set11nTries(series, 2)
  90b933:	086610        	slli	a6, a6, 24
  90b936:	076601        	and	a6, a6, a7
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  90b939:	1769cf        	l32r	a7, 8e6078 <vdesc_module_install+0x1068>
				   | set11nTries(series, 3)
  90b93c:	064402        	or	a4, a4, a6
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  90b93f:	037339        	movnez	a3, a7, a3
  90b942:	043302        	or	a3, a3, a4
	ads->ds_ctl2 = set11nTries(series, 0)
  90b945:	038457        	extui	a4, a3, 24, 8
  90b948:	242410        	s8i	a4, a2, 16
  90b94b:	030457        	extui	a4, a3, 16, 8
  90b94e:	242411        	s8i	a4, a2, 17
  90b951:	038447        	extui	a4, a3, 8, 8
  90b954:	242412        	s8i	a4, a2, 18
  90b957:	232413        	s8i	a3, a2, 19
				   | set11nRate(series, 3);
  90b95a:	245216        	l32i	a4, a5, 88
	ads->ds_ctl3 = set11nRate(series, 0)
  90b95d:	235007        	l8ui	a3, a5, 7
				   | set11nRate(series, 3);
  90b960:	084410        	slli	a4, a4, 24
  90b963:	043302        	or	a3, a3, a4
				   | set11nRate(series, 1)
  90b966:	8458      	l32i.n	a4, a5, 32
				   | set11nRate(series, 2)
  90b968:	166a65        	l32r	a6, 8e62fc <vdesc_module_install+0x12ec>
				   | set11nRate(series, 1)
  90b96b:	084411        	slli	a4, a4, 8
  90b96e:	04044f        	extui	a4, a4, 0, 16
				   | set11nRate(series, 3);
  90b971:	043302        	or	a3, a3, a4
				   | set11nRate(series, 2)
  90b974:	845f      	l32i.n	a4, a5, 60
				   | set11nPktDurRTSCTS(series, 1);
  90b976:	1b6a66        	l32r	a11, 8e6310 <vdesc_module_install+0x1300>
				   | set11nRate(series, 2)
  90b979:	004411        	slli	a4, a4, 16
  90b97c:	064401        	and	a4, a4, a6
				   | set11nRate(series, 3);
  90b97f:	043302        	or	a3, a3, a4
	ads->ds_ctl3 = set11nRate(series, 0)
  90b982:	038457        	extui	a4, a3, 24, 8
  90b985:	242414        	s8i	a4, a2, 20
  90b988:	030457        	extui	a4, a3, 16, 8
  90b98b:	242415        	s8i	a4, a2, 21
  90b98e:	038447        	extui	a4, a3, 8, 8
  90b991:	242416        	s8i	a4, a2, 22
  90b994:	232417        	s8i	a3, a2, 23
	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b997:	8354      	l32i.n	a3, a5, 16
  90b999:	8652      	l32i.n	a6, a5, 8
  90b99b:	030440        	extui	a4, a3, 0, 1
  90b99e:	06084e        	extui	a8, a6, 0, 15
  90b9a1:	d670      	mov.n	a6, a7
  90b9a3:	04c638        	moveqz	a6, a12, a4
  90b9a6:	d460      	mov.n	a4, a6
				   | set11nPktDurRTSCTS(series, 1);
  90b9a8:	8659      	l32i.n	a6, a5, 36
  90b9aa:	8a5b      	l32i.n	a10, a5, 44
  90b9ac:	006611        	slli	a6, a6, 16
  90b9af:	0b6601        	and	a6, a6, a11
  90b9b2:	196a57        	l32r	a9, 8e6310 <vdesc_module_install+0x1300>
  90b9b5:	086602        	or	a6, a6, a8
  90b9b8:	0a0840        	extui	a8, a10, 0, 1
  90b9bb:	08c938        	moveqz	a9, a12, a8
  90b9be:	064402        	or	a4, a4, a6
  90b9c1:	094402        	or	a4, a4, a9
	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b9c4:	048657        	extui	a6, a4, 24, 8
  90b9c7:	262418        	s8i	a6, a2, 24
  90b9ca:	040657        	extui	a6, a4, 16, 8
  90b9cd:	262419        	s8i	a6, a2, 25
  90b9d0:	048647        	extui	a6, a4, 8, 8
  90b9d3:	26241a        	s8i	a6, a2, 26
  90b9d6:	24241b        	s8i	a4, a2, 27

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b9d9:	285210        	l32i	a8, a5, 64
  90b9dc:	295212        	l32i	a9, a5, 72
  90b9df:	08044e        	extui	a4, a8, 0, 15
				   | set11nPktDurRTSCTS(series, 3);
  90b9e2:	285217        	l32i	a8, a5, 92
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b9e5:	090640        	extui	a6, a9, 0, 1
				   | set11nPktDurRTSCTS(series, 3);
  90b9e8:	008811        	slli	a8, a8, 16
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b9eb:	dd70      	mov.n	a13, a7
				   | set11nPktDurRTSCTS(series, 3);
  90b9ed:	0b8801        	and	a8, a8, a11
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b9f0:	06cd38        	moveqz	a13, a12, a6
  90b9f3:	048802        	or	a8, a8, a4
				   | set11nPktDurRTSCTS(series, 3);
  90b9f6:	245219        	l32i	a4, a5, 100
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b9f9:	d6d0      	mov.n	a6, a13
				   | set11nPktDurRTSCTS(series, 3);
  90b9fb:	1d6a57        	l32r	a13, 8e6358 <_xtos_set_exception_handler+0x10>
  90b9fe:	040b40        	extui	a11, a4, 0, 1
  90ba01:	0bcd38        	moveqz	a13, a12, a11
  90ba04:	086602        	or	a6, a6, a8
  90ba07:	0d6602        	or	a6, a6, a13
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90ba0a:	068857        	extui	a8, a6, 24, 8
  90ba0d:	28241c        	s8i	a8, a2, 28
  90ba10:	060857        	extui	a8, a6, 16, 8
  90ba13:	28241d        	s8i	a8, a2, 29
  90ba16:	26241f        	s8i	a6, a2, 31
  90ba19:	068847        	extui	a8, a6, 8, 8

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90ba1c:	032640        	extui	a6, a3, 2, 1
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90ba1f:	28241e        	s8i	a8, a2, 30
	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90ba22:	0f6611        	slli	a6, a6, 1
  90ba25:	031840        	extui	a8, a3, 1, 1
  90ba28:	086602        	or	a6, a6, a8
  90ba2b:	1d6a5f        	l32r	a13, 8e63a8 <_xtos_set_exception_handler+0x60>
  90ba2e:	c088      	movi.n	a8, 8
  90ba30:	083301        	and	a3, a3, a8
  90ba33:	03cd38        	moveqz	a13, a12, a3
  90ba36:	06d602        	or	a6, a13, a6
  90ba39:	9610      	s32i.n	a6, a1, 0
  90ba3b:	8653      	l32i.n	a6, a5, 12
				   | set11nRateFlags(series, 1)
  90ba3d:	c0c2      	movi.n	a12, 2
	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90ba3f:	c13c      	movi.n	a3, 28
  90ba41:	0e6611        	slli	a6, a6, 2
  90ba44:	036601        	and	a6, a6, a3
				   | set11nRateFlags(series, 1)
  90ba47:	c0b4      	movi.n	a11, 4
  90ba49:	0ca301        	and	a3, a10, a12
  90ba4c:	c2d0      	movi.n	a13, 32
  90ba4e:	0baf01        	and	a15, a10, a11
  90ba51:	03d339        	movnez	a3, a13, a3
  90ba54:	c4d0      	movi.n	a13, 64
  90ba56:	0fdf39        	movnez	a15, a13, a15
  90ba59:	1d6a56        	l32r	a13, 8e63b4 <_xtos_set_exception_handler+0x6c>
  90ba5c:	08aa01        	and	a10, a10, a8
  90ba5f:	0ada39        	movnez	a10, a13, a10
  90ba62:	8d5a      	l32i.n	a13, a5, 40
  90ba64:	2e3a80        	movi	a14, 0x380
  90ba67:	09dd11        	slli	a13, a13, 7
  90ba6a:	0edd01        	and	a13, a13, a14
  90ba6d:	06dd02        	or	a13, a13, a6
				   | set11nRateFlags(series, 2)
  90ba70:	0c9e01        	and	a14, a9, a12
  90ba73:	264a00        	movi	a6, 0x400
  90ba76:	0e6e39        	movnez	a14, a6, a14
  90ba79:	166a61        	l32r	a6, 8e6400 <_xtos_set_exception_handler+0xb8>
  90ba7c:	9d11      	s32i.n	a13, a1, 4
  90ba7e:	0b9d01        	and	a13, a9, a11
  90ba81:	0d6d39        	movnez	a13, a6, a13
  90ba84:	166a5b        	l32r	a6, 8e63f0 <_xtos_set_exception_handler+0xa8>
  90ba87:	089901        	and	a9, a9, a8
  90ba8a:	096939        	movnez	a9, a6, a9
  90ba8d:	265211        	l32i	a6, a5, 68
  90ba90:	1b6a67        	l32r	a11, 8e642c <_xtos_set_exception_handler+0xe4>
  90ba93:	046611        	slli	a6, a6, 12
  90ba96:	0b6601        	and	a6, a6, a11
				   | set11nRateFlags(series, 3)
  90ba99:	0c4c01        	and	a12, a4, a12
				   | set11nRateFlags(series, 2)
  90ba9c:	9613      	s32i.n	a6, a1, 12
				   | set11nRateFlags(series, 3)
  90ba9e:	0c7c39        	movnez	a12, a7, a12
  90baa1:	c064      	movi.n	a6, 4
  90baa3:	1768f2        	l32r	a7, 8e5e6c <vdesc_module_install+0xe5c>
  90baa6:	064b01        	and	a11, a4, a6
  90baa9:	084801        	and	a8, a4, a8
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90baac:	8612      	l32i.n	a6, a1, 8
				   | set11nRateFlags(series, 3)
  90baae:	146a57        	l32r	a4, 8e640c <_xtos_set_exception_handler+0xc4>
  90bab1:	0b7b39        	movnez	a11, a7, a11
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90bab4:	176a68        	l32r	a7, 8e6454 <_xtos_set_exception_handler+0x10c>
				   | set11nRateFlags(series, 3)
  90bab7:	084839        	movnez	a8, a4, a8
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90baba:	0c6410        	slli	a4, a6, 20
  90babd:	8611      	l32i.n	a6, a1, 4
  90babf:	074401        	and	a4, a4, a7
  90bac2:	064402        	or	a4, a4, a6
  90bac5:	8613      	l32i.n	a6, a1, 12
  90bac7:	064702        	or	a7, a4, a6
				   | set11nRateFlags(series, 3)
  90baca:	245218        	l32i	a4, a5, 96
  90bacd:	156a69        	l32r	a5, 8e6474 <_xtos_set_exception_handler+0x12c>
  90bad0:	0f4410        	slli	a4, a4, 17
  90bad3:	054401        	and	a4, a4, a5
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90bad6:	047602        	or	a6, a7, a4
  90bad9:	8410      	l32i.n	a4, a1, 0
  90badb:	046602        	or	a6, a6, a4
  90bade:	036302        	or	a3, a6, a3
  90bae1:	0f3f02        	or	a15, a3, a15
  90bae4:	0afa02        	or	a10, a15, a10
  90bae7:	0eae02        	or	a14, a10, a14
  90baea:	0ded02        	or	a13, a14, a13
  90baed:	09d902        	or	a9, a13, a9
  90baf0:	0c9c02        	or	a12, a9, a12
  90baf3:	0bcb02        	or	a11, a12, a11
  90baf6:	08b802        	or	a8, a11, a8
	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90baf9:	088357        	extui	a3, a8, 24, 8
  90bafc:	232424        	s8i	a3, a2, 36
  90baff:	080357        	extui	a3, a8, 16, 8
  90bb02:	232425        	s8i	a3, a2, 37
  90bb05:	088347        	extui	a3, a8, 8, 8
  90bb08:	232426        	s8i	a3, a2, 38
  90bb0b:	282427        	s8i	a8, a2, 39
  90bb0e:	d10f      	retw.n

0090bb10 <ar5416Set11nAggrFirst_20>:
}

void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
  90bb10:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90bb13:	29200c        	l8ui	a9, a2, 12

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
		SM(numDelims, AR_PadDelim);
  90bb16:	0e4410        	slli	a4, a4, 18
	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90bb19:	089810        	slli	a8, a9, 24
  90bb1c:	29200d        	l8ui	a9, a2, 13
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90bb1f:	03034f        	extui	a3, a3, 0, 16
	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90bb22:	009911        	slli	a9, a9, 16
  90bb25:	089902        	or	a9, a9, a8
  90bb28:	28200e        	l8ui	a8, a2, 14
  90bb2b:	088811        	slli	a8, a8, 8
  90bb2e:	098902        	or	a9, a8, a9
  90bb31:	28200f        	l8ui	a8, a2, 15
  90bb34:	098802        	or	a8, a8, a9
  90bb37:	196a6a        	l32r	a9, 8e64e0 <_xtos_set_exception_handler+0x198>
  90bb3a:	098802        	or	a8, a8, a9
  90bb3d:	088957        	extui	a9, a8, 24, 8
  90bb40:	29240c        	s8i	a9, a2, 12
  90bb43:	080957        	extui	a9, a8, 16, 8
  90bb46:	29240d        	s8i	a9, a2, 13
  90bb49:	28240f        	s8i	a8, a2, 15
  90bb4c:	088947        	extui	a9, a8, 8, 8
		SM(numDelims, AR_PadDelim);
  90bb4f:	186a6b        	l32r	a8, 8e64fc <_xtos_set_exception_handler+0x1b4>
	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90bb52:	29240e        	s8i	a9, a2, 14
		SM(numDelims, AR_PadDelim);
  90bb55:	084401        	and	a4, a4, a8
	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90bb58:	282020        	l8ui	a8, a2, 32
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90bb5b:	034402        	or	a4, a4, a3
	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90bb5e:	088310        	slli	a3, a8, 24
  90bb61:	282021        	l8ui	a8, a2, 33
  90bb64:	008811        	slli	a8, a8, 16
  90bb67:	038802        	or	a8, a8, a3
  90bb6a:	232022        	l8ui	a3, a2, 34
  90bb6d:	083311        	slli	a3, a3, 8
  90bb70:	083802        	or	a8, a3, a8
  90bb73:	232023        	l8ui	a3, a2, 35
  90bb76:	083302        	or	a3, a3, a8
  90bb79:	186a6c        	l32r	a8, 8e652c <_xtos_set_exception_handler+0x1e4>
  90bb7c:	083301        	and	a3, a3, a8
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90bb7f:	034302        	or	a3, a4, a3
  90bb82:	038457        	extui	a4, a3, 24, 8
  90bb85:	242420        	s8i	a4, a2, 32
  90bb88:	030457        	extui	a4, a3, 16, 8
  90bb8b:	242421        	s8i	a4, a2, 33
  90bb8e:	038447        	extui	a4, a3, 8, 8
  90bb91:	242422        	s8i	a4, a2, 34
  90bb94:	232423        	s8i	a3, a2, 35
  90bb97:	d10f      	retw.n
  90bb99:	000000        	ill

0090bb9c <ar5416Set11nAggrMiddle_20>:
}

void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
  90bb9c:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90bb9f:	29200c        	l8ui	a9, a2, 12
	 * We use a stack variable to manipulate ctl6 to reduce uncached
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
	ctl6 &= ~AR_PadDelim;
	ctl6 |= SM(numDelims, AR_PadDelim);
  90bba2:	0e3310        	slli	a3, a3, 18
	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90bba5:	089810        	slli	a8, a9, 24
  90bba8:	29200d        	l8ui	a9, a2, 13
  90bbab:	009911        	slli	a9, a9, 16
  90bbae:	089902        	or	a9, a9, a8
  90bbb1:	28200e        	l8ui	a8, a2, 14
  90bbb4:	088811        	slli	a8, a8, 8
  90bbb7:	098902        	or	a9, a8, a9
  90bbba:	28200f        	l8ui	a8, a2, 15
  90bbbd:	098802        	or	a8, a8, a9
  90bbc0:	196a6a        	l32r	a9, 8e6568 <strcmp+0x8>
  90bbc3:	098802        	or	a8, a8, a9
  90bbc6:	088957        	extui	a9, a8, 24, 8
  90bbc9:	29240c        	s8i	a9, a2, 12
  90bbcc:	080957        	extui	a9, a8, 16, 8
  90bbcf:	29240d        	s8i	a9, a2, 13
  90bbd2:	088947        	extui	a9, a8, 8, 8
  90bbd5:	29240e        	s8i	a9, a2, 14
	ctl6 = ads->ds_ctl6;
  90bbd8:	292020        	l8ui	a9, a2, 32
	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90bbdb:	28240f        	s8i	a8, a2, 15
	ctl6 = ads->ds_ctl6;
  90bbde:	089810        	slli	a8, a9, 24
  90bbe1:	292021        	l8ui	a9, a2, 33
  90bbe4:	009911        	slli	a9, a9, 16
  90bbe7:	089902        	or	a9, a9, a8
  90bbea:	282022        	l8ui	a8, a2, 34
  90bbed:	088811        	slli	a8, a8, 8
  90bbf0:	098902        	or	a9, a8, a9
  90bbf3:	282023        	l8ui	a8, a2, 35
  90bbf6:	098802        	or	a8, a8, a9
	ctl6 &= ~AR_PadDelim;
  90bbf9:	196a6d        	l32r	a9, 8e65b0 <strcmp+0x50>
  90bbfc:	098801        	and	a8, a8, a9
	ctl6 |= SM(numDelims, AR_PadDelim);
  90bbff:	196a6b        	l32r	a9, 8e65ac <strcmp+0x4c>
  90bc02:	093301        	and	a3, a3, a9
  90bc05:	083302        	or	a3, a3, a8
	ads->ds_ctl6 = ctl6;
  90bc08:	038857        	extui	a8, a3, 24, 8
  90bc0b:	282420        	s8i	a8, a2, 32
  90bc0e:	030857        	extui	a8, a3, 16, 8
  90bc11:	282421        	s8i	a8, a2, 33
  90bc14:	038847        	extui	a8, a3, 8, 8
  90bc17:	282422        	s8i	a8, a2, 34
  90bc1a:	232423        	s8i	a3, a2, 35
  90bc1d:	d10f      	retw.n
	...

0090bc20 <ar5416Set11nAggrLast_20>:
}

void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
  90bc20:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
  90bc23:	29200c        	l8ui	a9, a2, 12
  90bc26:	089810        	slli	a8, a9, 24
  90bc29:	29200d        	l8ui	a9, a2, 13
  90bc2c:	009911        	slli	a9, a9, 16
  90bc2f:	089902        	or	a9, a9, a8
  90bc32:	28200e        	l8ui	a8, a2, 14
  90bc35:	088811        	slli	a8, a8, 8
  90bc38:	098902        	or	a9, a8, a9
  90bc3b:	28200f        	l8ui	a8, a2, 15
  90bc3e:	098802        	or	a8, a8, a9
	ads->ds_ctl1 &= ~AR_MoreAggr;
  90bc41:	196a6e        	l32r	a9, 8e65fc <strcmp+0x9c>
  90bc44:	098801        	and	a8, a8, a9
  90bc47:	196a5b        	l32r	a9, 8e65b4 <strcmp+0x54>
  90bc4a:	098802        	or	a8, a8, a9
  90bc4d:	088957        	extui	a9, a8, 24, 8
  90bc50:	29240c        	s8i	a9, a2, 12
  90bc53:	080957        	extui	a9, a8, 16, 8
  90bc56:	29240d        	s8i	a9, a2, 13
  90bc59:	088947        	extui	a9, a8, 8, 8
  90bc5c:	29240e        	s8i	a9, a2, 14
  90bc5f:	28240f        	s8i	a8, a2, 15
	ads->ds_ctl6 &= ~AR_PadDelim;
  90bc62:	292020        	l8ui	a9, a2, 32
  90bc65:	282021        	l8ui	a8, a2, 33
  90bc68:	089910        	slli	a9, a9, 24
  90bc6b:	008811        	slli	a8, a8, 16
  90bc6e:	098902        	or	a9, a8, a9
  90bc71:	282022        	l8ui	a8, a2, 34
  90bc74:	088811        	slli	a8, a8, 8
  90bc77:	098802        	or	a8, a8, a9
  90bc7a:	292023        	l8ui	a9, a2, 35
  90bc7d:	089902        	or	a9, a9, a8
  90bc80:	186a6d        	l32r	a8, 8e6634 <strcmp+0xd4>
  90bc83:	292423        	s8i	a9, a2, 35
  90bc86:	089801        	and	a8, a9, a8
  90bc89:	088a57        	extui	a10, a8, 24, 8
  90bc8c:	2a2420        	s8i	a10, a2, 32
  90bc8f:	080a57        	extui	a10, a8, 16, 8
  90bc92:	088847        	extui	a8, a8, 8, 8
  90bc95:	2a2421        	s8i	a10, a2, 33
  90bc98:	282422        	s8i	a8, a2, 34
  90bc9b:	d10f      	retw.n
  90bc9d:	000000        	ill

0090bca0 <ar5416Clr11nAggr_20>:
}

void ar5416Clr11nAggr_20(struct ath_tx_desc *ds)
{
  90bca0:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 &= (~AR_IsAggr & ~AR_MoreAggr);
  90bca3:	29200c        	l8ui	a9, a2, 12
  90bca6:	28200d        	l8ui	a8, a2, 13
  90bca9:	089910        	slli	a9, a9, 24
  90bcac:	008811        	slli	a8, a8, 16
  90bcaf:	098902        	or	a9, a8, a9
  90bcb2:	28200e        	l8ui	a8, a2, 14
  90bcb5:	088811        	slli	a8, a8, 8
  90bcb8:	098802        	or	a8, a8, a9
  90bcbb:	29200f        	l8ui	a9, a2, 15
  90bcbe:	089902        	or	a9, a9, a8
  90bcc1:	186a6f        	l32r	a8, 8e6680 <strcmp+0x120>
  90bcc4:	29240f        	s8i	a9, a2, 15
  90bcc7:	089801        	and	a8, a9, a8
  90bcca:	088a57        	extui	a10, a8, 24, 8
  90bccd:	2a240c        	s8i	a10, a2, 12
  90bcd0:	080a57        	extui	a10, a8, 16, 8
  90bcd3:	088847        	extui	a8, a8, 8, 8
  90bcd6:	2a240d        	s8i	a10, a2, 13
  90bcd9:	28240e        	s8i	a8, a2, 14
  90bcdc:	d10f      	retw.n
	...

0090bce0 <ar5416Set11nBurstDuration_20>:
}

void ar5416Set11nBurstDuration_20(struct ath_tx_desc *ds,
				  a_uint32_t burstDuration)
{
  90bce0:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl2 &= ~AR_BurstDur;
  90bce3:	292010        	l8ui	a9, a2, 16
	ads->ds_ctl2 |= SM(burstDuration, AR_BurstDur);
  90bce6:	03034e        	extui	a3, a3, 0, 15
	ads->ds_ctl2 &= ~AR_BurstDur;
  90bce9:	089810        	slli	a8, a9, 24
  90bcec:	292011        	l8ui	a9, a2, 17
  90bcef:	009911        	slli	a9, a9, 16
  90bcf2:	089902        	or	a9, a9, a8
  90bcf5:	282012        	l8ui	a8, a2, 18
  90bcf8:	088811        	slli	a8, a8, 8
  90bcfb:	098902        	or	a9, a8, a9
  90bcfe:	282013        	l8ui	a8, a2, 19
  90bd01:	098802        	or	a8, a8, a9
  90bd04:	196a70        	l32r	a9, 8e66c4 <strcmp+0x164>
  90bd07:	098801        	and	a8, a8, a9
	ads->ds_ctl2 |= SM(burstDuration, AR_BurstDur);
  90bd0a:	038302        	or	a3, a8, a3
  90bd0d:	038857        	extui	a8, a3, 24, 8
  90bd10:	282410        	s8i	a8, a2, 16
  90bd13:	030857        	extui	a8, a3, 16, 8
  90bd16:	282411        	s8i	a8, a2, 17
  90bd19:	038847        	extui	a8, a3, 8, 8
  90bd1c:	282412        	s8i	a8, a2, 18
  90bd1f:	232413        	s8i	a3, a2, 19
  90bd22:	d10f      	retw.n

0090bd24 <ar5416Set11nVirtualMoreFrag_20>:
}

void ar5416Set11nVirtualMoreFrag_20(struct ath_tx_desc *ds,
				    a_uint32_t vmf)
{
  90bd24:	6c1004        	entry	a1, 32
  90bd27:	2b2008        	l8ui	a11, a2, 8
  90bd2a:	2a2009        	l8ui	a10, a2, 9
  90bd2d:	29200a        	l8ui	a9, a2, 10
  90bd30:	2c200b        	l8ui	a12, a2, 11
	struct ar5416_desc *ads = AR5416DESC(ds);

	if (vmf) {
  90bd33:	ca3d      	beqz.n	a3, 90bd64 <ar5416Set11nVirtualMoreFrag_20+0x40>
		ads->ds_ctl0 |= AR_VirtMoreFrag;
  90bd35:	08b810        	slli	a8, a11, 24
  90bd38:	00aa11        	slli	a10, a10, 16
  90bd3b:	08aa02        	or	a10, a10, a8
  90bd3e:	089811        	slli	a8, a9, 8
  90bd41:	0a8802        	or	a8, a8, a10
  90bd44:	196a2d        	l32r	a9, 8e65f8 <strcmp+0x98>
  90bd47:	08c802        	or	a8, a12, a8
  90bd4a:	098802        	or	a8, a8, a9
  90bd4d:	088957        	extui	a9, a8, 24, 8
  90bd50:	292408        	s8i	a9, a2, 8
  90bd53:	080957        	extui	a9, a8, 16, 8
  90bd56:	292409        	s8i	a9, a2, 9
  90bd59:	088947        	extui	a9, a8, 8, 8
  90bd5c:	29240a        	s8i	a9, a2, 10
  90bd5f:	28240b        	s8i	a8, a2, 11
  90bd62:	d10f      	retw.n
	} else {
		ads->ds_ctl0 &= ~AR_VirtMoreFrag;
  90bd64:	08bb10        	slli	a11, a11, 24
  90bd67:	00aa11        	slli	a10, a10, 16
  90bd6a:	0baa02        	or	a10, a10, a11
  90bd6d:	089911        	slli	a9, a9, 8
  90bd70:	0a9902        	or	a9, a9, a10
  90bd73:	1a6a71        	l32r	a10, 8e6738 <strcmp+0x1d8>
  90bd76:	09c902        	or	a9, a12, a9
  90bd79:	0a9a01        	and	a10, a9, a10
  90bd7c:	0a8857        	extui	a8, a10, 24, 8
  90bd7f:	282408        	s8i	a8, a2, 8
  90bd82:	0a0857        	extui	a8, a10, 16, 8
  90bd85:	0a8a47        	extui	a10, a10, 8, 8
  90bd88:	282409        	s8i	a8, a2, 9
  90bd8b:	2a240a        	s8i	a10, a2, 10
  90bd8e:	29240b        	s8i	a9, a2, 11
  90bd91:	d10f      	retw.n
	...

0090bd94 <ar5416Detach>:
{
  90bd94:	6c1004        	entry	a1, 32
	ath_hal_free(ah);
  90bd97:	da20      	mov.n	a10, a2
  90bd99:	5bef4a        	call8	907ac4 <ath_hal_free>
  90bd9c:	d10f      	retw.n
	...

0090bda0 <ar5416StopDmaReceive>:
{
  90bda0:	6c1004        	entry	a1, 32
	*(volatile uint32_t *) addr = b;
  90bda3:	186a4e        	l32r	a8, 8e66dc <strcmp+0x17c>
  90bda6:	c290      	movi.n	a9, 32
  90bda8:	0c0200        	memw
  90bdab:	9980      	s32i.n	a9, a8, 0
	if (!ath_hal_wait(ah, AR_CR, AR_CR_RXE, 0)) {
  90bdad:	c0d0      	movi.n	a13, 0
  90bdaf:	c0c4      	movi.n	a12, 4
  90bdb1:	c0b8      	movi.n	a11, 8
  90bdb3:	da20      	mov.n	a10, a2
  90bdb5:	5bfbf0        	call8	90ad78 <ath_hal_wait>
  90bdb8:	c081      	movi.n	a8, 1
  90bdba:	c020      	movi.n	a2, 0
  90bdbc:	0a8239        	movnez	a2, a8, a10
}
  90bdbf:	d10f      	retw.n
  90bdc1:	000000        	ill

0090bdc4 <ar5416AbortTxDma>:
{
  90bdc4:	6c1004        	entry	a1, 32
  90bdc7:	136a72        	l32r	a3, 8e6790 <strcmp+0x230>
  90bdca:	243aff        	movi	a4, 0x3ff
  90bdcd:	0c0200        	memw
  90bdd0:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint32_t *) addr;
  90bdd2:	146a73        	l32r	a4, 8e67a0 <strcmp+0x240>
	OS_REG_SET_BIT(ah, AR_PCU_MISC, (AR_PCU_FORCE_QUIET_COLL | AR_PCU_CLEAR_VMF));
  90bdd5:	156a74        	l32r	a5, 8e67a8 <strcmp+0x248>
  90bdd8:	0c0200        	memw
  90bddb:	8340      	l32i.n	a3, a4, 0
  90bddd:	053302        	or	a3, a3, a5
	*(volatile uint32_t *) addr = b;
  90bde0:	0c0200        	memw
  90bde3:	9340      	s32i.n	a3, a4, 0
	return *(const volatile uint32_t *) addr;
  90bde5:	146a4f        	l32r	a4, 8e6724 <strcmp+0x1c4>
	OS_REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
  90bde8:	156a58        	l32r	a5, 8e6748 <strcmp+0x1e8>
  90bdeb:	0c0200        	memw
  90bdee:	8340      	l32i.n	a3, a4, 0
  90bdf0:	053302        	or	a3, a3, a5
	*(volatile uint32_t *) addr = b;
  90bdf3:	0c0200        	memw
  90bdf6:	9340      	s32i.n	a3, a4, 0
	return *(const volatile uint32_t *) addr;
  90bdf8:	146a75        	l32r	a4, 8e67cc <strcmp+0x26c>
	OS_REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
  90bdfb:	156a5f        	l32r	a5, 8e6778 <strcmp+0x218>
  90bdfe:	0c0200        	memw
  90be01:	8340      	l32i.n	a3, a4, 0
  90be03:	053302        	or	a3, a3, a5
	*(volatile uint32_t *) addr = b;
  90be06:	0c0200        	memw
  90be09:	9340      	s32i.n	a3, a4, 0
			OS_DELAY(AR5416_ABORT_WAIT);
  90be0b:	c055      	movi.n	a5, 5
	for (q = 0; q < AR_NUM_QCU; q++) {
  90be0d:	c040      	movi.n	a4, 0
  90be0f:	600019        	j	90be2c <ar5416AbortTxDma+0x68>
			if (!ar5416NumTxPending(ah, q))
  90be12:	db40      	mov.n	a11, a4
  90be14:	da20      	mov.n	a10, a2
  90be16:	5bfcdc        	call8	90b188 <ar5416NumTxPending>
  90be19:	64a05b        	beqz	a10, 90be78 <ar5416AbortTxDma+0xb4>
			OS_DELAY(AR5416_ABORT_WAIT);
  90be1c:	da50      	mov.n	a10, a5
  90be1e:	233cff        	addi	a3, a3, -1
  90be21:	5bef1b        	call8	907a90 <ath_hal_delay>
		for (i = 0; i < AR5416_ABORT_LOOPS; i++) {
  90be24:	653fea        	bnez	a3, 90be12 <ar5416AbortTxDma+0x4e>
			return AH_FALSE;
  90be27:	d230      	mov.n	a2, a3
  90be29:	d10f      	retw.n
  90be2b:	00233a        	movltz	a3, a2, a0
{
  90be2e:	e8          	.byte 0xe8
  90be2f:	63ffdf        	j	90be12 <ar5416AbortTxDma+0x4e>
	return *(const volatile uint32_t *) addr;
  90be32:	136a73        	l32r	a3, 8e6800 <strcmp+0x2a0>
	OS_REG_CLR_BIT(ah, AR_PCU_MISC, (AR_PCU_FORCE_QUIET_COLL | AR_PCU_CLEAR_VMF));
  90be35:	146a76        	l32r	a4, 8e6810 <strcmp+0x2b0>
  90be38:	0c0200        	memw
  90be3b:	8230      	l32i.n	a2, a3, 0
  90be3d:	042201        	and	a2, a2, a4
	*(volatile uint32_t *) addr = b;
  90be40:	0c0200        	memw
  90be43:	9230      	s32i.n	a2, a3, 0
	return *(const volatile uint32_t *) addr;
  90be45:	136a4f        	l32r	a3, 8e6784 <strcmp+0x224>
	OS_REG_CLR_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
  90be48:	146a62        	l32r	a4, 8e67d0 <strcmp+0x270>
  90be4b:	0c0200        	memw
  90be4e:	8230      	l32i.n	a2, a3, 0
  90be50:	042201        	and	a2, a2, a4
	*(volatile uint32_t *) addr = b;
  90be53:	0c0200        	memw
  90be56:	9230      	s32i.n	a2, a3, 0
	return *(const volatile uint32_t *) addr;
  90be58:	136a75        	l32r	a3, 8e682c <strcmp+0x2cc>
	OS_REG_CLR_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
  90be5b:	146a77        	l32r	a4, 8e6838 <strcmp+0x2d8>
  90be5e:	0c0200        	memw
  90be61:	8230      	l32i.n	a2, a3, 0
  90be63:	042201        	and	a2, a2, a4
	*(volatile uint32_t *) addr = b;
  90be66:	0c0200        	memw
  90be69:	9230      	s32i.n	a2, a3, 0
  90be6b:	126a72        	l32r	a2, 8e6834 <strcmp+0x2d4>
  90be6e:	0c0200        	memw
  90be71:	9a20      	s32i.n	a10, a2, 0
	return AH_TRUE;
  90be73:	c021      	movi.n	a2, 1
  90be75:	d10f      	retw.n
  90be77:	00b144        	extui	a1, a0, 11, 5
	for (q = 0; q < AR_NUM_QCU; q++) {
  90be7a:	6949ae        	bnei	a4, 10, 90be2c <ar5416AbortTxDma+0x68>
  90be7d:	63ffb1        	j	90be32 <ar5416AbortTxDma+0x6e>

0090be80 <ar5416StopTxDma>:
{
  90be80:	6c1004        	entry	a1, 32
  90be83:	156a72        	l32r	a5, 8e684c <strcmp+0x2ec>
	iowrite32_mac(AR_Q_TXD, 1 << q);
  90be86:	c041      	movi.n	a4, 1
  90be88:	003104        	ssl	a3
  90be8b:	00441a        	sll	a4, a4
  90be8e:	0c0200        	memw
  90be91:	9450      	s32i.n	a4, a5, 0
        for (i = 1000; i != 0; i--) {
  90be93:	243ae8        	movi	a4, 0x3e8
                OS_DELAY(100);        /* XXX get actual value */
  90be96:	250a64        	movi	a5, 100
                if (ar5416NumTxPending(ah, q) == 0)
  90be99:	db30      	mov.n	a11, a3
  90be9b:	da20      	mov.n	a10, a2
  90be9d:	5bfcba        	call8	90b188 <ar5416NumTxPending>
  90bea0:	c8a8      	beqz.n	a10, 90beac <ar5416StopTxDma+0x2c>
                OS_DELAY(100);        /* XXX get actual value */
  90bea2:	da50      	mov.n	a10, a5
        for (i = 1000; i != 0; i--) {
  90bea4:	b044      	addi.n	a4, a4, -1
                OS_DELAY(100);        /* XXX get actual value */
  90bea6:	5beefa        	call8	907a90 <ath_hal_delay>
        for (i = 1000; i != 0; i--) {
  90bea9:	654fec        	bnez	a4, 90be99 <ar5416StopTxDma+0x19>
  90beac:	136a72        	l32r	a3, 8e6874 <strcmp+0x314>
  90beaf:	c020      	movi.n	a2, 0
  90beb1:	0c0200        	memw
  90beb4:	9230      	s32i.n	a2, a3, 0
        return (i != 0);
  90beb6:	c031      	movi.n	a3, 1
  90beb8:	043239        	movnez	a2, a3, a4
}
  90bebb:	d10f      	retw.n
  90bebd:	000000        	ill

0090bec0 <ar5416GetPendingInterrupts>:
{
  90bec0:	6c1004        	entry	a1, 32
	return *(const volatile uint32_t *) addr;
  90bec3:	186a41        	l32r	a8, 8e67c8 <strcmp+0x268>
  90bec6:	0c0200        	memw
  90bec9:	8880      	l32i.n	a8, a8, 0
	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
  90becb:	7e870d        	bbci	a8, 30, 90bedc <ar5416GetPendingInterrupts+0x1c>
  90bece:	186a78        	l32r	a8, 8e68b0 <strcmp+0x350>
  90bed1:	0c0200        	memw
  90bed4:	8880      	l32i.n	a8, a8, 0
				& AR_RTC_STATUS_M) != AR_RTC_STATUS_ON) {
  90bed6:	080843        	extui	a8, a8, 0, 4
		if ((ioread32_mac(AR_RTC_STATUS)
  90bed9:	688208        	beqi	a8, 2, 90bee5 <ar5416GetPendingInterrupts+0x25>
			*masked = 0;
  90bedc:	c020      	movi.n	a2, 0
  90bede:	9230      	s32i.n	a2, a3, 0
			return AH_FALSE;
  90bee0:	d10f      	retw.n
  90bee2:	000000        	ill
  90bee5:	186a79        	l32r	a8, 8e68cc <strcmp+0x36c>
  90bee8:	0c0200        	memw
  90beeb:	8980      	l32i.n	a9, a8, 0
	if (isr == 0xffffffff) {
  90beed:	6890eb        	beqi	a9, -1, 90bedc <ar5416GetPendingInterrupts+0x1c>
	*masked = isr & HAL_INT_COMMON;
  90bef0:	186a43        	l32r	a8, 8e67fc <strcmp+0x29c>
	if (isr & AR_ISR_BCNMISC) {
  90bef3:	1b6a45        	l32r	a11, 8e6808 <strcmp+0x2a8>
	*masked = isr & HAL_INT_COMMON;
  90bef6:	089801        	and	a8, a9, a8
  90bef9:	9830      	s32i.n	a8, a3, 0
	if (isr & AR_ISR_BCNMISC) {
  90befb:	7b901f        	bnone	a9, a11, 90bf1e <ar5416GetPendingInterrupts+0x5e>
  90befe:	1a6a7a        	l32r	a10, 8e68e8 <strcmp+0x388>
  90bf01:	0c0200        	memw
  90bf04:	8aa0      	l32i.n	a10, a10, 0
		if (s2_s & AR_ISR_S2_GTT) {
  90bf06:	7ba007        	bnone	a10, a11, 90bf11 <ar5416GetPendingInterrupts+0x51>
			*masked |= HAL_INT_GTT;
  90bf09:	1b6a56        	l32r	a11, 8e6864 <strcmp+0x304>
  90bf0c:	0b8802        	or	a8, a8, a11
  90bf0f:	9830      	s32i.n	a8, a3, 0
		if (s2_s & AR_ISR_S2_CST) {
  90bf11:	79a609        	bbci	a10, 9, 90bf1e <ar5416GetPendingInterrupts+0x5e>
			*masked |= HAL_INT_CST;
  90bf14:	8830      	l32i.n	a8, a3, 0
  90bf16:	1a69be        	l32r	a10, 8e6610 <strcmp+0xb0>
  90bf19:	0a8802        	or	a8, a8, a10
  90bf1c:	9830      	s32i.n	a8, a3, 0
	if (isr & (AR_ISR_RXOK | AR_ISR_RXERR))
  90bf1e:	c085      	movi.n	a8, 5
  90bf20:	789008        	bnone	a9, a8, 90bf2c <ar5416GetPendingInterrupts+0x6c>
		*masked |= HAL_INT_RX;
  90bf23:	8830      	l32i.n	a8, a3, 0
  90bf25:	c0a1      	movi.n	a10, 1
  90bf27:	0a8802        	or	a8, a8, a10
  90bf2a:	9830      	s32i.n	a8, a3, 0
	if (isr & (AR_ISR_TXOK | AR_ISR_TXDESC | AR_ISR_TXERR | AR_ISR_TXEOL)) {
  90bf2c:	285ac0        	movi	a8, 0x5c0
  90bf2f:	789035        	bnone	a9, a8, 90bf68 <ar5416GetPendingInterrupts+0xa8>
		*masked |= HAL_INT_TX;
  90bf32:	8830      	l32i.n	a8, a3, 0
  90bf34:	c490      	movi.n	a9, 64
  90bf36:	098802        	or	a8, a8, a9
  90bf39:	283600        	s32i	a8, a3, 0
  90bf3c:	136a7b        	l32r	a3, 8e6928 <strcmp+0x3c8>
  90bf3f:	0c0200        	memw
  90bf42:	8930      	l32i.n	a9, a3, 0
  90bf44:	136a7c        	l32r	a3, 8e6934 <strcmp+0x3d4>
  90bf47:	0c0200        	memw
  90bf4a:	283200        	l32i	a8, a3, 0
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXEOL);
  90bf4d:	089302        	or	a3, a9, a8
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  90bf50:	09095f        	extui	a9, a9, 16, 16
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXEOL);
  90bf53:	08085f        	extui	a8, a8, 16, 16
  90bf56:	093302        	or	a3, a3, a9
  90bf59:	083302        	or	a3, a3, a8
  90bf5c:	282239        	l32i	a8, a2, 228
  90bf5f:	030349        	extui	a3, a3, 0, 10
  90bf62:	038302        	or	a3, a8, a3
  90bf65:	232639        	s32i	a3, a2, 228
  90bf68:	136a7d        	l32r	a3, 8e695c <xthal_get_ccount+0x4>
	return AH_TRUE;
  90bf6b:	c021      	movi.n	a2, 1
  90bf6d:	0c0200        	memw
  90bf70:	8830      	l32i.n	a8, a3, 0
		      | AR_INTR_SYNC_HOST1_PERR))) ? AH_TRUE : AH_FALSE;
  90bf72:	68800f        	beqi	a8, -1, 90bf85 <ar5416GetPendingInterrupts+0xc5>
		     (sync_cause & (AR_INTR_SYNC_HOST1_FATAL
  90bf75:	290a60        	movi	a9, 96
		      | AR_INTR_SYNC_HOST1_PERR))) ? AH_TRUE : AH_FALSE;
  90bf78:	798009        	bnone	a8, a9, 90bf85 <ar5416GetPendingInterrupts+0xc5>
	*(volatile uint32_t *) addr = b;
  90bf7b:	0c0200        	memw
  90bf7e:	9830      	s32i.n	a8, a3, 0
	return *(const volatile uint32_t *) addr;
  90bf80:	0c0200        	memw
  90bf83:	8330      	l32i.n	a3, a3, 0
}
  90bf85:	d10f      	retw.n
	...

0090bf88 <ar5416SetRxFilter>:
{
  90bf88:	6c1004        	entry	a1, 32
	iowrite32_mac(AR_RX_FILTER, (bits & 0xff) | AR_RX_COMPR_BAR);
  90bf8b:	294a00        	movi	a9, 0x400
  90bf8e:	030847        	extui	a8, a3, 0, 8
  90bf91:	098802        	or	a8, a8, a9
  90bf94:	196a7e        	l32r	a9, 8e698c <xthal_get_intenable+0xc>
	*(volatile uint32_t *) addr = b;
  90bf97:	0c0200        	memw
  90bf9a:	9890      	s32i.n	a8, a9, 0
	if (bits & HAL_RX_FILTER_PHYRADAR)
  90bf9c:	1869a0        	l32r	a8, 8e661c <strcmp+0xbc>
		phybits |= AR_PHY_ERR_RADAR;
  90bf9f:	c290      	movi.n	a9, 32
	if (bits & HAL_RX_FILTER_PHYRADAR)
  90bfa1:	083801        	and	a8, a3, a8
		phybits |= AR_PHY_ERR_RADAR;
  90bfa4:	089839        	movnez	a8, a9, a8
	if (bits & HAL_RX_FILTER_PHYERR)
  90bfa7:	773705        	bbci	a3, 23, 90bfb0 <ar5416SetRxFilter+0x28>
		phybits |= AR_PHY_ERR_OFDM_TIMING | AR_PHY_ERR_CCK_TIMING;
  90bfaa:	136a7f        	l32r	a3, 8e69a8 <__divsi3+0x10>
  90bfad:	038802        	or	a8, a8, a3
  90bfb0:	136a80        	l32r	a3, 8e69b0 <__divsi3+0x18>
  90bfb3:	196a81        	l32r	a9, 8e69b8 <__divsi3+0x20>
  90bfb6:	0c0200        	memw
  90bfb9:	9830      	s32i.n	a8, a3, 0
	if (phybits) {
  90bfbb:	c88d      	beqz.n	a8, 90bfcc <ar5416SetRxFilter+0x44>
	return *(const volatile uint32_t *) addr;
  90bfbd:	0c0200        	memw
  90bfc0:	8890      	l32i.n	a8, a9, 0
		iowrite32_mac(AR_RXCFG,
  90bfc2:	c130      	movi.n	a3, 16
  90bfc4:	038802        	or	a8, a8, a3
  90bfc7:	60000b        	j	90bfd6 <ar5416SetRxFilter+0x4e>
  90bfca:	00000c        	sub	a0, a0, a0
  90bfcd:	020088        	excw
  90bfd0:	90c6      	s32i.n	a0, a12, 24
		iowrite32_mac(AR_RXCFG,
  90bfd2:	3f0388        	excw
  90bfd5:	010c02        	or	a12, a0, a1
	*(volatile uint32_t *) addr = b;
  90bfd8:	009890        	l32e	a0, a9, -32
  90bfdb:	d10f      	retw.n
  90bfdd:	000000        	ill

0090bfe0 <ar5416Attach>:
{
  90bfe0:	6c1004        	entry	a1, 32
	ahp = ath_hal_malloc(sizeof (struct ath_hal_5416));
  90bfe3:	2a1a44        	movi	a10, 0x144
  90bfe6:	5beeae        	call8	907aa0 <ath_hal_malloc>
{
  90bfe9:	d520      	mov.n	a5, a2
	ahp = ath_hal_malloc(sizeof (struct ath_hal_5416));
  90bfeb:	d2a0      	mov.n	a2, a10
	if (ahp == AH_NULL) {
  90bfed:	cca4      	bnez.n	a10, 90bff5 <ar5416Attach+0x15>
		*status = HAL_ENOMEM;
  90bfef:	c032      	movi.n	a3, 2
  90bff1:	9340      	s32i.n	a3, a4, 0
		return AH_NULL;
  90bff3:	d10f      	retw.n
	OS_MEMCPY(&ahp->ah_priv, &ar5416hal_10, sizeof(struct ath_hal_private));
  90bff5:	1b6a82        	l32r	a11, 8e6a00 <__divsi3+0x68>
  90bff8:	2c0ad4        	movi	a12, 212
  90bffb:	5beeb4        	call8	907acc <ath_hal_memcpy>
	ah->ah_set11nTxDesc        = ar5416Set11nTxDesc_20;
  90bffe:	186a83        	l32r	a8, 8e6a0c <__divsi3+0x74>
	ah->ah_dev = dev;
  90c001:	9322      	s32i.n	a3, a2, 8
	ah->ah_set11nTxDesc        = ar5416Set11nTxDesc_20;
  90c003:	982f      	s32i.n	a8, a2, 60
	ah->ah_set11nRateScenario  = ar5416Set11nRateScenario_20;
  90c005:	186a84        	l32r	a8, 8e6a18 <__divsi3+0x80>
	ah->ah_sc = sc;
  90c008:	9521      	s32i.n	a5, a2, 4
	ah->ah_set11nRateScenario  = ar5416Set11nRateScenario_20;
  90c00a:	282610        	s32i	a8, a2, 64
	ah->ah_set11nAggrFirst     = ar5416Set11nAggrFirst_20;
  90c00d:	186a85        	l32r	a8, 8e6a24 <__divsi3+0x8c>
  90c010:	282611        	s32i	a8, a2, 68
	ah->ah_set11nAggrMiddle    = ar5416Set11nAggrMiddle_20;
  90c013:	186a86        	l32r	a8, 8e6a2c <__divsi3+0x94>
  90c016:	282612        	s32i	a8, a2, 72
	ah->ah_set11nAggrLast      = ar5416Set11nAggrLast_20;
  90c019:	186a87        	l32r	a8, 8e6a38 <__divsi3+0xa0>
  90c01c:	282613        	s32i	a8, a2, 76
	ah->ah_clr11nAggr          = ar5416Clr11nAggr_20;
  90c01f:	186a88        	l32r	a8, 8e6a40 <__divsi3+0xa8>
  90c022:	282614        	s32i	a8, a2, 80
	ah->ah_set11nBurstDuration = ar5416Set11nBurstDuration_20;
  90c025:	186a89        	l32r	a8, 8e6a4c <__udivsi3>
  90c028:	282615        	s32i	a8, a2, 84
	ah->ah_setupRxDesc         = ar5416SetupRxDesc_20;
  90c02b:	186a8a        	l32r	a8, 8e6a54 <__udivsi3+0x8>
  90c02e:	282620        	s32i	a8, a2, 128
	ah->ah_procRxDescFast      = ar5416ProcRxDescFast_20;
  90c031:	186a8b        	l32r	a8, 8e6a60 <__udivsi3+0x14>
  90c034:	282622        	s32i	a8, a2, 136
	ah->ah_setupTxDesc         = ar5416SetupTxDesc_20;
  90c037:	186a8c        	l32r	a8, 8e6a68 <__udivsi3+0x1c>
  90c03a:	282617        	s32i	a8, a2, 92
	ah->ah_fillTxDesc          = ar5416FillTxDesc_20;
  90c03d:	186a8d        	l32r	a8, 8e6a74 <__udivsi3+0x28>
  90c040:	282618        	s32i	a8, a2, 96
	ah->ah_fillKeyTxDesc       = ar5416FillKeyTxDesc_20;
  90c043:	186a8e        	l32r	a8, 8e6a7c <__udivsi3+0x30>
  90c046:	282619        	s32i	a8, a2, 100
	ah->ah_procTxDesc          = ar5416ProcTxDesc_20;
  90c049:	186a8f        	l32r	a8, 8e6a88 <__udivsi3+0x3c>
  90c04c:	28261a        	s32i	a8, a2, 104
	ah->ah_set11nVirtualMoreFrag = ar5416Set11nVirtualMoreFrag_20;
  90c04f:	186a90        	l32r	a8, 8e6a90 <__udivsi3+0x44>
  90c052:	282616        	s32i	a8, a2, 88
}
  90c055:	d10f      	retw.n
	...

0090c058 <ar5416GetRateTable>:
#undef  HT
#undef  HT_HGI

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
  90c058:	6c1004        	entry	a1, 32
		break;
	case HAL_MODE_11B:
		rt = &ar5416_11b_table;
		break;
	case HAL_MODE_11G:
		rt =  &ar5416_11g_table;
  90c05b:	126a95        	l32r	a2, 8e6ab0 <__udivsi3+0x64>
	switch (mode) {
  90c05e:	683827        	beqi	a3, 8, 90c089 <ar5416GetRateTable+0x31>
  90c061:	c028      	movi.n	a2, 8
  90c063:	73230e        	bltu	a2, a3, 90c075 <ar5416GetRateTable+0x1d>
		rt = &ar5416_11a_table;
  90c066:	126a92        	l32r	a2, 8e6ab0 <__udivsi3+0x64>
	switch (mode) {
  90c069:	68311c        	beqi	a3, 1, 90c089 <ar5416GetRateTable+0x31>
		rt = &ar5416_11b_table;
  90c06c:	126a91        	l32r	a2, 8e6ab0 <__udivsi3+0x64>
	switch (mode) {
  90c06f:	683416        	beqi	a3, 4, 90c089 <ar5416GetRateTable+0x31>
  90c072:	600011        	j	90c087 <ar5416GetRateTable+0x2f>
  90c075:	1869d0        	l32r	a8, 8e67b8 <strcmp+0x258>
		break;
	case HAL_MODE_11NG:
		rt = &ar5416_11ng_table;
  90c078:	126a94        	l32r	a2, 8e6ac8 <__udivsi3+0x7c>
	switch (mode) {
  90c07b:	78310a        	beq	a3, a8, 90c089 <ar5416GetRateTable+0x31>
  90c07e:	1869cf        	l32r	a8, 8e67bc <strcmp+0x25c>
		break;
	case HAL_MODE_11NA:
		rt = &ar5416_11na_table;
  90c081:	126a93        	l32r	a2, 8e6ad0 <__udivsi3+0x84>
	switch (mode) {
  90c084:	783101        	beq	a3, a8, 90c089 <ar5416GetRateTable+0x31>
		break;
	default:
		return AH_NULL;
  90c087:	c020      	movi.n	a2, 0
	}

	return rt;
}
  90c089:	d10f      	retw.n
	...

0090c08c <rcRateSetseries>:
static void
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
  90c08c:	6c1004        	entry	a1, 32
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) |
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c08f:	0e5911        	slli	a9, a5, 2
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) |
  90c092:	c0e1      	movi.n	a14, 1
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c094:	a598      	add.n	a8, a9, a5
  90c096:	00e104        	ssl	a14
  90c099:	00881a        	sll	a8, a8
  90c09c:	a588      	add.n	a8, a8, a5
  90c09e:	0e8811        	slli	a8, a8, 2
	series->tries = tries;
  90c0a1:	243401        	s8i	a4, a3, 1
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c0a4:	a828      	add.n	a8, a2, a8
  90c0a6:	2a8010        	l8ui	a10, a8, 16
  90c0a9:	c78d      	movi.n	a8, -3
  90c0ab:	08a801        	and	a8, a10, a8
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) |
  90c0ae:	c0c0      	movi.n	a12, 0
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c0b0:	c7db      	movi.n	a13, -5
  90c0b2:	288cfb        	addi	a8, a8, -5
  90c0b5:	0d8801        	and	a8, a8, a13
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) |
  90c0b8:	d4c0      	mov.n	a4, a12
  90c0ba:	06e439        	movnez	a4, a14, a6
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c0bd:	080847        	extui	a8, a8, 0, 8
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) |
  90c0c0:	0c4611        	slli	a6, a4, 4
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c0c3:	08ce39        	movnez	a14, a12, a8
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) |
  90c0c6:	06e802        	or	a8, a14, a6
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) |
  90c0c9:	26acfa        	addi	a6, a10, -6
  90c0cc:	0d6d01        	and	a13, a6, a13
  90c0cf:	0d0d47        	extui	a13, a13, 0, 8
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c0d2:	c062      	movi.n	a6, 2
{
  90c0d4:	8b18      	l32i.n	a11, a1, 32
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) |
  90c0d6:	76d302        	bltu	a13, a6, 90c0dc <rcRateSetseries+0x50>
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c0d9:	0cc602        	or	a6, a12, a12
		(WLAN_RC_PHY_SGI(pRateTable->info[rix].phy) ? ATH_RC_HT40_SGI_FLAG : 0);
  90c0dc:	2aacf8        	addi	a10, a10, -8
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) |
  90c0df:	0a0a47        	extui	a10, a10, 0, 8
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) |
  90c0e2:	086802        	or	a8, a6, a8
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) |
  90c0e5:	c060      	movi.n	a6, 0
  90c0e7:	6fa401        	bgeui	a10, 4, 90c0ec <rcRateSetseries+0x60>
  90c0ea:	c064      	movi.n	a6, 4
  90c0ec:	086802        	or	a8, a6, a8
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) |
  90c0ef:	283403        	s8i	a8, a3, 3
#ifdef MAGPIE_MERLIN
	if (stbc) {
  90c0f2:	c9be      	beqz.n	a11, 90c114 <rcRateSetseries+0x88>
		/* For now, only single stream STBC is supported */
		if (pRateTable->info[rix].rateCode >= 0x80 &&
  90c0f4:	a596      	add.n	a6, a9, a5
  90c0f6:	0f6611        	slli	a6, a6, 1
  90c0f9:	a566      	add.n	a6, a6, a5
  90c0fb:	0e6611        	slli	a6, a6, 2
  90c0fe:	a626      	add.n	a6, a2, a6
  90c100:	26601c        	l8ui	a6, a6, 28
  90c103:	266c80        	addi	a6, a6, -128
  90c106:	060647        	extui	a6, a6, 0, 8
  90c109:	6f6807        	bgeui	a6, 8, 90c114 <rcRateSetseries+0x88>
		    pRateTable->info[rix].rateCode <= 0x87)
		{
			series->flags |= ATH_RC_TX_STBC_FLAG;
  90c10c:	c260      	movi.n	a6, 32
  90c10e:	068802        	or	a8, a8, a6
  90c111:	283403        	s8i	a8, a3, 3
		}
	}
#endif
	series->rix = pRateTable->info[rix].baseIndex;
  90c114:	a599      	add.n	a9, a9, a5
  90c116:	0f9911        	slli	a9, a9, 1
  90c119:	a595      	add.n	a5, a9, a5
  90c11b:	0e5511        	slli	a5, a5, 2
  90c11e:	a522      	add.n	a2, a2, a5
  90c120:	252022        	l8ui	a5, a2, 34
  90c123:	253400        	s8i	a5, a3, 0
	series->max4msframelen = pRateTable->info[rix].max4msframelen;
  90c126:	852a      	l32i.n	a5, a2, 40
  90c128:	9531      	s32i.n	a5, a3, 4
	series->txrateKbps = pRateTable->info[rix].rateKbps;
  90c12a:	8525      	l32i.n	a5, a2, 20
  90c12c:	9532      	s32i.n	a5, a3, 8

	/* If the hardware is capable of multiple transmit chains (chainmask is 3, 5 or 7),
	 * then choose the number of transmit chains dynamically based on entries in the rate table.
	 */
#ifndef ATH_ENABLE_WLAN_FOR_K2
	if(chainmask == 7)
  90c12e:	697706        	bnei	a7, 7, 90c138 <rcRateSetseries+0xac>
		series->tx_chainmask = pRateTable->info[rix].txChainMask_3ch;
  90c131:	222027        	l8ui	a2, a2, 39
  90c134:	60000b        	j	90c143 <rcRateSetseries+0xb7>
  90c137:	006971        	excw
	else if(chainmask == 1)
  90c13a:	042734        	min	a7, a2, a4
		series->tx_chainmask = 1;
  90c13d:	02d10f        	subx8	a1, a13, a2
	else
		series->tx_chainmask = pRateTable->info[rix].txChainMask_2ch;  /*Chainmask is 3 or 5*/
  90c140:	222026        	l8ui	a2, a2, 38
  90c143:	223402        	s8i	a2, a3, 2
  90c146:	d10f      	retw.n

0090c148 <rcIsValidPhyRate>:
{
  90c148:	6c1004        	entry	a1, 32
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
  90c14b:	6e2405        	bltui	a2, 4, 90c154 <rcIsValidPhyRate+0xc>
		return FALSE;
  90c14e:	280a00        	movi	a8, 0
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
  90c151:	7c3747        	bbci	a3, 28, 90c19c <rcIsValidPhyRate+0x54>
	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
  90c154:	c78d      	movi.n	a8, -3
  90c156:	082801        	and	a8, a2, a8
  90c159:	288cfb        	addi	a8, a8, -5
  90c15c:	29fafb        	movi	a9, -5
  90c15f:	098801        	and	a8, a8, a9
  90c162:	658002        	bnez	a8, 90c168 <rcIsValidPhyRate+0x20>
  90c165:	7f3733        	bbci	a3, 31, 90c19c <rcIsValidPhyRate+0x54>
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
  90c168:	282cf8        	addi	a8, a2, -8
  90c16b:	6f8405        	bgeui	a8, 4, 90c174 <rcIsValidPhyRate+0x2c>
		return FALSE;
  90c16e:	280a00        	movi	a8, 0
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
  90c171:	7d3727        	bbci	a3, 29, 90c19c <rcIsValidPhyRate+0x54>
	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
  90c174:	c091      	movi.n	a9, 1
  90c176:	ce40      	bnez.n	a4, 90c19a <rcIsValidPhyRate+0x52>
  90c178:	6e241e        	bltui	a2, 4, 90c19a <rcIsValidPhyRate+0x52>
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
  90c17b:	c78b      	movi.n	a8, -5
  90c17d:	222cfa        	addi	a2, a2, -6
  90c180:	082201        	and	a2, a2, a8
		if (!WLAN_RC_PHY_40(phy) && (capflag & WLAN_RC_40_FLAG)) {
  90c183:	031840        	extui	a8, a3, 1, 1
  90c186:	098803        	xor	a8, a8, a9
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
  90c189:	6f220f        	bgeui	a2, 2, 90c19c <rcIsValidPhyRate+0x54>
  90c18c:	c082      	movi.n	a8, 2
  90c18e:	083301        	and	a3, a3, a8
	return TRUE;
  90c191:	c080      	movi.n	a8, 0
  90c193:	039839        	movnez	a8, a9, a3
  90c196:	600002        	j	90c19c <rcIsValidPhyRate+0x54>
  90c199:	00c081        	excw
}
  90c19c:	d280      	mov.n	a2, a8
  90c19e:	d10f      	retw.n

0090c1a0 <rcSibUpdate_ht$constprop$6>:
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c1a0:	6c1052        	entry	a1, 0x290
	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  90c1a3:	262248        	l32i	a6, a2, 0x120
  90c1a6:	2222c2        	l32i	a2, a2, 0x308
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90c1a9:	233282        	l32i	a3, a3, 0x208
	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  90c1ac:	0e2211        	slli	a2, a2, 2
  90c1af:	a262      	add.n	a2, a6, a2
  90c1b1:	8621      	l32i.n	a6, a2, 4
	pRc->rateTableSize = MAX_TX_RATE_TBL;
  90c1b3:	c22e      	movi.n	a2, 46
  90c1b5:	22342e        	s8i	a2, a3, 46
  90c1b8:	d730      	mov.n	a7, a3
		pRc->state[i].per       = 0;
  90c1ba:	c080      	movi.n	a8, 0
  90c1bc:	c22e      	movi.n	a2, 46
  90c1be:	6d2804        	loop	a2, 90c1c6 <rcSibUpdate_ht$constprop$6+0x26>
  90c1c1:	287400        	s8i	a8, a7, 0
  90c1c4:	b177      	addi.n	a7, a7, 1
  90c1c6:	273c3a        	addi	a7, a3, 58
		pRc->validRateIndex[i] = FALSE;
  90c1c9:	c080      	movi.n	a8, 0
  90c1cb:	c22e      	movi.n	a2, 46
  90c1cd:	6d2804        	loop	a2, 90c1d5 <rcSibUpdate_ht$constprop$6+0x35>
  90c1d0:	287400        	s8i	a8, a7, 0
  90c1d3:	b177      	addi.n	a7, a7, 1
	for (i = 0; i < pRc->rateTableSize; i++) {
  90c1d5:	c070      	movi.n	a7, 0
  90c1d7:	d910      	mov.n	a9, a1
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90c1d9:	da70      	mov.n	a10, a7
	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c1db:	2b2a28        	movi	a11, 0x228
  90c1de:	600014        	j	90c1f6 <rcSibUpdate_ht$constprop$6+0x56>
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90c1e1:	2a2400        	s8i	a10, a2, 0
  90c1e4:	b122      	addi.n	a2, a2, 1
  90c1e6:	b088      	addi.n	a8, a8, -1
  90c1e8:	658ff5        	bnez	a8, 90c1e1 <rcSibUpdate_ht$constprop$6+0x41>
		mPhyCtrlState.validPhyRateCount[i] = 0;
  90c1eb:	2a9400        	s8i	a10, a9, 0
  90c1ee:	277c2e        	addi	a7, a7, 46
  90c1f1:	b199      	addi.n	a9, a9, 1
	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c1f3:	7b710b        	beq	a7, a11, 90c202 <rcSibUpdate_ht$constprop$6+0x62>
  90c1f6:	bc72      	addi.n	a2, a7, 12
  90c1f8:	a212      	add.n	a2, a1, a2
	pRc->rateTableSize = MAX_TX_RATE_TBL;
  90c1fa:	c28e      	movi.n	a8, 46
  90c1fc:	63ffe1        	j	90c1e1 <rcSibUpdate_ht$constprop$6+0x41>
  90c1ff:	000000        	ill
	pRc->rcPhyMode = (capflag & WLAN_RC_40_FLAG);
  90c202:	c022      	movi.n	a2, 2
  90c204:	024201        	and	a2, a4, a2
  90c207:	040840        	extui	a8, a4, 0, 1
  90c20a:	22346c        	s8i	a2, a3, 108
  90c20d:	281692        	s32i	a8, a1, 0x248
	if (pRateSet == NULL || !pRateSet->rates.rs_nrates) {
  90c210:	c854      	beqz.n	a5, 90c218 <rcSibUpdate_ht$constprop$6+0x78>
  90c212:	275000        	l8ui	a7, a5, 0
  90c215:	657084        	bnez	a7, 90c29d <rcSibUpdate_ht$constprop$6+0xfd>
  90c218:	2d6000        	l8ui	a13, a6, 0
	A_UINT8 i, hi = 0;
  90c21b:	c020      	movi.n	a2, 0
  90c21d:	b467      	addi.n	a7, a6, 4
  90c21f:	ad3d      	add.n	a13, a3, a13
	for (i = 0; i < pRateTable->rateCount; i++) {
  90c221:	d530      	mov.n	a5, a3
			if (!rcIsValidPhyRate(phy, capflag, FALSE))
  90c223:	df20      	mov.n	a15, a2
  90c225:	600068        	j	90c291 <rcSibUpdate_ht$constprop$6+0xf1>
		if (singleStream) {
  90c228:	281292        	l32i	a8, a1, 0x248
  90c22b:	cc85      	bnez.n	a8, 90c234 <rcSibUpdate_ht$constprop$6+0x94>
			valid = pRateTable->info[i].validSingleStream;
  90c22d:	2e7007        	l8ui	a14, a7, 7
  90c230:	600003        	j	90c237 <rcSibUpdate_ht$constprop$6+0x97>
  90c233:	002e70        	excw
			valid = pRateTable->info[i].valid;
  90c236:	0369e1        	excw
		if (valid == TRUE) {
  90c239:	512870        	call0	9563fc <_etext+0x471eb>
			A_UINT32 phy = pRateTable->info[i].phy;
  90c23c:	0cdcf0        	excw
			if (!rcIsValidPhyRate(phy, capflag, FALSE))
  90c23f:	da80      	mov.n	a10, a8
  90c241:	db40      	mov.n	a11, a4
  90c243:	28169a        	s32i	a8, a1, 0x268
  90c246:	291698        	s32i	a9, a1, 0x260
  90c249:	2d1697        	s32i	a13, a1, 0x25c
  90c24c:	2e1699        	s32i	a14, a1, 0x264
  90c24f:	2f169b        	s32i	a15, a1, 0x26c
  90c252:	5bffbd        	call8	90c148 <rcIsValidPhyRate>
  90c255:	28129a        	l32i	a8, a1, 0x268
  90c258:	291298        	l32i	a9, a1, 0x260
  90c25b:	2d1297        	l32i	a13, a1, 0x25c
  90c25e:	2e1299        	l32i	a14, a1, 0x264
  90c261:	2f129b        	l32i	a15, a1, 0x26c
  90c264:	caa4      	beqz.n	a10, 90c28c <rcSibUpdate_ht$constprop$6+0xec>
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
  90c266:	0f8c11        	slli	a12, a8, 1
  90c269:	a8cc      	add.n	a12, a12, a8
  90c26b:	0dcc11        	slli	a12, a12, 3
  90c26e:	a81b      	add.n	a11, a1, a8
  90c270:	08c80c        	sub	a8, a12, a8
  90c273:	2ab000        	l8ui	a10, a11, 0
  90c276:	0f8811        	slli	a8, a8, 1
  90c279:	a818      	add.n	a8, a1, a8
  90c27b:	aa88      	add.n	a8, a8, a10
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c27d:	2aac01        	addi	a10, a10, 1
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
  90c280:	29840c        	s8i	a9, a8, 12
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c283:	2ab400        	s8i	a10, a11, 0
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c286:	2e543a        	s8i	a14, a5, 58
			hi = A_MAX(hi, i);
  90c289:	029237        	maxu	a2, a9, a2
  90c28c:	277c2c        	addi	a7, a7, 44
  90c28f:	b155      	addi.n	a5, a5, 1
  90c291:	03590c        	sub	a9, a5, a3
  90c294:	090947        	extui	a9, a9, 0, 8
	for (i = 0; i < pRateTable->rateCount; i++) {
  90c297:	75d98d        	bne	a13, a5, 90c228 <rcSibUpdate_ht$constprop$6+0x88>
  90c29a:	60020d        	j	90c4ab <rcSibUpdate_ht$constprop$6+0x30b>
  90c29d:	a75d      	add.n	a13, a5, a7
	A_UINT8 i, j, hi = 0;
  90c29f:	c080      	movi.n	a8, 0
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) ==
  90c2a1:	c078      	movi.n	a7, 8
  90c2a3:	2d1694        	s32i	a13, a1, 0x250
	A_UINT8 i, j, hi = 0;
  90c2a6:	281691        	s32i	a8, a1, 0x244
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) ==
  90c2a9:	074d01        	and	a13, a4, a7
  90c2ac:	c084      	movi.n	a8, 4
  90c2ae:	c072      	movi.n	a7, 2
  90c2b0:	027838        	moveqz	a8, a7, a2
  90c2b3:	251690        	s32i	a5, a1, 0x240
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
  90c2b6:	d950      	mov.n	a9, a5
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) ==
  90c2b8:	2d1695        	s32i	a13, a1, 0x254
  90c2bb:	281696        	s32i	a8, a1, 0x258
  90c2be:	6000b5        	j	90c377 <rcSibUpdate_ht$constprop$6+0x1d7>
			if (pSib->stbc) {
  90c2c1:	27321d        	l32i	a7, a3, 116
  90c2c4:	1a6a6a        	l32r	a10, 8e6c6c <memcpy+0x108>
  90c2c7:	7a7005        	bnone	a7, a10, 90c2d0 <rcSibUpdate_ht$constprop$6+0x130>
				valid = pRateTable->info[j].validSTBC;
  90c2ca:	8a22      	l32i.n	a10, a2, 8
  90c2cc:	60000c        	j	90c2dc <rcSibUpdate_ht$constprop$6+0x13c>
  90c2cf:	002b12        	srai	a11, a0, 2
			} else if (singleStream) {
  90c2d2:	92cc      	s32i.n	a2, a12, 48
  90c2d4:	b38a      	addi.n	a10, a8, 3
				valid = pRateTable->info[j].validSingleStream;
  90c2d6:	216000        	l8ui	a1, a6, 0
  90c2d9:	018a20        	excw
			if (((pRateSet->rs_rates[i] & 0x7F) ==
  90c2dc:	279001        	l8ui	a7, a9, 1
  90c2df:	2b201a        	l8ui	a11, a2, 26
  90c2e2:	0b7703        	xor	a7, a7, a11
  90c2e5:	070746        	extui	a7, a7, 0, 7
  90c2e8:	657078        	bnez	a7, 90c364 <rcSibUpdate_ht$constprop$6+0x1c4>
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) ==
  90c2eb:	2b1296        	l32i	a11, a1, 0x258
  90c2ee:	2c1295        	l32i	a12, a1, 0x254
			A_UINT32 phy = pRateTable->info[j].phy;
  90c2f1:	27200c        	l8ui	a7, a2, 12
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) ==
  90c2f4:	0cdb38        	moveqz	a11, a13, a12
  90c2f7:	0baa01        	and	a10, a10, a11
  90c2fa:	0baa0c        	sub	a10, a10, a11
  90c2fd:	dbf0      	mov.n	a11, a15
  90c2ff:	0adb38        	moveqz	a11, a13, a10
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
  90c302:	0b0a47        	extui	a10, a11, 0, 8
  90c305:	64a05b        	beqz	a10, 90c364 <rcSibUpdate_ht$constprop$6+0x1c4>
  90c308:	6f7458        	bgeui	a7, 4, 90c364 <rcSibUpdate_ht$constprop$6+0x1c4>
				if (!rcIsValidPhyRate(phy, capflag, FALSE))
  90c30b:	dcf0      	mov.n	a12, a15
  90c30d:	db40      	mov.n	a11, a4
  90c30f:	077a02        	or	a10, a7, a7
  90c312:	28169a        	s32i	a8, a1, 0x268
  90c315:	291698        	s32i	a9, a1, 0x260
  90c318:	2d1697        	s32i	a13, a1, 0x25c
  90c31b:	2e1699        	s32i	a14, a1, 0x264
  90c31e:	2f169b        	s32i	a15, a1, 0x26c
  90c321:	5bff89        	call8	90c148 <rcIsValidPhyRate>
  90c324:	28129a        	l32i	a8, a1, 0x268
  90c327:	291298        	l32i	a9, a1, 0x260
  90c32a:	2d1297        	l32i	a13, a1, 0x25c
  90c32d:	2e1299        	l32i	a14, a1, 0x264
  90c330:	2f129b        	l32i	a15, a1, 0x26c
  90c333:	caad      	beqz.n	a10, 90c364 <rcSibUpdate_ht$constprop$6+0x1c4>
				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c335:	0f7c11        	slli	a12, a7, 1
  90c338:	a7cc      	add.n	a12, a12, a7
  90c33a:	0dcc11        	slli	a12, a12, 3
  90c33d:	a71b      	add.n	a11, a1, a7
  90c33f:	07c70c        	sub	a7, a12, a7
  90c342:	2ab000        	l8ui	a10, a11, 0
  90c345:	0f7711        	slli	a7, a7, 1
				hi = A_MAX(hi, j);
  90c348:	2c1291        	l32i	a12, a1, 0x244
				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c34b:	a717      	add.n	a7, a1, a7
  90c34d:	aa77      	add.n	a7, a7, a10
				pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c34f:	b1aa      	addi.n	a10, a10, 1
				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c351:	2e740c        	s8i	a14, a7, 12
				pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c354:	2ab400        	s8i	a10, a11, 0
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c357:	a837      	add.n	a7, a3, a8
  90c359:	c0a1      	movi.n	a10, 1
				hi = A_MAX(hi, j);
  90c35b:	0cec37        	maxu	a12, a14, a12
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c35e:	2a743a        	s8i	a10, a7, 58
				hi = A_MAX(hi, j);
  90c361:	2c1691        	s32i	a12, a1, 0x244
  90c364:	b188      	addi.n	a8, a8, 1
  90c366:	222c2c        	addi	a2, a2, 44
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c369:	2a1293        	l32i	a10, a1, 0x24c
  90c36c:	080e47        	extui	a14, a8, 0, 8
  90c36f:	7aeb02        	bgeu	a14, a10, 90c375 <rcSibUpdate_ht$constprop$6+0x1d5>
  90c372:	63ff4b        	j	90c2c1 <rcSibUpdate_ht$constprop$6+0x121>
  90c375:	b199      	addi.n	a9, a9, 1
	for (i = 0; i < pRateSet->rs_nrates; i++) {
  90c377:	2d1294        	l32i	a13, a1, 0x250
  90c37a:	7d9110        	beq	a9, a13, 90c38e <rcSibUpdate_ht$constprop$6+0x1ee>
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c37d:	226000        	l8ui	a2, a6, 0
  90c380:	c080      	movi.n	a8, 0
  90c382:	221693        	s32i	a2, a1, 0x24c
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) ==
  90c385:	c0d1      	movi.n	a13, 1
  90c387:	b462      	addi.n	a2, a6, 4
  90c389:	df80      	mov.n	a15, a8
  90c38b:	63ffda        	j	90c369 <rcSibUpdate_ht$constprop$6+0x1c9>
	A_UINT8 i, j, k, hi = 0, htHi = 0;
  90c38e:	c020      	movi.n	a2, 0
		if (capflag & WLAN_RC_HT_FLAG) {
  90c390:	7c4f02        	bbsi	a4, 28, 90c396 <rcSibUpdate_ht$constprop$6+0x1f6>
  90c393:	60010e        	j	90c4a5 <rcSibUpdate_ht$constprop$6+0x305>
  90c396:	27501f        	l8ui	a7, a5, 31
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
  90c399:	c0d2      	movi.n	a13, 2
  90c39b:	a755      	add.n	a5, a5, a7
  90c39d:	251694        	s32i	a5, a1, 0x250
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  90c3a0:	251a00        	movi	a5, 0x100
  90c3a3:	054501        	and	a5, a4, a5
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
  90c3a6:	0d4d01        	and	a13, a4, a13
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F)
  90c3a9:	c0e1      	movi.n	a14, 1
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  90c3ab:	251695        	s32i	a5, a1, 0x254
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
  90c3ae:	2d1696        	s32i	a13, a1, 0x258
  90c3b1:	6000d8        	j	90c48d <rcSibUpdate_ht$constprop$6+0x2ed>
			if (pSib->stbc) {
  90c3b4:	2a321d        	l32i	a10, a3, 116
  90c3b7:	1b6a6a        	l32r	a11, 8e6d60 <memcpy+0x1fc>
			A_UINT32 phy = pRateTable->info[j].phy;
  90c3ba:	27500c        	l8ui	a7, a5, 12
			if (pSib->stbc) {
  90c3bd:	7ba007        	bnone	a10, a11, 90c3c8 <rcSibUpdate_ht$constprop$6+0x228>
				valid = pRateTable->info[j].validSTBC;
  90c3c0:	2c500b        	l8ui	a12, a5, 11
  90c3c3:	600010        	j	90c3d7 <rcSibUpdate_ht$constprop$6+0x237>
  90c3c6:	00002d        	excw
			} else if (singleStream) {
  90c3c9:	1292cc        	l32r	a2, 8f0efc <memset+0xa0b4>
  90c3cc:	d52c      	excw
				valid = pRateTable->info[j].validSingleStream;
  90c3ce:	500760        	call0	90e150 <ath_tgt_send_mgt+0x308>
  90c3d1:	000300        	rfe
				valid = pRateTable->info[j].valid;
  90c3d4:	2c5003        	l8ui	a12, a5, 3
			     != (pRateTable->info[j].dot11Rate & 0x7F))
  90c3d7:	2a1290        	l32i	a10, a1, 0x240
  90c3da:	2b501a        	l8ui	a11, a5, 26
  90c3dd:	2da020        	l8ui	a13, a10, 32
  90c3e0:	0dba03        	xor	a10, a11, a13
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F)
  90c3e3:	0a0d46        	extui	a13, a10, 0, 7
  90c3e6:	da90      	mov.n	a10, a9
  90c3e8:	0dea39        	movnez	a10, a14, a13
			    || !WLAN_RC_PHY_HT(phy)
  90c3eb:	0a0a47        	extui	a10, a10, 0, 8
  90c3ee:	65a082        	bnez	a10, 90c474 <rcSibUpdate_ht$constprop$6+0x2d4>
  90c3f1:	6e747f        	bltui	a7, 4, 90c474 <rcSibUpdate_ht$constprop$6+0x2d4>
  90c3f4:	c0d2      	movi.n	a13, 2
  90c3f6:	0dca01        	and	a10, a12, a13
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
  90c3f9:	c8a3      	beqz.n	a10, 90c400 <rcSibUpdate_ht$constprop$6+0x260>
  90c3fb:	2d1296        	l32i	a13, a1, 0x258
  90c3fe:	c8d7      	beqz.n	a13, 90c409 <rcSibUpdate_ht$constprop$6+0x269>
  90c400:	7dc770        	bbci	a12, 29, 90c474 <rcSibUpdate_ht$constprop$6+0x2d4>
  90c403:	2d1296        	l32i	a13, a1, 0x258
  90c406:	64d06a        	beqz	a13, 90c474 <rcSibUpdate_ht$constprop$6+0x2d4>
			    || ((pRateTable->info[j].dot11Rate == 15) &&
  90c409:	2bbcf1        	addi	a11, a11, -15
  90c40c:	dc90      	mov.n	a12, a9
  90c40e:	0bec38        	moveqz	a12, a14, a11
  90c411:	0c0b47        	extui	a11, a12, 0, 8
  90c414:	c8be      	beqz.n	a11, 90c426 <rcSibUpdate_ht$constprop$6+0x286>
  90c416:	dd90      	mov.n	a13, a9
  90c418:	0aed39        	movnez	a13, a14, a10
  90c41b:	0d0a47        	extui	a10, a13, 0, 8
  90c41e:	c8a4      	beqz.n	a10, 90c426 <rcSibUpdate_ht$constprop$6+0x286>
				(valid & TRUE_20) &&
  90c420:	2d1295        	l32i	a13, a1, 0x254
  90c423:	65d04d        	bnez	a13, 90c474 <rcSibUpdate_ht$constprop$6+0x2d4>
			if (!rcIsValidPhyRate(phy, capflag, FALSE))
  90c426:	dc90      	mov.n	a12, a9
  90c428:	db40      	mov.n	a11, a4
  90c42a:	077a02        	or	a10, a7, a7
  90c42d:	28169a        	s32i	a8, a1, 0x268
  90c430:	291698        	s32i	a9, a1, 0x260
  90c433:	2e1699        	s32i	a14, a1, 0x264
  90c436:	2f169b        	s32i	a15, a1, 0x26c
  90c439:	5bff43        	call8	90c148 <rcIsValidPhyRate>
  90c43c:	28129a        	l32i	a8, a1, 0x268
  90c43f:	291298        	l32i	a9, a1, 0x260
  90c442:	2e1299        	l32i	a14, a1, 0x264
  90c445:	2f129b        	l32i	a15, a1, 0x26c
  90c448:	caa8      	beqz.n	a10, 90c474 <rcSibUpdate_ht$constprop$6+0x2d4>
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c44a:	0f7c11        	slli	a12, a7, 1
  90c44d:	a7cc      	add.n	a12, a12, a7
  90c44f:	0dcc11        	slli	a12, a12, 3
  90c452:	a71b      	add.n	a11, a1, a7
  90c454:	07c70c        	sub	a7, a12, a7
  90c457:	2ab000        	l8ui	a10, a11, 0
  90c45a:	0f7711        	slli	a7, a7, 1
  90c45d:	a717      	add.n	a7, a1, a7
  90c45f:	aa77      	add.n	a7, a7, a10
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c461:	b1aa      	addi.n	a10, a10, 1
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c463:	2f740c        	s8i	a15, a7, 12
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c466:	2ab400        	s8i	a10, a11, 0
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c469:	a837      	add.n	a7, a3, a8
  90c46b:	2a0a01        	movi	a10, 1
  90c46e:	2a743a        	s8i	a10, a7, 58
			hi = A_MAX(hi, j);
  90c471:	02f237        	maxu	a2, a15, a2
  90c474:	b188      	addi.n	a8, a8, 1
  90c476:	255c2c        	addi	a5, a5, 44
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c479:	2d1293        	l32i	a13, a1, 0x24c
  90c47c:	080f47        	extui	a15, a8, 0, 8
  90c47f:	7dfb02        	bgeu	a15, a13, 90c485 <rcSibUpdate_ht$constprop$6+0x2e5>
  90c482:	63ff2e        	j	90c3b4 <rcSibUpdate_ht$constprop$6+0x214>
  90c485:	251290        	l32i	a5, a1, 0x240
  90c488:	b155      	addi.n	a5, a5, 1
  90c48a:	251690        	s32i	a5, a1, 0x240
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
  90c48d:	281294        	l32i	a8, a1, 0x250
  90c490:	2d1290        	l32i	a13, a1, 0x240
  90c493:	7d810e        	beq	a8, a13, 90c4a5 <rcSibUpdate_ht$constprop$6+0x305>
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c496:	256000        	l8ui	a5, a6, 0
  90c499:	c080      	movi.n	a8, 0
  90c49b:	251693        	s32i	a5, a1, 0x24c
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F)
  90c49e:	d980      	mov.n	a9, a8
  90c4a0:	b465      	addi.n	a5, a6, 4
  90c4a2:	63ffd3        	j	90c479 <rcSibUpdate_ht$constprop$6+0x2d9>
		hi = A_MAX(hi, htHi);
  90c4a5:	281291        	l32i	a8, a1, 0x244
  90c4a8:	082237        	maxu	a2, a2, a8
	pRc->rateTableSize = hi + 1;
  90c4ab:	b122      	addi.n	a2, a2, 1
  90c4ad:	22342e        	s8i	a2, a3, 46
	pRc->rateMaxPhy    = 0;
  90c4b0:	c020      	movi.n	a2, 0
		if (!rcIsValidPhyRate(i, pRateTable->initialRateMax, TRUE) ||
  90c4b2:	c050      	movi.n	a5, 0
	pRc->rateMaxPhy    = 0;
  90c4b4:	22346d        	s8i	a2, a3, 109
		if (!rcIsValidPhyRate(i, pRateTable->initialRateMax, TRUE) ||
  90c4b7:	2d6003        	l8ui	a13, a6, 3
  90c4ba:	bc18      	addi.n	a8, a1, 12
	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c4bc:	d450      	mov.n	a4, a5
		if (!rcIsValidPhyRate(i, pRateTable->initialRateMax, TRUE) ||
  90c4be:	c091      	movi.n	a9, 1
  90c4c0:	de50      	mov.n	a14, a5
  90c4c2:	60006a        	j	90c530 <rcSibUpdate_ht$constprop$6+0x390>
			pRc->validRateIndex[k++] = mPhyCtrlState.validPhyRateIndex[i][j];
  90c4c5:	2ba000        	l8ui	a11, a10, 0
  90c4c8:	b124      	addi.n	a4, a2, 1
  90c4ca:	a232      	add.n	a2, a3, a2
  90c4cc:	2b243a        	s8i	a11, a2, 58
  90c4cf:	b1aa      	addi.n	a10, a10, 1
  90c4d1:	040247        	extui	a2, a4, 0, 8
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
  90c4d4:	7729ed        	bne	a2, a7, 90c4c5 <rcSibUpdate_ht$constprop$6+0x325>
		if (!rcIsValidPhyRate(i, pRateTable->initialRateMax, TRUE) ||
  90c4d7:	dbd0      	mov.n	a11, a13
  90c4d9:	099c02        	or	a12, a9, a9
  90c4dc:	da50      	mov.n	a10, a5
  90c4de:	28169a        	s32i	a8, a1, 0x268
  90c4e1:	291698        	s32i	a9, a1, 0x260
  90c4e4:	2d1697        	s32i	a13, a1, 0x25c
  90c4e7:	2e1699        	s32i	a14, a1, 0x264
  90c4ea:	2f169b        	s32i	a15, a1, 0x26c
  90c4ed:	5bff16        	call8	90c148 <rcIsValidPhyRate>
  90c4f0:	2e1299        	l32i	a14, a1, 0x264
  90c4f3:	291298        	l32i	a9, a1, 0x260
  90c4f6:	dbe0      	mov.n	a11, a14
  90c4f8:	0a9b38        	moveqz	a11, a9, a10
  90c4fb:	0b0a47        	extui	a10, a11, 0, 8
  90c4fe:	28129a        	l32i	a8, a1, 0x268
  90c501:	2d1297        	l32i	a13, a1, 0x25c
  90c504:	2f129b        	l32i	a15, a1, 0x26c
  90c507:	cdab      	bnez.n	a10, 90c526 <rcSibUpdate_ht$constprop$6+0x386>
  90c509:	0f9a38        	moveqz	a10, a9, a15
  90c50c:	cda6      	bnez.n	a10, 90c526 <rcSibUpdate_ht$constprop$6+0x386>
		pRc->rateMaxPhy = mPhyCtrlState.validPhyRateIndex[i][j-1];
  90c50e:	0f5411        	slli	a4, a5, 1
  90c511:	a544      	add.n	a4, a4, a5
  90c513:	0d4411        	slli	a4, a4, 3
  90c516:	05440c        	sub	a4, a4, a5
  90c519:	0f4411        	slli	a4, a4, 1
  90c51c:	a414      	add.n	a4, a1, a4
  90c51e:	af44      	add.n	a4, a4, a15
  90c520:	24400b        	l8ui	a4, a4, 11
  90c523:	24346d        	s8i	a4, a3, 109
  90c526:	b155      	addi.n	a5, a5, 1
  90c528:	288c2e        	addi	a8, a8, 46
  90c52b:	d470      	mov.n	a4, a7
	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c52d:	685a10        	beqi	a5, 12, 90c541 <rcSibUpdate_ht$constprop$6+0x3a1>
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
  90c530:	a512      	add.n	a2, a1, a5
  90c532:	2f2000        	l8ui	a15, a2, 0
  90c535:	da80      	mov.n	a10, a8
  90c537:	a4f7      	add.n	a7, a15, a4
  90c539:	070747        	extui	a7, a7, 0, 8
  90c53c:	d240      	mov.n	a2, a4
  90c53e:	63ff92        	j	90c4d4 <rcSibUpdate_ht$constprop$6+0x334>
	pRc->rateMaxPhy = pRc->validRateIndex[k-4];
  90c541:	a234      	add.n	a4, a3, a2
  90c543:	244036        	l8ui	a4, a4, 54
	pRc->maxValidRate = k;
  90c546:	223439        	s8i	a2, a3, 57
	for (i=pRc->maxValidRate-1; i > 0; i--) {
  90c549:	b022      	addi.n	a2, a2, -1
	pRc->rateMaxPhy = pRc->validRateIndex[k-4];
  90c54b:	24346d        	s8i	a4, a3, 109
	for (i=pRc->maxValidRate-1; i > 0; i--) {
  90c54e:	020247        	extui	a2, a2, 0, 8
  90c551:	c0c0      	movi.n	a12, 0
  90c553:	600041        	j	90c598 <rcSibUpdate_ht$constprop$6+0x3f8>
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c556:	a73b      	add.n	a11, a3, a7
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c558:	b177      	addi.n	a7, a7, 1
  90c55a:	a73a      	add.n	a10, a3, a7
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c55c:	28b03a        	l8ui	a8, a11, 58
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c55f:	29a03a        	l8ui	a9, a10, 58
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c562:	0e8511        	slli	a5, a8, 2
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c565:	0e9411        	slli	a4, a9, 2
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c568:	a855      	add.n	a5, a5, a8
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c56a:	a944      	add.n	a4, a4, a9
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c56c:	0f5511        	slli	a5, a5, 1
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c56f:	0f4411        	slli	a4, a4, 1
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c572:	a855      	add.n	a5, a5, a8
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c574:	a944      	add.n	a4, a4, a9
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c576:	0e5511        	slli	a5, a5, 2
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c579:	0e4411        	slli	a4, a4, 2
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c57c:	a565      	add.n	a5, a6, a5
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c57e:	a464      	add.n	a4, a6, a4
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c580:	8555      	l32i.n	a5, a5, 20
  90c582:	8445      	l32i.n	a4, a4, 20
  90c584:	754b05        	bgeu	a4, a5, 90c58d <rcSibUpdate_ht$constprop$6+0x3ed>
					pRc->validRateIndex[j] = pRc->validRateIndex[j+1];
  90c587:	29b43a        	s8i	a9, a11, 58
					pRc->validRateIndex[j+1] = tmp;
  90c58a:	28a43a        	s8i	a8, a10, 58
		for (j=0; j <= i-1; j++) {
  90c58d:	070747        	extui	a7, a7, 0, 8
  90c590:	7272c2        	blt	a7, a2, 90c556 <rcSibUpdate_ht$constprop$6+0x3b6>
	for (i=pRc->maxValidRate-1; i > 0; i--) {
  90c593:	b022      	addi.n	a2, a2, -1
  90c595:	020247        	extui	a2, a2, 0, 8
  90c598:	c823      	beqz.n	a2, 90c59f <rcSibUpdate_ht$constprop$6+0x3ff>
  90c59a:	d7c0      	mov.n	a7, a12
  90c59c:	63fff0        	j	90c590 <rcSibUpdate_ht$constprop$6+0x3f0>
  90c59f:	d10f      	retw.n
  90c5a1:	000000        	ill

0090c5a4 <ath_rate_newassoc_11n>:
}

static void
ath_rate_newassoc_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew,
		      unsigned int capflag, struct ieee80211_rate *rs)
{
  90c5a4:	6c1004        	entry	a1, 32
  90c5a7:	da20      	mov.n	a10, a2
  90c5a9:	db30      	mov.n	a11, a3
  90c5ab:	dc50      	mov.n	a12, a5
  90c5ad:	dd60      	mov.n	a13, a6
	if (isnew) {
  90c5af:	c949      	beqz.n	a4, 90c5cc <ath_rate_newassoc_11n+0x28>
#ifdef MAGPIE_MERLIN
		struct atheros_node *oan = ATH_NODE_ATHEROS(an);
		/* Only MERLIN can send STBC */
		oan->stbc = (capflag & ATH_RC_TX_STBC_FLAG) ? 1 : 0;
  90c5b1:	2e3282        	l32i	a14, a3, 0x208
  90c5b4:	055840        	extui	a8, a5, 5, 1
  90c5b7:	0b8911        	slli	a9, a8, 5
  90c5ba:	28e074        	l8ui	a8, a14, 116
  90c5bd:	2ffa9f        	movi	a15, -97
  90c5c0:	0f8801        	and	a8, a8, a15
  90c5c3:	098802        	or	a8, a8, a9
  90c5c6:	28e474        	s8i	a8, a14, 116
#endif
		rcSibUpdate_ht(sc, an, capflag, 0, rs);
  90c5c9:	5bfef5        	call8	90c1a0 <rcSibUpdate_ht$constprop$6>
  90c5cc:	d10f      	retw.n
	...

0090c5d0 <rcUpdate_ht$constprop$5>:
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate,
  90c5d0:	6c1006        	entry	a1, 48
  90c5d3:	2c1119        	l16ui	a12, a1, 50
  90c5d6:	07094f        	extui	a9, a7, 0, 16
	A_UINT32 nowMsec = A_MS_TICKGET();
  90c5d9:	c0a0      	movi.n	a10, 0
  90c5db:	9912      	s32i.n	a9, a1, 8
  90c5dd:	9510      	s32i.n	a5, a1, 0
  90c5df:	2c1603        	s32i	a12, a1, 12
  90c5e2:	261601        	s32i	a6, a1, 4
  90c5e5:	5bed1c        	call8	907a58 <ath_hal_getuptime>
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90c5e8:	233282        	l32i	a3, a3, 0x208
	A_UINT32 nowMsec = A_MS_TICKGET();
  90c5eb:	d5a0      	mov.n	a5, a10
	if (txRate < 0) {
  90c5ed:	8811      	l32i.n	a8, a1, 4
  90c5ef:	8912      	l32i.n	a9, a1, 8
  90c5f1:	8b10      	l32i.n	a11, a1, 0
  90c5f3:	8c13      	l32i.n	a12, a1, 12
  90c5f5:	6431e3        	beqz	a3, 90c7dc <rcUpdate_ht$constprop$5+0x20c>
  90c5f8:	6641e0        	bltz	a4, 90c7dc <rcUpdate_ht$constprop$5+0x20c>
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c5fb:	272248        	l32i	a7, a2, 0x120
  90c5fe:	2222c2        	l32i	a2, a2, 0x308
  90c601:	0e2211        	slli	a2, a2, 2
  90c604:	a272      	add.n	a2, a7, a2
  90c606:	8721      	l32i.n	a7, a2, 4
	lastPer = pRc->state[txRate].per;
  90c608:	a432      	add.n	a2, a3, a4
  90c60a:	262000        	l8ui	a6, a2, 0
	if (Xretries) {
  90c60d:	cbb4      	beqz.n	a11, 90c645 <rcUpdate_ht$constprop$5+0x75>
		if (Xretries == 1) {
  90c60f:	69b115        	bnei	a11, 1, 90c628 <rcUpdate_ht$constprop$5+0x58>
			pRc->state[txRate].per += 30;
  90c612:	286c1e        	addi	a8, a6, 30
  90c615:	080847        	extui	a8, a8, 0, 8
			if (pRc->state[txRate].per > 100) {
  90c618:	290a64        	movi	a9, 100
  90c61b:	789302        	bltu	a9, a8, 90c621 <rcUpdate_ht$constprop$5+0x51>
  90c61e:	60000e        	j	90c630 <rcUpdate_ht$constprop$5+0x60>
				pRc->state[txRate].per = 100;
  90c621:	292400        	s8i	a9, a2, 0
  90c624:	60000b        	j	90c633 <rcUpdate_ht$constprop$5+0x63>
  90c627:	00bc68        	excw
			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per -
  90c62a:	063914        	srli	a9, a6, 3
  90c62d:	09880c        	sub	a8, a8, a9
  90c630:	282400        	s8i	a8, a2, 0
		if (pRc->probeRate == txRate)
  90c633:	28302f        	l8ui	a8, a3, 47
  90c636:	784102        	beq	a4, a8, 90c63c <rcUpdate_ht$constprop$5+0x6c>
  90c639:	6000bb        	j	90c6f8 <rcUpdate_ht$constprop$5+0x128>
			pRc->probeRate = 0;
  90c63c:	c080      	movi.n	a8, 0
  90c63e:	28342f        	s8i	a8, a3, 47
  90c641:	6000b3        	j	90c6f8 <rcUpdate_ht$constprop$5+0x128>
  90c644:	00c0a9        	excw
  90c647:	0a8834        	min	a8, a8, a10
		if (nBad) {
  90c64a:	cbca      	beqz.n	a12, 90c688 <rcUpdate_ht$constprop$5+0xb8>
			if (nFrames > 0)
  90c64c:	649050        	beqz	a9, 90c6a0 <rcUpdate_ht$constprop$5+0xd0>
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c64f:	089b28        	mull	a11, a9, a8
  90c652:	9811      	s32i.n	a8, a1, 4
  90c654:	abcd      	add.n	a13, a12, a11
  90c656:	0eda11        	slli	a10, a13, 2
  90c659:	adaa      	add.n	a10, a10, a13
  90c65b:	0ead11        	slli	a13, a10, 2
  90c65e:	adaa      	add.n	a10, a10, a13
  90c660:	ab9b      	add.n	a11, a9, a11
  90c662:	0eaa11        	slli	a10, a10, 2
  90c665:	9912      	s32i.n	a9, a1, 8
  90c667:	9c13      	s32i.n	a12, a1, 12
  90c669:	5b68cb        	call8	8e6998 <__divsi3>
  90c66c:	b7ab      	addi.n	a11, a10, 7
  90c66e:	0aba3a        	movltz	a10, a11, a10
  90c671:	0a3a12        	srai	a10, a10, 3
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per -
  90c674:	aa6a      	add.n	a10, a6, a10
  90c676:	063b14        	srli	a11, a6, 3
  90c679:	0baa0c        	sub	a10, a10, a11
  90c67c:	2a2400        	s8i	a10, a2, 0
  90c67f:	8811      	l32i.n	a8, a1, 4
  90c681:	8912      	l32i.n	a9, a1, 8
  90c683:	8c13      	l32i.n	a12, a1, 12
  90c685:	600017        	j	90c6a0 <rcUpdate_ht$constprop$5+0xd0>
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90c688:	1a6a96        	l32r	a10, 8e70e0 <memset+0x298>
  90c68b:	0e8b11        	slli	a11, a8, 2
  90c68e:	abaa      	add.n	a10, a10, a11
  90c690:	8aa0      	l32i.n	a10, a10, 0
			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per -
  90c692:	063b14        	srli	a11, a6, 3
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90c695:	0a3a14        	srli	a10, a10, 3
			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per -
  90c698:	aa6a      	add.n	a10, a6, a10
  90c69a:	0baa0c        	sub	a10, a10, a11
  90c69d:	2a2400        	s8i	a10, a2, 0
		if (pRc->probeRate && pRc->probeRate == txRate) {
  90c6a0:	2a302f        	l8ui	a10, a3, 47
  90c6a3:	cba5      	beqz.n	a10, 90c6dc <rcUpdate_ht$constprop$5+0x10c>
  90c6a5:	7a4933        	bne	a4, a10, 90c6dc <rcUpdate_ht$constprop$5+0x10c>
			if (retries > 0 || 2 * nBad > nFrames) {
  90c6a8:	6b8105        	bgei	a8, 1, 90c6b1 <rcUpdate_ht$constprop$5+0xe1>
  90c6ab:	0fcc11        	slli	a12, a12, 1
  90c6ae:	7c9a07        	bge	a9, a12, 90c6b9 <rcUpdate_ht$constprop$5+0xe9>
				pRc->probeRate = 0;
  90c6b1:	c090      	movi.n	a9, 0
  90c6b3:	29342f        	s8i	a9, a3, 47
  90c6b6:	600022        	j	90c6dc <rcUpdate_ht$constprop$5+0x10c>
				pRc->rateMaxPhy = pRc->probeRate;
  90c6b9:	24346d        	s8i	a4, a3, 109
				if (pRc->state[pRc->probeRate].per > 30) {
  90c6bc:	282000        	l8ui	a8, a2, 0
  90c6bf:	c19e      	movi.n	a9, 30
  90c6c1:	789b04        	bgeu	a9, a8, 90c6c9 <rcUpdate_ht$constprop$5+0xf9>
					pRc->state[pRc->probeRate].per = 20;
  90c6c4:	c184      	movi.n	a8, 20
  90c6c6:	282400        	s8i	a8, a2, 0
				pRc->probeRate = 0;
  90c6c9:	c080      	movi.n	a8, 0
  90c6cb:	28342f        	s8i	a8, a3, 47
				pRc->probeTime = nowMsec - pRateTable->probeInterval / 2;
  90c6ce:	287001        	l8ui	a8, a7, 1
  90c6d1:	081814        	srli	a8, a8, 1
  90c6d4:	08580c        	sub	a8, a5, a8
  90c6d7:	983d      	s32i.n	a8, a3, 52
  90c6d9:	600007        	j	90c6e4 <rcUpdate_ht$constprop$5+0x114>
		if (retries > 0) {
  90c6dc:	6a8104        	blti	a8, 1, 90c6e4 <rcUpdate_ht$constprop$5+0x114>
			pRc->hwMaxRetryPktCnt = 0;
  90c6df:	c080      	movi.n	a8, 0
  90c6e1:	600010        	j	90c6f5 <rcUpdate_ht$constprop$5+0x125>
			if (txRate == pRc->rateMaxPhy && pRc->hwMaxRetryPktCnt < 255) {
  90c6e4:	28306d        	l8ui	a8, a3, 109
  90c6e7:	78490d        	bne	a4, a8, 90c6f8 <rcUpdate_ht$constprop$5+0x128>
  90c6ea:	283038        	l8ui	a8, a3, 56
  90c6ed:	290aff        	movi	a9, 255
  90c6f0:	798104        	beq	a8, a9, 90c6f8 <rcUpdate_ht$constprop$5+0x128>
				pRc->hwMaxRetryPktCnt++;
  90c6f3:	b188      	addi.n	a8, a8, 1
  90c6f5:	283438        	s8i	a8, a3, 56
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
  90c6f8:	2a2000        	l8ui	a10, a2, 0
  90c6fb:	644056        	beqz	a4, 90c755 <rcUpdate_ht$constprop$5+0x185>
  90c6fe:	c386      	movi.n	a8, 54
  90c700:	7a8b51        	bgeu	a8, a10, 90c755 <rcUpdate_ht$constprop$5+0x185>
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c703:	2b306d        	l8ui	a11, a3, 109
	    pRateTable->info[txRate].rateKbps <=
  90c706:	0e4911        	slli	a9, a4, 2
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c709:	0eb811        	slli	a8, a11, 2
	    pRateTable->info[txRate].rateKbps <=
  90c70c:	a499      	add.n	a9, a9, a4
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c70e:	ab88      	add.n	a8, a8, a11
	    pRateTable->info[txRate].rateKbps <=
  90c710:	0f9911        	slli	a9, a9, 1
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c713:	0f8811        	slli	a8, a8, 1
	    pRateTable->info[txRate].rateKbps <=
  90c716:	a499      	add.n	a9, a9, a4
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c718:	ab88      	add.n	a8, a8, a11
	    pRateTable->info[txRate].rateKbps <=
  90c71a:	0e9911        	slli	a9, a9, 2
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c71d:	0e8811        	slli	a8, a8, 2
	    pRateTable->info[txRate].rateKbps <=
  90c720:	a979      	add.n	a9, a7, a9
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c722:	a878      	add.n	a8, a7, a8
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
  90c724:	8995      	l32i.n	a9, a9, 20
  90c726:	8885      	l32i.n	a8, a8, 20
  90c728:	798329        	bltu	a8, a9, 90c755 <rcUpdate_ht$constprop$5+0x185>
  90c72b:	040c47        	extui	a12, a4, 0, 8
	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c72e:	2b3039        	l8ui	a11, a3, 57
  90c731:	c091      	movi.n	a9, 1
  90c733:	600015        	j	90c74c <rcUpdate_ht$constprop$5+0x17c>
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c736:	a838      	add.n	a8, a3, a8
  90c738:	2d803a        	l8ui	a13, a8, 58
  90c73b:	7cd908        	bne	a13, a12, 90c747 <rcUpdate_ht$constprop$5+0x177>
			*pNextIndex = pRc->validRateIndex[i-1];
  90c73e:	288039        	l8ui	a8, a8, 57
  90c741:	28346d        	s8i	a8, a3, 109
  90c744:	60000a        	j	90c752 <rcUpdate_ht$constprop$5+0x182>
  90c747:	b199      	addi.n	a9, a9, 1
	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c749:	090947        	extui	a9, a9, 0, 8
  90c74c:	009832        	sext	a8, a9, 7
  90c74f:	7b82e3        	blt	a8, a11, 90c736 <rcUpdate_ht$constprop$5+0x166>
		pRc->probeTime = nowMsec;
  90c752:	25360d        	s32i	a5, a3, 52
	if (pRc->state[txRate].per < lastPer) {
  90c755:	76a307        	bltu	a10, a6, 90c760 <rcUpdate_ht$constprop$5+0x190>
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
  90c758:	26302e        	l8ui	a6, a3, 46
  90c75b:	b068      	addi.n	a8, a6, -1
  90c75d:	600049        	j	90c7aa <rcUpdate_ht$constprop$5+0x1da>
  90c760:	0e4811        	slli	a8, a4, 2
  90c763:	a488      	add.n	a8, a8, a4
  90c765:	0f8811        	slli	a8, a8, 1
  90c768:	a484      	add.n	a4, a8, a4
  90c76a:	0e4411        	slli	a4, a4, 2
  90c76d:	264ce4        	addi	a6, a4, -28
  90c770:	d920      	mov.n	a9, a2
  90c772:	a676      	add.n	a6, a7, a6
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
  90c774:	a474      	add.n	a4, a7, a4
  90c776:	60001b        	j	90c795 <rcUpdate_ht$constprop$5+0x1c5>
  90c779:	2a6000        	l8ui	a10, a6, 0
  90c77c:	284010        	l8ui	a8, a4, 16
  90c77f:	78a9d5        	bne	a10, a8, 90c758 <rcUpdate_ht$constprop$5+0x188>
  90c782:	b098      	addi.n	a8, a9, -1
			if (pRc->state[rate].per > pRc->state[rate+1].per) {
  90c784:	2a8000        	l8ui	a10, a8, 0
  90c787:	299000        	l8ui	a9, a9, 0
  90c78a:	7a9b02        	bgeu	a9, a10, 90c790 <rcUpdate_ht$constprop$5+0x1c0>
				pRc->state[rate].per = pRc->state[rate+1].per;
  90c78d:	298400        	s8i	a9, a8, 0
  90c790:	d980      	mov.n	a9, a8
  90c792:	266cd4        	addi	a6, a6, -44
		for (rate = txRate - 1; rate >= 0; rate--) {
  90c795:	7939e0        	bne	a3, a9, 90c779 <rcUpdate_ht$constprop$5+0x1a9>
  90c798:	63ffbc        	j	90c758 <rcUpdate_ht$constprop$5+0x188>
  90c79b:	002420        	excw
		if (pRc->state[rate+1].per < pRc->state[rate].per) {
  90c79e:	002920        	excw
  90c7a1:	01749b        	excw
  90c7a4:	022424        	excw
			pRc->state[rate+1].per = pRc->state[rate].per;
  90c7a7:	01b122        	excw
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
  90c7aa:	03240c        	sub	a4, a2, a3
  90c7ad:	7842eb        	blt	a4, a8, 90c79c <rcUpdate_ht$constprop$5+0x1cc>
	if (nowMsec - pRc->perDownTime >= pRateTable->rssiReduceInterval) {
  90c7b0:	22321a        	l32i	a2, a3, 104
  90c7b3:	247002        	l8ui	a4, a7, 2
  90c7b6:	02520c        	sub	a2, a5, a2
  90c7b9:	74231f        	bltu	a2, a4, 90c7dc <rcUpdate_ht$constprop$5+0x20c>
  90c7bc:	d230      	mov.n	a2, a3
  90c7be:	600011        	j	90c7d3 <rcUpdate_ht$constprop$5+0x203>
			pRc->state[rate].per = 7*pRc->state[rate].per/8;
  90c7c1:	272000        	l8ui	a7, a2, 0
  90c7c4:	0d7411        	slli	a4, a7, 3
  90c7c7:	07440c        	sub	a4, a4, a7
  90c7ca:	043412        	srai	a4, a4, 3
  90c7cd:	242400        	s8i	a4, a2, 0
  90c7d0:	222c01        	addi	a2, a2, 1
		for (rate = 0; rate < pRc->rateTableSize; rate++) {
  90c7d3:	03240c        	sub	a4, a2, a3
  90c7d6:	7642e7        	blt	a4, a6, 90c7c1 <rcUpdate_ht$constprop$5+0x1f1>
		pRc->perDownTime = nowMsec;
  90c7d9:	25361a        	s32i	a5, a3, 104
  90c7dc:	d10f      	retw.n
	...

0090c7e0 <rcRateGetIndex$constprop$9>:
rcRateGetIndex(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c7e0:	6c1004        	entry	a1, 32
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  90c7e3:	2a2282        	l32i	a10, a2, 0x208
	if (minRate) {
  90c7e6:	64604a        	beqz	a6, 90c834 <rcRateGetIndex$constprop$9+0x54>
	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c7e9:	2ba039        	l8ui	a11, a10, 57
  90c7ec:	c490      	movi.n	a9, 64
  90c7ee:	c081      	movi.n	a8, 1
  90c7f0:	600019        	j	90c80d <rcRateGetIndex$constprop$9+0x2d>
  90c7f3:	00a5a5        	excw
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c7f6:	2c503a        	l8ui	a12, a5, 58
  90c7f9:	74c90b        	bne	a12, a4, 90c808 <rcRateGetIndex$constprop$9+0x28>
  90c7fc:	b099      	addi.n	a9, a9, -1
			*pNextIndex = pRc->validRateIndex[i-1];
  90c7fe:	245039        	l8ui	a4, a5, 57
		for (j = RATE_TABLE_11N_SIZE; j > 0; j-- ) {
  90c801:	659fe9        	bnez	a9, 90c7ee <rcRateGetIndex$constprop$9+0xe>
  90c804:	600036        	j	90c83e <rcRateGetIndex$constprop$9+0x5e>
  90c807:	00b188        	excw
	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c80a:	080847        	extui	a8, a8, 0, 8
  90c80d:	008532        	sext	a5, a8, 7
  90c810:	7b52e0        	blt	a5, a11, 90c7f4 <rcRateGetIndex$constprop$9+0x14>
  90c813:	600027        	j	90c83e <rcRateGetIndex$constprop$9+0x5e>
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c816:	a9a9      	add.n	a9, a10, a9
  90c818:	2c903a        	l8ui	a12, a9, 58
  90c81b:	74c907        	bne	a12, a4, 90c826 <rcRateGetIndex$constprop$9+0x46>
		for (j = stepDown; j > 0; j-- ) {
  90c81e:	b055      	addi.n	a5, a5, -1
			*pNextIndex = pRc->validRateIndex[i-1];
  90c820:	249039        	l8ui	a4, a9, 57
  90c823:	60000d        	j	90c834 <rcRateGetIndex$constprop$9+0x54>
  90c826:	b188      	addi.n	a8, a8, 1
	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c828:	080847        	extui	a8, a8, 0, 8
  90c82b:	008932        	sext	a9, a8, 7
  90c82e:	7b92e4        	blt	a9, a11, 90c816 <rcRateGetIndex$constprop$9+0x36>
  90c831:	600009        	j	90c83e <rcRateGetIndex$constprop$9+0x5e>
		for (j = stepDown; j > 0; j-- ) {
  90c834:	c856      	beqz.n	a5, 90c83e <rcRateGetIndex$constprop$9+0x5e>
	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c836:	2ba039        	l8ui	a11, a10, 57
  90c839:	c081      	movi.n	a8, 1
  90c83b:	63ffec        	j	90c82b <rcRateGetIndex$constprop$9+0x4b>
}
  90c83e:	d240      	mov.n	a2, a4
  90c840:	d10f      	retw.n
	...

0090c844 <rcRateFind_11n>:
{
  90c844:	6c100c        	entry	a1, 96
  90c847:	9217      	s32i.n	a2, a1, 28
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c849:	8817      	l32i.n	a8, a1, 28
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
  90c84b:	222248        	l32i	a2, a2, 0x120
{
  90c84e:	9715      	s32i.n	a7, a1, 20
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
  90c850:	9216      	s32i.n	a2, a1, 24
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c852:	2282c2        	l32i	a2, a8, 0x308
  90c855:	8916      	l32i.n	a9, a1, 24
	*isProbing = FALSE;
  90c857:	2b1219        	l32i	a11, a1, 100
	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0,
  90c85a:	8815      	l32i.n	a8, a1, 20
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c85c:	0e2211        	slli	a2, a2, 2
{
  90c85f:	9419      	s32i.n	a4, a1, 36
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c861:	a292      	add.n	a2, a9, a2
	*isProbing = FALSE;
  90c863:	c040      	movi.n	a4, 0
	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0,
  90c865:	080940        	extui	a9, a8, 0, 1
{
  90c868:	931a      	s32i.n	a3, a1, 40
  90c86a:	961b      	s32i.n	a6, a1, 44
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
  90c86c:	233282        	l32i	a3, a3, 0x208
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c86f:	8621      	l32i.n	a6, a2, 4
	nowMsec = A_MS_TICKGET();
  90c871:	da40      	mov.n	a10, a4
	*isProbing = FALSE;
  90c873:	94b0      	s32i.n	a4, a11, 0
{
  90c875:	9518      	s32i.n	a5, a1, 32
	nowMsec = A_MS_TICKGET();
  90c877:	29160c        	s32i	a9, a1, 48
{
  90c87a:	251218        	l32i	a5, a1, 96
	nowMsec = A_MS_TICKGET();
  90c87d:	5bec76        	call8	907a58 <ath_hal_getuptime>
	maxIndex = pRc->maxValidRate-1;
  90c880:	2b3039        	l8ui	a11, a3, 57
  90c883:	b0b7      	addi.n	a7, a11, -1
	for (index = maxIndex; index >= minIndex ; index--) {
  90c885:	070747        	extui	a7, a7, 0, 8
	bestThruput = 0;
  90c888:	dc40      	mov.n	a12, a4
		thisThruput = pRateTable->info[rate].userRateKbps * (100 - perThres);
  90c88a:	c0ec      	movi.n	a14, 12
  90c88c:	2f0a64        	movi	a15, 100
  90c88f:	891c      	l32i.n	a9, a1, 48
  90c891:	60004a        	j	90c8df <rcRateFind_11n+0x9b>
		rate = pRc->validRateIndex[index];
  90c894:	a232      	add.n	a2, a3, a2
  90c896:	28203a        	l8ui	a8, a2, 58
		if (rate > pRc->rateMaxPhy) {
  90c899:	22306d        	l8ui	a2, a3, 109
  90c89c:	78233a        	bltu	a2, a8, 90c8da <rcRateFind_11n+0x96>
		if( bestThruput >= pRateTable->info[rate].userRateKbps)
  90c89f:	0e8211        	slli	a2, a8, 2
  90c8a2:	a822      	add.n	a2, a2, a8
  90c8a4:	0f2211        	slli	a2, a2, 1
  90c8a7:	a822      	add.n	a2, a2, a8
  90c8a9:	0e2211        	slli	a2, a2, 2
  90c8ac:	a262      	add.n	a2, a6, a2
  90c8ae:	8d26      	l32i.n	a13, a2, 24
  90c8b0:	7dc311        	bltu	a12, a13, 90c8c5 <rcRateFind_11n+0x81>
	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  90c8b3:	22306d        	l8ui	a2, a3, 109
  90c8b6:	72436c        	bltu	a4, a2, 90c926 <rcRateFind_11n+0xe2>
  90c8b9:	8815      	l32i.n	a8, a1, 20
  90c8bb:	7f8767        	bbci	a8, 31, 90c926 <rcRateFind_11n+0xe2>
  90c8be:	c040      	movi.n	a4, 0
	for (i = 0; i < pRc->maxValidRate-1; i++) {
  90c8c0:	b0bb      	addi.n	a11, a11, -1
  90c8c2:	60003d        	j	90c903 <rcRateFind_11n+0xbf>
		perThres = pRc->state[rate].per;
  90c8c5:	a832      	add.n	a2, a3, a8
  90c8c7:	222000        	l8ui	a2, a2, 0
		thisThruput = pRateTable->info[rate].userRateKbps * (100 - perThres);
  90c8ca:	0e2237        	maxu	a2, a2, a14
  90c8cd:	02f20c        	sub	a2, a15, a2
  90c8d0:	0d2228        	mull	a2, a2, a13
		if (bestThruput <= thisThruput) {
  90c8d3:	7c2303        	bltu	a2, a12, 90c8da <rcRateFind_11n+0x96>
  90c8d6:	d480      	mov.n	a4, a8
  90c8d8:	dc20      	mov.n	a12, a2
  90c8da:	b077      	addi.n	a7, a7, -1
	for (index = maxIndex; index >= minIndex ; index--) {
  90c8dc:	070747        	extui	a7, a7, 0, 8
  90c8df:	007232        	sext	a2, a7, 7
  90c8e2:	672fae        	bgez	a2, 90c894 <rcRateFind_11n+0x50>
  90c8e5:	63ffca        	j	90c8b3 <rcRateFind_11n+0x6f>
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c8e8:	a437      	add.n	a7, a3, a4
  90c8ea:	28703a        	l8ui	a8, a7, 58
  90c8ed:	72890d        	bne	a8, a2, 90c8fe <rcRateFind_11n+0xba>
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  90c8f0:	843d      	l32i.n	a4, a3, 52
  90c8f2:	286001        	l8ui	a8, a6, 1
  90c8f5:	04a40c        	sub	a4, a10, a4
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) &&
  90c8f8:	74830d        	bltu	a8, a4, 90c909 <rcRateFind_11n+0xc5>
  90c8fb:	600029        	j	90c928 <rcRateFind_11n+0xe4>
	for (i = 0; i < pRc->maxValidRate-1; i++) {
  90c8fe:	b144      	addi.n	a4, a4, 1
  90c900:	040447        	extui	a4, a4, 0, 8
  90c903:	7b42e1        	blt	a4, a11, 90c8e8 <rcRateFind_11n+0xa4>
  90c906:	60001e        	j	90c928 <rcRateFind_11n+0xe4>
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  90c909:	243038        	l8ui	a4, a3, 56
  90c90c:	c948      	beqz.n	a4, 90c928 <rcRateFind_11n+0xe4>
			*pNextIndex = pRc->validRateIndex[i+1];
  90c90e:	22703b        	l8ui	a2, a7, 59
			pRc->hwMaxRetryPktCnt = 0;
  90c911:	c040      	movi.n	a4, 0
			*isProbing            = TRUE;
  90c913:	2b1219        	l32i	a11, a1, 100
			pRc->hwMaxRetryPktCnt = 0;
  90c916:	243438        	s8i	a4, a3, 56
			pRc->probeRate        = rate;
  90c919:	22342f        	s8i	a2, a3, 47
			pRc->probeTime        = nowMsec;
  90c91c:	9a3d      	s32i.n	a10, a3, 52
			*isProbing            = TRUE;
  90c91e:	c041      	movi.n	a4, 1
  90c920:	94b0      	s32i.n	a4, a11, 0
  90c922:	600002        	j	90c928 <rcRateFind_11n+0xe4>
  90c925:	00d240        	extui	a2, a0, 13, 1
	if (rate > (pRc->rateTableSize - 1)) {
  90c928:	24302e        	l8ui	a4, a3, 46
  90c92b:	742205        	blt	a2, a4, 90c934 <rcRateFind_11n+0xf0>
		rate = pRc->rateTableSize - 1;
  90c92e:	224cff        	addi	a2, a4, -1
  90c931:	020247        	extui	a2, a2, 0, 8
	if (!(*isProbing) && pSib) {
  90c934:	2c1219        	l32i	a12, a1, 100
  90c937:	87c0      	l32i.n	a7, a12, 0
  90c939:	657178        	bnez	a7, 90cab5 <rcRateFind_11n+0x271>
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c93c:	0e2411        	slli	a4, a2, 2
  90c93f:	a244      	add.n	a4, a4, a2
  90c941:	0f4411        	slli	a4, a4, 1
  90c944:	a244      	add.n	a4, a4, a2
  90c946:	0e4411        	slli	a4, a4, 2
  90c949:	a464      	add.n	a4, a6, a4
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c94b:	8a17      	l32i.n	a10, a1, 28
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c94d:	8845      	l32i.n	a8, a4, 20
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c94f:	24a248        	l32i	a4, a10, 0x120
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c952:	28361c        	s32i	a8, a3, 112
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c955:	9844      	s32i.n	a8, a4, 16
		((struct atheros_softc*)sc->sc_rc)->currentTxRateIndex = rate;
  90c957:	9245      	s32i.n	a2, a4, 20
	nrix = rix;
  90c959:	d820      	mov.n	a8, a2
	A_UINT8 i = 0;
  90c95b:	d490      	mov.n	a4, a9
	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90c95d:	cb91      	beqz.n	a9, 90c992 <rcRateFind_11n+0x14e>
  90c95f:	89c0      	l32i.n	a9, a12, 0
	A_UINT8 i = 0;
  90c961:	d470      	mov.n	a4, a7
	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90c963:	ca9b      	beqz.n	a9, 90c992 <rcRateFind_11n+0x14e>
				FALSE, asc->tx_chainmask, asn->stbc);
  90c965:	24321d        	l32i	a4, a3, 116
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
  90c968:	c0e0      	movi.n	a14, 0
  90c96a:	04d451        	extui	a4, a4, 29, 2
  90c96d:	9410      	s32i.n	a4, a1, 0
  90c96f:	8416      	l32i.n	a4, a1, 24
  90c971:	dd20      	mov.n	a13, a2
  90c973:	8f43      	l32i.n	a15, a4, 12
  90c975:	c0c1      	movi.n	a12, 1
  90c977:	db50      	mov.n	a11, a5
  90c979:	da60      	mov.n	a10, a6
  90c97b:	5bfdc4        	call8	90c08c <rcRateSetseries>
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
  90c97e:	8a1a      	l32i.n	a10, a1, 40
  90c980:	c0e0      	movi.n	a14, 0
  90c982:	c0d1      	movi.n	a13, 1
  90c984:	022c02        	or	a12, a2, a2
  90c987:	066b02        	or	a11, a6, a6
  90c98a:	5bff95        	call8	90c7e0 <rcRateGetIndex$constprop$9>
  90c98d:	d8a0      	mov.n	a8, a10
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
  90c98f:	240a01        	movi	a4, 1
	tryPerRate = (numTries/numRates);
  90c992:	8b18      	l32i.n	a11, a1, 32
  90c994:	8a19      	l32i.n	a10, a1, 36
  90c996:	981c      	s32i.n	a8, a1, 48
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90c998:	b147      	addi.n	a7, a4, 1
	tryPerRate = (numTries/numRates);
  90c99a:	5b67ff        	call8	8e6998 <__divsi3>
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90c99d:	04044f        	extui	a4, a4, 0, 16
  90c9a0:	0f4b11        	slli	a11, a4, 1
  90c9a3:	a4bb      	add.n	a11, a11, a4
			nrix, FALSE, asc->tx_chainmask, asn->stbc);
  90c9a5:	24321d        	l32i	a4, a3, 116
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90c9a8:	881c      	l32i.n	a8, a1, 48
  90c9aa:	04d451        	extui	a4, a4, 29, 2
  90c9ad:	9410      	s32i.n	a4, a1, 0
  90c9af:	8416      	l32i.n	a4, a1, 24
	tryPerRate = (numTries/numRates);
  90c9b1:	0a0947        	extui	a9, a10, 0, 8
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90c9b4:	8f43      	l32i.n	a15, a4, 12
  90c9b6:	0ebb11        	slli	a11, a11, 2
  90c9b9:	dc90      	mov.n	a12, a9
  90c9bb:	c0e0      	movi.n	a14, 0
  90c9bd:	dd80      	mov.n	a13, a8
  90c9bf:	ab5b      	add.n	a11, a5, a11
  90c9c1:	da60      	mov.n	a10, a6
	tryPerRate = (numTries/numRates);
  90c9c3:	9914      	s32i.n	a9, a1, 16
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90c9c5:	5bfdb1        	call8	90c08c <rcRateSetseries>
  90c9c8:	8914      	l32i.n	a9, a1, 16
  90c9ca:	07941c        	mul16u	a4, a9, a7
  90c9cd:	8919      	l32i.n	a9, a1, 36
  90c9cf:	04940c        	sub	a4, a9, a4
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  90c9d2:	8915      	l32i.n	a9, a1, 20
  90c9d4:	040447        	extui	a4, a4, 0, 8
  90c9d7:	091940        	extui	a9, a9, 1, 1
  90c9da:	9915      	s32i.n	a9, a1, 20
		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);
  90c9dc:	891b      	l32i.n	a9, a1, 44
  90c9de:	09094f        	extui	a9, a9, 0, 16
  90c9e1:	9919      	s32i.n	a9, a1, 36
  90c9e3:	60005c        	j	90ca43 <rcRateFind_11n+0x1ff>
		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
  90c9e6:	8c18      	l32i.n	a12, a1, 32
  90c9e8:	b17a      	addi.n	a10, a7, 1
  90c9ea:	0acb0c        	sub	a11, a12, a10
  90c9ed:	8c15      	l32i.n	a12, a1, 20
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  90c9ef:	c0e0      	movi.n	a14, 0
		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
  90c9f1:	0bce38        	moveqz	a14, a12, a11
  90c9f4:	8b18      	l32i.n	a11, a1, 32
  90c9f6:	8914      	l32i.n	a9, a1, 16
  90c9f8:	0aba0c        	sub	a10, a11, a10
  90c9fb:	0a4938        	moveqz	a9, a4, a10
		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);
  90c9fe:	8d19      	l32i.n	a13, a1, 36
  90ca00:	8a1a      	l32i.n	a10, a1, 40
  90ca02:	dc80      	mov.n	a12, a8
  90ca04:	066b02        	or	a11, a6, a6
  90ca07:	991c      	s32i.n	a9, a1, 48
  90ca09:	5bff75        	call8	90c7e0 <rcRateGetIndex$constprop$9>
  90ca0c:	d8a0      	mov.n	a8, a10
		rcRateSetseries(pRateTable, &series[i], tryNum,
  90ca0e:	070a4f        	extui	a10, a7, 0, 16
  90ca11:	0fab11        	slli	a11, a10, 1
  90ca14:	aabb      	add.n	a11, a11, a10
				nrix, TRUE, asc->tx_chainmask, asn->stbc);
  90ca16:	2a321d        	l32i	a10, a3, 116
		rcRateSetseries(pRateTable, &series[i], tryNum,
  90ca19:	8c16      	l32i.n	a12, a1, 24
  90ca1b:	0ada51        	extui	a10, a10, 29, 2
  90ca1e:	891c      	l32i.n	a9, a1, 48
  90ca20:	9a10      	s32i.n	a10, a1, 0
  90ca22:	8fc3      	l32i.n	a15, a12, 12
  90ca24:	0ebb11        	slli	a11, a11, 2
  90ca27:	dc90      	mov.n	a12, a9
  90ca29:	c0e1      	movi.n	a14, 1
  90ca2b:	dd80      	mov.n	a13, a8
  90ca2d:	ab5b      	add.n	a11, a5, a11
  90ca2f:	da60      	mov.n	a10, a6
  90ca31:	981c      	s32i.n	a8, a1, 48
  90ca33:	5bfd96        	call8	90c08c <rcRateSetseries>
  90ca36:	8914      	l32i.n	a9, a1, 16
	for (; i < numRates; i++) {
  90ca38:	b177      	addi.n	a7, a7, 1
  90ca3a:	09440c        	sub	a4, a4, a9
  90ca3d:	070747        	extui	a7, a7, 0, 8
  90ca40:	040447        	extui	a4, a4, 0, 8
  90ca43:	8918      	l32i.n	a9, a1, 32
  90ca45:	881c      	l32i.n	a8, a1, 48
  90ca47:	79729b        	blt	a7, a9, 90c9e6 <rcRateFind_11n+0x1a2>
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
  90ca4a:	8817      	l32i.n	a8, a1, 28
  90ca4c:	2482c2        	l32i	a4, a8, 0x308
  90ca4f:	69416d        	bnei	a4, 1, 90cac0 <rcRateFind_11n+0x27c>
		dot11Rate = pRateTable->info[rix].dot11Rate;
  90ca52:	0e2311        	slli	a3, a2, 2
  90ca55:	a233      	add.n	a3, a3, a2
  90ca57:	0f3311        	slli	a3, a3, 1
  90ca5a:	a232      	add.n	a2, a3, a2
  90ca5c:	0e2211        	slli	a2, a2, 2
  90ca5f:	a266      	add.n	a6, a6, a2
  90ca61:	28601e        	l8ui	a8, a6, 30
		if (i == 4 &&
  90ca64:	697448        	bnei	a7, 4, 90cab0 <rcRateFind_11n+0x26c>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) ||
  90ca67:	270a00        	movi	a7, 0
  90ca6a:	238cfe        	addi	a3, a8, -2
  90ca6d:	077902        	or	a9, a7, a7
  90ca70:	034938        	moveqz	a9, a4, a3
		if (i == 4 &&
  90ca73:	090347        	extui	a3, a9, 0, 8
		phy = pRateTable->info[rix].phy;
  90ca76:	266010        	l8ui	a6, a6, 16
		if (i == 4 &&
  90ca79:	77310b        	beq	a3, a7, 90ca88 <rcRateFind_11n+0x244>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) ||
  90ca7c:	226cfa        	addi	a2, a6, -6
  90ca7f:	027439        	movnez	a4, a7, a2
		if (i == 4 &&
  90ca82:	040247        	extui	a2, a4, 0, 8
  90ca85:	772905        	bne	a2, a7, 90ca8e <rcRateFind_11n+0x24a>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) ||
  90ca88:	698324        	bnei	a8, 3, 90cab0 <rcRateFind_11n+0x26c>
  90ca8b:	696421        	bnei	a6, 4, 90cab0 <rcRateFind_11n+0x26c>
			series[3].rix = series[2].rix;
  90ca8e:	225018        	l8ui	a2, a5, 24
  90ca91:	225424        	s8i	a2, a5, 36
			series[3].flags = series[2].flags;
  90ca94:	22501b        	l8ui	a2, a5, 27
  90ca97:	225427        	s8i	a2, a5, 39
			series[3].max4msframelen = series[2].max4msframelen;
  90ca9a:	8257      	l32i.n	a2, a5, 28
  90ca9c:	925a      	s32i.n	a2, a5, 40
  90ca9e:	60000e        	j	90cab0 <rcRateFind_11n+0x26c>
			series[0].flags |= ATH_RC_RTSCTS_FLAG;
  90caa1:	225003        	l8ui	a2, a5, 3
  90caa4:	c130      	movi.n	a3, 16
  90caa6:	032202        	or	a2, a2, a3
  90caa9:	225403        	s8i	a2, a5, 3
}
  90caac:	d10f      	retw.n
  90caae:	00006e        	excw
		if (dot11Rate <= 3 ) {
  90cab1:	84ed      	l32i.n	a4, a14, 52
  90cab3:	d10f      	retw.n
	nrix = rix;
  90cab5:	d820      	mov.n	a8, a2
	A_UINT8 i = 0;
  90cab7:	d490      	mov.n	a4, a9
	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90cab9:	649ed5        	beqz	a9, 90c992 <rcRateFind_11n+0x14e>
  90cabc:	63fea5        	j	90c965 <rcRateFind_11n+0x121>
  90cabf:	00d10f        	subx8	a1, a13, a0
	...

0090cac4 <rcUpdate_11n>:
{
  90cac4:	6c1008        	entry	a1, 64
  90cac7:	d920      	mov.n	a9, a2
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cac9:	2492c2        	l32i	a4, a9, 0x308
  90cacc:	222248        	l32i	a2, a2, 0x120
  90cacf:	0e4411        	slli	a4, a4, 2
  90cad2:	a422      	add.n	a2, a2, a4
  90cad4:	8421      	l32i.n	a4, a2, 4
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90cad6:	223282        	l32i	a2, a3, 0x208
{
  90cad9:	d870      	mov.n	a8, a7
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90cadb:	9214      	s32i.n	a2, a1, 16
{
  90cadd:	c071      	movi.n	a7, 1
	if (finalTSIdx != 0) {
  90cadf:	6450ba        	beqz	a5, 90cb9d <rcUpdate_11n+0xd9>
  90cae2:	c0a2      	movi.n	a10, 2
  90cae4:	d2a0      	mov.n	a2, a10
  90cae6:	067239        	movnez	a2, a7, a6
  90cae9:	9215      	s32i.n	a2, a1, 20
  90caeb:	c070      	movi.n	a7, 0
  90caed:	d280      	mov.n	a2, a8
  90caef:	6000a1        	j	90cb94 <rcUpdate_11n+0xd0>
  90caf2:	000000        	ill
			if (rcs[series].tries != 0) {
  90caf5:	2e2001        	l8ui	a14, a2, 1
  90caf8:	64e094        	beqz	a14, 90cb90 <rcUpdate_11n+0xcc>
				flags = rcs[series].flags;
  90cafb:	2c2003        	l8ui	a12, a2, 3
  90cafe:	c0b2      	movi.n	a11, 2
  90cb00:	0bca01        	and	a10, a12, a11
				if ((flags & ATH_RC_CW40_FLAG) &&
  90cb03:	c8a9      	beqz.n	a10, 90cb10 <rcUpdate_11n+0x4c>
  90cb05:	8d14      	l32i.n	a13, a1, 16
  90cb07:	2bd06c        	l8ui	a11, a13, 108
  90cb0a:	7ab102        	beq	a11, a10, 90cb10 <rcUpdate_11n+0x4c>
  90cb0d:	600147        	j	90cc58 <rcUpdate_11n+0x194>
				if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
  90cb10:	c0b6      	movi.n	a11, 6
  90cb12:	0bcb01        	and	a11, a12, a11
  90cb15:	69b617        	bnei	a11, 6, 90cb30 <rcUpdate_11n+0x6c>
					rix = pRateTable->info[rcs[series].rix].htIndex;
  90cb18:	2b2000        	l8ui	a11, a2, 0
  90cb1b:	0eba11        	slli	a10, a11, 2
  90cb1e:	abaa      	add.n	a10, a10, a11
  90cb20:	0faa11        	slli	a10, a10, 1
  90cb23:	abaa      	add.n	a10, a10, a11
  90cb25:	0eaa11        	slli	a10, a10, 2
  90cb28:	aa4a      	add.n	a10, a4, a10
  90cb2a:	2ca025        	l8ui	a12, a10, 37
  90cb2d:	600046        	j	90cb77 <rcUpdate_11n+0xb3>
  90cb30:	2b2000        	l8ui	a11, a2, 0
				} else if (flags & ATH_RC_HT40_SGI_FLAG) {
  90cb33:	7dc715        	bbci	a12, 29, 90cb4c <rcUpdate_11n+0x88>
					rix = pRateTable->info[rcs[series].rix].sgiIndex;
  90cb36:	0eba11        	slli	a10, a11, 2
  90cb39:	abaa      	add.n	a10, a10, a11
  90cb3b:	0faa11        	slli	a10, a10, 1
  90cb3e:	abaa      	add.n	a10, a10, a11
  90cb40:	0eaa11        	slli	a10, a10, 2
  90cb43:	aa4a      	add.n	a10, a4, a10
  90cb45:	2ca024        	l8ui	a12, a10, 36
  90cb48:	60002b        	j	90cb77 <rcUpdate_11n+0xb3>
  90cb4b:	00c9a5        	excw
					rix = pRateTable->info[rcs[series].rix].cw40Index;
  90cb4e:	0eba11        	slli	a10, a11, 2
  90cb51:	abaa      	add.n	a10, a10, a11
  90cb53:	0faa11        	slli	a10, a10, 1
  90cb56:	abaa      	add.n	a10, a10, a11
  90cb58:	0eaa11        	slli	a10, a10, 2
  90cb5b:	aa4a      	add.n	a10, a4, a10
  90cb5d:	2ca023        	l8ui	a12, a10, 35
  90cb60:	600013        	j	90cb77 <rcUpdate_11n+0xb3>
  90cb63:	00000e        	subx4	a0, a0, a0
					rix = pRateTable->info[rcs[series].rix].baseIndex;
  90cb66:	ba11      	addi.n	a1, a1, 10
  90cb68:	abaa      	add.n	a10, a10, a11
  90cb6a:	0faa11        	slli	a10, a10, 1
  90cb6d:	abaa      	add.n	a10, a10, a11
  90cb6f:	0eaa11        	slli	a10, a10, 2
  90cb72:	aa4a      	add.n	a10, a4, a10
  90cb74:	2ca022        	l8ui	a12, a10, 34
  90cb77:	2a1210        	l32i	a10, a1, 64
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries,
  90cb7a:	8d15      	l32i.n	a13, a1, 20
  90cb7c:	0a0f4f        	extui	a15, a10, 0, 16
  90cb7f:	9f10      	s32i.n	a15, a1, 0
  90cb81:	da90      	mov.n	a10, a9
  90cb83:	db30      	mov.n	a11, a3
  90cb85:	9817      	s32i.n	a8, a1, 28
  90cb87:	9916      	s32i.n	a9, a1, 24
  90cb89:	5bfe91        	call8	90c5d0 <rcUpdate_ht$constprop$5>
  90cb8c:	8916      	l32i.n	a9, a1, 24
  90cb8e:	8817      	l32i.n	a8, a1, 28
		for (series = 0; series < finalTSIdx ; series++) {
  90cb90:	b177      	addi.n	a7, a7, 1
  90cb92:	bc22      	addi.n	a2, a2, 12
  90cb94:	757b02        	bgeu	a7, a5, 90cb9a <rcUpdate_11n+0xd6>
  90cb97:	63ff5a        	j	90caf5 <rcUpdate_11n+0x31>
  90cb9a:	600023        	j	90cbc1 <rcUpdate_11n+0xfd>
		if (rcs[0].tries == 1 && Xretries == 1) {
  90cb9d:	228001        	l8ui	a2, a8, 1
  90cba0:	db50      	mov.n	a11, a5
  90cba2:	b022      	addi.n	a2, a2, -1
  90cba4:	027b38        	moveqz	a11, a7, a2
  90cba7:	0b0247        	extui	a2, a11, 0, 8
  90cbaa:	c82a      	beqz.n	a2, 90cbb8 <rcUpdate_11n+0xf4>
  90cbac:	b062      	addi.n	a2, a6, -1
  90cbae:	dd50      	mov.n	a13, a5
  90cbb0:	027d38        	moveqz	a13, a7, a2
  90cbb3:	0d0247        	extui	a2, a13, 0, 8
  90cbb6:	cc23      	bnez.n	a2, 90cbbd <rcUpdate_11n+0xf9>
	A_UINT32 series = 0;
  90cbb8:	c070      	movi.n	a7, 0
  90cbba:	600003        	j	90cbc1 <rcUpdate_11n+0xfd>
  90cbbd:	d750      	mov.n	a7, a5
			Xretries = 2;
  90cbbf:	c062      	movi.n	a6, 2
	flags = rcs[series].flags;
  90cbc1:	0f7211        	slli	a2, a7, 1
  90cbc4:	a727      	add.n	a7, a2, a7
  90cbc6:	0e7711        	slli	a7, a7, 2
  90cbc9:	a788      	add.n	a8, a8, a7
  90cbcb:	278003        	l8ui	a7, a8, 3
  90cbce:	c052      	movi.n	a5, 2
  90cbd0:	057501        	and	a5, a7, a5
	if ((flags & ATH_RC_CW40_FLAG) &&
  90cbd3:	c856      	beqz.n	a5, 90cbdd <rcUpdate_11n+0x119>
  90cbd5:	8a14      	l32i.n	a10, a1, 16
  90cbd7:	22a06c        	l8ui	a2, a10, 108
  90cbda:	75297a        	bne	a2, a5, 90cc58 <rcUpdate_11n+0x194>
	if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
  90cbdd:	c0a6      	movi.n	a10, 6
  90cbdf:	0a7a01        	and	a10, a7, a10
  90cbe2:	228000        	l8ui	a2, a8, 0
  90cbe5:	69a614        	bnei	a10, 6, 90cbfd <rcUpdate_11n+0x139>
		rix = pRateTable->info[rcs[series].rix].htIndex;
  90cbe8:	0e2511        	slli	a5, a2, 2
  90cbeb:	a255      	add.n	a5, a5, a2
  90cbed:	0f5511        	slli	a5, a5, 1
  90cbf0:	a252      	add.n	a2, a5, a2
  90cbf2:	0e2211        	slli	a2, a2, 2
  90cbf5:	a244      	add.n	a4, a4, a2
  90cbf7:	2c4025        	l8ui	a12, a4, 37
  90cbfa:	600040        	j	90cc3e <rcUpdate_11n+0x17a>
	} else if (flags & ATH_RC_HT40_SGI_FLAG) {
  90cbfd:	7d7714        	bbci	a7, 29, 90cc15 <rcUpdate_11n+0x151>
		rix = pRateTable->info[rcs[series].rix].sgiIndex;
  90cc00:	0e2511        	slli	a5, a2, 2
  90cc03:	a255      	add.n	a5, a5, a2
  90cc05:	0f5511        	slli	a5, a5, 1
  90cc08:	a252      	add.n	a2, a5, a2
  90cc0a:	0e2211        	slli	a2, a2, 2
  90cc0d:	a244      	add.n	a4, a4, a2
  90cc0f:	2c4024        	l8ui	a12, a4, 36
  90cc12:	600028        	j	90cc3e <rcUpdate_11n+0x17a>
	} else if (flags & ATH_RC_CW40_FLAG) {
  90cc15:	c953      	beqz.n	a5, 90cc2c <rcUpdate_11n+0x168>
		rix = pRateTable->info[rcs[series].rix].cw40Index;
  90cc17:	0e2511        	slli	a5, a2, 2
  90cc1a:	a255      	add.n	a5, a5, a2
  90cc1c:	0f5511        	slli	a5, a5, 1
  90cc1f:	a252      	add.n	a2, a5, a2
  90cc21:	0e2211        	slli	a2, a2, 2
  90cc24:	a244      	add.n	a4, a4, a2
  90cc26:	2c4023        	l8ui	a12, a4, 35
  90cc29:	600011        	j	90cc3e <rcUpdate_11n+0x17a>
		rix = pRateTable->info[rcs[series].rix].baseIndex;
  90cc2c:	0e2511        	slli	a5, a2, 2
  90cc2f:	a255      	add.n	a5, a5, a2
  90cc31:	0f5511        	slli	a5, a5, 1
  90cc34:	a252      	add.n	a2, a5, a2
  90cc36:	0e2211        	slli	a2, a2, 2
  90cc39:	a244      	add.n	a4, a4, a2
  90cc3b:	2c4022        	l8ui	a12, a4, 34
	rcUpdate_ht(sc, an, rix, Xretries, long_retry, curTxAnt,
  90cc3e:	221211        	l32i	a2, a1, 68
  90cc41:	2e1212        	l32i	a14, a1, 72
  90cc44:	02024f        	extui	a2, a2, 0, 16
  90cc47:	9210      	s32i.n	a2, a1, 0
  90cc49:	221210        	l32i	a2, a1, 64
  90cc4c:	dd60      	mov.n	a13, a6
  90cc4e:	020f4f        	extui	a15, a2, 0, 16
  90cc51:	db30      	mov.n	a11, a3
  90cc53:	da90      	mov.n	a10, a9
  90cc55:	5bfe5e        	call8	90c5d0 <rcUpdate_ht$constprop$5>
  90cc58:	d10f      	retw.n
	...

0090cc5c <ath_tx_status_update_rate>:
{
  90cc5c:	6c1004        	entry	a1, 32
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cc5f:	2922c2        	l32i	a9, a2, 0x308
  90cc62:	282248        	l32i	a8, a2, 0x120
  90cc65:	0e9911        	slli	a9, a9, 2
  90cc68:	a988      	add.n	a8, a8, a9
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cc6a:	0f4911        	slli	a9, a4, 1
  90cc6d:	a494      	add.n	a4, a9, a4
  90cc6f:	0e4411        	slli	a4, a4, 2
  90cc72:	a433      	add.n	a3, a3, a4
  90cc74:	293000        	l8ui	a9, a3, 0
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cc77:	8a81      	l32i.n	a10, a8, 4
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cc79:	0e9811        	slli	a8, a9, 2
  90cc7c:	a988      	add.n	a8, a8, a9
  90cc7e:	0f8811        	slli	a8, a8, 1
  90cc81:	a988      	add.n	a8, a8, a9
  90cc83:	0e8811        	slli	a8, a8, 2
  90cc86:	245000        	l8ui	a4, a5, 0
  90cc89:	a8aa      	add.n	a10, a10, a8
  90cc8b:	22a01c        	l8ui	a2, a10, 28
  90cc8e:	0f4811        	slli	a8, a4, 1
  90cc91:	a488      	add.n	a8, a8, a4
  90cc93:	a858      	add.n	a8, a5, a8
  90cc95:	782738        	bbci	a2, 24, 90ccd1 <ath_tx_status_update_rate+0x75>
		txs->txstatus[txs->cnt].ts_rate |= SM(pRateTable->info[rcs[series].rix].dot11Rate,
  90cc98:	29a01e        	l8ui	a9, a10, 30
  90cc9b:	228002        	l8ui	a2, a8, 2
  90cc9e:	090943        	extui	a9, a9, 0, 4
  90cca1:	029902        	or	a9, a9, a2
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_MCS;
  90cca4:	248003        	l8ui	a4, a8, 3
		txs->txstatus[txs->cnt].ts_rate |= SM(pRateTable->info[rcs[series].rix].dot11Rate,
  90cca7:	298402        	s8i	a9, a8, 2
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_MCS;
  90ccaa:	c098      	movi.n	a9, 8
  90ccac:	094902        	or	a9, a4, a9
  90ccaf:	298403        	s8i	a9, a8, 3
		if (rcs[series].flags & ATH_RC_CW40_FLAG)
  90ccb2:	293003        	l8ui	a9, a3, 3
  90ccb5:	7e9707        	bbci	a9, 30, 90ccc0 <ath_tx_status_update_rate+0x64>
			txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_CW40;
  90ccb8:	c128      	movi.n	a2, 24
  90ccba:	024402        	or	a4, a4, a2
  90ccbd:	248403        	s8i	a4, a8, 3
		if (rcs[series].flags & ATH_RC_HT40_SGI_FLAG)
  90ccc0:	7d9719        	bbci	a9, 29, 90ccdd <ath_tx_status_update_rate+0x81>
			txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_SGI;
  90ccc3:	248003        	l8ui	a4, a8, 3
  90ccc6:	c220      	movi.n	a2, 32
  90ccc8:	024402        	or	a4, a4, a2
  90cccb:	248403        	s8i	a4, a8, 3
  90ccce:	60000b        	j	90ccdd <ath_tx_status_update_rate+0x81>
		txs->txstatus[txs->cnt].ts_rate |= SM(rcs[series].rix, ATH9K_HTC_TXSTAT_RATE);
  90ccd1:	228002        	l8ui	a2, a8, 2
  90ccd4:	090943        	extui	a9, a9, 0, 4
  90ccd7:	029902        	or	a9, a9, a2
  90ccda:	298402        	s8i	a9, a8, 2
	if (rcs[series].flags & ATH_RC_RTSCTS_FLAG)
  90ccdd:	223003        	l8ui	a2, a3, 3
  90cce0:	7b2714        	bbci	a2, 27, 90ccf8 <ath_tx_status_update_rate+0x9c>
  90cce3:	245000        	l8ui	a4, a5, 0
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_RTC_CTS;
  90cce6:	c024      	movi.n	a2, 4
  90cce8:	0f4311        	slli	a3, a4, 1
  90cceb:	a433      	add.n	a3, a3, a4
  90cced:	a355      	add.n	a5, a5, a3
  90ccef:	235003        	l8ui	a3, a5, 3
  90ccf2:	023302        	or	a3, a3, a2
  90ccf5:	235403        	s8i	a3, a5, 3
  90ccf8:	d10f      	retw.n
	...

0090ccfc <ath_rate_attach>:
{
  90ccfc:	6c1004        	entry	a1, 32
  90ccff:	1368b5        	l32r	a3, 8e6fd4 <memset+0x18c>
  90cd02:	c1b8      	movi.n	a11, 24
  90cd04:	223252        	l32i	a2, a3, 0x148
  90cd07:	c0a0      	movi.n	a10, 0
  90cd09:	0b2000        	callx8	a2
  90cd0c:	d2a0      	mov.n	a2, a10
	if (asc == NULL)
  90cd0e:	c9a6      	beqz.n	a10, 90cd28 <ath_rate_attach+0x2c>
	A_MEMSET(buf, b, size);
  90cd10:	8334      	l32i.n	a3, a3, 16
  90cd12:	c1c8      	movi.n	a12, 24
  90cd14:	c0b0      	movi.n	a11, 0
  90cd16:	0b3000        	callx8	a3
	asc->arc.arc_space = sizeof(struct atheros_node);
  90cd19:	230a78        	movi	a3, 120
  90cd1c:	9320      	s32i.n	a3, a2, 0
	ar5416AttachRateTables(asc);
  90cd1e:	da20      	mov.n	a10, a2
	asc->tx_chainmask = 1;
  90cd20:	230a01        	movi	a3, 1
	ar5416AttachRateTables(asc);
  90cd23:	5808fb        	call8	90f110 <ar5416AttachRateTables>
	asc->tx_chainmask = 1;
  90cd26:	9323      	s32i.n	a3, a2, 12
}
  90cd28:	d10f      	retw.n
	...

0090cd2c <ath_rate_findrate>:
{
  90cd2c:	6c1006        	entry	a1, 48
  90cd2f:	8e1f      	l32i.n	a14, a1, 60
	*isProbe = 0;
  90cd31:	c080      	movi.n	a8, 0
	if (!numRates || !numTries) {
  90cd33:	c091      	movi.n	a9, 1
	*isProbe = 0;
  90cd35:	98e0      	s32i.n	a8, a14, 0
	if (!numRates || !numTries) {
  90cd37:	079838        	moveqz	a8, a9, a7
  90cd3a:	080847        	extui	a8, a8, 0, 8
{
  90cd3d:	dd70      	mov.n	a13, a7
  90cd3f:	da20      	mov.n	a10, a2
  90cd41:	db30      	mov.n	a11, a3
  90cd43:	dc60      	mov.n	a12, a6
	if (!numRates || !numTries) {
  90cd45:	cd80      	bnez.n	a8, 90cd59 <ath_rate_findrate+0x2d>
  90cd47:	069838        	moveqz	a8, a9, a6
  90cd4a:	cc8b      	bnez.n	a8, 90cd59 <ath_rate_findrate+0x2d>
	rcRateFind_11n(sc, an, numTries, numRates, stepDnInc, rcflag, series, isProbe);
  90cd4c:	881e      	l32i.n	a8, a1, 56
  90cd4e:	9e11      	s32i.n	a14, a1, 4
  90cd50:	8f1d      	l32i.n	a15, a1, 52
  90cd52:	8e1c      	l32i.n	a14, a1, 48
  90cd54:	9810      	s32i.n	a8, a1, 0
  90cd56:	5bfebb        	call8	90c844 <rcRateFind_11n>
  90cd59:	d10f      	retw.n
	...

0090cd5c <ath_rate_tx_complete>:
{
  90cd5c:	6c1006        	entry	a1, 48
	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
  90cd5f:	284066        	l8ui	a8, a4, 102
  90cd62:	c095      	movi.n	a9, 5
  90cd64:	098801        	and	a8, a8, a9
{
  90cd67:	da20      	mov.n	a10, a2
  90cd69:	db30      	mov.n	a11, a3
  90cd6b:	df50      	mov.n	a15, a5
	int finalTSIdx = ds->ds_txstat.ts_rate;
  90cd6d:	2d4068        	l8ui	a13, a4, 104
	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
  90cd70:	c0e1      	movi.n	a14, 1
  90cd72:	65800b        	bnez	a8, 90cd81 <ath_rate_tx_complete+0x25>
	    (ds->ds_txstat.ts_flags & HAL_TX_DATA_UNDERRUN) ||
  90cd75:	294067        	l8ui	a9, a4, 103
  90cd78:	2c0a18        	movi	a12, 24
  90cd7b:	0c9901        	and	a9, a9, a12
  90cd7e:	098e38        	moveqz	a14, a8, a9
	rcUpdate_11n(sc, an,
  90cd81:	2c4073        	l8ui	a12, a4, 115
  90cd84:	244071        	l8ui	a4, a4, 113
  90cd87:	9711      	s32i.n	a7, a1, 4
  90cd89:	9412      	s32i.n	a4, a1, 8
  90cd8b:	9610      	s32i.n	a6, a1, 0
  90cd8d:	5bff4d        	call8	90cac4 <rcUpdate_11n>
  90cd90:	d10f      	retw.n
	...

0090cd94 <ath_rate_newassoc>:
{
  90cd94:	6c1004        	entry	a1, 32
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90cd97:	de60      	mov.n	a14, a6
  90cd99:	dd50      	mov.n	a13, a5
  90cd9b:	dc40      	mov.n	a12, a4
  90cd9d:	db30      	mov.n	a11, a3
  90cd9f:	da20      	mov.n	a10, a2
  90cda1:	5bfe00        	call8	90c5a4 <ath_rate_newassoc_11n>
  90cda4:	d10f      	retw.n
	...

0090cda8 <ath_rate_node_update>:
{
  90cda8:	6c1004        	entry	a1, 32
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90cdab:	de60      	mov.n	a14, a6
  90cdad:	dd50      	mov.n	a13, a5
  90cdaf:	dc40      	mov.n	a12, a4
  90cdb1:	db30      	mov.n	a11, a3
  90cdb3:	da20      	mov.n	a10, a2
  90cdb5:	5bfdfb        	call8	90c5a4 <ath_rate_newassoc_11n>
  90cdb8:	d10f      	retw.n
	...

0090cdbc <ath_rate_newstate>:
{
  90cdbc:	6c1004        	entry	a1, 32
	asc->tx_chainmask = sc->sc_ic.ic_tx_chainmask;
  90cdbf:	292d16        	addmi	a9, a2, 0x1600
  90cdc2:	282248        	l32i	a8, a2, 0x120
  90cdc5:	299026        	l8ui	a9, a9, 38
	struct ieee80211_node_target *ni = vap->iv_bss;
  90cdc8:	8b34      	l32i.n	a11, a3, 16
{
  90cdca:	da20      	mov.n	a10, a2
	asc->tx_chainmask = sc->sc_ic.ic_tx_chainmask;
  90cdcc:	9983      	s32i.n	a9, a8, 12
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90cdce:	de60      	mov.n	a14, a6
  90cdd0:	dd50      	mov.n	a13, a5
  90cdd2:	2c0a01        	movi	a12, 1
  90cdd5:	5bfdf3        	call8	90c5a4 <ath_rate_newassoc_11n>
  90cdd8:	d10f      	retw.n
	...

0090cddc <__adf_os_mem_copy>:
{
  90cddc:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);
  90cddf:	1868b5        	l32r	a8, 8e70b4 <memset+0x26c>
  90cde2:	dc40      	mov.n	a12, a4
  90cde4:	8885      	l32i.n	a8, a8, 20
  90cde6:	db30      	mov.n	a11, a3
  90cde8:	da20      	mov.n	a10, a2
  90cdea:	0b8000        	callx8	a8
  90cded:	d10f      	retw.n
	...

0090cdf0 <ieee80211_anyhdrsize>:
/*
 * Like ieee80211_hdrsize, but handles any type of frame.
 */
static __inline a_int32_t
ieee80211_anyhdrsize(const void *data)
{
  90cdf0:	6c1004        	entry	a1, 32
	const struct ieee80211_frame *wh = data;

	if ((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) == IEEE80211_FC0_TYPE_CTL) {
  90cdf3:	282000        	l8ui	a8, a2, 0
  90cdf6:	c09c      	movi.n	a9, 12
  90cdf8:	098901        	and	a9, a8, a9
  90cdfb:	699415        	bnei	a9, 4, 90ce14 <ieee80211_anyhdrsize+0x24>
		switch (wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) {
  90cdfe:	c720      	movi.n	a2, -16
  90ce00:	028801        	and	a8, a8, a2
  90ce03:	220ac0        	movi	a2, 192
  90ce06:	72812f        	beq	a8, a2, 90ce39 <ieee80211_anyhdrsize+0x49>
  90ce09:	220ad0        	movi	a2, 208
  90ce0c:	728129        	beq	a8, a2, 90ce39 <ieee80211_anyhdrsize+0x49>
		case IEEE80211_FC0_SUBTYPE_CTS:
		case IEEE80211_FC0_SUBTYPE_ACK:
			return sizeof(struct ieee80211_frame_ack);
		}
		return sizeof(struct ieee80211_frame_min);
  90ce0f:	c120      	movi.n	a2, 16
  90ce11:	d10f      	retw.n
  90ce13:	002220        	excw
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
  90ce16:	01c1a8        	excw
  90ce19:	020241        	extui	a2, a2, 0, 2
		size += IEEE80211_ADDR_LEN;
  90ce1c:	222cfd        	addi	a2, a2, -3
  90ce1f:	c19e      	movi.n	a9, 30
  90ce21:	02a939        	movnez	a9, a10, a2
  90ce24:	d290      	mov.n	a2, a9
	if (IEEE80211_QOS_HAS_SEQ(wh))
  90ce26:	29fa8c        	movi	a9, -116
  90ce29:	098801        	and	a8, a8, a9
		size += sizeof(a_uint16_t);
  90ce2c:	2a0a88        	movi	a10, 136
  90ce2f:	b229      	addi.n	a9, a2, 2
  90ce31:	0a880c        	sub	a8, a8, a10
  90ce34:	089238        	moveqz	a2, a9, a8
  90ce37:	d10f      	retw.n
			return sizeof(struct ieee80211_frame_ack);
  90ce39:	c02a      	movi.n	a2, 10
	} else
		return ieee80211_hdrsize(data);
}
  90ce3b:	d10f      	retw.n
  90ce3d:	000000        	ill

0090ce40 <owl_tgt_tid_init>:
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
			  ATH_RC_PROBE_ALLOWED, series, isProbe);
}

static void owl_tgt_tid_init(struct ath_atx_tid *tid)
{
  90ce40:	6c1004        	entry	a1, 32
	int i;

	tid->seq_start  = tid->seq_next = 0;
  90ce43:	c090      	movi.n	a9, 0
	tid->baw_size   = WME_MAX_BA;
  90ce45:	c480      	movi.n	a8, 64
	tid->seq_start  = tid->seq_next = 0;
  90ce47:	292503        	s16i	a9, a2, 6
  90ce4a:	292502        	s16i	a9, a2, 4
	tid->baw_size   = WME_MAX_BA;
  90ce4d:	282504        	s16i	a8, a2, 8
	tid->baw_head   = tid->baw_tail = 0;
	tid->paused     = 0;
  90ce50:	292434        	s8i	a9, a2, 52
	tid->baw_head   = tid->baw_tail = 0;
  90ce53:	c080      	movi.n	a8, 0
	tid->flag       = 0;
  90ce55:	292436        	s8i	a9, a2, 54
	tid->sched      = AH_FALSE;
  90ce58:	292435        	s8i	a9, a2, 53

	asf_tailq_init(&tid->buf_q);
  90ce5b:	292c2c        	addi	a9, a2, 44
	tid->baw_head   = tid->baw_tail = 0;
  90ce5e:	9824      	s32i.n	a8, a2, 16
  90ce60:	9823      	s32i.n	a8, a2, 12
	asf_tailq_init(&tid->buf_q);
  90ce62:	982b      	s32i.n	a8, a2, 44
  90ce64:	992c      	s32i.n	a9, a2, 48

	for (i = 0; i < ATH_TID_MAX_BUFS; i++) {
		TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, i);
  90ce66:	c0e1      	movi.n	a14, 1
  90ce68:	c7df      	movi.n	a13, -1
  90ce6a:	2a0a80        	movi	a10, 128
  90ce6d:	6da819        	loop	a10, 90ce8a <owl_tgt_tid_init+0x4a>
  90ce70:	085912        	srai	a9, a8, 5
  90ce73:	0e9911        	slli	a9, a9, 2
  90ce76:	008104        	ssl	a8
  90ce79:	00eb1a        	sll	a11, a14
  90ce7c:	a929      	add.n	a9, a2, a9
  90ce7e:	0bdc03        	xor	a12, a13, a11
  90ce81:	8b95      	l32i.n	a11, a9, 20
	for (i = 0; i < ATH_TID_MAX_BUFS; i++) {
  90ce83:	b188      	addi.n	a8, a8, 1
		TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, i);
  90ce85:	0cbb01        	and	a11, a11, a12
  90ce88:	9b95      	s32i.n	a11, a9, 20
	}
}
  90ce8a:	d10f      	retw.n

0090ce8c <ath_tgt_txq_add_ucast>:

	return 0;
}

static void ath_tgt_txq_add_ucast(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90ce8c:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  90ce8f:	222d05        	addmi	a2, a2, 0x500
  90ce92:	842b      	l32i.n	a4, a2, 44
	struct ath_txq *txq;
	volatile a_int32_t txe_val;

	adf_os_assert(bf);
  90ce94:	cd35      	bnez.n	a3, 90cead <ath_tgt_txq_add_ucast+0x21>
  90ce96:	1268b5        	l32r	a2, 8e716c <memset+0x324>
  90ce99:	1b6a97        	l32r	a11, 8e78f8 <memset+0xab0>
  90ce9c:	222212        	l32i	a2, a2, 72
  90ce9f:	1a6a98        	l32r	a10, 8e7900 <memset+0xab8>
  90cea2:	0b2000        	callx8	a2
  90cea5:	126919        	l32r	a2, 8e730c <memset+0x4c4>
  90cea8:	0c0200        	memw
  90ceab:	8220      	l32i.n	a2, a2, 0

	txq = bf->bf_txq;

	ah->ah_procTxDesc(ah, bf->bf_lastds);
  90cead:	28421a        	l32i	a8, a4, 104
  90ceb0:	8b3e      	l32i.n	a11, a3, 56
  90ceb2:	da40      	mov.n	a10, a4
	txq = bf->bf_txq;
  90ceb4:	223220        	l32i	a2, a3, 128
	ah->ah_procTxDesc(ah, bf->bf_lastds);
  90ceb7:	0b8000        	callx8	a8

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90ceba:	c080      	movi.n	a8, 0
  90cebc:	9839      	s32i.n	a8, a3, 36
  90cebe:	8823      	l32i.n	a8, a2, 12
  90cec0:	983a      	s32i.n	a8, a3, 40
  90cec2:	9380      	s32i.n	a3, a8, 0
  90cec4:	283c24        	addi	a8, a3, 36
  90cec7:	9823      	s32i.n	a8, a2, 12
  90cec9:	8824      	l32i.n	a8, a2, 16
  90cecb:	9325      	s32i.n	a3, a2, 20
  90cecd:	b188      	addi.n	a8, a8, 1
  90cecf:	9824      	s32i.n	a8, a2, 16

	if (txq->axq_link == NULL) {
  90ced1:	8821      	l32i.n	a8, a2, 4
  90ced3:	cc87      	bnez.n	a8, 90cede <ath_tgt_txq_add_ucast+0x52>
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90ced5:	884a      	l32i.n	a8, a4, 40
  90ced7:	8c3c      	l32i.n	a12, a3, 48
  90ced9:	8b20      	l32i.n	a11, a2, 0
  90cedb:	600022        	j	90cf01 <ath_tgt_txq_add_ucast+0x75>
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90cede:	8c3c      	l32i.n	a12, a3, 48
  90cee0:	9c80      	s32i.n	a12, a8, 0
	return *(const volatile uint32_t *) addr;
  90cee2:	186a53        	l32r	a8, 8e7830 <memset+0x9e8>

		txe_val = ioread32_mac(0x0840);
		if (!(txe_val & (1<< txq->axq_qnum)))
  90cee5:	8b20      	l32i.n	a11, a2, 0
  90cee7:	0c0200        	memw
  90ceea:	8880      	l32i.n	a8, a8, 0
		txe_val = ioread32_mac(0x0840);
  90ceec:	0c0200        	memw
  90ceef:	9810      	s32i.n	a8, a1, 0
		if (!(txe_val & (1<< txq->axq_qnum)))
  90cef1:	0c0200        	memw
  90cef4:	8810      	l32i.n	a8, a1, 0
  90cef6:	00b004        	ssr	a11
  90cef9:	08081b        	sra	a8, a8
  90cefc:	7f8f06        	bbsi	a8, 31, 90cf06 <ath_tgt_txq_add_ucast+0x7a>
			ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90ceff:	884a      	l32i.n	a8, a4, 40
  90cf01:	da40      	mov.n	a10, a4
  90cf03:	0b8000        	callx8	a8
	}

	txq->axq_link = &bf->bf_lastds->ds_link;
  90cf06:	833e      	l32i.n	a3, a3, 56
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90cf08:	8b20      	l32i.n	a11, a2, 0
	txq->axq_link = &bf->bf_lastds->ds_link;
  90cf0a:	9321      	s32i.n	a3, a2, 4
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90cf0c:	834c      	l32i.n	a3, a4, 48
  90cf0e:	044a02        	or	a10, a4, a4
  90cf11:	0b3000        	callx8	a3
  90cf14:	d10f      	retw.n
	...

0090cf18 <ath_tx_update_baw>:
	ath_tgt_tx_enqueue(txq, tid);
}

static void
ath_tx_update_baw(ath_atx_tid_t *tid, int seqno)
{
  90cf18:	6c1004        	entry	a1, 32
	int index;
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  90cf1b:	282102        	l16ui	a8, a2, 4
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);
  90cf1e:	c091      	movi.n	a9, 1
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  90cf20:	08330c        	sub	a3, a3, a8
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90cf23:	8823      	l32i.n	a8, a2, 12
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  90cf25:	03034b        	extui	a3, a3, 0, 12
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90cf28:	a833      	add.n	a3, a3, a8
	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);
  90cf2a:	035841        	extui	a8, a3, 5, 2
  90cf2d:	0e8811        	slli	a8, a8, 2
  90cf30:	a828      	add.n	a8, a2, a8
  90cf32:	003104        	ssl	a3
  90cf35:	00931a        	sll	a3, a9
  90cf38:	c7af      	movi.n	a10, -1
  90cf3a:	03aa03        	xor	a10, a10, a3
  90cf3d:	8385      	l32i.n	a3, a8, 20
  90cf3f:	0a3301        	and	a3, a3, a10
  90cf42:	9385      	s32i.n	a3, a8, 20

	while (tid->baw_head != tid->baw_tail &&
  90cf44:	8a24      	l32i.n	a10, a2, 16
  90cf46:	600011        	j	90cf5b <ath_tx_update_baw+0x43>
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90cf49:	282102        	l16ui	a8, a2, 4
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90cf4c:	b133      	addi.n	a3, a3, 1
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90cf4e:	b188      	addi.n	a8, a8, 1
  90cf50:	08084b        	extui	a8, a8, 0, 12
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90cf53:	030346        	extui	a3, a3, 0, 7
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90cf56:	282502        	s16i	a8, a2, 4
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90cf59:	9323      	s32i.n	a3, a2, 12
	while (tid->baw_head != tid->baw_tail &&
  90cf5b:	8323      	l32i.n	a3, a2, 12
  90cf5d:	7a3114        	beq	a3, a10, 90cf75 <ath_tx_update_baw+0x5d>
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
  90cf60:	035812        	srai	a8, a3, 5
  90cf63:	b488      	addi.n	a8, a8, 4
  90cf65:	0e8811        	slli	a8, a8, 2
  90cf68:	a828      	add.n	a8, a2, a8
  90cf6a:	8c81      	l32i.n	a12, a8, 4
  90cf6c:	003104        	ssl	a3
  90cf6f:	009b1a        	sll	a11, a9
	while (tid->baw_head != tid->baw_tail &&
  90cf72:	7cb0d3        	bnone	a11, a12, 90cf49 <ath_tx_update_baw+0x31>
  90cf75:	d10f      	retw.n
	...

0090cf78 <ath_update_stats$isra$1>:
ath_update_stats(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90cf78:	6c1004        	entry	a1, 32
	if (ds->ds_txstat.ts_status == 0) {
  90cf7b:	283066        	l8ui	a8, a3, 102
  90cf7e:	cc8f      	bnez.n	a8, 90cf91 <ath_update_stats$isra$1+0x19>
		if (ds->ds_txstat.ts_rate & HAL_TXSTAT_ALTRATE)
  90cf80:	283068        	l8ui	a8, a3, 104
  90cf83:	788739        	bbci	a8, 24, 90cfc0 <ath_update_stats$isra$1+0x48>
			sc->sc_tx_stats.ast_tx_altrate++;
  90cf86:	282259        	l32i	a8, a2, 0x164
  90cf89:	b188      	addi.n	a8, a8, 1
  90cf8b:	282659        	s32i	a8, a2, 0x164
  90cf8e:	60002e        	j	90cfc0 <ath_update_stats$isra$1+0x48>
		if (ds->ds_txstat.ts_status & HAL_TXERR_XRETRY)
  90cf91:	7f8708        	bbci	a8, 31, 90cf9d <ath_update_stats$isra$1+0x25>
			sc->sc_tx_stats.ast_tx_xretries++;
  90cf94:	292252        	l32i	a9, a2, 0x148
  90cf97:	299c01        	addi	a9, a9, 1
  90cf9a:	292652        	s32i	a9, a2, 0x148
		if (ds->ds_txstat.ts_status & HAL_TXERR_FIFO)
  90cf9d:	7d8708        	bbci	a8, 29, 90cfa9 <ath_update_stats$isra$1+0x31>
			sc->sc_tx_stats.ast_tx_fifoerr++;
  90cfa0:	292253        	l32i	a9, a2, 0x14c
  90cfa3:	299c01        	addi	a9, a9, 1
  90cfa6:	292653        	s32i	a9, a2, 0x14c
		if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  90cfa9:	7e8708        	bbci	a8, 30, 90cfb5 <ath_update_stats$isra$1+0x3d>
			sc->sc_tx_stats.ast_tx_filtered++;
  90cfac:	292254        	l32i	a9, a2, 0x150
  90cfaf:	299c01        	addi	a9, a9, 1
  90cfb2:	292654        	s32i	a9, a2, 0x150
		if (ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED)
  90cfb5:	7b8707        	bbci	a8, 27, 90cfc0 <ath_update_stats$isra$1+0x48>
			sc->sc_tx_stats.ast_tx_timer_exp++;
  90cfb8:	282255        	l32i	a8, a2, 0x154
  90cfbb:	b188      	addi.n	a8, a8, 1
  90cfbd:	282655        	s32i	a8, a2, 0x154
	lr = ds->ds_txstat.ts_longretry;
  90cfc0:	293071        	l8ui	a9, a3, 113
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  90cfc3:	282256        	l32i	a8, a2, 0x158
	sr = ds->ds_txstat.ts_shortretry;
  90cfc6:	233070        	l8ui	a3, a3, 112
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  90cfc9:	a388      	add.n	a8, a8, a3
	sc->sc_tx_stats.ast_tx_longretry += lr;
  90cfcb:	232257        	l32i	a3, a2, 0x15c
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  90cfce:	282656        	s32i	a8, a2, 0x158
	sc->sc_tx_stats.ast_tx_longretry += lr;
  90cfd1:	a933      	add.n	a3, a3, a9
  90cfd3:	232657        	s32i	a3, a2, 0x15c
  90cfd6:	d10f      	retw.n

0090cfd8 <ath_tgt_tx_enqueue$isra$3>:
ath_tgt_tx_enqueue(struct ath_txq *txq, struct ath_atx_tid  *tid)
  90cfd8:	6c1004        	entry	a1, 32
	if (tid->paused)
  90cfdb:	283034        	l8ui	a8, a3, 52
  90cfde:	cd88      	bnez.n	a8, 90cffa <ath_tgt_tx_enqueue$isra$3+0x22>
	if (tid->sched)
  90cfe0:	283035        	l8ui	a8, a3, 53
  90cfe3:	008832        	sext	a8, a8, 7
  90cfe6:	cd80      	bnez.n	a8, 90cffa <ath_tgt_tx_enqueue$isra$3+0x22>
	tid->sched = AH_TRUE;
  90cfe8:	c091      	movi.n	a9, 1
  90cfea:	293435        	s8i	a9, a3, 53
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
  90cfed:	9839      	s32i.n	a8, a3, 36
  90cfef:	8820      	l32i.n	a8, a2, 0
  90cff1:	983a      	s32i.n	a8, a3, 40
  90cff3:	9380      	s32i.n	a3, a8, 0
  90cff5:	233c24        	addi	a3, a3, 36
  90cff8:	9320      	s32i.n	a3, a2, 0
  90cffa:	d10f      	retw.n

0090cffc <ath_update_aggr_stats$isra$5>:
ath_update_aggr_stats(struct ath_softc_tgt *sc,
  90cffc:	6c1004        	entry	a1, 32
	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  90cfff:	282268        	l32i	a8, a2, 0x1a0
  90d002:	068608        	add	a6, a8, a6
	__statsn(sc, txaggr_shortretries, ds->ds_txstat.ts_shortretry);
  90d005:	28226b        	l32i	a8, a2, 0x1ac
	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  90d008:	262668        	s32i	a6, a2, 0x1a0
	__statsn(sc, txaggr_shortretries, ds->ds_txstat.ts_shortretry);
  90d00b:	058508        	add	a5, a8, a5
  90d00e:	25266b        	s32i	a5, a2, 0x1ac
	if (txflags & HAL_TX_DESC_CFG_ERR)
  90d011:	7d4708        	bbci	a4, 29, 90d01d <ath_update_aggr_stats$isra$5+0x21>
		__stats(sc, txaggr_desc_cfgerr);
  90d014:	282271        	l32i	a8, a2, 0x1c4
  90d017:	288c01        	addi	a8, a8, 1
  90d01a:	282671        	s32i	a8, a2, 0x1c4
	if (txflags & HAL_TX_DATA_UNDERRUN)
  90d01d:	7c4708        	bbci	a4, 28, 90d029 <ath_update_aggr_stats$isra$5+0x2d>
		__stats(sc, txaggr_data_urun);
  90d020:	282265        	l32i	a8, a2, 0x194
  90d023:	288c01        	addi	a8, a8, 1
  90d026:	282665        	s32i	a8, a2, 0x194
	if (txflags & HAL_TX_DELIM_UNDERRUN)
  90d029:	7b4707        	bbci	a4, 27, 90d034 <ath_update_aggr_stats$isra$5+0x38>
		__stats(sc, txaggr_delim_urun);
  90d02c:	282266        	l32i	a8, a2, 0x198
  90d02f:	b188      	addi.n	a8, a8, 1
  90d031:	282666        	s32i	a8, a2, 0x198
	if (!status) {
  90d034:	cb38      	beqz.n	a3, 90d070 <ath_update_aggr_stats$isra$5+0x74>
	if (status & HAL_TXERR_XRETRY)
  90d036:	7f3707        	bbci	a3, 31, 90d041 <ath_update_aggr_stats$isra$5+0x45>
		__stats(sc, txaggr_compxretry);
  90d039:	28226a        	l32i	a8, a2, 0x1a8
  90d03c:	b188      	addi.n	a8, a8, 1
  90d03e:	28266a        	s32i	a8, a2, 0x1a8
	if (status & HAL_TXERR_FILT)
  90d041:	7e3708        	bbci	a3, 30, 90d04d <ath_update_aggr_stats$isra$5+0x51>
		__stats(sc, txaggr_filtered);
  90d044:	28226e        	l32i	a8, a2, 0x1b8
  90d047:	288c01        	addi	a8, a8, 1
  90d04a:	28266e        	s32i	a8, a2, 0x1b8
	if (status & HAL_TXERR_FIFO)
  90d04d:	7d3708        	bbci	a3, 29, 90d059 <ath_update_aggr_stats$isra$5+0x5d>
		__stats(sc, txaggr_fifo);
  90d050:	28226f        	l32i	a8, a2, 0x1bc
  90d053:	288c01        	addi	a8, a8, 1
  90d056:	28266f        	s32i	a8, a2, 0x1bc
	if (status & HAL_TXERR_XTXOP)
  90d059:	7c3708        	bbci	a3, 28, 90d065 <ath_update_aggr_stats$isra$5+0x69>
		__stats(sc, txaggr_xtxop);
  90d05c:	282270        	l32i	a8, a2, 0x1c0
  90d05f:	288c01        	addi	a8, a8, 1
  90d062:	282670        	s32i	a8, a2, 0x1c0
	if (status & HAL_TXERR_TIMER_EXPIRED)
  90d065:	7b3707        	bbci	a3, 27, 90d070 <ath_update_aggr_stats$isra$5+0x74>
		__stats(sc, txaggr_timer_exp);
  90d068:	23226c        	l32i	a3, a2, 0x1b0
  90d06b:	b133      	addi.n	a3, a3, 1
  90d06d:	23266c        	s32i	a3, a2, 0x1b0
  90d070:	d10f      	retw.n
	...

0090d074 <ath_dma_unmap$isra$6>:
static void ath_dma_unmap(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d074:	6c1004        	entry	a1, 32
    return (__adf_nbuf_queue_first(head));
  90d077:	2a3c14        	addi	a10, a3, 20
  90d07a:	5be70f        	call8	906cb8 <__adf_nbuf_queue_first>
    __adf_nbuf_unmap(osdev, bmap, dir);
  90d07d:	8b30      	l32i.n	a11, a3, 0
  90d07f:	8a20      	l32i.n	a10, a2, 0
  90d081:	c0c0      	movi.n	a12, 0
  90d083:	5be67e        	call8	906a7c <__adf_nbuf_unmap>
  90d086:	d10f      	retw.n

0090d088 <ath_tgt_skb_free$isra$7>:
static void ath_tgt_skb_free(struct ath_softc_tgt *sc,
  90d088:	6c1004        	entry	a1, 32
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
  90d08b:	1568b5        	l32r	a5, 8e7360 <memset+0x518>
  90d08e:	600012        	j	90d0a4 <ath_tgt_skb_free$isra$7+0x1c>
    return __adf_nbuf_queue_remove(head);
  90d091:	da30      	mov.n	a10, a3
  90d093:	5be666        	call8	906a2c <__adf_nbuf_queue_remove>
  90d096:	dca0      	mov.n	a12, a10
  90d098:	285282        	l32i	a8, a5, 0x208
  90d09b:	2a2200        	l32i	a10, a2, 0
  90d09e:	044b02        	or	a11, a4, a4
  90d0a1:	0b8000        	callx8	a8
    return __adf_nbuf_queue_len(head);
  90d0a4:	da30      	mov.n	a10, a3
  90d0a6:	5be702        	call8	906cb0 <__adf_nbuf_queue_len>
	while (adf_nbuf_queue_len(head) != 0) {
  90d0a9:	65afe4        	bnez	a10, 90d091 <ath_tgt_skb_free$isra$7+0x9>
}
  90d0ac:	d10f      	retw.n
	...

0090d0b0 <ath_filltxdesc$isra$9>:
static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d0b0:	6c1004        	entry	a1, 32
    __adf_nbuf_dmamap_info(bmap, sg);
  90d0b3:	8a30      	l32i.n	a10, a3, 0
  90d0b5:	b43b      	addi.n	a11, a3, 4
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
  90d0b7:	853c      	l32i.n	a5, a3, 48
  90d0b9:	5be675        	call8	906a90 <__adf_nbuf_dmamap_info>
	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90d0bc:	c0c0      	movi.n	a12, 0
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
  90d0be:	d450      	mov.n	a4, a5
			ds->ds_link = 0;
  90d0c0:	d6c0      	mov.n	a6, a12
  90d0c2:	60007e        	j	90d144 <ath_filltxdesc$isra$9+0x94>
  90d0c5:	0dc811        	slli	a8, a12, 3
  90d0c8:	a838      	add.n	a8, a3, a8
		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  90d0ca:	278008        	l8ui	a7, a8, 8
		if (i == (bf->bf_dmamap_info.nsegs - 1)) {
  90d0cd:	b0dd      	addi.n	a13, a13, -1
		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  90d0cf:	274404        	s8i	a7, a4, 4
  90d0d2:	278009        	l8ui	a7, a8, 9
  90d0d5:	274405        	s8i	a7, a4, 5
  90d0d8:	27800a        	l8ui	a7, a8, 10
  90d0db:	274406        	s8i	a7, a4, 6
  90d0de:	27800b        	l8ui	a7, a8, 11
  90d0e1:	274407        	s8i	a7, a4, 7
  90d0e4:	b1c7      	addi.n	a7, a12, 1
		if (i == (bf->bf_dmamap_info.nsegs - 1)) {
  90d0e6:	7cd912        	bne	a13, a12, 90d0fc <ath_filltxdesc$isra$9+0x4c>
			ds->ds_link = 0;
  90d0e9:	264400        	s8i	a6, a4, 0
  90d0ec:	264401        	s8i	a6, a4, 1
  90d0ef:	264402        	s8i	a6, a4, 2
  90d0f2:	264403        	s8i	a6, a4, 3
			bf->bf_lastds = ds;
  90d0f5:	943e      	s32i.n	a4, a3, 56
  90d0f7:	600022        	j	90d11d <ath_filltxdesc$isra$9+0x6d>
  90d0fa:	00000c        	sub	a0, a0, a0
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);
  90d0fd:	7911a7        	beq	a1, a9, 90d0a8 <ath_tgt_skb_free$isra$7+0x20>
  90d100:	990d      	s32i.n	a9, a0, 52
  90d102:	9a11      	s32i.n	a10, a1, 4
  90d104:	893d      	l32i.n	a9, a3, 52
  90d106:	aa99      	add.n	a9, a9, a10
  90d108:	098a57        	extui	a10, a9, 24, 8
  90d10b:	2a4400        	s8i	a10, a4, 0
  90d10e:	090a57        	extui	a10, a9, 16, 8
  90d111:	2a4401        	s8i	a10, a4, 1
  90d114:	098a47        	extui	a10, a9, 8, 8
  90d117:	2a4402        	s8i	a10, a4, 2
  90d11a:	294403        	s8i	a9, a4, 3
		ah->ah_fillTxDesc(ds
  90d11d:	0cdd0c        	sub	a13, a13, a12
  90d120:	c091      	movi.n	a9, 1
  90d122:	da60      	mov.n	a10, a6
  90d124:	0d9a38        	moveqz	a10, a9, a13
  90d127:	2f2218        	l32i	a15, a2, 96
  90d12a:	0c6939        	movnez	a9, a6, a12
  90d12d:	8b83      	l32i.n	a11, a8, 12
  90d12f:	dda0      	mov.n	a13, a10
  90d131:	dc90      	mov.n	a12, a9
  90d133:	044a02        	or	a10, a4, a4
  90d136:	055e02        	or	a14, a5, a5
  90d139:	0bf000        	callx8	a15
	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90d13c:	070c47        	extui	a12, a7, 0, 8
  90d13f:	270a88        	movi	a7, 136
  90d142:	a744      	add.n	a4, a4, a7
  90d144:	8d31      	l32i.n	a13, a3, 4
  90d146:	7dcb02        	bgeu	a12, a13, 90d14c <ath_filltxdesc$isra$9+0x9c>
  90d149:	63ff78        	j	90d0c5 <ath_filltxdesc$isra$9+0x15>
}
  90d14c:	d10f      	retw.n
	...

0090d150 <ath_tx_tgt_setds>:
{
  90d150:	6c1006        	entry	a1, 48
	switch (bf->bf_protmode) {
  90d153:	293084        	l8ui	a9, a3, 132
	struct ath_hal *ah = sc->sc_ah;
  90d156:	222d05        	addmi	a2, a2, 0x500
	struct ath_tx_desc *ds = bf->bf_desc;
  90d159:	8a3c      	l32i.n	a10, a3, 48
	struct ath_hal *ah = sc->sc_ah;
  90d15b:	8d2b      	l32i.n	a13, a2, 44
  90d15d:	283144        	l16ui	a8, a3, 136
	switch (bf->bf_protmode) {
  90d160:	689108        	beqi	a9, 1, 90d16c <ath_tx_tgt_setds+0x1c>
  90d163:	69920d        	bnei	a9, 2, 90d174 <ath_tx_tgt_setds+0x24>
		bf->bf_flags |= HAL_TXDESC_RTSENA;
  90d166:	c094      	movi.n	a9, 4
  90d168:	600002        	j	90d16e <ath_tx_tgt_setds+0x1e>
  90d16b:	00c098        	excw
		bf->bf_flags |= HAL_TXDESC_CTSENA;
  90d16e:	098802        	or	a8, a8, a9
  90d171:	283544        	s16i	a8, a3, 136
	ah->ah_set11nTxDesc(ds
  90d174:	283144        	l16ui	a8, a3, 136
  90d177:	c190      	movi.n	a9, 16
  90d179:	098802        	or	a8, a8, a9
  90d17c:	08084f        	extui	a8, a8, 0, 16
  90d17f:	9810      	s32i.n	a8, a1, 0
  90d181:	2b3122        	l16ui	a11, a3, 68
  90d184:	88df      	l32i.n	a8, a13, 60
  90d186:	2f3085        	l8ui	a15, a3, 133
  90d189:	2e3049        	l8ui	a14, a3, 73
  90d18c:	2c304a        	l8ui	a12, a3, 74
  90d18f:	2d0a3c        	movi	a13, 60
  90d192:	0b8000        	callx8	a8
	ath_filltxdesc(sc, bf);
  90d195:	8a2b      	l32i.n	a10, a2, 44
  90d197:	db30      	mov.n	a11, a3
  90d199:	5bffc5        	call8	90d0b0 <ath_filltxdesc$isra$9>
  90d19c:	d10f      	retw.n
	...

0090d1a0 <__adf_os_mem_set$constprop$19>:
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
  90d1a0:	6c1004        	entry	a1, 32
	A_MEMSET(buf, b, size);
  90d1a3:	1868b5        	l32r	a8, 8e7478 <memset+0x630>
  90d1a6:	dc30      	mov.n	a12, a3
  90d1a8:	8884      	l32i.n	a8, a8, 16
  90d1aa:	c0b0      	movi.n	a11, 0
  90d1ac:	da20      	mov.n	a10, a2
  90d1ae:	0b8000        	callx8	a8
  90d1b1:	d10f      	retw.n
	...

0090d1b4 <ath_buf_set_rate>:
{
  90d1b4:	6c1016        	entry	a1, 176
    struct ath_hal *ah = sc->sc_ah;
  90d1b7:	242d05        	addmi	a4, a2, 0x500
  90d1ba:	844b      	l32i.n	a4, a4, 44
    cix = rt->info[sc->sc_protrix].controlRate;
  90d1bc:	262d03        	addmi	a6, a2, 0x300
  90d1bf:	27600c        	l8ui	a7, a6, 12
    struct ath_hal *ah = sc->sc_ah;
  90d1c2:	24161c        	s32i	a4, a1, 112
    struct ath_tx_desc *ds = bf->bf_desc;
  90d1c5:	843c      	l32i.n	a4, a3, 48
    cix = rt->info[sc->sc_protrix].controlRate;
  90d1c7:	0e7611        	slli	a6, a7, 2
  90d1ca:	a766      	add.n	a6, a6, a7
    struct ath_tx_desc *ds = bf->bf_desc;
  90d1cc:	24161d        	s32i	a4, a1, 116
    rt = sc->sc_currates;
  90d1cf:	242281        	l32i	a4, a2, 0x204
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  90d1d2:	283144        	l16ui	a8, a3, 136
    cix = rt->info[sc->sc_protrix].controlRate;
  90d1d5:	0e6611        	slli	a6, a6, 2
    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d1d8:	273084        	l8ui	a7, a3, 132
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  90d1db:	c05c      	movi.n	a5, 12
    cix = rt->info[sc->sc_protrix].controlRate;
  90d1dd:	a646      	add.n	a6, a4, a6
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  90d1df:	058501        	and	a5, a8, a5
    cix = rt->info[sc->sc_protrix].controlRate;
  90d1e2:	266037        	l8ui	a6, a6, 55
    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d1e5:	c97c      	beqz.n	a7, 90d205 <ath_buf_set_rate+0x51>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
  90d1e7:	293050        	l8ui	a9, a3, 80
  90d1ea:	0e9711        	slli	a7, a9, 2
  90d1ed:	a977      	add.n	a7, a7, a9
  90d1ef:	0e7711        	slli	a7, a7, 2
  90d1f2:	a747      	add.n	a7, a4, a7
  90d1f4:	277029        	l8ui	a7, a7, 41
  90d1f7:	290afd        	movi	a9, 253
  90d1fa:	277cfe        	addi	a7, a7, -2
    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d1fd:	797804        	bany	a7, a9, 90d205 <ath_buf_set_rate+0x51>
	    prot_mode = AH_TRUE;
  90d200:	c071      	movi.n	a7, 1
	 rt->info[rix].phy == IEEE80211_T_HT) &&
  90d202:	7e874a        	bbci	a8, 30, 90d250 <ath_buf_set_rate+0x9c>
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
  90d205:	2a121c        	l32i	a10, a1, 112
  90d208:	c0b5      	movi.n	a11, 5
  90d20a:	5bf69c        	call8	90ac7c <ath_hal_getcapability>
  90d20d:	64a00b        	beqz	a10, 90d21c <ath_buf_set_rate+0x68>
  90d210:	273221        	l32i	a7, a3, 132
		    flags = HAL_TXDESC_RTSENA;
  90d213:	280a04        	movi	a8, 4
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
  90d216:	077740        	extui	a7, a7, 7, 1
		    flags = HAL_TXDESC_RTSENA;
  90d219:	078538        	moveqz	a5, a8, a7
  90d21c:	283c75        	addi	a8, a3, 117
	    for (i = 4; i--;) {
  90d21f:	c074      	movi.n	a7, 4
  90d221:	600024        	j	90d249 <ath_buf_set_rate+0x95>
  90d224:	288cf4        	addi	a8, a8, -12
		    if (bf->bf_rcs[i].tries) {
  90d227:	29800c        	l8ui	a9, a8, 12
  90d22a:	c99b      	beqz.n	a9, 90d249 <ath_buf_set_rate+0x95>
			    cix = rt->info[bf->bf_rcs[i].rix].controlRate;
  90d22c:	0f7611        	slli	a6, a7, 1
  90d22f:	a766      	add.n	a6, a6, a7
  90d231:	0e6611        	slli	a6, a6, 2
  90d234:	a636      	add.n	a6, a3, a6
  90d236:	276050        	l8ui	a7, a6, 80
  90d239:	0e7611        	slli	a6, a7, 2
  90d23c:	a766      	add.n	a6, a6, a7
  90d23e:	0e6611        	slli	a6, a6, 2
  90d241:	a646      	add.n	a6, a4, a6
  90d243:	266037        	l8ui	a6, a6, 55
  90d246:	600004        	j	90d24e <ath_buf_set_rate+0x9a>
	    for (i = 4; i--;) {
  90d249:	b077      	addi.n	a7, a7, -1
  90d24b:	6970d5        	bnei	a7, -1, 90d224 <ath_buf_set_rate+0x70>
    a_int32_t prot_mode = AH_FALSE;
  90d24e:	c070      	movi.n	a7, 0
    __adf_os_mem_set(buf, b, size);
  90d250:	2b0a70        	movi	a11, 112
  90d253:	da10      	mov.n	a10, a1
  90d255:	5bffd2        	call8	90d1a0 <__adf_os_mem_set$constprop$19>
  90d258:	280a80        	movi	a8, 128
  90d25b:	a838      	add.n	a8, a3, a8
  90d25d:	2f3c50        	addi	a15, a3, 80
  90d260:	d910      	mov.n	a9, a1
  90d262:	28161f        	s32i	a8, a1, 124
	    if (!bf->bf_rcs[i].tries)
  90d265:	2bf001        	l8ui	a11, a15, 1
  90d268:	64b119        	beqz	a11, 90d385 <ath_buf_set_rate+0x1d1>
	    series[i].Rate = rt->info[rix].rateCode |
  90d26b:	2df000        	l8ui	a13, a15, 0
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d26e:	2c3221        	l32i	a12, a3, 132
	    series[i].Rate = rt->info[rix].rateCode |
  90d271:	0ed811        	slli	a8, a13, 2
  90d274:	ad88      	add.n	a8, a8, a13
  90d276:	0e8811        	slli	a8, a8, 2
  90d279:	a848      	add.n	a8, a4, a8
  90d27b:	2a8034        	l8ui	a10, a8, 52
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d27e:	c4e0      	movi.n	a14, 64
	    series[i].Rate = rt->info[rix].rateCode |
  90d280:	2a161e        	s32i	a10, a1, 120
  90d283:	2a0a00        	movi	a10, 0
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d286:	7ec002        	bnone	a12, a14, 90d28c <ath_buf_set_rate+0xd8>
  90d289:	2a8035        	l8ui	a10, a8, 53
	    series[i].Rate = rt->info[rix].rateCode |
  90d28c:	28121e        	l32i	a8, a1, 120
	    series[i].Tries = bf->bf_rcs[i].tries;
  90d28f:	9b90      	s32i.n	a11, a9, 0
	    series[i].Rate = rt->info[rix].rateCode |
  90d291:	08aa02        	or	a10, a10, a8
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
  90d294:	28f003        	l8ui	a8, a15, 3
  90d297:	c0b4      	movi.n	a11, 4
  90d299:	0b8b01        	and	a11, a8, a11
	    series[i].Rate = rt->info[rix].rateCode |
  90d29c:	9a91      	s32i.n	a10, a9, 4
  90d29e:	2b161e        	s32i	a11, a1, 120
  90d2a1:	c0a2      	movi.n	a10, 2
		     HAL_RATESERIES_2040 : 0 ) |
  90d2a3:	c0b6      	movi.n	a11, 6
				   HAL_RATESERIES_RTS_CTS : 0 ) |
  90d2a5:	084e40        	extui	a14, a8, 4, 1
		     HAL_RATESERIES_2040 : 0 ) |
  90d2a8:	0b8b01        	and	a11, a8, a11
  90d2ab:	0a8a01        	and	a10, a8, a10
		     HAL_RATESERIES_STBC: 0);
  90d2ae:	085840        	extui	a8, a8, 5, 1
		     HAL_RATESERIES_2040 : 0 ) |
  90d2b1:	0beb02        	or	a11, a14, a11
		     HAL_RATESERIES_STBC: 0);
  90d2b4:	0d8e11        	slli	a14, a8, 3
		     HAL_RATESERIES_HALFGI : 0 ) |
  90d2b7:	0beb02        	or	a11, a14, a11
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
  90d2ba:	9b94      	s32i.n	a11, a9, 16
	const HAL_RATE_TABLE *rt = sc->sc_currates;
  90d2bc:	2b2281        	l32i	a11, a2, 0x204
	pktlen = bf->bf_isaggr ? bf->bf_al : bf->bf_pktlen;
  90d2bf:	7ac705        	bbci	a12, 26, 90d2c8 <ath_buf_set_rate+0x114>
  90d2c2:	2c3127        	l16ui	a12, a3, 78
  90d2c5:	600002        	j	90d2cb <ath_buf_set_rate+0x117>
  90d2c8:	2c3122        	l16ui	a12, a3, 68
	rc = rt->info[rix].rateCode;
  90d2cb:	0ed811        	slli	a8, a13, 2
  90d2ce:	ad88      	add.n	a8, a8, a13
  90d2d0:	0e8811        	slli	a8, a8, 2
  90d2d3:	08b808        	add	a8, a11, a8
  90d2d6:	288034        	l8ui	a8, a8, 52
	if (!IS_HT_RATE(rc))
  90d2d9:	008e32        	sext	a14, a8, 7
  90d2dc:	66e01d        	bltz	a14, 90d2fd <ath_buf_set_rate+0x149>
					     bf->bf_shpream);
  90d2df:	2e3221        	l32i	a14, a3, 132
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
  90d2e2:	282d05        	addmi	a8, a2, 0x500
  90d2e5:	2a820b        	l32i	a10, a8, 44
  90d2e8:	0e6e40        	extui	a14, a14, 6, 1
  90d2eb:	291622        	s32i	a9, a1, 136
  90d2ee:	2f1621        	s32i	a15, a1, 132
  90d2f1:	5bf670        	call8	90acb4 <ath_hal_computetxtime>
  90d2f4:	291222        	l32i	a9, a1, 136
  90d2f7:	2f1221        	l32i	a15, a1, 132
  90d2fa:	600061        	j	90d35f <ath_buf_set_rate+0x1ab>
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  90d2fd:	080b43        	extui	a11, a8, 0, 4
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
  90d300:	c0e1      	movi.n	a14, 1
  90d302:	c0d0      	movi.n	a13, 0
  90d304:	0aed39        	movnez	a13, a14, a10
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  90d307:	00e104        	ssl	a14
  90d30a:	00ba1a        	sll	a10, a11
  90d30d:	adaa      	add.n	a10, a10, a13
  90d30f:	00e104        	ssl	a14
  90d312:	00aa1a        	sll	a10, a10
  90d315:	1e6a99        	l32r	a14, 8e7d7c <memset+0xf34>
	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
  90d318:	0dcc11        	slli	a12, a12, 3
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  90d31b:	aaea      	add.n	a10, a14, a10
  90d31d:	2ba100        	l16ui	a11, a10, 0
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  90d320:	281620        	s32i	a8, a1, 128
  90d323:	acba      	add.n	a10, a11, a12
  90d325:	2aac15        	addi	a10, a10, 21
  90d328:	291622        	s32i	a9, a1, 136
  90d32b:	2f1621        	s32i	a15, a1, 132
  90d32e:	5b65c7        	call8	8e6a4c <__udivsi3>
	if (!half_gi)
  90d331:	2e121e        	l32i	a14, a1, 120
  90d334:	281220        	l32i	a8, a1, 128
  90d337:	291222        	l32i	a9, a1, 136
  90d33a:	2f1221        	l32i	a15, a1, 132
		duration = SYMBOL_TIME(nsymbols);
  90d33d:	0eab11        	slli	a11, a10, 2
	if (!half_gi)
  90d340:	c9e1      	beqz.n	a14, 90d355 <ath_buf_set_rate+0x1a1>
		duration = SYMBOL_TIME_HALFGI(nsymbols);
  90d342:	0dab11        	slli	a11, a10, 3
  90d345:	aaba      	add.n	a10, a11, a10
  90d347:	0faa11        	slli	a10, a10, 1
  90d34a:	1b6a9a        	l32r	a11, 8e7db4 <memset+0xf6c>
  90d34d:	b4aa      	addi.n	a10, a10, 4
  90d34f:	0baa2a        	muluh	a10, a10, a11
  90d352:	0a2b14        	srli	a11, a10, 2
	streams = HT_RC_2_STREAMS(rc);
  90d355:	083a43        	extui	a10, a8, 3, 4
	duration += L_STF + L_LTF + L_SIG + HT_SIG + HT_STF + HT_LTF(streams);
  90d358:	b9aa      	addi.n	a10, a10, 9
  90d35a:	0eaa11        	slli	a10, a10, 2
  90d35d:	abaa      	add.n	a10, a10, a11
	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d35f:	282d16        	addmi	a8, a2, 0x1600
  90d362:	288026        	l8ui	a8, a8, 38
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
  90d365:	9a92      	s32i.n	a10, a9, 8
	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d367:	9893      	s32i.n	a8, a9, 12
	    if (prot_mode)
  90d369:	c878      	beqz.n	a7, 90d375 <ath_buf_set_rate+0x1c1>
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
  90d36b:	8894      	l32i.n	a8, a9, 16
  90d36d:	c0a1      	movi.n	a10, 1
  90d36f:	0a8802        	or	a8, a8, a10
  90d372:	289604        	s32i	a8, a9, 16
	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
  90d375:	28f003        	l8ui	a8, a15, 3
  90d378:	7f8709        	bbci	a8, 31, 90d385 <ath_buf_set_rate+0x1d1>
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
  90d37b:	8894      	l32i.n	a8, a9, 16
  90d37d:	c0a1      	movi.n	a10, 1
  90d37f:	0a8802        	or	a8, a8, a10
  90d382:	289604        	s32i	a8, a9, 16
    for (i = 0; i < 4; i++) {
  90d385:	28121f        	l32i	a8, a1, 124
  90d388:	bcff      	addi.n	a15, a15, 12
  90d38a:	299c1c        	addi	a9, a9, 28
  90d38d:	78f102        	beq	a15, a8, 90d393 <ath_buf_set_rate+0x1df>
  90d390:	63fed1        	j	90d265 <ath_buf_set_rate+0xb1>
    rtsctsrate = rt->info[cix].rateCode |
  90d393:	0e6211        	slli	a2, a6, 2
  90d396:	a626      	add.n	a6, a2, a6
  90d398:	0e6611        	slli	a6, a6, 2
	    (bf->bf_shpream ? rt->info[cix].shortPreamble : 0);
  90d39b:	233221        	l32i	a3, a3, 132
    rtsctsrate = rt->info[cix].rateCode |
  90d39e:	a644      	add.n	a4, a4, a6
  90d3a0:	2c4034        	l8ui	a12, a4, 52
  90d3a3:	220a00        	movi	a2, 0
  90d3a6:	793702        	bbci	a3, 25, 90d3ac <ath_buf_set_rate+0x1f8>
	    (bf->bf_shpream ? rt->info[cix].shortPreamble : 0);
  90d3a9:	224035        	l8ui	a2, a4, 53
    ah->ah_set11nRateScenario(ds, 1,
  90d3ac:	24121c        	l32i	a4, a1, 112
  90d3af:	2a121d        	l32i	a10, a1, 116
  90d3b2:	234210        	l32i	a3, a4, 64
  90d3b5:	df50      	mov.n	a15, a5
  90d3b7:	c0e4      	movi.n	a14, 4
  90d3b9:	dd10      	mov.n	a13, a1
  90d3bb:	0c2c02        	or	a12, a2, a12
  90d3be:	2b0a01        	movi	a11, 1
  90d3c1:	0b3000        	callx8	a3
  90d3c4:	d10f      	retw.n
	...

0090d3c8 <ath_dma_map$isra$8>:
static void ath_dma_map(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d3c8:	6c1004        	entry	a1, 32
    return (__adf_nbuf_queue_first(head));
  90d3cb:	2a3c14        	addi	a10, a3, 20
  90d3ce:	5be63a        	call8	906cb8 <__adf_nbuf_queue_first>
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  90d3d1:	dca0      	mov.n	a12, a10
  90d3d3:	8b30      	l32i.n	a11, a3, 0
  90d3d5:	8a20      	l32i.n	a10, a2, 0
  90d3d7:	c0d0      	movi.n	a13, 0
  90d3d9:	5be5a5        	call8	906a70 <__adf_nbuf_map>
  90d3dc:	d10f      	retw.n
	...

0090d3e0 <ath_buf_toggle>:
{
  90d3e0:	6c1006        	entry	a1, 48
  90d3e3:	d520      	mov.n	a5, a2
	adf_os_assert(sc->sc_txbuf_held != NULL);
  90d3e5:	2222dc        	l32i	a2, a2, 0x370
  90d3e8:	cd25      	bnez.n	a2, 90d401 <ath_buf_toggle+0x21>
  90d3ea:	1268b5        	l32r	a2, 8e76c0 <memset+0x878>
  90d3ed:	1b6a9b        	l32r	a11, 8e7e5c <memset+0x1014>
  90d3f0:	222212        	l32i	a2, a2, 72
  90d3f3:	1a6a98        	l32r	a10, 8e7e54 <memset+0x100c>
  90d3f6:	0b2000        	callx8	a2
  90d3f9:	126919        	l32r	a2, 8e7860 <memset+0xa18>
  90d3fc:	0c0200        	memw
  90d3ff:	8220      	l32i.n	a2, a2, 0
	tmp = sc->sc_txbuf_held;
  90d401:	2252dc        	l32i	a2, a5, 0x370
	if (retry) {
  90d404:	6440e4        	beqz	a4, 90d4ec <ath_buf_toggle+0x10c>
  90d407:	241a18        	movi	a4, 0x118
  90d40a:	a454      	add.n	a4, a5, a4
		ath_dma_unmap(sc, bf);
  90d40c:	db30      	mov.n	a11, a3
  90d40e:	044a02        	or	a10, a4, a4
  90d411:	5bff18        	call8	90d074 <ath_dma_unmap$isra$6>
		adf_nbuf_queue_init(&tmp->bf_skbhead);
  90d414:	272c14        	addi	a7, a2, 20
    __adf_nbuf_queue_init(head);
  90d417:	da70      	mov.n	a10, a7
  90d419:	5be621        	call8	906ca0 <__adf_nbuf_queue_init>
		buf = adf_nbuf_queue_remove(&bf->bf_skbhead);
  90d41c:	263c14        	addi	a6, a3, 20
    return __adf_nbuf_queue_remove(head);
  90d41f:	da60      	mov.n	a10, a6
  90d421:	5be582        	call8	906a2c <__adf_nbuf_queue_remove>
  90d424:	d8a0      	mov.n	a8, a10
		adf_os_assert(buf);
  90d426:	cdab      	bnez.n	a10, 90d445 <ath_buf_toggle+0x65>
  90d428:	1968b5        	l32r	a9, 8e76fc <memset+0x8b4>
  90d42b:	1b6a9b        	l32r	a11, 8e7e98 <memset+0x1050>
  90d42e:	299212        	l32i	a9, a9, 72
  90d431:	1a6a98        	l32r	a10, 8e7e94 <memset+0x104c>
  90d434:	9810      	s32i.n	a8, a1, 0
  90d436:	0b9000        	callx8	a9
  90d439:	196919        	l32r	a9, 8e78a0 <memset+0xa58>
  90d43c:	281200        	l32i	a8, a1, 0
  90d43f:	0c0200        	memw
  90d442:	299200        	l32i	a9, a9, 0
    __adf_nbuf_queue_add(head, buf);
  90d445:	da70      	mov.n	a10, a7
  90d447:	db80      	mov.n	a11, a8
  90d449:	5be570        	call8	906a0c <__adf_nbuf_queue_add>
    return __adf_nbuf_queue_len(head);
  90d44c:	da60      	mov.n	a10, a6
  90d44e:	5be618        	call8	906cb0 <__adf_nbuf_queue_len>
		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);
  90d451:	c9a5      	beqz.n	a10, 90d46a <ath_buf_toggle+0x8a>
  90d453:	1668b5        	l32r	a6, 8e7728 <memset+0x8e0>
  90d456:	1b6a9b        	l32r	a11, 8e7ec4 <memset+0x107c>
  90d459:	266212        	l32i	a6, a6, 72
  90d45c:	1a6a98        	l32r	a10, 8e7ebc <memset+0x1074>
  90d45f:	0b6000        	callx8	a6
  90d462:	166919        	l32r	a6, 8e78c8 <memset+0xa80>
  90d465:	0c0200        	memw
  90d468:	8660      	l32i.n	a6, a6, 0
		tmp->bf_next = bf->bf_next;
  90d46a:	863b      	l32i.n	a6, a3, 44
		tmp->bf_state = bf->bf_state;
  90d46c:	c4cc      	movi.n	a12, 76
		tmp->bf_next = bf->bf_next;
  90d46e:	962b      	s32i.n	a6, a2, 44
		tmp->bf_endpt = bf->bf_endpt;
  90d470:	263223        	l32i	a6, a3, 140
		tmp->bf_state = bf->bf_state;
  90d473:	2b3c3c        	addi	a11, a3, 60
		tmp->bf_endpt = bf->bf_endpt;
  90d476:	262623        	s32i	a6, a2, 140
		tmp->bf_tidno = bf->bf_tidno;
  90d479:	26304d        	l8ui	a6, a3, 77
		tmp->bf_state = bf->bf_state;
  90d47c:	2a2c3c        	addi	a10, a2, 60
		tmp->bf_tidno = bf->bf_tidno;
  90d47f:	26244d        	s8i	a6, a2, 77
		tmp->bf_skb = bf->bf_skb;
  90d482:	8638      	l32i.n	a6, a3, 32
		tmp->bf_isaggr = bf->bf_isaggr;
  90d484:	283221        	l32i	a8, a3, 132
		tmp->bf_skb = bf->bf_skb;
  90d487:	9628      	s32i.n	a6, a2, 32
		tmp->bf_isaggr = bf->bf_isaggr;
  90d489:	085840        	extui	a8, a8, 5, 1
		tmp->bf_node = bf->bf_node;
  90d48c:	8634      	l32i.n	a6, a3, 16
		tmp->bf_isaggr = bf->bf_isaggr;
  90d48e:	0b8911        	slli	a9, a8, 5
  90d491:	282087        	l8ui	a8, a2, 135
		tmp->bf_node = bf->bf_node;
  90d494:	262604        	s32i	a6, a2, 16
		tmp->bf_isaggr = bf->bf_isaggr;
  90d497:	26fadf        	movi	a6, -33
  90d49a:	068801        	and	a8, a8, a6
  90d49d:	098802        	or	a8, a8, a9
  90d4a0:	282487        	s8i	a8, a2, 135
		tmp->bf_flags = bf->bf_flags;
  90d4a3:	273144        	l16ui	a7, a3, 136
  90d4a6:	272544        	s16i	a7, a2, 136
		tmp->bf_state = bf->bf_state;
  90d4a9:	5b65ae        	call8	8e6b64 <memcpy>
		tmp->bf_retries = bf->bf_retries;
  90d4ac:	273086        	l8ui	a7, a3, 134
		ath_dma_map(sc, tmp);
  90d4af:	db20      	mov.n	a11, a2
		tmp->bf_retries = bf->bf_retries;
  90d4b1:	272486        	s8i	a7, a2, 134
		tmp->bf_comp = bf->bf_comp;
  90d4b4:	873f      	l32i.n	a7, a3, 60
		ath_dma_map(sc, tmp);
  90d4b6:	da40      	mov.n	a10, a4
		tmp->bf_comp = bf->bf_comp;
  90d4b8:	972f      	s32i.n	a7, a2, 60
		tmp->bf_nframes = bf->bf_nframes;
  90d4ba:	27304c        	l8ui	a7, a3, 76
  90d4bd:	27244c        	s8i	a7, a2, 76
		tmp->bf_cookie = bf->bf_cookie;
  90d4c0:	273092        	l8ui	a7, a3, 146
  90d4c3:	272492        	s8i	a7, a2, 146
		bf->bf_isaggr = 0;
  90d4c6:	283087        	l8ui	a8, a3, 135
  90d4c9:	068801        	and	a8, a8, a6
  90d4cc:	283487        	s8i	a8, a3, 135
		bf->bf_next = NULL;
  90d4cf:	c080      	movi.n	a8, 0
  90d4d1:	983b      	s32i.n	a8, a3, 44
		bf->bf_skb = NULL;
  90d4d3:	9838      	s32i.n	a8, a3, 32
		bf->bf_node = NULL;
  90d4d5:	9834      	s32i.n	a8, a3, 16
		bf->bf_flags = 0;
  90d4d7:	283544        	s16i	a8, a3, 136
		bf->bf_comp = NULL;
  90d4da:	983f      	s32i.n	a8, a3, 60
		bf->bf_retries = 0;
  90d4dc:	283486        	s8i	a8, a3, 134
		bf->bf_nframes = 0;
  90d4df:	28344c        	s8i	a8, a3, 76
		ath_dma_map(sc, tmp);
  90d4e2:	5bffb9        	call8	90d3c8 <ath_dma_map$isra$8>
		ath_tx_tgt_setds(sc, tmp);
  90d4e5:	db20      	mov.n	a11, a2
  90d4e7:	da50      	mov.n	a10, a5
  90d4e9:	5bff19        	call8	90d150 <ath_tx_tgt_setds>
	sc->sc_txbuf_held = bf;
  90d4ec:	2356dc        	s32i	a3, a5, 0x370
}
  90d4ef:	d10f      	retw.n
  90d4f1:	000000        	ill

0090d4f4 <ath_buf_comp>:
{
  90d4f4:	6c1004        	entry	a1, 32
	ath_dma_unmap(sc, bf);
  90d4f7:	2a1a18        	movi	a10, 0x118
  90d4fa:	db30      	mov.n	a11, a3
  90d4fc:	aa2a      	add.n	a10, a2, a10
  90d4fe:	5bfedd        	call8	90d074 <ath_dma_unmap$isra$6>
	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
  90d501:	2c3223        	l32i	a12, a3, 140
  90d504:	2b3c14        	addi	a11, a3, 20
  90d507:	b82a      	addi.n	a10, a2, 8
  90d509:	5bfedf        	call8	90d088 <ath_tgt_skb_free$isra$7>
	bf->bf_skb = NULL;
  90d50c:	c040      	movi.n	a4, 0
  90d50e:	9438      	s32i.n	a4, a3, 32
	bf->bf_node = NULL;
  90d510:	9434      	s32i.n	a4, a3, 16
	bf = ath_buf_toggle(sc, bf, 0);
  90d512:	dc40      	mov.n	a12, a4
  90d514:	033b02        	or	a11, a3, a3
  90d517:	da20      	mov.n	a10, a2
  90d519:	5bffb1        	call8	90d3e0 <ath_buf_toggle>
	if (bf != NULL) {
  90d51c:	74a10e        	beq	a10, a4, 90d52e <ath_buf_comp+0x3a>
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
  90d51f:	2322f1        	l32i	a3, a2, 0x3c4
  90d522:	94a9      	s32i.n	a4, a10, 36
  90d524:	93aa      	s32i.n	a3, a10, 40
  90d526:	9a30      	s32i.n	a10, a3, 0
  90d528:	2aac24        	addi	a10, a10, 36
  90d52b:	2a26f1        	s32i	a10, a2, 0x3c4
  90d52e:	d10f      	retw.n

0090d530 <ath_tx_freebuf>:
{
  90d530:	6c1004        	entry	a1, 32
	struct ath_hal *ah = sc->sc_ah;
  90d533:	242d05        	addmi	a4, a2, 0x500
  90d536:	864b      	l32i.n	a6, a4, 44
	for (bfd = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; bfd++, i++) {
  90d538:	c050      	movi.n	a5, 0
  90d53a:	843c      	l32i.n	a4, a3, 48
  90d53c:	270a88        	movi	a7, 136
  90d53f:	600023        	j	90d566 <ath_tx_freebuf+0x36>
  90d542:	000028        	mull	a0, a0, a0
		ah->ah_clr11nAggr(bfd);
  90d545:	6214da        	j	8eea23 <memset+0x7bdb>
  90d548:	400b80        	excw
  90d54b:	002862        	excw
		ah->ah_set11nBurstDuration(bfd, 0);
  90d54e:	15044a        	l32r	a5, 8ce678 <_bss_end+0x3bb768>
  90d551:	022b0a        	addx4	a11, a2, a2
  90d554:	000b80        	excw
  90d557:	002862        	excw
		ah->ah_set11nVirtualMoreFrag(bfd, 0);
  90d55a:	16da40        	l32r	a6, 903e5c <memset+0x1d014>
  90d55d:	c0b0      	movi.n	a11, 0
  90d55f:	0b8000        	callx8	a8
	for (bfd = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; bfd++, i++) {
  90d562:	a744      	add.n	a4, a4, a7
  90d564:	b155      	addi.n	a5, a5, 1
  90d566:	8831      	l32i.n	a8, a3, 4
  90d568:	7853d8        	bltu	a5, a8, 90d544 <ath_tx_freebuf+0x14>
	ath_dma_unmap(sc, bf);
  90d56b:	2a1a18        	movi	a10, 0x118
  90d56e:	db30      	mov.n	a11, a3
  90d570:	aa2a      	add.n	a10, a2, a10
  90d572:	5bfec0        	call8	90d074 <ath_dma_unmap$isra$6>
	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
  90d575:	2c3223        	l32i	a12, a3, 140
  90d578:	2b3c14        	addi	a11, a3, 20
  90d57b:	2a2c08        	addi	a10, a2, 8
  90d57e:	5bfec2        	call8	90d088 <ath_tgt_skb_free$isra$7>
	bf->bf_skb = NULL;
  90d581:	c040      	movi.n	a4, 0
  90d583:	9438      	s32i.n	a4, a3, 32
	bf->bf_comp = NULL;
  90d585:	943f      	s32i.n	a4, a3, 60
	bf->bf_node = NULL;
  90d587:	9434      	s32i.n	a4, a3, 16
	bf->bf_next = NULL;
  90d589:	943b      	s32i.n	a4, a3, 44
	bf = ath_buf_toggle(sc, bf, 0);
  90d58b:	db30      	mov.n	a11, a3
  90d58d:	dc40      	mov.n	a12, a4
  90d58f:	da20      	mov.n	a10, a2
  90d591:	5bff93        	call8	90d3e0 <ath_buf_toggle>
	bf->bf_isretried = 0;
  90d594:	23a087        	l8ui	a3, a10, 135
  90d597:	c65f      	movi.n	a5, -17
	bf->bf_retries = 0;
  90d599:	24a486        	s8i	a4, a10, 134
	bf->bf_isretried = 0;
  90d59c:	053301        	and	a3, a3, a5
  90d59f:	23a487        	s8i	a3, a10, 135
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
  90d5a2:	2322f1        	l32i	a3, a2, 0x3c4
  90d5a5:	94a9      	s32i.n	a4, a10, 36
  90d5a7:	93aa      	s32i.n	a3, a10, 40
  90d5a9:	9a30      	s32i.n	a10, a3, 0
  90d5ab:	2aac24        	addi	a10, a10, 36
  90d5ae:	2a26f1        	s32i	a10, a2, 0x3c4
  90d5b1:	d10f      	retw.n
	...

0090d5b4 <ath_bar_tx>:
	ath_buf_comp(sc, bf);
}

static void ath_bar_tx(struct ath_softc_tgt *sc,
		       ath_atx_tid_t *tid, struct ath_tx_buf *bf)
{
  90d5b4:	6c101a        	entry	a1, 208
  90d5b7:	033702        	or	a7, a3, a3
	adf_nbuf_t skb;
	struct ieee80211_frame_bar *bar;
	u_int8_t min_rate;
	struct ath_tx_desc *ds, *ds0;
	struct ath_hal *ah = sc->sc_ah;
  90d5ba:	232d05        	addmi	a3, a2, 0x500
  90d5bd:	863b      	l32i.n	a6, a3, 44
  90d5bf:	231628        	s32i	a3, a1, 160
	HAL_11N_RATE_SERIES series[4];
	int i = 0;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	__stats(sc, tx_bars);
  90d5c2:	232278        	l32i	a3, a2, 0x1e0
  90d5c5:	2b0a70        	movi	a11, 112
  90d5c8:	233c01        	addi	a3, a3, 1
  90d5cb:	232678        	s32i	a3, a2, 0x1e0
  90d5ce:	2a1c20        	addi	a10, a1, 32
  90d5d1:	5bfef3        	call8	90d1a0 <__adf_os_mem_set$constprop$19>

	adf_os_mem_set(&series, 0, sizeof(series));

	ath_aggr_pause_tid(sc, tid);

	skb = adf_nbuf_queue_remove(&bf->bf_skbhead);
  90d5d4:	254c14        	addi	a5, a4, 20
	tid->paused =1;
  90d5d7:	c031      	movi.n	a3, 1
  90d5d9:	237434        	s8i	a3, a7, 52
    return __adf_nbuf_queue_remove(head);
  90d5dc:	da50      	mov.n	a10, a5
  90d5de:	5be513        	call8	906a2c <__adf_nbuf_queue_remove>
    __adf_nbuf_peek_header(buf, addr, len);
  90d5e1:	281c20        	addi	a8, a1, 32
  90d5e4:	2c8c70        	addi	a12, a8, 112
  90d5e7:	2b8c74        	addi	a11, a8, 116
    return __adf_nbuf_queue_remove(head);
  90d5ea:	0aa302        	or	a3, a10, a10
    __adf_nbuf_peek_header(buf, addr, len);
  90d5ed:	5be5a6        	call8	906c88 <__adf_nbuf_peek_header>
    __adf_nbuf_trim_tail(buf, size);
  90d5f0:	2b1224        	l32i	a11, a1, 144
  90d5f3:	da30      	mov.n	a10, a3
  90d5f5:	5be583        	call8	906c04 <__adf_nbuf_trim_tail>
  90d5f8:	2c1a18        	movi	a12, 0x118
  90d5fb:	ac2c      	add.n	a12, a2, a12
	adf_nbuf_peek_header(skb, &anbdata, &anblen);
	adf_nbuf_trim_tail(skb, anblen);
	bar = (struct ieee80211_frame_bar *) anbdata;
  90d5fd:	291225        	l32i	a9, a1, 148

	min_rate =  0x0b;

	ath_dma_unmap(sc, bf);
  90d600:	dac0      	mov.n	a10, a12
  90d602:	db40      	mov.n	a11, a4
  90d604:	2c162a        	s32i	a12, a1, 168
  90d607:	291629        	s32i	a9, a1, 164
  90d60a:	5bfe9a        	call8	90d074 <ath_dma_unmap$isra$6>
    __adf_nbuf_queue_add(head, buf);
  90d60d:	db30      	mov.n	a11, a3
  90d60f:	da50      	mov.n	a10, a5
  90d611:	5be4fe        	call8	906a0c <__adf_nbuf_queue_add>
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	bar->i_fc[1] = IEEE80211_FC1_DIR_NODS;
  90d614:	291229        	l32i	a9, a1, 164
  90d617:	c050      	movi.n	a5, 0
  90d619:	259401        	s8i	a5, a9, 1
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
  90d61c:	25fa84        	movi	a5, -124
  90d61f:	259400        	s8i	a5, a9, 0
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
  90d622:	8570      	l32i.n	a5, a7, 0
  90d624:	c0a4      	movi.n	a10, 4
  90d626:	045511        	slli	a5, a5, 12
  90d629:	0a5502        	or	a5, a5, a10
  90d62c:	05054f        	extui	a5, a5, 0, 16
  90d62f:	259411        	s8i	a5, a9, 17
  90d632:	058a14        	srli	a10, a5, 8
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  90d635:	257102        	l16ui	a5, a7, 4
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
  90d638:	2a9410        	s8i	a10, a9, 16
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  90d63b:	0c5511        	slli	a5, a5, 4
  90d63e:	05054f        	extui	a5, a5, 0, 16
  90d641:	058b14        	srli	a11, a5, 8
  90d644:	085a11        	slli	a10, a5, 8
  90d647:	0baa02        	or	a10, a10, a11
  90d64a:	0a0a4f        	extui	a10, a10, 0, 16
  90d64d:	0a8b14        	srli	a11, a10, 8
  90d650:	2b9412        	s8i	a11, a9, 18
  90d653:	2a9413        	s8i	a10, a9, 19

	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;
  90d656:	254523        	s16i	a5, a4, 70
    return __adf_nbuf_put_tail(buf, size);
  90d659:	c1b4      	movi.n	a11, 20
  90d65b:	da30      	mov.n	a10, a3
  90d65d:	5be55f        	call8	906bdc <__adf_nbuf_put_tail>

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
  90d660:	156a9c        	l32r	a5, 8e80d0 <memset+0x1288>
	bf->bf_tidno = tid->tidno;
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
  90d663:	2c122a        	l32i	a12, a1, 168
	bf->bf_comp = ath_bar_tx_comp;
  90d666:	954f      	s32i.n	a5, a4, 60
	bf->bf_tidno = tid->tidno;
  90d668:	8570      	l32i.n	a5, a7, 0
	ath_dma_map(sc, bf);
  90d66a:	dac0      	mov.n	a10, a12
	bf->bf_tidno = tid->tidno;
  90d66c:	25444d        	s8i	a5, a4, 77
	bf->bf_node = &tid->an->ni;
  90d66f:	857e      	l32i.n	a5, a7, 56
	ath_dma_map(sc, bf);
  90d671:	db40      	mov.n	a11, a4
	bf->bf_node = &tid->an->ni;
  90d673:	254604        	s32i	a5, a4, 16
	ath_dma_map(sc, bf);
  90d676:	5bff54        	call8	90d3c8 <ath_dma_map$isra$8>
    __adf_nbuf_dmamap_info(bmap, sg);
  90d679:	8a40      	l32i.n	a10, a4, 0
  90d67b:	b44b      	addi.n	a11, a4, 4
  90d67d:	5be504        	call8	906a90 <__adf_nbuf_dmamap_info>
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	ds = bf->bf_desc;
	ah->ah_setupTxDesc(ds
  90d680:	286217        	l32i	a8, a6, 92
    return (__adf_nbuf_len(buf));
  90d683:	da30      	mov.n	a10, a3
	ds = bf->bf_desc;
  90d685:	854c      	l32i.n	a5, a4, 48
  90d687:	281629        	s32i	a8, a1, 164
  90d68a:	5be577        	call8	906c68 <__adf_nbuf_len>
	ah->ah_setupTxDesc(ds
  90d68d:	c191      	movi.n	a9, 17
  90d68f:	9912      	s32i.n	a9, a1, 8
  90d691:	294049        	l8ui	a9, a4, 73
  90d694:	c030      	movi.n	a3, 0
  90d696:	c0fb      	movi.n	a15, 11
  90d698:	281229        	l32i	a8, a1, 164
  90d69b:	9911      	s32i.n	a9, a1, 4
  90d69d:	b4ab      	addi.n	a11, a10, 4
  90d69f:	9314      	s32i.n	a3, a1, 16
  90d6a1:	9313      	s32i.n	a3, a1, 12
  90d6a3:	9f10      	s32i.n	a15, a1, 0
  90d6a5:	c3ec      	movi.n	a14, 60
  90d6a7:	dd30      	mov.n	a13, a3
  90d6a9:	dc30      	mov.n	a12, a3
  90d6ab:	da50      	mov.n	a10, a5
  90d6ad:	0b8000        	callx8	a8
			    , bf->bf_keyix
			    , HAL_TXDESC_INTREQ
			    | HAL_TXDESC_CLRDMASK
			    , 0, 0);

	bf->bf_isaggr = 0;
  90d6b0:	284087        	l8ui	a8, a4, 135
  90d6b3:	29fadf        	movi	a9, -33
  90d6b6:	098801        	and	a8, a8, a9
  90d6b9:	284487        	s8i	a8, a4, 135
	bf->bf_next = NULL;
  90d6bc:	934b      	s32i.n	a3, a4, 44

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90d6be:	290a88        	movi	a9, 136
  90d6c1:	600012        	j	90d6d7 <ath_bar_tx+0x123>
		ah->ah_clr11nAggr(ds0);
  90d6c4:	286214        	l32i	a8, a6, 80
  90d6c7:	055a02        	or	a10, a5, a5
  90d6ca:	291629        	s32i	a9, a1, 164
  90d6cd:	0b8000        	callx8	a8
	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90d6d0:	291229        	l32i	a9, a1, 164
  90d6d3:	b133      	addi.n	a3, a3, 1
  90d6d5:	a955      	add.n	a5, a5, a9
  90d6d7:	8841      	l32i.n	a8, a4, 4
  90d6d9:	7833e7        	bltu	a3, a8, 90d6c4 <ath_bar_tx+0x110>
	}

	ath_filltxdesc(sc, bf);
  90d6dc:	231228        	l32i	a3, a1, 160
  90d6df:	db40      	mov.n	a11, a4
  90d6e1:	8a3b      	l32i.n	a10, a3, 44

	for (i = 0 ; i < 4; i++) {
		series[i].Tries = ATH_TXMAXTRY;
		series[i].Rate = min_rate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d6e3:	232d16        	addmi	a3, a2, 0x1600
	ath_filltxdesc(sc, bf);
  90d6e6:	5bfe72        	call8	90d0b0 <ath_filltxdesc$isra$9>
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d6e9:	283026        	l8ui	a8, a3, 38
		series[i].Tries = ATH_TXMAXTRY;
  90d6ec:	c07b      	movi.n	a7, 11
  90d6ee:	231c20        	addi	a3, a1, 32
  90d6f1:	250a04        	movi	a5, 4
  90d6f4:	9730      	s32i.n	a7, a3, 0
		series[i].Rate = min_rate;
  90d6f6:	9731      	s32i.n	a7, a3, 4
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d6f8:	9833      	s32i.n	a8, a3, 12
  90d6fa:	233c1c        	addi	a3, a3, 28
  90d6fd:	b055      	addi.n	a5, a5, -1
  90d6ff:	655ff1        	bnez	a5, 90d6f4 <ath_bar_tx+0x140>
	}

	ah->ah_set11nRateScenario(bf->bf_desc, 0, 0, series, 4, 4);
  90d702:	c0f4      	movi.n	a15, 4
  90d704:	c0c0      	movi.n	a12, 0
  90d706:	8a4c      	l32i.n	a10, a4, 48
  90d708:	236210        	l32i	a3, a6, 64
  90d70b:	dbc0      	mov.n	a11, a12
  90d70d:	def0      	mov.n	a14, a15
  90d70f:	2d1c20        	addi	a13, a1, 32
  90d712:	0b3000        	callx8	a3
	ath_tgt_txq_add_ucast(sc, bf);
  90d715:	db40      	mov.n	a11, a4
  90d717:	da20      	mov.n	a10, a2
  90d719:	5bfddc        	call8	90ce8c <ath_tgt_txq_add_ucast>
  90d71c:	d10f      	retw.n
	...

0090d720 <owl_tgt_node_init>:
{
  90d720:	6c1004        	entry	a1, 32
	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
  90d723:	232c24        	addi	a3, a2, 36
  90d726:	240a00        	movi	a4, 0
			tid->flag |= TID_REINITIALIZE;
  90d729:	250a04        	movi	a5, 4
		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
  90d72c:	283036        	l8ui	a8, a3, 54
		tid->tidno = tidno;
  90d72f:	9430      	s32i.n	a4, a3, 0
		tid->an = an;
  90d731:	923e      	s32i.n	a2, a3, 56
		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
  90d733:	7f871d        	bbci	a8, 31, 90d754 <owl_tgt_node_init+0x34>
			tid->flag |= TID_REINITIALIZE;
  90d736:	058802        	or	a8, a8, a5
  90d739:	283436        	s8i	a8, a3, 54
			adf_os_print("tid[%p]->incomp is not 0: %d\n",
  90d73c:	1868b5        	l32r	a8, 8e7a10 <memset+0xbc8>
  90d73f:	2c3037        	l8ui	a12, a3, 55
  90d742:	288212        	l32i	a8, a8, 72
  90d745:	1a6a9d        	l32r	a10, 8e81bc <memset+0x1374>
  90d748:	00cc32        	sext	a12, a12, 7
  90d74b:	db30      	mov.n	a11, a3
  90d74d:	0b8000        	callx8	a8
  90d750:	600005        	j	90d759 <owl_tgt_node_init+0x39>
  90d753:	00da30        	excw
			owl_tgt_tid_init(tid);
  90d756:	5bfdba        	call8	90ce40 <owl_tgt_tid_init>
	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
  90d759:	b144      	addi.n	a4, a4, 1
  90d75b:	233c3c        	addi	a3, a3, 60
  90d75e:	6948ca        	bnei	a4, 8, 90d72c <owl_tgt_node_init+0xc>
}
  90d761:	d10f      	retw.n
	...

0090d764 <ath_tx_status_clear>:
{
  90d764:	6c1004        	entry	a1, 32
		sc->tx_status[i].cnt = 0;
  90d767:	222d16        	addmi	a2, a2, 0x1600
  90d76a:	c080      	movi.n	a8, 0
  90d76c:	282438        	s8i	a8, a2, 56
  90d76f:	28245d        	s8i	a8, a2, 93
  90d772:	d10f      	retw.n

0090d774 <ath_tx_status_update>:
{
  90d774:	6c1004        	entry	a1, 32
	if (sc->sc_tx_draining)
  90d777:	242249        	l32i	a4, a2, 0x124
  90d77a:	156a5b        	l32r	a5, 8e80e8 <memset+0x12a0>
  90d77d:	054401        	and	a4, a4, a5
  90d780:	6540b1        	bnez	a4, 90d835 <ath_tx_status_update+0xc1>
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
  90d783:	282d16        	addmi	a8, a2, 0x1600
  90d786:	298038        	l8ui	a9, a8, 56
  90d789:	c05b      	movi.n	a5, 11
  90d78b:	795b0a        	bgeu	a5, a9, 90d799 <ath_tx_status_update+0x25>
  90d78e:	24805d        	l8ui	a4, a8, 93
  90d791:	745b02        	bgeu	a5, a4, 90d797 <ath_tx_status_update+0x23>
  90d794:	60009d        	j	90d835 <ath_tx_status_update+0xc1>
	for (i = 0; i < 2; i++) {
  90d797:	c041      	movi.n	a4, 1
			txs = &sc->tx_status[i];
  90d799:	0d4511        	slli	a5, a4, 3
  90d79c:	a459      	add.n	a9, a5, a4
  90d79e:	0e9911        	slli	a9, a9, 2
  90d7a1:	a499      	add.n	a9, a9, a4
  90d7a3:	1b6a9e        	l32r	a11, 8e821c <memset+0x13d4>
	txs->txstatus[txs->cnt].ts_flags = 0;
  90d7a6:	a928      	add.n	a8, a2, a9
  90d7a8:	ab88      	add.n	a8, a8, a11
  90d7aa:	2c8000        	l8ui	a12, a8, 0
			txs = &sc->tx_status[i];
  90d7ad:	ab9d      	add.n	a13, a9, a11
	txs->txstatus[txs->cnt].ts_flags = 0;
  90d7af:	0fc811        	slli	a8, a12, 1
  90d7b2:	ac8b      	add.n	a11, a8, a12
  90d7b4:	a9b9      	add.n	a9, a11, a9
  90d7b6:	1b6a9f        	l32r	a11, 8e8234 <memset+0x13ec>
  90d7b9:	a929      	add.n	a9, a2, a9
  90d7bb:	ab9b      	add.n	a11, a9, a11
  90d7bd:	c0e0      	movi.n	a14, 0
	struct ath_tx_desc *ds = bf->bf_lastds;
  90d7bf:	8a3e      	l32i.n	a10, a3, 56
	txs->txstatus[txs->cnt].ts_flags = 0;
  90d7c1:	2eb400        	s8i	a14, a11, 0
	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d7c4:	1e6aa0        	l32r	a14, 8e8244 <memset+0x13fc>
  90d7c7:	2f3092        	l8ui	a15, a3, 146
  90d7ca:	ae9e      	add.n	a14, a9, a14
  90d7cc:	2fe400        	s8i	a15, a14, 0
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  90d7cf:	1e6aa1        	l32r	a14, 8e8254 <memset+0x140c>
	if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  90d7d2:	c0f2      	movi.n	a15, 2
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  90d7d4:	0e9908        	add	a9, a9, a14
  90d7d7:	2e3223        	l32i	a14, a3, 140
			txs = &sc->tx_status[i];
  90d7da:	0d2d08        	add	a13, a2, a13
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  90d7dd:	0cee11        	slli	a14, a14, 4
  90d7e0:	2e9400        	s8i	a14, a9, 0
	if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  90d7e3:	2ea066        	l8ui	a14, a10, 102
  90d7e6:	7fe008        	bnone	a14, a15, 90d7f2 <ath_tx_status_update+0x7e>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_FILT;
  90d7e9:	29b000        	l8ui	a9, a11, 0
  90d7ec:	0f9902        	or	a9, a9, a15
  90d7ef:	29b400        	s8i	a9, a11, 0
	if (!(ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) &&
  90d7f2:	c197      	movi.n	a9, 23
  90d7f4:	79e81c        	bany	a14, a9, 90d814 <ath_tx_status_update+0xa0>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_ACK;
  90d7f7:	a459      	add.n	a9, a5, a4
  90d7f9:	0e9911        	slli	a9, a9, 2
  90d7fc:	a499      	add.n	a9, a9, a4
  90d7fe:	ac88      	add.n	a8, a8, a12
  90d800:	a988      	add.n	a8, a8, a9
  90d802:	196a9f        	l32r	a9, 8e8280 <memset+0x1438>
  90d805:	a828      	add.n	a8, a2, a8
  90d807:	a988      	add.n	a8, a8, a9
  90d809:	298000        	l8ui	a9, a8, 0
  90d80c:	c0b1      	movi.n	a11, 1
  90d80e:	0b9902        	or	a9, a9, a11
  90d811:	298400        	s8i	a9, a8, 0
	ath_tx_status_update_rate(sc, bf->bf_rcs, ds->ds_txstat.ts_rate, txs);
  90d814:	2ca068        	l8ui	a12, a10, 104
	txs->cnt++;
  90d817:	a455      	add.n	a5, a5, a4
	ath_tx_status_update_rate(sc, bf->bf_rcs, ds->ds_txstat.ts_rate, txs);
  90d819:	2b3c50        	addi	a11, a3, 80
  90d81c:	da20      	mov.n	a10, a2
	txs->cnt++;
  90d81e:	0e5511        	slli	a5, a5, 2
	ath_tx_status_update_rate(sc, bf->bf_rcs, ds->ds_txstat.ts_rate, txs);
  90d821:	5bfd0e        	call8	90cc5c <ath_tx_status_update_rate>
	txs->cnt++;
  90d824:	a454      	add.n	a4, a5, a4
  90d826:	136a9e        	l32r	a3, 8e82a0 <memset+0x1458>
  90d829:	a422      	add.n	a2, a2, a4
  90d82b:	a322      	add.n	a2, a2, a3
  90d82d:	232000        	l8ui	a3, a2, 0
  90d830:	b133      	addi.n	a3, a3, 1
  90d832:	232400        	s8i	a3, a2, 0
  90d835:	d10f      	retw.n
	...

0090d838 <ath_tx_status_update_aggr>:
{
  90d838:	6c1004        	entry	a1, 32
  90d83b:	da30      	mov.n	a10, a3
	if (sc->sc_tx_draining)
  90d83d:	272249        	l32i	a7, a2, 0x124
  90d840:	136a5b        	l32r	a3, 8e81ac <memset+0x1364>
{
  90d843:	db50      	mov.n	a11, a5
	if (sc->sc_tx_draining)
  90d845:	037701        	and	a7, a7, a3
  90d848:	65708a        	bnez	a7, 90d8d6 <ath_tx_status_update_aggr+0x9e>
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
  90d84b:	282d16        	addmi	a8, a2, 0x1600
  90d84e:	298038        	l8ui	a9, a8, 56
  90d851:	230a0b        	movi	a3, 11
  90d854:	793b08        	bgeu	a3, a9, 90d860 <ath_tx_status_update_aggr+0x28>
  90d857:	27805d        	l8ui	a7, a8, 93
  90d85a:	773378        	bltu	a3, a7, 90d8d6 <ath_tx_status_update_aggr+0x9e>
	for (i = 0; i < 2; i++) {
  90d85d:	270a01        	movi	a7, 1
	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d860:	0d7311        	slli	a3, a7, 3
  90d863:	a739      	add.n	a9, a3, a7
  90d865:	0e9911        	slli	a9, a9, 2
  90d868:	a799      	add.n	a9, a9, a7
  90d86a:	1c6a9e        	l32r	a12, 8e82e4 <memset+0x149c>
  90d86d:	a928      	add.n	a8, a2, a9
  90d86f:	ac88      	add.n	a8, a8, a12
  90d871:	2c8000        	l8ui	a12, a8, 0
  90d874:	0fc811        	slli	a8, a12, 1
  90d877:	ac88      	add.n	a8, a8, a12
  90d879:	a988      	add.n	a8, a8, a9
  90d87b:	196aa0        	l32r	a9, 8e82fc <memset+0x14b4>
  90d87e:	2ca092        	l8ui	a12, a10, 146
  90d881:	a828      	add.n	a8, a2, a8
  90d883:	a989      	add.n	a9, a8, a9
  90d885:	2c9400        	s8i	a12, a9, 0
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  90d888:	2aa223        	l32i	a10, a10, 140
  90d88b:	196aa1        	l32r	a9, 8e8310 <memset+0x14c8>
  90d88e:	0caa11        	slli	a10, a10, 4
  90d891:	a989      	add.n	a9, a8, a9
  90d893:	2a9400        	s8i	a10, a9, 0
	if (txok)
  90d896:	c86e      	beqz.n	a6, 90d8a8 <ath_tx_status_update_aggr+0x70>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_ACK;
  90d898:	196a9f        	l32r	a9, 8e8314 <memset+0x14cc>
  90d89b:	a989      	add.n	a9, a8, a9
  90d89d:	269000        	l8ui	a6, a9, 0
  90d8a0:	c081      	movi.n	a8, 1
  90d8a2:	086602        	or	a6, a6, a8
  90d8a5:	269400        	s8i	a6, a9, 0
	if (rcs)
  90d8a8:	c9b4      	beqz.n	a11, 90d8c0 <ath_tx_status_update_aggr+0x88>
			txs = &sc->tx_status[i];
  90d8aa:	a73d      	add.n	a13, a3, a7
  90d8ac:	0edd11        	slli	a13, a13, 2
  90d8af:	166a9e        	l32r	a6, 8e8328 <memset+0x14e0>
  90d8b2:	a7dd      	add.n	a13, a13, a7
  90d8b4:	a6dd      	add.n	a13, a13, a6
		ath_tx_status_update_rate(sc, rcs, ds->ds_txstat.ts_rate, txs);
  90d8b6:	2c4068        	l8ui	a12, a4, 104
  90d8b9:	ad2d      	add.n	a13, a2, a13
  90d8bb:	da20      	mov.n	a10, a2
  90d8bd:	5bfce7        	call8	90cc5c <ath_tx_status_update_rate>
	txs->cnt++;
  90d8c0:	a738      	add.n	a8, a3, a7
  90d8c2:	0e8811        	slli	a8, a8, 2
  90d8c5:	a787      	add.n	a7, a8, a7
  90d8c7:	a722      	add.n	a2, a2, a7
  90d8c9:	176a9e        	l32r	a7, 8e8344 <memset+0x14fc>
  90d8cc:	a722      	add.n	a2, a2, a7
  90d8ce:	232000        	l8ui	a3, a2, 0
  90d8d1:	b133      	addi.n	a3, a3, 1
  90d8d3:	232400        	s8i	a3, a2, 0
  90d8d6:	d10f      	retw.n

0090d8d8 <ath_tx_status_send>:
{
  90d8d8:	6c1004        	entry	a1, 32
	if (sc->sc_tx_draining)
  90d8db:	242249        	l32i	a4, a2, 0x124
  90d8de:	136a5b        	l32r	a3, 8e824c <memset+0x1404>
  90d8e1:	034401        	and	a4, a4, a3
  90d8e4:	cf44      	bnez.n	a4, 90d91c <ath_tx_status_send+0x44>
		if (sc->tx_status[i].cnt) {
  90d8e6:	232d16        	addmi	a3, a2, 0x1600
  90d8e9:	283038        	l8ui	a8, a3, 56
  90d8ec:	c980      	beqz.n	a8, 90d900 <ath_tx_status_send+0x28>
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90d8ee:	1c6a9e        	l32r	a12, 8e8368 <memset+0x1520>
  90d8f1:	1b6aa2        	l32r	a11, 8e837c <memset+0x1534>
  90d8f4:	8a23      	l32i.n	a10, a2, 12
  90d8f6:	c2d5      	movi.n	a13, 37
  90d8f8:	ac2c      	add.n	a12, a2, a12
  90d8fa:	5bea65        	call8	908290 <wmi_event>
			sc->tx_status[i].cnt = 0;
  90d8fd:	243438        	s8i	a4, a3, 56
		if (sc->tx_status[i].cnt) {
  90d900:	24305d        	l8ui	a4, a3, 93
  90d903:	c945      	beqz.n	a4, 90d91c <ath_tx_status_send+0x44>
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90d905:	1c6aa3        	l32r	a12, 8e8394 <memset+0x154c>
  90d908:	8a23      	l32i.n	a10, a2, 12
  90d90a:	1b6aa2        	l32r	a11, 8e8394 <memset+0x154c>
  90d90d:	0c2c08        	add	a12, a2, a12
  90d910:	2d0a25        	movi	a13, 37
			sc->tx_status[i].cnt = 0;
  90d913:	220a00        	movi	a2, 0
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90d916:	5bea5e        	call8	908290 <wmi_event>
			sc->tx_status[i].cnt = 0;
  90d919:	22345d        	s8i	a2, a3, 93
  90d91c:	d10f      	retw.n
	...

0090d920 <ATH_SKB_2_WH>:
{
  90d920:	6c1006        	entry	a1, 48
    __adf_nbuf_peek_header(buf, addr, len);
  90d923:	da20      	mov.n	a10, a2
  90d925:	dc10      	mov.n	a12, a1
  90d927:	b41b      	addi.n	a11, a1, 4
  90d929:	5be4d7        	call8	906c88 <__adf_nbuf_peek_header>
}
  90d92c:	8211      	l32i.n	a2, a1, 4
  90d92e:	d10f      	retw.n

0090d930 <ath_tx_set_retry$isra$12>:
static void ath_tx_set_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d930:	6c1004        	entry	a1, 32
	__stats(sc, txaggr_retries);
  90d933:	8820      	l32i.n	a8, a2, 0
	wh = ATH_SKB_2_WH(bf->bf_skb);
  90d935:	8a38      	l32i.n	a10, a3, 32
	__stats(sc, txaggr_retries);
  90d937:	b188      	addi.n	a8, a8, 1
  90d939:	9820      	s32i.n	a8, a2, 0
	bf->bf_isretried = 1;
  90d93b:	283087        	l8ui	a8, a3, 135
  90d93e:	c120      	movi.n	a2, 16
  90d940:	028802        	or	a8, a8, a2
  90d943:	283487        	s8i	a8, a3, 135
	bf->bf_retries ++;
  90d946:	283086        	l8ui	a8, a3, 134
	wh->i_fc[1] |= IEEE80211_FC1_RETRY;
  90d949:	c028      	movi.n	a2, 8
	bf->bf_retries ++;
  90d94b:	288c01        	addi	a8, a8, 1
  90d94e:	283486        	s8i	a8, a3, 134
	wh = ATH_SKB_2_WH(bf->bf_skb);
  90d951:	5bfff3        	call8	90d920 <ATH_SKB_2_WH>
	wh->i_fc[1] |= IEEE80211_FC1_RETRY;
  90d954:	23a001        	l8ui	a3, a10, 1
  90d957:	023302        	or	a3, a3, a2
  90d95a:	23a401        	s8i	a3, a10, 1
  90d95d:	d10f      	retw.n
	...

0090d960 <ath_tx_retry_subframe$isra$14>:
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
  90d960:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  90d963:	262d05        	addmi	a6, a2, 0x500
  90d966:	876b      	l32i.n	a7, a6, 44
	__stats(sc, txaggr_compretries);
  90d968:	262263        	l32i	a6, a2, 0x18c
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90d96b:	8d34      	l32i.n	a13, a3, 16
	__stats(sc, txaggr_compretries);
  90d96d:	b166      	addi.n	a6, a6, 1
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d96f:	2c304d        	l8ui	a12, a3, 77
	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90d972:	c080      	movi.n	a8, 0
	__stats(sc, txaggr_compretries);
  90d974:	262663        	s32i	a6, a2, 0x18c
	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90d977:	2e0a88        	movi	a14, 136
  90d97a:	863c      	l32i.n	a6, a3, 48
  90d97c:	600032        	j	90d9b2 <ath_tx_retry_subframe$isra$14+0x52>
  90d97f:	002972        	excw
		ah->ah_clr11nAggr(ds);
  90d982:	14da60        	l32r	a4, 904304 <memset+0x1d4bc>
  90d985:	9812      	s32i.n	a8, a1, 8
  90d987:	9c11      	s32i.n	a12, a1, 4
  90d989:	9d10      	s32i.n	a13, a1, 0
  90d98b:	9e13      	s32i.n	a14, a1, 12
  90d98d:	0b9000        	callx8	a9
		ah->ah_set11nBurstDuration(ds, 0);
  90d990:	297215        	l32i	a9, a7, 84
  90d993:	066a02        	or	a10, a6, a6
  90d996:	2b0a00        	movi	a11, 0
  90d999:	0b9000        	callx8	a9
		ah->ah_set11nVirtualMoreFrag(ds, 0);
  90d99c:	297216        	l32i	a9, a7, 88
  90d99f:	da60      	mov.n	a10, a6
  90d9a1:	c0b0      	movi.n	a11, 0
  90d9a3:	0b9000        	callx8	a9
	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90d9a6:	8e13      	l32i.n	a14, a1, 12
  90d9a8:	8812      	l32i.n	a8, a1, 8
  90d9aa:	8d10      	l32i.n	a13, a1, 0
  90d9ac:	8c11      	l32i.n	a12, a1, 4
  90d9ae:	ae66      	add.n	a6, a6, a14
  90d9b0:	b188      	addi.n	a8, a8, 1
  90d9b2:	8931      	l32i.n	a9, a3, 4
  90d9b4:	7983c8        	bltu	a8, a9, 90d980 <ath_tx_retry_subframe$isra$14+0x20>
	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90d9b7:	263086        	l8ui	a6, a3, 134
  90d9ba:	c089      	movi.n	a8, 9
  90d9bc:	768b3e        	bgeu	a8, a6, 90d9fe <ath_tx_retry_subframe$isra$14+0x9e>
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d9bf:	0cca11        	slli	a10, a12, 4
		__stats(sc, txaggr_xretries);
  90d9c2:	242274        	l32i	a4, a2, 0x1d0
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d9c5:	0caa0c        	sub	a10, a10, a12
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90d9c8:	2b3123        	l16ui	a11, a3, 70
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d9cb:	0eaa11        	slli	a10, a10, 2
		__stats(sc, txaggr_xretries);
  90d9ce:	b144      	addi.n	a4, a4, 1
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d9d0:	2aac24        	addi	a10, a10, 36
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90d9d3:	aada      	add.n	a10, a13, a10
		__stats(sc, txaggr_xretries);
  90d9d5:	242674        	s32i	a4, a2, 0x1d0
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90d9d8:	0b4b14        	srli	a11, a11, 4
  90d9db:	5bfd4f        	call8	90cf18 <ath_tx_update_baw>
		ath_tx_status_update_aggr(sc, bf, bf->bf_lastds, NULL, 0);
  90d9de:	c0e0      	movi.n	a14, 0
  90d9e0:	8c3e      	l32i.n	a12, a3, 56
  90d9e2:	dde0      	mov.n	a13, a14
  90d9e4:	db30      	mov.n	a11, a3
  90d9e6:	022a02        	or	a10, a2, a2
  90d9e9:	5bff93        	call8	90d838 <ath_tx_status_update_aggr>
		if (!*bar)
  90d9ec:	8450      	l32i.n	a4, a5, 0
  90d9ee:	cc42      	bnez.n	a4, 90d9f4 <ath_tx_retry_subframe$isra$14+0x94>
			*bar = bf;
  90d9f0:	9350      	s32i.n	a3, a5, 0
  90d9f2:	d10f      	retw.n
			ath_tx_freebuf(sc, bf);
  90d9f4:	db30      	mov.n	a11, a3
  90d9f6:	022a02        	or	a10, a2, a2
  90d9f9:	5bfecd        	call8	90d530 <ath_tx_freebuf>
  90d9fc:	d10f      	retw.n
	if (!bf->bf_next) {
  90d9fe:	853b      	l32i.n	a5, a3, 44
  90da00:	cd55      	bnez.n	a5, 90da19 <ath_tx_retry_subframe$isra$14+0xb9>
		__stats(sc, txaggr_errlast);
  90da02:	252267        	l32i	a5, a2, 0x19c
		bf = ath_buf_toggle(sc, bf, 1);
  90da05:	db30      	mov.n	a11, a3
		__stats(sc, txaggr_errlast);
  90da07:	b155      	addi.n	a5, a5, 1
  90da09:	252667        	s32i	a5, a2, 0x19c
		bf = ath_buf_toggle(sc, bf, 1);
  90da0c:	c0c1      	movi.n	a12, 1
  90da0e:	022a02        	or	a10, a2, a2
  90da11:	5bfe73        	call8	90d3e0 <ath_buf_toggle>
  90da14:	d3a0      	mov.n	a3, a10
  90da16:	600012        	j	90da2c <ath_tx_retry_subframe$isra$14+0xcc>
		bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs - 1]);
  90da19:	0c9811        	slli	a8, a9, 4
  90da1c:	a988      	add.n	a8, a8, a9
  90da1e:	0d8811        	slli	a8, a8, 3
  90da21:	25fa78        	movi	a5, -136
  90da24:	863d      	l32i.n	a6, a3, 52
  90da26:	a588      	add.n	a8, a8, a5
  90da28:	a868      	add.n	a8, a6, a8
  90da2a:	983e      	s32i.n	a8, a3, 56
	ath_tx_set_retry(sc, bf);
  90da2c:	2a1a80        	movi	a10, 0x180
  90da2f:	db30      	mov.n	a11, a3
  90da31:	aa2a      	add.n	a10, a2, a10
	asf_tailq_insert_tail(bf_q, bf, bf_list);
  90da33:	c020      	movi.n	a2, 0
	ath_tx_set_retry(sc, bf);
  90da35:	5bffbe        	call8	90d930 <ath_tx_set_retry$isra$12>
	asf_tailq_insert_tail(bf_q, bf, bf_list);
  90da38:	9239      	s32i.n	a2, a3, 36
  90da3a:	8240      	l32i.n	a2, a4, 0
  90da3c:	923a      	s32i.n	a2, a3, 40
  90da3e:	9320      	s32i.n	a3, a2, 0
  90da40:	233c24        	addi	a3, a3, 36
  90da43:	9340      	s32i.n	a3, a4, 0
  90da45:	d10f      	retw.n
	...

0090da48 <ath_tx_comp_aggr_error>:
{
  90da48:	6c1020        	entry	a1, 0x100
	struct ath_tx_buf *bar = NULL;
  90da4b:	c050      	movi.n	a5, 0
  90da4d:	251630        	s32i	a5, a1, 192
	asf_tailq_init(&bf_q);
  90da50:	25162e        	s32i	a5, a1, 184
    __adf_os_mem_copy(dst, src, size);
  90da53:	8b3e      	l32i.n	a11, a3, 56
  90da55:	250ab8        	movi	a5, 184
  90da58:	051508        	add	a5, a1, a5
  90da5b:	2c0a88        	movi	a12, 136
  90da5e:	011a02        	or	a10, a1, a1
  90da61:	25162f        	s32i	a5, a1, 188
	int nframes = bf->bf_nframes;
  90da64:	26304c        	l8ui	a6, a3, 76
	txq = bf->bf_txq;
  90da67:	273220        	l32i	a7, a3, 128
  90da6a:	5bfcdc        	call8	90cddc <__adf_os_mem_copy>
  90da6d:	2a0a88        	movi	a10, 136
  90da70:	2c0a30        	movi	a12, 48
  90da73:	2b3c50        	addi	a11, a3, 80
  90da76:	0a1a08        	add	a10, a1, a10
  90da79:	5bfcd8        	call8	90cddc <__adf_os_mem_copy>
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90da7c:	b455      	addi.n	a5, a5, 4
		bf_next = bf->bf_next;
  90da7e:	883b      	l32i.n	a8, a3, 44
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90da80:	2d0ac0        	movi	a13, 192
  90da83:	db30      	mov.n	a11, a3
  90da85:	a1dd      	add.n	a13, a13, a1
  90da87:	dc50      	mov.n	a12, a5
  90da89:	da20      	mov.n	a10, a2
  90da8b:	281634        	s32i	a8, a1, 208
  90da8e:	5bffb4        	call8	90d960 <ath_tx_retry_subframe$isra$14>
  90da91:	281234        	l32i	a8, a1, 208
  90da94:	088302        	or	a3, a8, a8
	while (bf) {
  90da97:	658fe3        	bnez	a8, 90da7e <ath_tx_comp_aggr_error+0x36>
	ath_update_aggr_stats(sc, ds, nframes, nframes);
  90da9a:	2e1071        	l8ui	a14, a1, 113
  90da9d:	2d1070        	l8ui	a13, a1, 112
  90daa0:	2c1067        	l8ui	a12, a1, 103
  90daa3:	2b1066        	l8ui	a11, a1, 102
  90daa6:	022a02        	or	a10, a2, a2
  90daa9:	5bfd54        	call8	90cffc <ath_update_aggr_stats$isra$5>
	ath_rate_tx_complete(sc, tid->an, ds, rcs, nframes, nframes);
  90daac:	2d0a88        	movi	a13, 136
  90daaf:	8b4e      	l32i.n	a11, a4, 56
  90dab1:	dc10      	mov.n	a12, a1
  90dab3:	df60      	mov.n	a15, a6
  90dab5:	de60      	mov.n	a14, a6
  90dab7:	0d1d08        	add	a13, a1, a13
  90daba:	022a02        	or	a10, a2, a2
  90dabd:	5bfca7        	call8	90cd5c <ath_rate_tx_complete>
	if (bar) {
  90dac0:	2c1230        	l32i	a12, a1, 192
  90dac3:	c8c5      	beqz.n	a12, 90dacc <ath_tx_comp_aggr_error+0x84>
		ath_bar_tx(sc, tid, bar);
  90dac5:	db40      	mov.n	a11, a4
  90dac7:	da20      	mov.n	a10, a2
  90dac9:	5bfeba        	call8	90d5b4 <ath_bar_tx>
	if (!asf_tailq_empty(&bf_q)) {
  90dacc:	23122e        	l32i	a3, a1, 184
  90dacf:	ca3a      	beqz.n	a3, 90dafd <ath_tx_comp_aggr_error+0xb5>
		__stats(sc, txaggr_prepends);
  90dad1:	232264        	l32i	a3, a2, 0x190
  90dad4:	b133      	addi.n	a3, a3, 1
  90dad6:	232664        	s32i	a3, a2, 0x190
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90dad9:	834b      	l32i.n	a3, a4, 44
  90dadb:	22122f        	l32i	a2, a1, 188
  90dade:	c837      	beqz.n	a3, 90dae9 <ath_tx_comp_aggr_error+0xa1>
  90dae0:	9320      	s32i.n	a3, a2, 0
  90dae2:	834b      	l32i.n	a3, a4, 44
  90dae4:	923a      	s32i.n	a2, a3, 40
  90dae6:	600001        	j	90daeb <ath_tx_comp_aggr_error+0xa3>
  90dae9:	924c      	s32i.n	a2, a4, 48
  90daeb:	22122e        	l32i	a2, a1, 184
  90daee:	234c2c        	addi	a3, a4, 44
  90daf1:	924b      	s32i.n	a2, a4, 44
  90daf3:	932a      	s32i.n	a3, a2, 40
		ath_tgt_tx_enqueue(txq, tid);
  90daf5:	db40      	mov.n	a11, a4
  90daf7:	2a7c1c        	addi	a10, a7, 28
  90dafa:	5bfd37        	call8	90cfd8 <ath_tgt_tx_enqueue$isra$3>
  90dafd:	d10f      	retw.n
	...

0090db00 <ath_tgt_tid_drain>:
{
  90db00:	6c1004        	entry	a1, 32
	while (!asf_tailq_empty(&tid->buf_q)) {
  90db03:	600015        	j	90db1c <ath_tgt_tid_drain+0x1c>
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90db06:	88b9      	l32i.n	a8, a11, 36
  90db08:	89ba      	l32i.n	a9, a11, 40
  90db0a:	c883      	beqz.n	a8, 90db11 <ath_tgt_tid_drain+0x11>
  90db0c:	998a      	s32i.n	a9, a8, 40
  90db0e:	600001        	j	90db13 <ath_tgt_tid_drain+0x13>
  90db11:	993c      	s32i.n	a9, a3, 48
  90db13:	89ba      	l32i.n	a9, a11, 40
		ath_tx_freebuf(sc, bf);
  90db15:	da20      	mov.n	a10, a2
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90db17:	9890      	s32i.n	a8, a9, 0
		ath_tx_freebuf(sc, bf);
  90db19:	5bfe85        	call8	90d530 <ath_tx_freebuf>
	while (!asf_tailq_empty(&tid->buf_q)) {
  90db1c:	8b3b      	l32i.n	a11, a3, 44
  90db1e:	65bfe4        	bnez	a11, 90db06 <ath_tgt_tid_drain+0x6>
	tid->seq_next = tid->seq_start;
  90db21:	283102        	l16ui	a8, a3, 4
  90db24:	283503        	s16i	a8, a3, 6
	tid->baw_tail = tid->baw_head;
  90db27:	8833      	l32i.n	a8, a3, 12
  90db29:	9834      	s32i.n	a8, a3, 16
  90db2b:	d10f      	retw.n
  90db2d:	000000        	ill

0090db30 <ath_tgt_tx_prepare>:
{
  90db30:	6c1006        	entry	a1, 48
	ni = ath_tgt_find_node(sc, dh->ni_index);
  90db33:	264001        	l8ui	a6, a4, 1
	if (node_index > TARGET_NODE_MAX)
  90db36:	c078      	movi.n	a7, 8
{
  90db38:	d520      	mov.n	a5, a2
		return NULL;
  90db3a:	c020      	movi.n	a2, 0
	if (node_index > TARGET_NODE_MAX)
  90db3c:	767a02        	bge	a7, a6, 90db42 <ath_tgt_tx_prepare+0x12>
  90db3f:	600279        	j	90ddbc <ath_tgt_tx_prepare+0x28c>
	ni = &an->ni;
  90db42:	0a6811        	slli	a8, a6, 6
  90db45:	a688      	add.n	a8, a8, a6
  90db47:	0f8811        	slli	a8, a8, 1
  90db4a:	a688      	add.n	a8, a8, a6
  90db4c:	0e8811        	slli	a8, a8, 2
  90db4f:	265a38        	movi	a6, 0x538
  90db52:	a686      	add.n	a6, a8, a6
	if (an->an_valid) {
  90db54:	227a3c        	movi	a2, 0x73c
  90db57:	a858      	add.n	a8, a5, a8
  90db59:	a282      	add.n	a2, a8, a2
  90db5b:	272000        	l8ui	a7, a2, 0
	ni = &an->ni;
  90db5e:	a656      	add.n	a6, a5, a6
	if (an->an_valid) {
  90db60:	007732        	sext	a7, a7, 7
		return NULL;
  90db63:	d270      	mov.n	a2, a7
	if (an->an_valid) {
  90db65:	647253        	beqz	a7, 90ddbc <ath_tgt_tx_prepare+0x28c>
		if (ni->ni_vap == NULL) {
  90db68:	225a58        	movi	a2, 0x558
  90db6b:	a288      	add.n	a8, a8, a2
  90db6d:	8280      	l32i.n	a2, a8, 0
  90db6f:	c071      	movi.n	a7, 1
  90db71:	c080      	movi.n	a8, 0
  90db73:	027838        	moveqz	a8, a7, a2
	if (ni == NULL)
  90db76:	080247        	extui	a2, a8, 0, 8
  90db79:	65223d        	bnez	a2, 90ddba <ath_tgt_tx_prepare+0x28a>
  90db7c:	067238        	moveqz	a2, a7, a6
  90db7f:	652237        	bnez	a2, 90ddba <ath_tgt_tx_prepare+0x28a>
	tid = ATH_AN_2_TID(ATH_NODE_TARGET(ni), dh->tidno);
  90db82:	284003        	l8ui	a8, a4, 3
	if (tid->flag & TID_REINITIALIZE) {
  90db85:	0c8711        	slli	a7, a8, 4
  90db88:	08770c        	sub	a7, a7, a8
  90db8b:	0e7711        	slli	a7, a7, 2
  90db8e:	a767      	add.n	a7, a6, a7
  90db90:	27705a        	l8ui	a7, a7, 90
  90db93:	7d770d        	bbci	a7, 29, 90dba4 <ath_tgt_tx_prepare+0x74>
		adf_os_print("drop frame due to TID reinit\n");
  90db96:	1368b5        	l32r	a3, 8e7e6c <memset+0x1024>
  90db99:	1a6aa4        	l32r	a10, 8e862c <memset+0x17e4>
  90db9c:	233212        	l32i	a3, a3, 72
  90db9f:	0b3000        	callx8	a3
		return NULL;
  90dba2:	d10f      	retw.n
	bf = asf_tailq_first(&sc->sc_txbuf);
  90dba4:	2252f0        	l32i	a2, a5, 0x3c0
	if (bf !=  NULL) {
  90dba7:	ca28      	beqz.n	a2, 90dbd3 <ath_tgt_tx_prepare+0xa3>
    __adf_os_mem_set(buf, b, size);
  90dba9:	c4bc      	movi.n	a11, 76
  90dbab:	2a2c3c        	addi	a10, a2, 60
  90dbae:	5bfd7c        	call8	90d1a0 <__adf_os_mem_set$constprop$19>
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90dbb1:	8729      	l32i.n	a7, a2, 36
  90dbb3:	882a      	l32i.n	a8, a2, 40
  90dbb5:	c873      	beqz.n	a7, 90dbbc <ath_tgt_tx_prepare+0x8c>
  90dbb7:	987a      	s32i.n	a8, a7, 40
  90dbb9:	600002        	j	90dbbf <ath_tgt_tx_prepare+0x8f>
  90dbbc:	2856f1        	s32i	a8, a5, 0x3c4
  90dbbf:	882a      	l32i.n	a8, a2, 40
  90dbc1:	9780      	s32i.n	a7, a8, 0
	bf->bf_tidno = dh->tidno;
  90dbc3:	274003        	l8ui	a7, a4, 3
  90dbc6:	27244d        	s8i	a7, a2, 77
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dbc9:	c871      	beqz.n	a7, 90dbce <ath_tgt_tx_prepare+0x9e>
  90dbcb:	697327        	bnei	a7, 3, 90dbf6 <ath_tgt_tx_prepare+0xc6>
  90dbce:	c080      	movi.n	a8, 0
  90dbd0:	600039        	j	90dc0d <ath_tgt_tx_prepare+0xdd>
		adf_os_assert(0);
  90dbd3:	1368b5        	l32r	a3, 8e7ea8 <memset+0x1060>
  90dbd6:	1b6aa5        	l32r	a11, 8e866c <memset+0x1824>
  90dbd9:	233212        	l32i	a3, a3, 72
  90dbdc:	1a6a98        	l32r	a10, 8e863c <memset+0x17f4>
  90dbdf:	0b3000        	callx8	a3
  90dbe2:	136919        	l32r	a3, 8e8048 <memset+0x1200>
  90dbe5:	0c0200        	memw
  90dbe8:	8330      	l32i.n	a3, a3, 0
		__stats(sc, tx_nobufs);
  90dbea:	235277        	l32i	a3, a5, 0x1dc
  90dbed:	b133      	addi.n	a3, a3, 1
  90dbef:	235677        	s32i	a3, a5, 0x1dc
		return NULL;
  90dbf2:	d10f      	retw.n
  90dbf4:	0000b0        	excw
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dbf7:	790909        	bne	a0, a9, 90dc04 <ath_tgt_tx_prepare+0xd4>
  90dbfa:	47c081        	excw
  90dbfd:	6e920c        	bltui	a9, 2, 90dc0d <ath_tgt_tx_prepare+0xdd>
  90dc00:	277cfc        	addi	a7, a7, -4
  90dc03:	070747        	extui	a7, a7, 0, 8
  90dc06:	c083      	movi.n	a8, 3
  90dc08:	6f7201        	bgeui	a7, 2, 90dc0d <ath_tgt_tx_prepare+0xdd>
  90dc0b:	c082      	movi.n	a8, 2
  90dc0d:	0e8811        	slli	a8, a8, 2
  90dc10:	288d05        	addmi	a8, a8, 0x500
  90dc13:	a858      	add.n	a8, a5, a8
  90dc15:	8783      	l32i.n	a7, a8, 12
    __adf_nbuf_queue_add(head, buf);
  90dc17:	db30      	mov.n	a11, a3
  90dc19:	272620        	s32i	a7, a2, 128
	bf->bf_keytype = dh->keytype;
  90dc1c:	274008        	l8ui	a7, a4, 8
  90dc1f:	272485        	s8i	a7, a2, 133
	bf->bf_keyix = dh->keyix;
  90dc22:	274009        	l8ui	a7, a4, 9
  90dc25:	272449        	s8i	a7, a2, 73
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc28:	274007        	l8ui	a7, a4, 7
	bf->bf_node = ni;
  90dc2b:	9624      	s32i.n	a6, a2, 16
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc2d:	070741        	extui	a7, a7, 0, 2
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);
  90dc30:	262c14        	addi	a6, a2, 20
  90dc33:	066a02        	or	a10, a6, a6
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc36:	272484        	s8i	a7, a2, 132
  90dc39:	5be374        	call8	906a0c <__adf_nbuf_queue_add>
    return (__adf_nbuf_queue_first(head));
  90dc3c:	da60      	mov.n	a10, a6
  90dc3e:	5be41e        	call8	906cb8 <__adf_nbuf_queue_first>
  90dc41:	d3a0      	mov.n	a3, a10
    return __adf_nbuf_queue_len(head);
  90dc43:	da60      	mov.n	a10, a6
  90dc45:	5be41a        	call8	906cb0 <__adf_nbuf_queue_len>
	if (adf_nbuf_queue_len(&(bf->bf_skbhead)) == 0) {
  90dc48:	cca9      	bnez.n	a10, 90dc55 <ath_tgt_tx_prepare+0x125>
		__stats(sc, tx_noskbs);
  90dc4a:	225276        	l32i	a2, a5, 0x1d8
  90dc4d:	b122      	addi.n	a2, a2, 1
  90dc4f:	225676        	s32i	a2, a5, 0x1d8
  90dc52:	600164        	j	90ddba <ath_tgt_tx_prepare+0x28a>
	adf_os_assert(skb);
  90dc55:	cd35      	bnez.n	a3, 90dc6e <ath_tgt_tx_prepare+0x13e>
  90dc57:	1768b5        	l32r	a7, 8e7f2c <memset+0x10e4>
  90dc5a:	1b6aa6        	l32r	a11, 8e86f4 <memset+0x18ac>
  90dc5d:	277212        	l32i	a7, a7, 72
  90dc60:	1a6a98        	l32r	a10, 8e86c0 <memset+0x1878>
  90dc63:	0b7000        	callx8	a7
  90dc66:	176919        	l32r	a7, 8e80cc <memset+0x1284>
  90dc69:	0c0200        	memw
  90dc6c:	8770      	l32i.n	a7, a7, 0
	bf->bf_skb = skb;
  90dc6e:	9328      	s32i.n	a3, a2, 32
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
  90dc70:	da30      	mov.n	a10, a3
  90dc72:	5bff2b        	call8	90d920 <ATH_SKB_2_WH>
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dc75:	284004        	l8ui	a8, a4, 4
  90dc78:	234005        	l8ui	a3, a4, 5
  90dc7b:	088810        	slli	a8, a8, 24
  90dc7e:	003311        	slli	a3, a3, 16
  90dc81:	083802        	or	a8, a3, a8
  90dc84:	234006        	l8ui	a3, a4, 6
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
  90dc87:	d7a0      	mov.n	a7, a10
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dc89:	083311        	slli	a3, a3, 8
  90dc8c:	083302        	or	a3, a3, a8
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dc8f:	8a28      	l32i.n	a10, a2, 32
	struct ieee80211_node_target *ni = bf->bf_node;
  90dc91:	282204        	l32i	a8, a2, 16
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dc94:	244007        	l8ui	a4, a4, 7
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dc97:	9810      	s32i.n	a8, a1, 0
  90dc99:	5bff21        	call8	90d920 <ATH_SKB_2_WH>
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dc9c:	8810      	l32i.n	a8, a1, 0
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90dc9e:	2d204d        	l8ui	a13, a2, 77
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dca1:	034402        	or	a4, a4, a3
	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dca4:	0cdb11        	slli	a11, a13, 4
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dca7:	23810c        	l16ui	a3, a8, 24
	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dcaa:	0db90c        	sub	a9, a11, a13
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dcad:	b133      	addi.n	a3, a3, 1
	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dcaf:	0e9911        	slli	a9, a9, 2
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dcb2:	03034b        	extui	a3, a3, 0, 12
	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dcb5:	098908        	add	a9, a8, a9
	u_int8_t fragno = (wh->i_seq[0] & 0xf);
  90dcb8:	2ca016        	l8ui	a12, a10, 22
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dcbb:	23850c        	s16i	a3, a8, 24
	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dcbe:	239115        	l16ui	a3, a9, 42
	u_int8_t fragno = (wh->i_seq[0] & 0xf);
  90dcc1:	0c0c43        	extui	a12, a12, 0, 4
	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dcc4:	0c3311        	slli	a3, a3, 4
  90dcc7:	03034f        	extui	a3, a3, 0, 16
  90dcca:	232523        	s16i	a3, a2, 70
	*(u_int16_t *)wh->i_seq = adf_os_cpu_to_le16(bf->bf_seqno);
  90dccd:	083e11        	slli	a14, a3, 8
  90dcd0:	038314        	srli	a3, a3, 8
  90dcd3:	03e302        	or	a3, a14, a3
  90dcd6:	030e4f        	extui	a14, a3, 0, 16
  90dcd9:	23a50b        	s16i	a3, a10, 22
	wh->i_seq[0] |= fragno;
  90dcdc:	0e8314        	srli	a3, a14, 8
  90dcdf:	03cc02        	or	a12, a12, a3
	if (!(wh->i_fc[1] & IEEE80211_FC1_MORE_FRAG))
  90dce2:	23a001        	l8ui	a3, a10, 1
	wh->i_seq[0] |= fragno;
  90dce5:	2ca416        	s8i	a12, a10, 22
	if (!(wh->i_fc[1] & IEEE80211_FC1_MORE_FRAG))
  90dce8:	7d3f08        	bbsi	a3, 29, 90dcf4 <ath_tgt_tx_prepare+0x1c4>
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
  90dceb:	239115        	l16ui	a3, a9, 42
  90dcee:	233c01        	addi	a3, a3, 1
  90dcf1:	239515        	s16i	a3, a9, 42
  90dcf4:	0dbb0c        	sub	a11, a11, a13
  90dcf7:	0ebb11        	slli	a11, a11, 2
  90dcfa:	ab88      	add.n	a8, a8, a11
  90dcfc:	238115        	l16ui	a3, a8, 42
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
  90dcff:	077a02        	or	a10, a7, a7
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
  90dd02:	03034b        	extui	a3, a3, 0, 12
  90dd05:	238515        	s16i	a3, a8, 42
	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
  90dd08:	136aa7        	l32r	a3, 8e87a4 <memset+0x195c>
  90dd0b:	232610        	s32i	a3, a2, 64
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
  90dd0e:	5bfc38        	call8	90cdf0 <ieee80211_anyhdrsize>
  90dd11:	d3a0      	mov.n	a3, a10
  90dd13:	2a2448        	s8i	a10, a2, 72
    return (__adf_nbuf_queue_first(head));
  90dd16:	066a02        	or	a10, a6, a6
  90dd19:	5be3e7        	call8	906cb8 <__adf_nbuf_queue_first>
    return (__adf_nbuf_len(buf));
  90dd1c:	5be3d2        	call8	906c68 <__adf_nbuf_len>
	pktlen -= (hdrlen & 3);
  90dd1f:	030341        	extui	a3, a3, 0, 2
  90dd22:	03a30c        	sub	a3, a10, a3
	pktlen += IEEE80211_CRC_LEN;
  90dd25:	b433      	addi.n	a3, a3, 4
	bf->bf_pktlen   = ath_get_pktlen(bf, bf->bf_hdrlen);
  90dd27:	232522        	s16i	a3, a2, 68
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90dd2a:	237004        	l8ui	a3, a7, 4
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dd2d:	8a28      	l32i.n	a10, a2, 32
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90dd2f:	093611        	slli	a6, a3, 7
  90dd32:	232087        	l8ui	a3, a2, 135
	if (!(wh->i_fc[1] & IEEE80211_FC1_WEP)) {
  90dd35:	c470      	movi.n	a7, 64
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90dd37:	030346        	extui	a3, a3, 0, 7
  90dd3a:	063302        	or	a3, a3, a6
  90dd3d:	232487        	s8i	a3, a2, 135
	if ((retval = ath_key_setup(bf->bf_node, bf)) < 0)
  90dd40:	8624      	l32i.n	a6, a2, 16
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dd42:	5bfef7        	call8	90d920 <ATH_SKB_2_WH>
	if (!(wh->i_fc[1] & IEEE80211_FC1_WEP)) {
  90dd45:	23a001        	l8ui	a3, a10, 1
  90dd48:	073301        	and	a3, a3, a7
  90dd4b:	cc39      	bnez.n	a3, 90dd58 <ath_tgt_tx_prepare+0x228>
		bf->bf_keytype = HAL_KEY_TYPE_CLEAR;
  90dd4d:	232485        	s8i	a3, a2, 133
		bf->bf_keyix = HAL_TXKEYIX_INVALID;
  90dd50:	c73f      	movi.n	a3, -1
  90dd52:	232449        	s8i	a3, a2, 73
  90dd55:	60002d        	j	90dd86 <ath_tgt_tx_prepare+0x256>
	switch (bf->bf_keytype) {
  90dd58:	2c2085        	l8ui	a12, a2, 133
  90dd5b:	68c209        	beqi	a12, 2, 90dd68 <ath_tgt_tx_prepare+0x238>
  90dd5e:	68c30e        	beqi	a12, 3, 90dd70 <ath_tgt_tx_prepare+0x240>
  90dd61:	69c113        	bnei	a12, 1, 90dd78 <ath_tgt_tx_prepare+0x248>
  90dd64:	600008        	j	90dd70 <ath_tgt_tx_prepare+0x240>
  90dd67:	002321        	excw
		bf->bf_pktlen += IEEE80211_WEP_MICLEN;
  90dd6a:	22b833        	excw
  90dd6d:	600004        	j	90dd75 <ath_tgt_tx_prepare+0x245>
		bf->bf_pktlen += IEEE80211_WEP_ICVLEN;
  90dd70:	232122        	l16ui	a3, a2, 68
  90dd73:	b433      	addi.n	a3, a3, 4
  90dd75:	232522        	s16i	a3, a2, 68
	if (bf->bf_keytype == HAL_KEY_TYPE_AES ||
  90dd78:	23ccfe        	addi	a3, a12, -2
  90dd7b:	030347        	extui	a3, a3, 0, 8
  90dd7e:	6f3204        	bgeui	a3, 2, 90dd86 <ath_tgt_tx_prepare+0x256>
		ieee80211_tgt_crypto_encap(wh, ni, bf->bf_keytype);
  90dd81:	db60      	mov.n	a11, a6
  90dd83:	5804f2        	call8	90f14c <ieee80211_tgt_crypto_encap>
  90dd86:	232087        	l8ui	a3, a2, 135
	if (flags & ATH_SHORT_PREAMBLE)
  90dd89:	7f4707        	bbci	a4, 31, 90dd94 <ath_tgt_tx_prepare+0x264>
		bf->bf_shpream = AH_TRUE;
  90dd8c:	c440      	movi.n	a4, 64
  90dd8e:	043302        	or	a3, a3, a4
  90dd91:	600005        	j	90dd9a <ath_tgt_tx_prepare+0x26a>
		bf->bf_shpream = AH_FALSE;
  90dd94:	24fabf        	movi	a4, -65
  90dd97:	043301        	and	a3, a3, a4
  90dd9a:	232487        	s8i	a3, a2, 135
	bf->bf_flags = HAL_TXDESC_CLRDMASK;
  90dd9d:	c031      	movi.n	a3, 1
  90dd9f:	232544        	s16i	a3, a2, 136
	ath_dma_map(sc, bf);
  90dda2:	2a1a18        	movi	a10, 0x118
	bf->bf_atype = HAL_PKT_TYPE_NORMAL;
  90dda5:	c030      	movi.n	a3, 0
	ath_dma_map(sc, bf);
  90dda7:	db20      	mov.n	a11, a2
  90dda9:	aa5a      	add.n	a10, a5, a10
	bf->bf_atype = HAL_PKT_TYPE_NORMAL;
  90ddab:	23244a        	s8i	a3, a2, 74
	ath_dma_map(sc, bf);
  90ddae:	5bfd86        	call8	90d3c8 <ath_dma_map$isra$8>
	ath_tx_tgt_setds(sc, bf);
  90ddb1:	db20      	mov.n	a11, a2
  90ddb3:	da50      	mov.n	a10, a5
  90ddb5:	5bfce6        	call8	90d150 <ath_tx_tgt_setds>
	return bf;
  90ddb8:	d10f      	retw.n
		return NULL;
  90ddba:	c020      	movi.n	a2, 0
}
  90ddbc:	d10f      	retw.n
	...

0090ddc0 <ath_tgt_tx_send_normal>:
{
  90ddc0:	6c1014        	entry	a1, 160
  90ddc3:	251c40        	addi	a5, a1, 64
  90ddc6:	c3b0      	movi.n	a11, 48
  90ddc8:	da50      	mov.n	a10, a5
	a_int32_t isProbe = 0;
  90ddca:	c040      	movi.n	a4, 0
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90ddcc:	263204        	l32i	a6, a3, 16
	a_int32_t isProbe = 0;
  90ddcf:	24161c        	s32i	a4, a1, 112
  90ddd2:	5bfcf3        	call8	90d1a0 <__adf_os_mem_set$constprop$19>
  90ddd5:	c3b0      	movi.n	a11, 48
  90ddd7:	2a1c10        	addi	a10, a1, 16
  90ddda:	5bfcf1        	call8	90d1a0 <__adf_os_mem_set$constprop$19>
	if (!bf->bf_ismcast) {
  90dddd:	273221        	l32i	a7, a3, 132
  90dde0:	2d0a80        	movi	a13, 128
  90dde3:	07dd01        	and	a13, a13, a7
  90dde6:	273c50        	addi	a7, a3, 80
  90dde9:	74d921        	bne	a13, a4, 90de0e <ath_tgt_tx_send_normal+0x4e>
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90ddec:	c0c1      	movi.n	a12, 1
  90ddee:	241c70        	addi	a4, a1, 112
  90ddf1:	9c11      	s32i.n	a12, a1, 4
  90ddf3:	9c10      	s32i.n	a12, a1, 0
  90ddf5:	db60      	mov.n	a11, a6
  90ddf7:	9413      	s32i.n	a4, a1, 12
  90ddf9:	9512      	s32i.n	a5, a1, 8
  90ddfb:	c0f4      	movi.n	a15, 4
  90ddfd:	c0ea      	movi.n	a14, 10
  90ddff:	da20      	mov.n	a10, a2
  90de01:	5bfbca        	call8	90cd2c <ath_rate_findrate>
		ath_hal_memcpy(bf->bf_rcs, rcs, sizeof(rcs));
  90de04:	c3c0      	movi.n	a12, 48
  90de06:	db50      	mov.n	a11, a5
  90de08:	600024        	j	90de30 <ath_tgt_tx_send_normal+0x70>
  90de0b:	000000        	ill
		mrcs[0].tries = 1;
  90de0e:	c051      	movi.n	a5, 1
		mrcs[1].tries = mrcs[2].tries = mrcs[3].tries = 0;
  90de10:	241435        	s8i	a4, a1, 53
  90de13:	241429        	s8i	a4, a1, 41
  90de16:	24141d        	s8i	a4, a1, 29
		mrcs[1].rix = mrcs[2].rix = mrcs[3].rix = 0;
  90de19:	241434        	s8i	a4, a1, 52
  90de1c:	241428        	s8i	a4, a1, 40
  90de1f:	24141c        	s8i	a4, a1, 28
		mrcs[0].rix   = 0;
  90de22:	241410        	s8i	a4, a1, 16
		mrcs[0].tries = 1;
  90de25:	251411        	s8i	a5, a1, 17
		mrcs[0].flags = 0;
  90de28:	241413        	s8i	a4, a1, 19
		ath_hal_memcpy(bf->bf_rcs, mrcs, sizeof(mrcs));
  90de2b:	c3c0      	movi.n	a12, 48
  90de2d:	2b1c10        	addi	a11, a1, 16
  90de30:	da70      	mov.n	a10, a7
  90de32:	5be726        	call8	907acc <ath_hal_memcpy>
	ath_buf_set_rate(sc, bf);
  90de35:	db30      	mov.n	a11, a3
  90de37:	da20      	mov.n	a10, a2
  90de39:	5bfcde        	call8	90d1b4 <ath_buf_set_rate>
	bf->bf_txq_add(sc, bf);
  90de3c:	243210        	l32i	a4, a3, 64
  90de3f:	db30      	mov.n	a11, a3
  90de41:	da20      	mov.n	a10, a2
  90de43:	0b4000        	callx8	a4
  90de46:	d10f      	retw.n

0090de48 <ath_tgt_send_mgt>:
{
  90de48:	6c1026        	entry	a1, 0x130
	struct ath_hal *ah = sc->sc_ah;
  90de4b:	262d05        	addmi	a6, a2, 0x500
  90de4e:	866b      	l32i.n	a6, a6, 44
  90de50:	2c0aa0        	movi	a12, 160
  90de53:	261635        	s32i	a6, a1, 212
  90de56:	2b0aa4        	movi	a11, 164
	if (!hdr_buf) {
  90de59:	cd36      	bnez.n	a3, 90de73 <ath_tgt_send_mgt+0x2b>
    __adf_nbuf_peek_header(buf, addr, len);
  90de5b:	231c20        	addi	a3, a1, 32
  90de5e:	ab3b      	add.n	a11, a3, a11
  90de60:	044a02        	or	a10, a4, a4
  90de63:	0c3c08        	add	a12, a3, a12
  90de66:	5be388        	call8	906c88 <__adf_nbuf_peek_header>
    return __adf_nbuf_pull_head(buf, size);
  90de69:	c0b8      	movi.n	a11, 8
  90de6b:	da40      	mov.n	a10, a4
  90de6d:	5be2ba        	call8	906958 <__adf_nbuf_pull_head>
  90de70:	60000c        	j	90de80 <ath_tgt_send_mgt+0x38>
    __adf_nbuf_peek_header(buf, addr, len);
  90de73:	261c20        	addi	a6, a1, 32
  90de76:	ac6c      	add.n	a12, a6, a12
  90de78:	0b6b08        	add	a11, a6, a11
  90de7b:	da30      	mov.n	a10, a3
  90de7d:	5be382        	call8	906c88 <__adf_nbuf_peek_header>
	adf_os_assert(len >= sizeof(ath_mgt_hdr_t));
  90de80:	231230        	l32i	a3, a1, 192
  90de83:	6f3816        	bgeui	a3, 8, 90de9d <ath_tgt_send_mgt+0x55>
  90de86:	1368b5        	l32r	a3, 8e815c <memset+0x1314>
  90de89:	1b6aa8        	l32r	a11, 8e892c <memset+0x1ae4>
  90de8c:	233212        	l32i	a3, a3, 72
  90de8f:	1a6a98        	l32r	a10, 8e88f0 <memset+0x1aa8>
  90de92:	0b3000        	callx8	a3
  90de95:	136919        	l32r	a3, 8e82fc <memset+0x14b4>
  90de98:	0c0200        	memw
  90de9b:	8330      	l32i.n	a3, a3, 0
  90de9d:	281c20        	addi	a8, a1, 32
  90dea0:	2c0aa0        	movi	a12, 160
  90dea3:	2b0aa4        	movi	a11, 164
  90dea6:	0b8b08        	add	a11, a8, a11
  90dea9:	0c8c08        	add	a12, a8, a12
  90deac:	da40      	mov.n	a10, a4
	mh = (ath_mgt_hdr_t *)data;
  90deae:	261231        	l32i	a6, a1, 196
  90deb1:	5be375        	call8	906c88 <__adf_nbuf_peek_header>
	wh = (struct ieee80211_frame *)data;
  90deb4:	291231        	l32i	a9, a1, 196
  90deb7:	231c20        	addi	a3, a1, 32
  90deba:	2a3c70        	addi	a10, a3, 112
  90debd:	c3b0      	movi.n	a11, 48
  90debf:	291634        	s32i	a9, a1, 208
  90dec2:	5bfcb7        	call8	90d1a0 <__adf_os_mem_set$constprop$19>
  90dec5:	2b0a70        	movi	a11, 112
  90dec8:	2a1c20        	addi	a10, a1, 32
  90decb:	5bfcb5        	call8	90d1a0 <__adf_os_mem_set$constprop$19>
	bf = asf_tailq_first(&sc->sc_txbuf);
  90dece:	2322f0        	l32i	a3, a2, 0x3c0
	if (!bf)
  90ded1:	64334c        	beqz	a3, 90e221 <ath_tgt_send_mgt+0x3d9>
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90ded4:	8739      	l32i.n	a7, a3, 36
  90ded6:	883a      	l32i.n	a8, a3, 40
  90ded8:	c874      	beqz.n	a7, 90dee0 <ath_tgt_send_mgt+0x98>
  90deda:	987a      	s32i.n	a8, a7, 40
  90dedc:	600003        	j	90dee3 <ath_tgt_send_mgt+0x9b>
  90dedf:	002826        	excw
  90dee2:	f1          	.byte 0xf1
  90dee3:	883a      	l32i.n	a8, a3, 40
  90dee5:	9780      	s32i.n	a7, a8, 0
	ni = ath_tgt_find_node(sc, mh->ni_index);
  90dee7:	2e6000        	l8ui	a14, a6, 0
	if (node_index > TARGET_NODE_MAX)
  90deea:	c078      	movi.n	a7, 8
  90deec:	7e7a02        	bge	a7, a14, 90def2 <ath_tgt_send_mgt+0xaa>
  90deef:	60032e        	j	90e221 <ath_tgt_send_mgt+0x3d9>
	ni = &an->ni;
  90def2:	0ae711        	slli	a7, a14, 6
  90def5:	ae77      	add.n	a7, a7, a14
  90def7:	0f7711        	slli	a7, a7, 1
  90defa:	ae77      	add.n	a7, a7, a14
  90defc:	0e7711        	slli	a7, a7, 2
  90deff:	285a38        	movi	a8, 0x538
  90df02:	a878      	add.n	a8, a7, a8
  90df04:	a828      	add.n	a8, a2, a8
  90df06:	28163d        	s32i	a8, a1, 244
	if (an->an_valid) {
  90df09:	a727      	add.n	a7, a2, a7
  90df0b:	287a3c        	movi	a8, 0x73c
  90df0e:	a878      	add.n	a8, a7, a8
  90df10:	288000        	l8ui	a8, a8, 0
  90df13:	64830a        	beqz	a8, 90e221 <ath_tgt_send_mgt+0x3d9>
		if (ni->ni_vap == NULL) {
  90df16:	285a58        	movi	a8, 0x558
  90df19:	a877      	add.n	a7, a7, a8
  90df1b:	8770      	l32i.n	a7, a7, 0
  90df1d:	657314        	bnez	a7, 90e235 <ath_tgt_send_mgt+0x3ed>
  90df20:	6002fd        	j	90e221 <ath_tgt_send_mgt+0x3d9>
		keyix = mh->keyix;
  90df23:	286005        	l8ui	a8, a6, 5
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  90df26:	8b30      	l32i.n	a11, a3, 0
  90df28:	2a2246        	l32i	a10, a2, 0x118
  90df2b:	c0d0      	movi.n	a13, 0
  90df2d:	dc40      	mov.n	a12, a4
  90df2f:	28163a        	s32i	a8, a1, 232
  90df32:	2e163e        	s32i	a14, a1, 248
  90df35:	5be2ce        	call8	906a70 <__adf_nbuf_map>
    __adf_nbuf_queue_add(head, buf);
  90df38:	db40      	mov.n	a11, a4
	bf->bf_skb = skb;
  90df3a:	9438      	s32i.n	a4, a3, 32
  90df3c:	2a3c14        	addi	a10, a3, 20
  90df3f:	5be2b3        	call8	906a0c <__adf_nbuf_queue_add>
	ds = bf->bf_desc;
  90df42:	893c      	l32i.n	a9, a3, 48
	rt = sc->sc_currates;
  90df44:	282281        	l32i	a8, a2, 0x204
	ds = bf->bf_desc;
  90df47:	291638        	s32i	a9, a1, 224
	adf_os_assert(rt != NULL);
  90df4a:	2e123e        	l32i	a14, a1, 248
  90df4d:	cd8f      	bnez.n	a8, 90df70 <ath_tgt_send_mgt+0x128>
  90df4f:	1468b5        	l32r	a4, 8e8224 <memset+0x13dc>
  90df52:	1b6aa8        	l32r	a11, 8e89f4 <memset+0x1bac>
  90df55:	244212        	l32i	a4, a4, 72
  90df58:	1a6a98        	l32r	a10, 8e89b8 <memset+0x1b70>
  90df5b:	281640        	s32i	a8, a1, 0x100
  90df5e:	0b4000        	callx8	a4
  90df61:	146919        	l32r	a4, 8e83c8 <memset+0x1580>
  90df64:	2e123e        	l32i	a14, a1, 248
  90df67:	0c0200        	memw
  90df6a:	244200        	l32i	a4, a4, 0
  90df6d:	281240        	l32i	a8, a1, 0x100
	if (mh->flags == ATH_SHORT_PREAMBLE)
  90df70:	246003        	l8ui	a4, a6, 3
	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
  90df73:	291234        	l32i	a9, a1, 208
	if (mh->flags == ATH_SHORT_PREAMBLE)
  90df76:	241639        	s32i	a4, a1, 228
	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
  90df79:	249000        	l8ui	a4, a9, 0
  90df7c:	c07c      	movi.n	a7, 12
  90df7e:	074701        	and	a7, a4, a7
  90df81:	cd7d      	bnez.n	a7, 90dfa2 <ath_tgt_send_mgt+0x15a>
  90df83:	c790      	movi.n	a9, -16
			atype = HAL_PKT_TYPE_PROBE_RESP;
  90df85:	c0a4      	movi.n	a10, 4
  90df87:	094401        	and	a4, a4, a9
  90df8a:	2a1636        	s32i	a10, a1, 216
		if (subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP)
  90df8d:	c590      	movi.n	a9, 80
  90df8f:	794114        	beq	a4, a9, 90dfa7 <ath_tgt_send_mgt+0x15f>
		else if (subtype == IEEE80211_FC0_SUBTYPE_ATIM)
  90df92:	29fa70        	movi	a9, -144
  90df95:	a944      	add.n	a4, a4, a9
  90df97:	c091      	movi.n	a9, 1
  90df99:	047939        	movnez	a9, a7, a4
  90df9c:	291636        	s32i	a9, a1, 216
  90df9f:	600004        	j	90dfa7 <ath_tgt_send_mgt+0x15f>
		atype = HAL_PKT_TYPE_NORMAL;
  90dfa2:	c040      	movi.n	a4, 0
  90dfa4:	241636        	s32i	a4, a1, 216
	avp = &sc->sc_vap[mh->vap_index];
  90dfa7:	246001        	l8ui	a4, a6, 1
	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90dfaa:	da20      	mov.n	a10, a2
	avp = &sc->sc_vap[mh->vap_index];
  90dfac:	0c4b11        	slli	a11, a4, 4
  90dfaf:	a4bb      	add.n	a11, a11, a4
  90dfb1:	1469b4        	l32r	a4, 8e8684 <memset+0x183c>
  90dfb4:	0ebb11        	slli	a11, a11, 2
  90dfb7:	a4bb      	add.n	a11, a11, a4
	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90dfb9:	0b2b08        	add	a11, a2, a11
  90dfbc:	281640        	s32i	a8, a1, 0x100
  90dfbf:	2e163e        	s32i	a14, a1, 248
  90dfc2:	5bed03        	call8	9093d0 <ath_get_minrateidx>
    __adf_os_mem_copy(dst, src, size);
  90dfc5:	291c20        	addi	a9, a1, 32
	rcs[0].tries = ATH_TXMAXTRY;
  90dfc8:	c04b      	movi.n	a4, 11
	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90dfca:	2a1490        	s8i	a10, a1, 144
	rcs[0].tries = ATH_TXMAXTRY;
  90dfcd:	241491        	s8i	a4, a1, 145
  90dfd0:	2b9c70        	addi	a11, a9, 112
	rcs[0].flags = 0;
  90dfd3:	c040      	movi.n	a4, 0
  90dfd5:	2a3c50        	addi	a10, a3, 80
  90dfd8:	c3c0      	movi.n	a12, 48
  90dfda:	241493        	s8i	a4, a1, 147
  90dfdd:	5bfb7f        	call8	90cddc <__adf_os_mem_copy>
	txrate = rt->info[rix].rateCode;
  90dfe0:	2d1090        	l8ui	a13, a1, 144
  90dfe3:	281240        	l32i	a8, a1, 0x100
  90dfe6:	0ed411        	slli	a4, a13, 2
  90dfe9:	ad44      	add.n	a4, a4, a13
  90dfeb:	0e4411        	slli	a4, a4, 2
	if (shortPreamble){
  90dfee:	2a1239        	l32i	a10, a1, 228
	txrate = rt->info[rix].rateCode;
  90dff1:	a484      	add.n	a4, a8, a4
	try0 = rcs[0].tries;
  90dff3:	291091        	l8ui	a9, a1, 145
	txrate = rt->info[rix].rateCode;
  90dff6:	274034        	l8ui	a7, a4, 52
	if (shortPreamble){
  90dff9:	2e123e        	l32i	a14, a1, 248
  90dffc:	69a105        	bnei	a10, 1, 90e005 <ath_tgt_send_mgt+0x1bd>
		txrate |= rt->info[rix].shortPreamble;
  90dfff:	244035        	l8ui	a4, a4, 53
  90e002:	047702        	or	a7, a7, a4
	vap = ni->ni_vap;
  90e005:	0ae411        	slli	a4, a14, 6
  90e008:	ae44      	add.n	a4, a4, a14
  90e00a:	0f4411        	slli	a4, a4, 1
  90e00d:	ae44      	add.n	a4, a4, a14
  90e00f:	0e4411        	slli	a4, a4, 2
  90e012:	2a5a58        	movi	a10, 0x558
  90e015:	a424      	add.n	a4, a2, a4
  90e017:	aa44      	add.n	a4, a4, a10
	bf->bf_node = ni;
  90e019:	2a123d        	l32i	a10, a1, 244
	vap = ni->ni_vap;
  90e01c:	8440      	l32i.n	a4, a4, 0
	bf->bf_node = ni;
  90e01e:	9a34      	s32i.n	a10, a3, 16
	if (ismcast) {
  90e020:	cd5e      	bnez.n	a5, 90e042 <ath_tgt_send_mgt+0x1fa>
	} else if (pktlen > vap->iv_rtsthreshold) {
  90e022:	254105        	l16ui	a5, a4, 10
  90e025:	2a1237        	l32i	a10, a1, 220
	flags = HAL_TXDESC_CLRDMASK;
  90e028:	c0f1      	movi.n	a15, 1
	a_uint8_t rix, txrate, ctsrate, cix = 0xff, *data;
  90e02a:	240aff        	movi	a4, 255
	} else if (pktlen > vap->iv_rtsthreshold) {
  90e02d:	7a5a18        	bge	a5, a10, 90e049 <ath_tgt_send_mgt+0x201>
		cix = rt->info[rix].controlRate;
  90e030:	0ed411        	slli	a4, a13, 2
  90e033:	ad44      	add.n	a4, a4, a13
  90e035:	0e4411        	slli	a4, a4, 2
  90e038:	a484      	add.n	a4, a8, a4
  90e03a:	244037        	l8ui	a4, a4, 55
		flags |= HAL_TXDESC_RTSENA;
  90e03d:	c0f5      	movi.n	a15, 5
  90e03f:	600006        	j	90e049 <ath_tgt_send_mgt+0x201>
		try0 = 1;
  90e042:	c091      	movi.n	a9, 1
		flags |= HAL_TXDESC_NOACK;
  90e044:	c0f3      	movi.n	a15, 3
	a_uint8_t rix, txrate, ctsrate, cix = 0xff, *data;
  90e046:	240aff        	movi	a4, 255
	if ((bf->bf_protmode != IEEE80211_PROT_NONE) &&
  90e049:	253084        	l8ui	a5, a3, 132
  90e04c:	ca5c      	beqz.n	a5, 90e07c <ath_tgt_send_mgt+0x234>
	    rt->info[rix].phy == IEEE80211_T_OFDM &&
  90e04e:	0ed511        	slli	a5, a13, 2
  90e051:	ad55      	add.n	a5, a5, a13
  90e053:	0e5511        	slli	a5, a5, 2
  90e056:	a585      	add.n	a5, a8, a5
	if ((bf->bf_protmode != IEEE80211_PROT_NONE) &&
  90e058:	255029        	l8ui	a5, a5, 41
  90e05b:	69521d        	bnei	a5, 2, 90e07c <ath_tgt_send_mgt+0x234>
	    rt->info[rix].phy == IEEE80211_T_OFDM &&
  90e05e:	75f81a        	bany	a15, a5, 90e07c <ath_tgt_send_mgt+0x234>
		cix = rt->info[sc->sc_protrix].controlRate;
  90e061:	242d03        	addmi	a4, a2, 0x300
  90e064:	25400c        	l8ui	a5, a4, 12
  90e067:	0e5411        	slli	a4, a5, 2
  90e06a:	a544      	add.n	a4, a4, a5
		sc->sc_tx_stats.ast_tx_protect++;
  90e06c:	25225a        	l32i	a5, a2, 0x168
		cix = rt->info[sc->sc_protrix].controlRate;
  90e06f:	0e4411        	slli	a4, a4, 2
  90e072:	a484      	add.n	a4, a8, a4
		sc->sc_tx_stats.ast_tx_protect++;
  90e074:	b155      	addi.n	a5, a5, 1
		cix = rt->info[sc->sc_protrix].controlRate;
  90e076:	244037        	l8ui	a4, a4, 55
		sc->sc_tx_stats.ast_tx_protect++;
  90e079:	25265a        	s32i	a5, a2, 0x168
	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90e07c:	0ae511        	slli	a5, a14, 6
  90e07f:	ae55      	add.n	a5, a5, a14
  90e081:	0f5511        	slli	a5, a5, 1
  90e084:	ae5e      	add.n	a14, a5, a14
  90e086:	0eee11        	slli	a14, a14, 2
  90e089:	255a50        	movi	a5, 0x550
  90e08c:	ae2e      	add.n	a14, a2, a14
  90e08e:	a5ee      	add.n	a14, a14, a5
  90e090:	25e100        	l16ui	a5, a14, 0
  90e093:	045a11        	slli	a10, a5, 12
  90e096:	054547        	extui	a5, a5, 4, 8
  90e099:	05a502        	or	a5, a10, a5
  90e09c:	2a1234        	l32i	a10, a1, 208
  90e09f:	25a50b        	s16i	a5, a10, 22
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90e0a2:	25e100        	l16ui	a5, a14, 0
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0a5:	c0ac      	movi.n	a10, 12
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90e0a7:	b155      	addi.n	a5, a5, 1
  90e0a9:	05054b        	extui	a5, a5, 0, 12
  90e0ac:	25e500        	s16i	a5, a14, 0
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0af:	0afa01        	and	a10, a15, a10
		ctsrate = 0;
  90e0b2:	c050      	movi.n	a5, 0
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0b4:	75a17c        	beq	a10, a5, 90e134 <ath_tgt_send_mgt+0x2ec>
		adf_os_assert(cix != 0xff);
  90e0b7:	250aff        	movi	a5, 255
  90e0ba:	754928        	bne	a4, a5, 90e0e6 <ath_tgt_send_mgt+0x29e>
  90e0bd:	1568b5        	l32r	a5, 8e8394 <memset+0x154c>
  90e0c0:	1b6aa8        	l32r	a11, 8e8b60 <memset+0x1d18>
  90e0c3:	255212        	l32i	a5, a5, 72
  90e0c6:	1a6a98        	l32r	a10, 8e8b28 <memset+0x1ce0>
  90e0c9:	281640        	s32i	a8, a1, 0x100
  90e0cc:	2d163e        	s32i	a13, a1, 248
  90e0cf:	2f163f        	s32i	a15, a1, 252
  90e0d2:	0b5000        	callx8	a5
  90e0d5:	156919        	l32r	a5, 8e853c <memset+0x16f4>
  90e0d8:	2f123f        	l32i	a15, a1, 252
  90e0db:	0c0200        	memw
  90e0de:	8550      	l32i.n	a5, a5, 0
  90e0e0:	2d123e        	l32i	a13, a1, 248
  90e0e3:	281240        	l32i	a8, a1, 0x100
		ctsrate = rt->info[cix].rateCode;
  90e0e6:	0e4511        	slli	a5, a4, 2
  90e0e9:	a454      	add.n	a4, a5, a4
  90e0eb:	0e4411        	slli	a4, a4, 2
		if (shortPreamble) {
  90e0ee:	291239        	l32i	a9, a1, 228
		ctsrate = rt->info[cix].rateCode;
  90e0f1:	a484      	add.n	a4, a8, a4
  90e0f3:	254034        	l8ui	a5, a4, 52
		if (shortPreamble) {
  90e0f6:	69910b        	bnei	a9, 1, 90e105 <ath_tgt_send_mgt+0x2bd>
			ctsrate |= rt->info[cix].shortPreamble;
  90e0f9:	294035        	l8ui	a9, a4, 53
				ctsduration += rt->info[cix].spAckDuration;
  90e0fc:	24411d        	l16ui	a4, a4, 58
			ctsrate |= rt->info[cix].shortPreamble;
  90e0ff:	095502        	or	a5, a5, a9
  90e102:	600002        	j	90e108 <ath_tgt_send_mgt+0x2c0>
				ctsduration += rt->info[cix].lpAckDuration;
  90e105:	24411c        	l16ui	a4, a4, 56
	if (mh->flags == ATH_SHORT_PREAMBLE)
  90e108:	291239        	l32i	a9, a1, 228
  90e10b:	c0a0      	movi.n	a10, 0
  90e10d:	b09e      	addi.n	a14, a9, -1
  90e10f:	c091      	movi.n	a9, 1
  90e111:	0e9a38        	moveqz	a10, a9, a14
  90e114:	0aae02        	or	a14, a10, a10
		ctsduration += ath_hal_computetxtime(ah,
  90e117:	2c1237        	l32i	a12, a1, 220
  90e11a:	2a1235        	l32i	a10, a1, 212
  90e11d:	088b02        	or	a11, a8, a8
  90e120:	29163e        	s32i	a9, a1, 248
  90e123:	2f163f        	s32i	a15, a1, 252
  90e126:	5bf2e3        	call8	90acb4 <ath_hal_computetxtime>
				ctsduration += rt->info[cix].lpAckDuration;
  90e129:	0f4411        	slli	a4, a4, 1
		try0 = 1;
  90e12c:	29123e        	l32i	a9, a1, 248
  90e12f:	2f123f        	l32i	a15, a1, 252
		ctsduration += ath_hal_computetxtime(ah,
  90e132:	a4aa      	add.n	a10, a10, a4
	ah->ah_setupTxDesc(ds
  90e134:	9a14      	s32i.n	a10, a1, 16
  90e136:	2a123a        	l32i	a10, a1, 232
	flags |= HAL_TXDESC_INTREQ;
  90e139:	c140      	movi.n	a4, 16
  90e13b:	04f402        	or	a4, a15, a4
	ah->ah_setupTxDesc(ds
  90e13e:	00a832        	sext	a8, a10, 7
  90e141:	9910      	s32i.n	a9, a1, 0
  90e143:	291235        	l32i	a9, a1, 212
  90e146:	9412      	s32i.n	a4, a1, 8
  90e148:	9513      	s32i.n	a5, a1, 12
  90e14a:	9811      	s32i.n	a8, a1, 4
  90e14c:	289217        	l32i	a8, a9, 92
  90e14f:	2d1236        	l32i	a13, a1, 216
  90e152:	2c123c        	l32i	a12, a1, 240
  90e155:	2b1237        	l32i	a11, a1, 220
  90e158:	2a1238        	l32i	a10, a1, 224
  90e15b:	077f02        	or	a15, a7, a7
  90e15e:	2e0a3c        	movi	a14, 60
  90e161:	0b8000        	callx8	a8
	bf->bf_flags = flags;
  90e164:	243544        	s16i	a4, a3, 136
	if (iswep && (keyix != HAL_TXKEYIX_INVALID) &&
  90e167:	24123b        	l32i	a4, a1, 236
  90e16a:	ca42      	beqz.n	a4, 90e190 <ath_tgt_send_mgt+0x348>
  90e16c:	281234        	l32i	a8, a1, 208
  90e16f:	248000        	l8ui	a4, a8, 0
  90e172:	280af0        	movi	a8, 240
  90e175:	084401        	and	a4, a4, a8
  90e178:	280ab0        	movi	a8, 176
  90e17b:	784911        	bne	a4, a8, 90e190 <ath_tgt_send_mgt+0x348>
		ah->ah_fillKeyTxDesc(ds, mh->keytype);
  90e17e:	291235        	l32i	a9, a1, 212
  90e181:	2b6004        	l8ui	a11, a6, 4
  90e184:	249219        	l32i	a4, a9, 100
  90e187:	2a1238        	l32i	a10, a1, 224
  90e18a:	00bb32        	sext	a11, a11, 7
  90e18d:	0b4000        	callx8	a4
	ath_filltxdesc(sc, bf);
  90e190:	242d05        	addmi	a4, a2, 0x500
  90e193:	2a420b        	l32i	a10, a4, 44
  90e196:	033b02        	or	a11, a3, a3
  90e199:	5bfbc5        	call8	90d0b0 <ath_filltxdesc$isra$9>
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90e19c:	262d16        	addmi	a6, a2, 0x1600
  90e19f:	2b6026        	l8ui	a11, a6, 38
  90e1a2:	281c20        	addi	a8, a1, 32
  90e1a5:	c064      	movi.n	a6, 4
  90e1a7:	dd80      	mov.n	a13, a8
		series[i].Tries = 2;
  90e1a9:	c0c2      	movi.n	a12, 2
		series[i].RateFlags = 0;
  90e1ab:	c0a0      	movi.n	a10, 0
  90e1ad:	d960      	mov.n	a9, a6
  90e1af:	6d980c        	loop	a9, 90e1bf <ath_tgt_send_mgt+0x377>
		series[i].Tries = 2;
  90e1b2:	9c80      	s32i.n	a12, a8, 0
		series[i].Rate = txrate;
  90e1b4:	9781      	s32i.n	a7, a8, 4
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90e1b6:	9b83      	s32i.n	a11, a8, 12
		series[i].RateFlags = 0;
  90e1b8:	9a84      	s32i.n	a10, a8, 16
  90e1ba:	b066      	addi.n	a6, a6, -1
  90e1bc:	288c1c        	addi	a8, a8, 28
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
  90e1bf:	281235        	l32i	a8, a1, 212
  90e1c2:	c0f0      	movi.n	a15, 0
  90e1c4:	278210        	l32i	a7, a8, 64
  90e1c7:	2a1238        	l32i	a10, a1, 224
  90e1ca:	055c02        	or	a12, a5, a5
  90e1cd:	2e0a04        	movi	a14, 4
  90e1d0:	dbf0      	mov.n	a11, a15
  90e1d2:	0b7000        	callx8	a7
  90e1d5:	854b      	l32i.n	a5, a4, 44
	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90e1d7:	243aec        	movi	a4, 0x3ec
  90e1da:	a424      	add.n	a4, a2, a4
  90e1dc:	9639      	s32i.n	a6, a3, 36
  90e1de:	8643      	l32i.n	a6, a4, 12
	ath_tgt_txqaddbuf(sc, txq, bf, bf->bf_lastds);
  90e1e0:	873e      	l32i.n	a7, a3, 56
	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90e1e2:	963a      	s32i.n	a6, a3, 40
  90e1e4:	9360      	s32i.n	a3, a6, 0
  90e1e6:	263c24        	addi	a6, a3, 36
  90e1e9:	9643      	s32i.n	a6, a4, 12
  90e1eb:	8644      	l32i.n	a6, a4, 16
  90e1ed:	9345      	s32i.n	a3, a4, 20
  90e1ef:	b166      	addi.n	a6, a6, 1
  90e1f1:	9644      	s32i.n	a6, a4, 16
	if (txq->axq_link == NULL) {
  90e1f3:	8641      	l32i.n	a6, a4, 4
  90e1f5:	cc6f      	bnez.n	a6, 90e208 <ath_tgt_send_mgt+0x3c0>
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90e1f7:	865a      	l32i.n	a6, a5, 40
  90e1f9:	8c3c      	l32i.n	a12, a3, 48
  90e1fb:	2b4200        	l32i	a11, a4, 0
  90e1fe:	055a02        	or	a10, a5, a5
  90e201:	0b6000        	callx8	a6
  90e204:	600004        	j	90e20c <ath_tgt_send_mgt+0x3c4>
  90e207:	00833c        	excw
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e20a:	9360      	s32i.n	a3, a6, 0
	txq->axq_link = &lastds->ds_link;
  90e20c:	233aec        	movi	a3, 0x3ec
  90e20f:	a322      	add.n	a2, a2, a3
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90e211:	8b20      	l32i.n	a11, a2, 0
  90e213:	835c      	l32i.n	a3, a5, 48
	txq->axq_link = &lastds->ds_link;
  90e215:	9721      	s32i.n	a7, a2, 4
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90e217:	da50      	mov.n	a10, a5
  90e219:	0b3000        	callx8	a3
  90e21c:	d10f      	retw.n
  90e21e:	000000        	ill
	HTC_ReturnBuffers(sc->tgt_htc_handle, endpt, skb);
  90e221:	1368b5        	l32r	a3, 8e84f8 <memset+0x16b0>
  90e224:	8a22      	l32i.n	a10, a2, 8
  90e226:	233282        	l32i	a3, a3, 0x208
  90e229:	dc40      	mov.n	a12, a4
  90e22b:	db50      	mov.n	a11, a5
  90e22d:	0b3000        	callx8	a3
	return;
  90e230:	d10f      	retw.n
  90e232:	000000        	ill
	bf->bf_endpt = endpt;
  90e235:	253623        	s32i	a5, a3, 140
	bf->bf_cookie = mh->cookie;
  90e238:	256006        	l8ui	a5, a6, 6
  90e23b:	291234        	l32i	a9, a1, 208
  90e23e:	253492        	s8i	a5, a3, 146
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90e241:	256003        	l8ui	a5, a6, 3
	hdrlen = ieee80211_anyhdrsize(wh);
  90e244:	da90      	mov.n	a10, a9
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90e246:	050541        	extui	a5, a5, 0, 2
  90e249:	253484        	s8i	a5, a3, 132
  90e24c:	279001        	l8ui	a7, a9, 1
  90e24f:	c450      	movi.n	a5, 64
  90e251:	057501        	and	a5, a7, a5
  90e254:	25163b        	s32i	a5, a1, 236
  90e257:	259004        	l8ui	a5, a9, 4
	hdrlen = ieee80211_anyhdrsize(wh);
  90e25a:	2e163e        	s32i	a14, a1, 248
  90e25d:	5bfae4        	call8	90cdf0 <ieee80211_anyhdrsize>
	pktlen -= (hdrlen & 3);
  90e260:	271230        	l32i	a7, a1, 192
  90e263:	0a0841        	extui	a8, a10, 0, 2
  90e266:	08770c        	sub	a7, a7, a8
	pktlen += IEEE80211_CRC_LEN;
  90e269:	b478      	addi.n	a8, a7, 4
	if (iswep)
  90e26b:	29123b        	l32i	a9, a1, 236
	pktlen += IEEE80211_CRC_LEN;
  90e26e:	281637        	s32i	a8, a1, 220
	hdrlen = ieee80211_anyhdrsize(wh);
  90e271:	2a163c        	s32i	a10, a1, 240
  90e274:	050540        	extui	a5, a5, 0, 1
	if (iswep)
  90e277:	2e123e        	l32i	a14, a1, 248
	keyix = HAL_TXKEYIX_INVALID;
  90e27a:	280aff        	movi	a8, 255
	if (iswep)
  90e27d:	649ca5        	beqz	a9, 90df26 <ath_tgt_send_mgt+0xde>
  90e280:	63fc9f        	j	90df23 <ath_tgt_send_mgt+0xdb>
	...

0090e284 <ath_tgt_handle_normal>:
{
  90e284:	6c1004        	entry	a1, 32
	an = (struct ath_node_target *)bf->bf_node;
  90e287:	243204        	l32i	a4, a3, 16
	adf_os_assert(an);
  90e28a:	654016        	bnez	a4, 90e2a4 <ath_tgt_handle_normal+0x20>
  90e28d:	1568b5        	l32r	a5, 8e8564 <memset+0x171c>
  90e290:	1b6aa9        	l32r	a11, 8e8d34 <memset+0x1eec>
  90e293:	255212        	l32i	a5, a5, 72
  90e296:	1a6a98        	l32r	a10, 8e8cf8 <memset+0x1eb0>
  90e299:	0b5000        	callx8	a5
  90e29c:	156919        	l32r	a5, 8e8700 <memset+0x18b8>
  90e29f:	0c0200        	memw
  90e2a2:	8550      	l32i.n	a5, a5, 0
	tid = &an->tid[bf->bf_tidno];
  90e2a4:	25304d        	l8ui	a5, a3, 77
  90e2a7:	0c5811        	slli	a8, a5, 4
  90e2aa:	05880c        	sub	a8, a8, a5
  90e2ad:	0e8811        	slli	a8, a8, 2
  90e2b0:	288c24        	addi	a8, a8, 36
  90e2b3:	084808        	add	a8, a4, a8
	adf_os_assert(tid);
  90e2b6:	658016        	bnez	a8, 90e2d0 <ath_tgt_handle_normal+0x4c>
  90e2b9:	1868b5        	l32r	a8, 8e8590 <memset+0x1748>
  90e2bc:	1b6aa9        	l32r	a11, 8e8d60 <memset+0x1f18>
  90e2bf:	288212        	l32i	a8, a8, 72
  90e2c2:	1a6a98        	l32r	a10, 8e8d24 <memset+0x1edc>
  90e2c5:	0b8000        	callx8	a8
  90e2c8:	186919        	l32r	a8, 8e872c <memset+0x18e4>
  90e2cb:	0c0200        	memw
  90e2ce:	8880      	l32i.n	a8, a8, 0
	bf->bf_comp = ath_tgt_tx_comp_normal;
  90e2d0:	186aaa        	l32r	a8, 8e8d78 <memset+0x1f30>
	ath_tgt_tx_send_normal(sc, bf);
  90e2d3:	db30      	mov.n	a11, a3
	bf->bf_comp = ath_tgt_tx_comp_normal;
  90e2d5:	983f      	s32i.n	a8, a3, 60
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90e2d7:	0c5811        	slli	a8, a5, 4
  90e2da:	05880c        	sub	a8, a8, a5
  90e2dd:	0e8811        	slli	a8, a8, 2
  90e2e0:	a844      	add.n	a4, a4, a8
  90e2e2:	284114        	l16ui	a8, a4, 40
	ath_tgt_tx_send_normal(sc, bf);
  90e2e5:	da20      	mov.n	a10, a2
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90e2e7:	b188      	addi.n	a8, a8, 1
  90e2e9:	08084b        	extui	a8, a8, 0, 12
  90e2ec:	284514        	s16i	a8, a4, 40
	ath_tgt_tx_send_normal(sc, bf);
  90e2ef:	5bfeb4        	call8	90ddc0 <ath_tgt_tx_send_normal>
  90e2f2:	d10f      	retw.n

0090e2f4 <ath_tx_addto_baw>:
{
  90e2f4:	6c1004        	entry	a1, 32
	if (bf->bf_isretried) {
  90e2f7:	283221        	l32i	a8, a3, 132
  90e2fa:	7b8f3e        	bbsi	a8, 27, 90e33c <ath_tx_addto_baw+0x48>
	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e2fd:	283123        	l16ui	a8, a3, 70
  90e300:	232102        	l16ui	a3, a2, 4
  90e303:	084814        	srli	a8, a8, 4
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90e306:	8d23      	l32i.n	a13, a2, 12
	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e308:	03880c        	sub	a8, a8, a3
  90e30b:	08084b        	extui	a8, a8, 0, 12
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90e30e:	ad8c      	add.n	a12, a8, a13
  90e310:	0c0946        	extui	a9, a12, 0, 7
	TX_BUF_BITMAP_SET(tid->tx_buf_bitmap, cindex);
  90e313:	095a12        	srai	a10, a9, 5
  90e316:	0eaa11        	slli	a10, a10, 2
  90e319:	aa2a      	add.n	a10, a2, a10
  90e31b:	c0b1      	movi.n	a11, 1
  90e31d:	00c104        	ssl	a12
  90e320:	00bc1a        	sll	a12, a11
  90e323:	8ba5      	l32i.n	a11, a10, 20
  90e325:	0cbb02        	or	a11, a11, a12
  90e328:	9ba5      	s32i.n	a11, a10, 20
	if (index >= ((tid->baw_tail - tid->baw_head) & (ATH_TID_MAX_BUFS - 1))) {
  90e32a:	8a24      	l32i.n	a10, a2, 16
  90e32c:	0daa0c        	sub	a10, a10, a13
  90e32f:	0a0a46        	extui	a10, a10, 0, 7
  90e332:	7a8206        	blt	a8, a10, 90e33c <ath_tx_addto_baw+0x48>
		INCR(tid->baw_tail, ATH_TID_MAX_BUFS);
  90e335:	b199      	addi.n	a9, a9, 1
  90e337:	090946        	extui	a9, a9, 0, 7
  90e33a:	9924      	s32i.n	a9, a2, 16
  90e33c:	d10f      	retw.n
	...

0090e340 <ath_tgt_handle_aggr>:
{
  90e340:	6c1004        	entry	a1, 32
	an = (struct ath_node_target *)bf->bf_node;
  90e343:	8534      	l32i.n	a5, a3, 16
	struct ath_txq *txq = bf->bf_txq;
  90e345:	263220        	l32i	a6, a3, 128
	adf_os_assert(an);
  90e348:	cd55      	bnez.n	a5, 90e361 <ath_tgt_handle_aggr+0x21>
  90e34a:	1468b5        	l32r	a4, 8e8620 <memset+0x17d8>
  90e34d:	1b6aab        	l32r	a11, 8e8dfc <memset+0x1fb4>
  90e350:	244212        	l32i	a4, a4, 72
  90e353:	1a6a98        	l32r	a10, 8e8db4 <memset+0x1f6c>
  90e356:	0b4000        	callx8	a4
  90e359:	146919        	l32r	a4, 8e87c0 <memset+0x1978>
  90e35c:	0c0200        	memw
  90e35f:	8440      	l32i.n	a4, a4, 0
	tid = &an->tid[bf->bf_tidno];
  90e361:	27304d        	l8ui	a7, a3, 77
  90e364:	0c7411        	slli	a4, a7, 4
  90e367:	07440c        	sub	a4, a4, a7
  90e36a:	0e4411        	slli	a4, a4, 2
  90e36d:	244c24        	addi	a4, a4, 36
  90e370:	a454      	add.n	a4, a5, a4
	adf_os_assert(tid);
  90e372:	654017        	bnez	a4, 90e38d <ath_tgt_handle_aggr+0x4d>
  90e375:	1868b5        	l32r	a8, 8e864c <memset+0x1804>
  90e378:	1b6aab        	l32r	a11, 8e8e24 <memset+0x1fdc>
  90e37b:	288212        	l32i	a8, a8, 72
  90e37e:	1a6a98        	l32r	a10, 8e8de0 <memset+0x1f98>
  90e381:	0b8000        	callx8	a8
  90e384:	186919        	l32r	a8, 8e87e8 <memset+0x19a0>
  90e387:	0c0200        	memw
  90e38a:	288200        	l32i	a8, a8, 0
	bf->bf_comp = ath_tgt_tx_comp_aggr;
  90e38d:	186aac        	l32r	a8, 8e8e40 <memset+0x1ff8>
  90e390:	0c7a11        	slli	a10, a7, 4
  90e393:	983f      	s32i.n	a8, a3, 60
			(tid->paused) || (!within_baw) );
  90e395:	8864      	l32i.n	a8, a6, 16
  90e397:	ce8d      	bnez.n	a8, 90e3c8 <ath_tgt_handle_aggr+0x88>
			(!asf_tailq_empty(&tid->buf_q)) ||
  90e399:	07a80c        	sub	a8, a10, a7
  90e39c:	0e8811        	slli	a8, a8, 2
  90e39f:	a858      	add.n	a8, a5, a8
	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
  90e3a1:	2b8214        	l32i	a11, a8, 80
  90e3a4:	ceb0      	bnez.n	a11, 90e3c8 <ath_tgt_handle_aggr+0x88>
	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
  90e3a6:	293123        	l16ui	a9, a3, 70
  90e3a9:	2c8114        	l16ui	a12, a8, 40
  90e3ac:	094914        	srli	a9, a9, 4
  90e3af:	0c990c        	sub	a9, a9, a12
  90e3b2:	2c8116        	l16ui	a12, a8, 44
  90e3b5:	09094b        	extui	a9, a9, 0, 12
			(tid->paused) || (!within_baw) );
  90e3b8:	7c9a0c        	bge	a9, a12, 90e3c8 <ath_tgt_handle_aggr+0x88>
			(!asf_tailq_empty(&tid->buf_q)) ||
  90e3bb:	288058        	l8ui	a8, a8, 88
  90e3be:	c091      	movi.n	a9, 1
  90e3c0:	089b39        	movnez	a11, a9, a8
			(tid->paused) || (!within_baw) );
  90e3c3:	0b0847        	extui	a8, a11, 0, 8
  90e3c6:	ca84      	beqz.n	a8, 90e3ee <ath_tgt_handle_aggr+0xae>
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
  90e3c8:	07a80c        	sub	a8, a10, a7
  90e3cb:	0e8811        	slli	a8, a8, 2
  90e3ce:	a858      	add.n	a8, a5, a8
  90e3d0:	c020      	movi.n	a2, 0
  90e3d2:	9239      	s32i.n	a2, a3, 36
  90e3d4:	228215        	l32i	a2, a8, 84
		ath_tgt_tx_enqueue(txq, tid);
  90e3d7:	db40      	mov.n	a11, a4
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
  90e3d9:	923a      	s32i.n	a2, a3, 40
  90e3db:	9320      	s32i.n	a3, a2, 0
  90e3dd:	233c24        	addi	a3, a3, 36
  90e3e0:	238615        	s32i	a3, a8, 84
		ath_tgt_tx_enqueue(txq, tid);
  90e3e3:	2a6c1c        	addi	a10, a6, 28
  90e3e6:	5bfafc        	call8	90cfd8 <ath_tgt_tx_enqueue$isra$3>
  90e3e9:	d10f      	retw.n
  90e3eb:	000000        	ill
		ath_tx_addto_baw(tid, bf);
  90e3ee:	db30      	mov.n	a11, a3
  90e3f0:	da40      	mov.n	a10, a4
  90e3f2:	5bffc0        	call8	90e2f4 <ath_tx_addto_baw>
		__stats(sc, txaggr_nframes);
  90e3f5:	24225d        	l32i	a4, a2, 0x174
		ath_tgt_tx_send_normal(sc, bf);
  90e3f8:	db30      	mov.n	a11, a3
		__stats(sc, txaggr_nframes);
  90e3fa:	b144      	addi.n	a4, a4, 1
  90e3fc:	24265d        	s32i	a4, a2, 0x174
		ath_tgt_tx_send_normal(sc, bf);
  90e3ff:	da20      	mov.n	a10, a2
  90e401:	5bfe6f        	call8	90ddc0 <ath_tgt_tx_send_normal>
  90e404:	d10f      	retw.n
	...

0090e408 <ath_tgt_tx_form_aggr>:
{
  90e408:	6c100c        	entry	a1, 96
  90e40b:	d630      	mov.n	a6, a3
	struct ath_hal *ah = sc->sc_ah;
  90e40d:	232d05        	addmi	a3, a2, 0x500
  90e410:	833b      	l32i.n	a3, a3, 44
{
  90e412:	921b      	s32i.n	a2, a1, 44
	struct ath_hal *ah = sc->sc_ah;
  90e414:	931e      	s32i.n	a3, a1, 56
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;
  90e416:	236104        	l16ui	a3, a6, 8
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
  90e419:	1269a6        	l32r	a2, 8e8ab4 <memset+0x1c6c>
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;
  90e41c:	031314        	srli	a3, a3, 1
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
  90e41f:	c050      	movi.n	a5, 0
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;
  90e421:	931a      	s32i.n	a3, a1, 40
	bf_first = asf_tailq_first(&tid->buf_q);
  90e423:	836b      	l32i.n	a3, a6, 44
{
  90e425:	941d      	s32i.n	a4, a1, 52
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
  90e427:	921c      	s32i.n	a2, a1, 48
  90e429:	d450      	mov.n	a4, a5
	int nframes = 0, rl = 0;;
  90e42b:	dd50      	mov.n	a13, a5
  90e42d:	9518      	s32i.n	a5, a1, 32
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
  90e42f:	9519      	s32i.n	a5, a1, 36
		bf = asf_tailq_first(&tid->buf_q);
  90e431:	826b      	l32i.n	a2, a6, 44
		adf_os_assert(bf);
  90e433:	65201d        	bnez	a2, 90e454 <ath_tgt_tx_form_aggr+0x4c>
  90e436:	1a68b5        	l32r	a10, 8e870c <memset+0x18c4>
  90e439:	1b6aad        	l32r	a11, 8e8ef0 <memset+0x20a8>
  90e43c:	2ca212        	l32i	a12, a10, 72
  90e43f:	1a6a98        	l32r	a10, 8e8ea0 <memset+0x2058>
  90e442:	2d160f        	s32i	a13, a1, 60
  90e445:	0bc000        	callx8	a12
  90e448:	1a6919        	l32r	a10, 8e88ac <memset+0x1a64>
  90e44b:	2d120f        	l32i	a13, a1, 60
  90e44e:	0c0200        	memw
  90e451:	2aa200        	l32i	a10, a10, 0
		if (!BAW_WITHIN(tid->seq_start, tid->baw_size,
  90e454:	2a2123        	l16ui	a10, a2, 70
  90e457:	2b6102        	l16ui	a11, a6, 4
  90e45a:	0a4a14        	srli	a10, a10, 4
  90e45d:	0baa0c        	sub	a10, a10, a11
  90e460:	2b6104        	l16ui	a11, a6, 8
  90e463:	0a0a4b        	extui	a10, a10, 0, 12
  90e466:	7ba20b        	blt	a10, a11, 90e475 <ath_tgt_tx_form_aggr+0x6d>
			bf_first->bf_nframes = nframes;
  90e469:	8818      	l32i.n	a8, a1, 32
			bf_first->bf_al= al;
  90e46b:	243527        	s16i	a4, a3, 78
			bf_first->bf_nframes = nframes;
  90e46e:	28344c        	s8i	a8, a3, 76
			return ATH_TGT_AGGR_BAW_CLOSED;
  90e471:	c021      	movi.n	a2, 1
  90e473:	d10f      	retw.n
		if (!rl) {
  90e475:	65d0b4        	bnez	a13, 90e52d <ath_tgt_tx_form_aggr+0x125>
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
  90e478:	881b      	l32i.n	a8, a1, 44
	if (bf->bf_ismcast) {
  90e47a:	2a2221        	l32i	a10, a2, 132
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
  90e47d:	288281        	l32i	a8, a8, 0x204
			aggr_limit = ath_lookup_rate(sc, tid->an, bf);
  90e480:	876e      	l32i.n	a7, a6, 56
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
  90e482:	981c      	s32i.n	a8, a1, 48
	if (bf->bf_ismcast) {
  90e484:	78a719        	bbci	a10, 24, 90e4a1 <ath_tgt_tx_form_aggr+0x99>
		bf->bf_rcs[0].rix   = 0xb;
  90e487:	c0ab      	movi.n	a10, 11
  90e489:	2a2450        	s8i	a10, a2, 80
		bf->bf_rcs[0].tries = ATH_TXMAXTRY - 1;
  90e48c:	c0aa      	movi.n	a10, 10
		bf->bf_rcs[1].tries = bf->bf_rcs[2].tries = bf->bf_rcs[3].tries = 0;
  90e48e:	2d2475        	s8i	a13, a2, 117
  90e491:	2d2469        	s8i	a13, a2, 105
  90e494:	2d245d        	s8i	a13, a2, 93
		bf->bf_rcs[0].tries = ATH_TXMAXTRY - 1;
  90e497:	2a2451        	s8i	a10, a2, 81
		bf->bf_rcs[0].flags = 0;
  90e49a:	2d2453        	s8i	a13, a2, 83
  90e49d:	60001c        	j	90e4bd <ath_tgt_tx_form_aggr+0xb5>
  90e4a0:	002a1c        	mul16u	a10, a2, a0
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90e4a3:	109a13        	l32r	a0, 8f4cf0 <memset+0xdea8>
				      ATH_RC_PROBE_ALLOWED, bf->bf_rcs, &prate);
  90e4a6:	2a2c50        	addi	a10, a2, 80
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90e4a9:	c0c1      	movi.n	a12, 1
  90e4ab:	9a12      	s32i.n	a10, a1, 8
  90e4ad:	8a1b      	l32i.n	a10, a1, 44
  90e4af:	9c11      	s32i.n	a12, a1, 4
  90e4b1:	9c10      	s32i.n	a12, a1, 0
  90e4b3:	c0f4      	movi.n	a15, 4
  90e4b5:	c0ea      	movi.n	a14, 10
  90e4b7:	077b02        	or	a11, a7, a7
  90e4ba:	5bfa1c        	call8	90cd2c <ath_rate_findrate>
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
  90e4bd:	1d69a6        	l32r	a13, 8e8b58 <memset+0x1d10>
  90e4c0:	2a2c50        	addi	a10, a2, 80
  90e4c3:	2c0a04        	movi	a12, 4
  90e4c6:	6dc820        	loop	a12, 90e4ea <ath_tgt_tx_form_aggr+0xe2>
		if (bf->bf_rcs[i].tries) {
  90e4c9:	2ba001        	l8ui	a11, a10, 1
  90e4cc:	c9b8      	beqz.n	a11, 90e4e8 <ath_tgt_tx_form_aggr+0xe0>
			if (rt->info[bf->bf_rcs[i].rix].phy != IEEE80211_T_HT) {
  90e4ce:	2fa000        	l8ui	a15, a10, 0
  90e4d1:	881c      	l32i.n	a8, a1, 48
  90e4d3:	0efb11        	slli	a11, a15, 2
  90e4d6:	afbb      	add.n	a11, a11, a15
  90e4d8:	0ebb11        	slli	a11, a11, 2
  90e4db:	ab8b      	add.n	a11, a8, a11
  90e4dd:	2bb029        	l8ui	a11, a11, 41
			frame_length = bf->bf_rcs[i].max4msframelen;
  90e4e0:	8ea1      	l32i.n	a14, a10, 4
			if (rt->info[bf->bf_rcs[i].rix].phy != IEEE80211_T_HT) {
  90e4e2:	69b40a        	bnei	a11, 4, 90e4f0 <ath_tgt_tx_form_aggr+0xe8>
			max4msframelen = ATH_MIN(max4msframelen, frame_length);
  90e4e5:	0edd36        	minu	a13, a13, a14
  90e4e8:	bcaa      	addi.n	a10, a10, 12
	u_int16_t aggr_limit, legacy=0;
  90e4ea:	c0a0      	movi.n	a10, 0
  90e4ec:	600002        	j	90e4f2 <ath_tgt_tx_form_aggr+0xea>
  90e4ef:	00c0a1        	excw
	if (prate || legacy)
  90e4f2:	8b14      	l32i.n	a11, a1, 16
  90e4f4:	cebe      	bnez.n	a11, 90e526 <ath_tgt_tx_form_aggr+0x11e>
  90e4f6:	ceac      	bnez.n	a10, 90e526 <ath_tgt_tx_form_aggr+0x11e>
	if (sc->sc_ic.ic_enable_coex)
  90e4f8:	881b      	l32i.n	a8, a1, 44
  90e4fa:	2a8d16        	addmi	a10, a8, 0x1600
  90e4fd:	8ca8      	l32i.n	a12, a10, 32
  90e4ff:	2ea025        	l8ui	a14, a10, 37
		aggr_limit = ATH_MIN(max4msframelen, sc->sc_ic.ic_ampdu_limit);
  90e502:	0cdb36        	minu	a11, a13, a12
  90e505:	0b0a4f        	extui	a10, a11, 0, 16
	if (sc->sc_ic.ic_enable_coex)
  90e508:	c8ec      	beqz.n	a14, 90e518 <ath_tgt_tx_form_aggr+0x110>
		aggr_limit = ATH_MIN((max4msframelen*3)/8, sc->sc_ic.ic_ampdu_limit);
  90e50a:	0fda11        	slli	a10, a13, 1
  90e50d:	adaa      	add.n	a10, a10, a13
  90e50f:	0a3a14        	srli	a10, a10, 3
  90e512:	0caa36        	minu	a10, a10, a12
  90e515:	0a0a4f        	extui	a10, a10, 0, 16
	if (ieee_node->ni_maxampdu)
  90e518:	27710a        	l16ui	a7, a7, 20
		aggr_limit = ATH_MIN(aggr_limit, ieee_node->ni_maxampdu);
  90e51b:	0a7b36        	minu	a11, a7, a10
  90e51e:	07ba39        	movnez	a10, a11, a7
  90e521:	d7a0      	mov.n	a7, a10
  90e523:	600001        	j	90e528 <ath_tgt_tx_form_aggr+0x120>
		return 0;
  90e526:	c070      	movi.n	a7, 0
			aggr_limit = ath_lookup_rate(sc, tid->an, bf);
  90e528:	07084f        	extui	a8, a7, 0, 16
  90e52b:	981c      	s32i.n	a8, a1, 48
		al_delta = ATH_AGGR_DELIM_SZ + bf->bf_pktlen;
  90e52d:	2c2122        	l16ui	a12, a2, 68
		if (nframes && (aggr_limit < (al + bpad + al_delta + prev_al))) {
  90e530:	8818      	l32i.n	a8, a1, 32
		al_delta = ATH_AGGR_DELIM_SZ + bf->bf_pktlen;
  90e532:	b4cc      	addi.n	a12, a12, 4
  90e534:	0c074f        	extui	a7, a12, 0, 16
		if (nframes && (aggr_limit < (al + bpad + al_delta + prev_al))) {
  90e537:	648133        	beqz	a8, 90e66e <ath_tgt_tx_form_aggr+0x266>
  90e53a:	a54a      	add.n	a10, a4, a5
  90e53c:	881c      	l32i.n	a8, a1, 48
  90e53e:	a7aa      	add.n	a10, a10, a7
  90e540:	7a8a0a        	bge	a8, a10, 90e54e <ath_tgt_tx_form_aggr+0x146>
			bf_first->bf_nframes = nframes;
  90e543:	8218      	l32i.n	a2, a1, 32
			bf_first->bf_al= al;
  90e545:	243527        	s16i	a4, a3, 78
			bf_first->bf_nframes = nframes;
  90e548:	22344c        	s8i	a2, a3, 76
  90e54b:	60001a        	j	90e569 <ath_tgt_tx_form_aggr+0x161>
		if ((nframes + prev_frames) >= ATH_MIN((h_baw), 22)) {
  90e54e:	881a      	l32i.n	a8, a1, 40
  90e550:	c1b5      	movi.n	a11, 21
  90e552:	c1a6      	movi.n	a10, 22
  90e554:	78b306        	bltu	a11, a8, 90e55e <ath_tgt_tx_form_aggr+0x156>
  90e557:	da80      	mov.n	a10, a8
  90e559:	600001        	j	90e55e <ath_tgt_tx_form_aggr+0x156>
  90e55c:	8a1a      	l32i.n	a10, a1, 40
  90e55e:	8818      	l32i.n	a8, a1, 32
  90e560:	7a8209        	blt	a8, a10, 90e56d <ath_tgt_tx_form_aggr+0x165>
			bf_first->bf_al= al;
  90e563:	243527        	s16i	a4, a3, 78
			bf_first->bf_nframes = nframes;
  90e566:	28344c        	s8i	a8, a3, 76
			return ATH_TGT_AGGR_LIMITED;
  90e569:	c022      	movi.n	a2, 2
  90e56b:	d10f      	retw.n
		ath_tx_addto_baw(tid, bf);
  90e56d:	db20      	mov.n	a11, a2
  90e56f:	da60      	mov.n	a10, a6
  90e571:	5bff60        	call8	90e2f4 <ath_tx_addto_baw>
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e574:	8a29      	l32i.n	a10, a2, 36
  90e576:	8b2a      	l32i.n	a11, a2, 40
  90e578:	c8a4      	beqz.n	a10, 90e580 <ath_tgt_tx_form_aggr+0x178>
  90e57a:	9baa      	s32i.n	a11, a10, 40
  90e57c:	600002        	j	90e582 <ath_tgt_tx_form_aggr+0x17a>
  90e57f:	009b6c        	excw
  90e582:	8b2a      	l32i.n	a11, a2, 40
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e584:	881d      	l32i.n	a8, a1, 52
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e586:	9ab0      	s32i.n	a10, a11, 0
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e588:	c0a0      	movi.n	a10, 0
  90e58a:	9a29      	s32i.n	a10, a2, 36
  90e58c:	8a81      	l32i.n	a10, a8, 4
		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);
  90e58e:	8b2f      	l32i.n	a11, a2, 60
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e590:	9a2a      	s32i.n	a10, a2, 40
  90e592:	92a0      	s32i.n	a2, a10, 0
  90e594:	2a2c24        	addi	a10, a2, 36
  90e597:	9a81      	s32i.n	a10, a8, 4
		nframes ++;
  90e599:	8818      	l32i.n	a8, a1, 32
		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);
  90e59b:	1a6aac        	l32r	a10, 8e904c <memset+0x2204>
		nframes ++;
  90e59e:	b188      	addi.n	a8, a8, 1
  90e5a0:	281608        	s32i	a8, a1, 32
		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);
  90e5a3:	7ab116        	beq	a11, a10, 90e5bd <ath_tgt_tx_form_aggr+0x1b5>
  90e5a6:	1a68b5        	l32r	a10, 8e887c <memset+0x1a34>
  90e5a9:	1b6aad        	l32r	a11, 8e9060 <memset+0x2218>
  90e5ac:	2da212        	l32i	a13, a10, 72
  90e5af:	1a6a98        	l32r	a10, 8e9010 <memset+0x21c8>
  90e5b2:	0bd000        	callx8	a13
  90e5b5:	1a6919        	l32r	a10, 8e8a1c <memset+0x1bd4>
  90e5b8:	0c0200        	memw
  90e5bb:	8aa0      	l32i.n	a10, a10, 0
  90e5bd:	a544      	add.n	a4, a4, a5
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e5bf:	252122        	l16ui	a5, a2, 68
		al += bpad + al_delta;
  90e5c2:	a744      	add.n	a4, a4, a7
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e5c4:	2b0afb        	movi	a11, 251
		al += bpad + al_delta;
  90e5c7:	04044f        	extui	a4, a4, 0, 16
  90e5ca:	c0a0      	movi.n	a10, 0
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e5cc:	75b208        	blt	a11, a5, 90e5d8 <ath_tgt_tx_form_aggr+0x1d0>
  90e5cf:	2a0afc        	movi	a10, 252
  90e5d2:	05aa0c        	sub	a10, a10, a5
  90e5d5:	0a2a12        	srai	a10, a10, 2
  90e5d8:	0a0a47        	extui	a10, a10, 0, 8
		switch (bf->bf_keytype) {
  90e5db:	252085        	l8ui	a5, a2, 133
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e5de:	2a244b        	s8i	a10, a2, 75
		switch (bf->bf_keytype) {
  90e5e1:	685213        	beqi	a5, 2, 90e5f8 <ath_tgt_tx_form_aggr+0x1f0>
  90e5e4:	6f5305        	bgeui	a5, 3, 90e5ed <ath_tgt_tx_form_aggr+0x1e5>
  90e5e7:	685112        	beqi	a5, 1, 90e5fd <ath_tgt_tx_form_aggr+0x1f5>
  90e5ea:	60001a        	j	90e608 <ath_tgt_tx_form_aggr+0x200>
  90e5ed:	68530c        	beqi	a5, 3, 90e5fd <ath_tgt_tx_form_aggr+0x1f5>
			bf->bf_ndelim += 12;
  90e5f0:	bcaa      	addi.n	a10, a10, 12
		switch (bf->bf_keytype) {
  90e5f2:	68540f        	beqi	a5, 4, 90e605 <ath_tgt_tx_form_aggr+0x1fd>
  90e5f5:	60000f        	j	90e608 <ath_tgt_tx_form_aggr+0x200>
			bf->bf_ndelim += ATH_AGGR_ENCRYPTDELIM;
  90e5f8:	baaa      	addi.n	a10, a10, 10
  90e5fa:	600007        	j	90e605 <ath_tgt_tx_form_aggr+0x1fd>
			bf->bf_ndelim += 64;
  90e5fd:	2aac40        	addi	a10, a10, 64
  90e600:	600001        	j	90e605 <ath_tgt_tx_form_aggr+0x1fd>
  90e603:	00002a        	muluh	a0, a0, a0
			bf->bf_ndelim += 12;
  90e606:	244b25        	l32ai	a4, a4, 148
		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);
  90e609:	204b07        	l32ai	a0, a4, 28
  90e60c:	0c0688        	excw
		if (bf_prev) {
  90e60f:	190c0c        	l32r	a9, 8d1640 <_bss_end+0x3be730>
		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);
  90e612:	410e55        	excw
  90e615:	11a5c5        	l32r	a1, 8f7d2c <memset+0x10ee4>
  90e618:	8c2c      	l32i.n	a12, a2, 48
		if (bf_prev) {
  90e61a:	c98a      	beqz.n	a8, 90e638 <ath_tgt_tx_form_aggr+0x230>
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e61c:	8a8e      	l32i.n	a10, a8, 56
			bf_prev->bf_next = bf;
  90e61e:	928b      	s32i.n	a2, a8, 44
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e620:	0c8b57        	extui	a11, a12, 24, 8
  90e623:	2ba400        	s8i	a11, a10, 0
  90e626:	2b2031        	l8ui	a11, a2, 49
  90e629:	2ba401        	s8i	a11, a10, 1
  90e62c:	2b2032        	l8ui	a11, a2, 50
  90e62f:	2ba402        	s8i	a11, a10, 2
  90e632:	2b2033        	l8ui	a11, a2, 51
  90e635:	2ba403        	s8i	a11, a10, 3
		for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e638:	d7c0      	mov.n	a7, a12
  90e63a:	2d0a88        	movi	a13, 136
  90e63d:	600013        	j	90e654 <ath_tgt_tx_form_aggr+0x24c>
  90e640:	00881e        	excw
			ah->ah_set11nAggrMiddle(ds, bf->bf_ndelim);
  90e643:	2b204b        	l8ui	a11, a2, 75
  90e646:	2e8212        	l32i	a14, a8, 72
  90e649:	da70      	mov.n	a10, a7
  90e64b:	9d1f      	s32i.n	a13, a1, 60
  90e64d:	0be000        	callx8	a14
		for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e650:	8d1f      	l32i.n	a13, a1, 60
  90e652:	ad77      	add.n	a7, a7, a13
  90e654:	8a2e      	l32i.n	a10, a2, 56
  90e656:	77abe7        	bgeu	a10, a7, 90e641 <ath_tgt_tx_form_aggr+0x239>
	} while (!asf_tailq_empty(&tid->buf_q));
  90e659:	886b      	l32i.n	a8, a6, 44
  90e65b:	9219      	s32i.n	a2, a1, 36
  90e65d:	c0d1      	movi.n	a13, 1
  90e65f:	658dce        	bnez	a8, 90e431 <ath_tgt_tx_form_aggr+0x29>
	bf_first->bf_nframes = nframes;
  90e662:	8218      	l32i.n	a2, a1, 32
	bf_first->bf_al= al;
  90e664:	243527        	s16i	a4, a3, 78
	bf_first->bf_nframes = nframes;
  90e667:	22344c        	s8i	a2, a3, 76
	return ATH_TGT_AGGR_DONE;
  90e66a:	d280      	mov.n	a2, a8
  90e66c:	d10f      	retw.n
		if ((nframes + prev_frames) >= ATH_MIN((h_baw), 22)) {
  90e66e:	881a      	l32i.n	a8, a1, 40
  90e670:	c1a5      	movi.n	a10, 21
  90e672:	78a302        	bltu	a10, a8, 90e678 <ath_tgt_tx_form_aggr+0x270>
  90e675:	63fee3        	j	90e55c <ath_tgt_tx_form_aggr+0x154>
  90e678:	63fef1        	j	90e56d <ath_tgt_tx_form_aggr+0x165>
	...

0090e67c <ath_tgt_txq_schedule>:
{
  90e67c:	6c1008        	entry	a1, 64
		TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
  90e67f:	8436      	l32i.n	a4, a3, 24
  90e681:	644209        	beqz	a4, 90e88e <ath_tgt_txq_schedule+0x212>
  90e684:	8549      	l32i.n	a5, a4, 36
  90e686:	864a      	l32i.n	a6, a4, 40
  90e688:	c854      	beqz.n	a5, 90e690 <ath_tgt_txq_schedule+0x14>
  90e68a:	965a      	s32i.n	a6, a5, 40
  90e68c:	600002        	j	90e692 <ath_tgt_txq_schedule+0x16>
  90e68f:	009637        	maxu	a6, a9, a0
  90e692:	864a      	l32i.n	a6, a4, 40
  90e694:	9560      	s32i.n	a5, a6, 0
		if (tid->paused)
  90e696:	264034        	l8ui	a6, a4, 52
		tid->sched = AH_FALSE;
  90e699:	c050      	movi.n	a5, 0
  90e69b:	254435        	s8i	a5, a4, 53
		if (tid->paused)
  90e69e:	006732        	sext	a7, a6, 7
  90e6a1:	c050      	movi.n	a5, 0
  90e6a3:	757102        	beq	a7, a5, 90e6a9 <ath_tgt_txq_schedule+0x2d>
  90e6a6:	6001d8        	j	90e882 <ath_tgt_txq_schedule+0x206>
		if (!(tid->flag & TID_AGGR_ENABLED))
  90e6a9:	264036        	l8ui	a6, a4, 54
  90e6ac:	c052      	movi.n	a5, 2
  90e6ae:	056601        	and	a6, a6, a5
  90e6b1:	c081      	movi.n	a8, 1
  90e6b3:	8540      	l32i.n	a5, a4, 0
  90e6b5:	656050        	bnez	a6, 90e709 <ath_tgt_txq_schedule+0x8d>
	struct ath_txq *txq =TID_TO_ACTXQ(tid->tidno);;
  90e6b8:	d960      	mov.n	a9, a6
  90e6ba:	058939        	movnez	a9, a8, a5
  90e6bd:	c999      	beqz.n	a9, 90e6da <ath_tgt_txq_schedule+0x5e>
  90e6bf:	275cfd        	addi	a7, a5, -3
  90e6c2:	078639        	movnez	a6, a8, a7
  90e6c5:	c961      	beqz.n	a6, 90e6da <ath_tgt_txq_schedule+0x5e>
  90e6c7:	b056      	addi.n	a6, a5, -1
  90e6c9:	6e620f        	bltui	a6, 2, 90e6dc <ath_tgt_txq_schedule+0x60>
  90e6cc:	255cfc        	addi	a5, a5, -4
  90e6cf:	c082      	movi.n	a8, 2
  90e6d1:	785307        	bltu	a5, a8, 90e6dc <ath_tgt_txq_schedule+0x60>
  90e6d4:	c083      	movi.n	a8, 3
  90e6d6:	600002        	j	90e6dc <ath_tgt_txq_schedule+0x60>
  90e6d9:	00c080        	excw
  90e6dc:	0e8811        	slli	a8, a8, 2
  90e6df:	288d05        	addmi	a8, a8, 0x500
  90e6e2:	a828      	add.n	a8, a2, a8
  90e6e4:	8783      	l32i.n	a7, a8, 12
		if (asf_tailq_empty(&tid->buf_q))
  90e6e6:	8b4b      	l32i.n	a11, a4, 44
  90e6e8:	64b188        	beqz	a11, 90e874 <ath_tgt_txq_schedule+0x1f8>
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e6eb:	85b9      	l32i.n	a5, a11, 36
  90e6ed:	86ba      	l32i.n	a6, a11, 40
  90e6ef:	c853      	beqz.n	a5, 90e6f6 <ath_tgt_txq_schedule+0x7a>
  90e6f1:	965a      	s32i.n	a6, a5, 40
  90e6f3:	600001        	j	90e6f8 <ath_tgt_txq_schedule+0x7c>
  90e6f6:	964c      	s32i.n	a6, a4, 48
  90e6f8:	86ba      	l32i.n	a6, a11, 40
		ath_tgt_tx_send_normal(sc, bf);
  90e6fa:	da20      	mov.n	a10, a2
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e6fc:	9560      	s32i.n	a5, a6, 0
		ath_tgt_tx_send_normal(sc, bf);
  90e6fe:	5bfdb0        	call8	90ddc0 <ath_tgt_tx_send_normal>
	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH);
  90e701:	8574      	l32i.n	a5, a7, 16
  90e703:	645fdf        	beqz	a5, 90e6e6 <ath_tgt_txq_schedule+0x6a>
  90e706:	60016a        	j	90e874 <ath_tgt_txq_schedule+0x1f8>
	struct ath_txq *txq = TID_TO_ACTXQ(tid->tidno);
  90e709:	d670      	mov.n	a6, a7
  90e70b:	058639        	movnez	a6, a8, a5
  90e70e:	060647        	extui	a6, a6, 0, 8
  90e711:	c96d      	beqz.n	a6, 90e732 <ath_tgt_txq_schedule+0xb6>
  90e713:	265cfd        	addi	a6, a5, -3
  90e716:	d970      	mov.n	a9, a7
  90e718:	068939        	movnez	a9, a8, a6
  90e71b:	090647        	extui	a6, a9, 0, 8
  90e71e:	c960      	beqz.n	a6, 90e732 <ath_tgt_txq_schedule+0xb6>
  90e720:	b056      	addi.n	a6, a5, -1
  90e722:	6e620e        	bltui	a6, 2, 90e734 <ath_tgt_txq_schedule+0xb8>
  90e725:	255cfc        	addi	a5, a5, -4
  90e728:	c082      	movi.n	a8, 2
  90e72a:	785306        	bltu	a5, a8, 90e734 <ath_tgt_txq_schedule+0xb8>
  90e72d:	c083      	movi.n	a8, 3
  90e72f:	600001        	j	90e734 <ath_tgt_txq_schedule+0xb8>
  90e732:	c080      	movi.n	a8, 0
  90e734:	0e8811        	slli	a8, a8, 2
  90e737:	288d05        	addmi	a8, a8, 0x500
  90e73a:	a828      	add.n	a8, a2, a8
  90e73c:	8883      	l32i.n	a8, a8, 12
	if (asf_tailq_empty(&tid->buf_q))
  90e73e:	864b      	l32i.n	a6, a4, 44
	struct ath_hal *ah = sc->sc_ah;
  90e740:	252d05        	addmi	a5, a2, 0x500
	struct ath_txq *txq = TID_TO_ACTXQ(tid->tidno);
  90e743:	9815      	s32i.n	a8, a1, 20
	struct ath_hal *ah = sc->sc_ah;
  90e745:	855b      	l32i.n	a5, a5, 44
	if (asf_tailq_empty(&tid->buf_q))
  90e747:	646129        	beqz	a6, 90e874 <ath_tgt_txq_schedule+0x1f8>
		asf_tailq_init(&bf_q);
  90e74a:	c060      	movi.n	a6, 0
		if (asf_tailq_empty(&tid->buf_q))
  90e74c:	874b      	l32i.n	a7, a4, 44
  90e74e:	647122        	beqz	a7, 90e874 <ath_tgt_txq_schedule+0x1f8>
		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e751:	dc10      	mov.n	a12, a1
  90e753:	db40      	mov.n	a11, a4
  90e755:	da20      	mov.n	a10, a2
		asf_tailq_init(&bf_q);
  90e757:	9610      	s32i.n	a6, a1, 0
  90e759:	9111      	s32i.n	a1, a1, 4
		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e75b:	5bff2b        	call8	90e408 <ath_tgt_tx_form_aggr>
		if (asf_tailq_empty(&bf_q))
  90e75e:	8710      	l32i.n	a7, a1, 0
		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e760:	9a14      	s32i.n	a10, a1, 16
		if (asf_tailq_empty(&bf_q))
  90e762:	64710e        	beqz	a7, 90e874 <ath_tgt_txq_schedule+0x1f8>
		if (bf->bf_nframes == 1) {
  90e765:	2a704c        	l8ui	a10, a7, 76
  90e768:	69a168        	bnei	a10, 1, 90e7d4 <ath_tgt_txq_schedule+0x158>
			if(bf->bf_retries == 0)
  90e76b:	2a7086        	l8ui	a10, a7, 134
  90e76e:	cca6      	bnez.n	a10, 90e778 <ath_tgt_txq_schedule+0xfc>
				__stats(sc, txaggr_single);
  90e770:	2a2261        	l32i	a10, a2, 0x184
  90e773:	b1aa      	addi.n	a10, a10, 1
  90e775:	2a2661        	s32i	a10, a2, 0x184
			bf->bf_isaggr = 0;
  90e778:	2a7087        	l8ui	a10, a7, 135
  90e77b:	2bfadf        	movi	a11, -33
  90e77e:	0baa01        	and	a10, a10, a11
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e781:	8b71      	l32i.n	a11, a7, 4
			bf->bf_isaggr = 0;
  90e783:	2a7487        	s8i	a10, a7, 135
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e786:	0cba11        	slli	a10, a11, 4
  90e789:	abaa      	add.n	a10, a10, a11
  90e78b:	0daa11        	slli	a10, a10, 3
  90e78e:	2bfa78        	movi	a11, -136
  90e791:	abab      	add.n	a11, a10, a11
  90e793:	8a7d      	l32i.n	a10, a7, 52
			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e795:	2c0a88        	movi	a12, 136
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e798:	abaa      	add.n	a10, a10, a11
  90e79a:	9a7e      	s32i.n	a10, a7, 56
			bf->bf_lastds->ds_link = 0;
  90e79c:	26a400        	s8i	a6, a10, 0
  90e79f:	26a401        	s8i	a6, a10, 1
  90e7a2:	26a402        	s8i	a6, a10, 2
  90e7a5:	26a403        	s8i	a6, a10, 3
			bf->bf_next = NULL;
  90e7a8:	967b      	s32i.n	a6, a7, 44
			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e7aa:	8b7c      	l32i.n	a11, a7, 48
  90e7ac:	600014        	j	90e7c4 <ath_tgt_txq_schedule+0x148>
  90e7af:	002e52        	extui	a14, a0, 18, 3
				ah->ah_clr11nAggr(ds);
  90e7b2:	14dab0        	l32r	a4, 905274 <memset+0x1e42c>
  90e7b5:	2b1607        	s32i	a11, a1, 28
  90e7b8:	2c1606        	s32i	a12, a1, 24
  90e7bb:	0be000        	callx8	a14
			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e7be:	8b17      	l32i.n	a11, a1, 28
  90e7c0:	8c16      	l32i.n	a12, a1, 24
  90e7c2:	acbb      	add.n	a11, a11, a12
  90e7c4:	8a7e      	l32i.n	a10, a7, 56
  90e7c6:	7babe6        	bgeu	a10, a11, 90e7b0 <ath_tgt_txq_schedule+0x134>
			ath_buf_set_rate(sc, bf);
  90e7c9:	db70      	mov.n	a11, a7
  90e7cb:	da20      	mov.n	a10, a2
  90e7cd:	5bfa79        	call8	90d1b4 <ath_buf_set_rate>
  90e7d0:	600088        	j	90e85c <ath_tgt_txq_schedule+0x1e0>
  90e7d3:	008a11        	slli	a10, a8, 16
		bf->bf_isaggr  = 1;
  90e7d6:	c2b0      	movi.n	a11, 32
		bf_last = asf_tailq_last(&bf_q, ath_tx_bufhead_s);
  90e7d8:	8aa1      	l32i.n	a10, a10, 4
  90e7da:	8ea0      	l32i.n	a14, a10, 0
		bf_last->bf_lastds->ds_link = 0;
  90e7dc:	8aee      	l32i.n	a10, a14, 56
		bf_last->bf_next = NULL;
  90e7de:	96eb      	s32i.n	a6, a14, 44
		bf_last->bf_lastds->ds_link = 0;
  90e7e0:	26a400        	s8i	a6, a10, 0
  90e7e3:	26a401        	s8i	a6, a10, 1
  90e7e6:	26a402        	s8i	a6, a10, 2
  90e7e9:	26a403        	s8i	a6, a10, 3
		bf_last->bf_ndelim = 0;
  90e7ec:	26e44b        	s8i	a6, a14, 75
		bf->bf_isaggr  = 1;
  90e7ef:	2a7087        	l8ui	a10, a7, 135
  90e7f2:	0baa02        	or	a10, a10, a11
  90e7f5:	2a7487        	s8i	a10, a7, 135
		ath_buf_set_rate(sc, bf);
  90e7f8:	db70      	mov.n	a11, a7
  90e7fa:	da20      	mov.n	a10, a2
  90e7fc:	9e16      	s32i.n	a14, a1, 24
  90e7fe:	5bfa6d        	call8	90d1b4 <ath_buf_set_rate>
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
  90e801:	2b7127        	l16ui	a11, a7, 78
  90e804:	2a720c        	l32i	a10, a7, 48
  90e807:	2f5211        	l32i	a15, a5, 68
  90e80a:	2c704b        	l8ui	a12, a7, 75
  90e80d:	0bf000        	callx8	a15
		bf->bf_lastds = bf_last->bf_lastds;
  90e810:	8e16      	l32i.n	a14, a1, 24
		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
  90e812:	c0b0      	movi.n	a11, 0
		bf->bf_lastds = bf_last->bf_lastds;
  90e814:	8aee      	l32i.n	a10, a14, 56
  90e816:	9a7e      	s32i.n	a10, a7, 56
  90e818:	60001c        	j	90e838 <ath_tgt_txq_schedule+0x1bc>
  90e81b:	000cba        	excw
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);
  90e81e:	118fed        	l32r	a1, 8f27d4 <memset+0xb98c>
  90e821:	abaa      	add.n	a10, a10, a11
  90e823:	2c5213        	l32i	a12, a5, 76
  90e826:	0daa11        	slli	a10, a10, 3
  90e829:	9b17      	s32i.n	a11, a1, 28
  90e82b:	9e16      	s32i.n	a14, a1, 24
  90e82d:	aafa      	add.n	a10, a15, a10
  90e82f:	0bc000        	callx8	a12
		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
  90e832:	8b17      	l32i.n	a11, a1, 28
  90e834:	8e16      	l32i.n	a14, a1, 24
  90e836:	b1bb      	addi.n	a11, a11, 1
  90e838:	8ae1      	l32i.n	a10, a14, 4
  90e83a:	7ab3de        	bltu	a11, a10, 90e81c <ath_tgt_txq_schedule+0x1a0>
		if (status == ATH_AGGR_8K_LIMITED) {
  90e83d:	8814      	l32i.n	a8, a1, 16
  90e83f:	698419        	bnei	a8, 4, 90e85c <ath_tgt_txq_schedule+0x1e0>
			adf_os_assert(0);
  90e842:	1568b5        	l32r	a5, 8e8b18 <memset+0x1cd0>
  90e845:	1b6aae        	l32r	a11, 8e9300 <memset+0x24b8>
  90e848:	255212        	l32i	a5, a5, 72
  90e84b:	1a6a98        	l32r	a10, 8e92ac <memset+0x2464>
  90e84e:	0b5000        	callx8	a5
  90e851:	156919        	l32r	a5, 8e8cb8 <memset+0x1e70>
  90e854:	0c0200        	memw
  90e857:	8550      	l32i.n	a5, a5, 0
  90e859:	600017        	j	90e874 <ath_tgt_txq_schedule+0x1f8>
		bf->bf_txq_add(sc, bf);
  90e85c:	2c7210        	l32i	a12, a7, 64
  90e85f:	db70      	mov.n	a11, a7
  90e861:	da20      	mov.n	a10, a2
  90e863:	0bc000        	callx8	a12
		 status != ATH_TGT_AGGR_BAW_CLOSED);
  90e866:	8915      	l32i.n	a9, a1, 20
  90e868:	8894      	l32i.n	a8, a9, 16
	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH &&
  90e86a:	cc86      	bnez.n	a8, 90e874 <ath_tgt_txq_schedule+0x1f8>
  90e86c:	8814      	l32i.n	a8, a1, 16
  90e86e:	688102        	beqi	a8, 1, 90e874 <ath_tgt_txq_schedule+0x1f8>
  90e871:	63fed7        	j	90e74c <ath_tgt_txq_schedule+0xd0>
		if (!asf_tailq_empty(&tid->buf_q)) {
  90e874:	864b      	l32i.n	a6, a4, 44
		bdone = AH_TRUE;
  90e876:	c051      	movi.n	a5, 1
		if (!asf_tailq_empty(&tid->buf_q)) {
  90e878:	c866      	beqz.n	a6, 90e882 <ath_tgt_txq_schedule+0x206>
			ath_tgt_tx_enqueue(txq, tid);
  90e87a:	db40      	mov.n	a11, a4
  90e87c:	2a3c1c        	addi	a10, a3, 28
  90e87f:	5bf9d6        	call8	90cfd8 <ath_tgt_tx_enqueue$isra$3>
	} while (!asf_tailq_empty(&txq->axq_tidq) && !bdone);
  90e882:	8736      	l32i.n	a7, a3, 24
  90e884:	c061      	movi.n	a6, 1
  90e886:	c874      	beqz.n	a7, 90e88e <ath_tgt_txq_schedule+0x212>
  90e888:	765102        	beq	a5, a6, 90e88e <ath_tgt_txq_schedule+0x212>
  90e88b:	63fdf0        	j	90e67f <ath_tgt_txq_schedule+0x3>
  90e88e:	d10f      	retw.n

0090e890 <owltgt_tx_processq>:
{
  90e890:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  90e893:	252d05        	addmi	a5, a2, 0x500
  90e896:	865b      	l32i.n	a6, a5, 44
		if (status == HAL_EINPROGRESS) {
  90e898:	c07f      	movi.n	a7, 15
		if (asf_tailq_empty(&txq->axq_q)) {
  90e89a:	8532      	l32i.n	a5, a3, 8
  90e89c:	cc54      	bnez.n	a5, 90e8a4 <owltgt_tx_processq+0x14>
			txq->axq_link = NULL;
  90e89e:	9531      	s32i.n	a5, a3, 4
			txq->axq_linkbuf = NULL;
  90e8a0:	9535      	s32i.n	a5, a3, 20
			break;
  90e8a2:	d10f      	retw.n
		ds = bf->bf_lastds;
  90e8a4:	885e      	l32i.n	a8, a5, 56
		status = ah->ah_procTxDesc(ah, ds);
  90e8a6:	29621a        	l32i	a9, a6, 104
  90e8a9:	db80      	mov.n	a11, a8
  90e8ab:	9810      	s32i.n	a8, a1, 0
  90e8ad:	da60      	mov.n	a10, a6
  90e8af:	0b9000        	callx8	a9
		if (status == HAL_EINPROGRESS) {
  90e8b2:	8810      	l32i.n	a8, a1, 0
  90e8b4:	77a91e        	bne	a10, a7, 90e8d6 <owltgt_tx_processq+0x46>
			if (txqstate == OWL_TXQ_ACTIVE)
  90e8b7:	64406d        	beqz	a4, 90e928 <owltgt_tx_processq+0x98>
			else if (txqstate == OWL_TXQ_STOPPED) {
  90e8ba:	694112        	bnei	a4, 1, 90e8d0 <owltgt_tx_processq+0x40>
				__stats(sc, tx_stopfiltered);
  90e8bd:	292275        	l32i	a9, a2, 0x1d4
  90e8c0:	b199      	addi.n	a9, a9, 1
  90e8c2:	292675        	s32i	a9, a2, 0x1d4
				ds->ds_txstat.ts_flags  = 0;
  90e8c5:	c090      	movi.n	a9, 0
  90e8c7:	298467        	s8i	a9, a8, 103
				ds->ds_txstat.ts_status = HAL_OK;
  90e8ca:	298466        	s8i	a9, a8, 102
  90e8cd:	600005        	j	90e8d6 <owltgt_tx_processq+0x46>
				ds->ds_txstat.ts_flags  = HAL_TX_SW_FILTERED;
  90e8d0:	29fa80        	movi	a9, -128
  90e8d3:	298467        	s8i	a9, a8, 103
		ATH_TXQ_REMOVE_HEAD(txq, bf, bf_list);
  90e8d6:	8859      	l32i.n	a8, a5, 36
  90e8d8:	895a      	l32i.n	a9, a5, 40
  90e8da:	c883      	beqz.n	a8, 90e8e1 <owltgt_tx_processq+0x51>
  90e8dc:	998a      	s32i.n	a9, a8, 40
  90e8de:	600001        	j	90e8e3 <owltgt_tx_processq+0x53>
  90e8e1:	9933      	s32i.n	a9, a3, 12
  90e8e3:	895a      	l32i.n	a9, a5, 40
  90e8e5:	9890      	s32i.n	a8, a9, 0
  90e8e7:	8834      	l32i.n	a8, a3, 16
  90e8e9:	b088      	addi.n	a8, a8, -1
  90e8eb:	9834      	s32i.n	a8, a3, 16
		if ((asf_tailq_empty(&txq->axq_q))) {
  90e8ed:	8832      	l32i.n	a8, a3, 8
  90e8ef:	cc8a      	bnez.n	a8, 90e8fd <owltgt_tx_processq+0x6d>
			__stats(sc, tx_qnull);
  90e8f1:	29225c        	l32i	a9, a2, 0x170
  90e8f4:	b199      	addi.n	a9, a9, 1
  90e8f6:	29265c        	s32i	a9, a2, 0x170
			txq->axq_link = NULL;
  90e8f9:	9831      	s32i.n	a8, a3, 4
			txq->axq_linkbuf = NULL;
  90e8fb:	9835      	s32i.n	a8, a3, 20
		if (bf->bf_comp) {
  90e8fd:	885f      	l32i.n	a8, a5, 60
			bf->bf_comp(sc, bf);
  90e8ff:	db50      	mov.n	a11, a5
  90e901:	da20      	mov.n	a10, a2
		if (bf->bf_comp) {
  90e903:	c886      	beqz.n	a8, 90e90d <owltgt_tx_processq+0x7d>
			bf->bf_comp(sc, bf);
  90e905:	0b8000        	callx8	a8
  90e908:	60000c        	j	90e918 <owltgt_tx_processq+0x88>
  90e90b:	00005b        	extui	a0, a0, 16, 12
			ath_tx_status_update(sc, bf);
  90e90e:	fb          	.byte 0xfb
  90e90f:	9905      	s32i.n	a9, a0, 20
			ath_buf_comp(sc, bf);
  90e911:	5b02da        	call8	8cf47c <_bss_end+0x3bc56c>
  90e914:	205bfa        	l32ai	a0, a5, 0x3e8
  90e917:	f7          	.byte 0xf7
		if (txqstate == OWL_TXQ_ACTIVE) {
  90e918:	654f7e        	bnez	a4, 90e89a <owltgt_tx_processq+0xa>
			ath_tgt_txq_schedule(sc, txq);
  90e91b:	033b02        	or	a11, a3, a3
  90e91e:	022a02        	or	a10, a2, a2
  90e921:	5bff56        	call8	90e67c <ath_tgt_txq_schedule>
  90e924:	63ff72        	j	90e89a <owltgt_tx_processq+0xa>
  90e927:	00d10f        	subx8	a1, a13, a0
	...

0090e92c <owl_tgt_tx_tasklet>:
{
  90e92c:	6c1004        	entry	a1, 32
	ath_tx_status_clear(sc);
  90e92f:	022a02        	or	a10, a2, a2
  90e932:	233acc        	movi	a3, 0x3cc
  90e935:	5bfb8b        	call8	90d764 <ath_tx_status_clear>
  90e938:	a323      	add.n	a3, a2, a3
	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
  90e93a:	240a00        	movi	a4, 0
		if (ATH_TXQ_SETUP(sc, i)) {
  90e93d:	262d03        	addmi	a6, a2, 0x300
  90e940:	2560c8        	l8ui	a5, a6, 200
  90e943:	004004        	ssr	a4
  90e946:	05051b        	sra	a5, a5
  90e949:	7f5740        	bbci	a5, 31, 90e98d <owl_tgt_tx_tasklet+0x61>
			if (txq == sc->sc_cabq)
  90e94c:	252d05        	addmi	a5, a2, 0x500
  90e94f:	28520c        	l32i	a8, a5, 48
  90e952:	78392e        	bne	a3, a8, 90e984 <owl_tgt_tx_tasklet+0x58>
	struct ath_hal *ah = sc->sc_ah;
  90e955:	25520b        	l32i	a5, a5, 44
	ah->ah_setInterrupts(ah, sc->sc_imask & ~HAL_INT_SWBA);
  90e958:	1969c0        	l32r	a9, 8e9058 <memset+0x2210>
  90e95b:	2b22c4        	l32i	a11, a2, 0x310
  90e95e:	285228        	l32i	a8, a5, 160
  90e961:	09bb01        	and	a11, a11, a9
  90e964:	da50      	mov.n	a10, a5
  90e966:	0b8000        	callx8	a8
	owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
  90e969:	033b02        	or	a11, a3, a3
  90e96c:	022a02        	or	a10, a2, a2
  90e96f:	2c0a00        	movi	a12, 0
  90e972:	5bffc7        	call8	90e890 <owltgt_tx_processq>
	ah->ah_setInterrupts(ah, sc->sc_imask);
  90e975:	285228        	l32i	a8, a5, 160
  90e978:	2b22c4        	l32i	a11, a2, 0x310
  90e97b:	da50      	mov.n	a10, a5
  90e97d:	0b8000        	callx8	a8
  90e980:	600009        	j	90e98d <owl_tgt_tx_tasklet+0x61>
  90e983:	00c0c0        	excw
				owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
  90e986:	db30      	mov.n	a11, a3
  90e988:	da20      	mov.n	a10, a2
  90e98a:	5bffc1        	call8	90e890 <owltgt_tx_processq>
	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
  90e98d:	b144      	addi.n	a4, a4, 1
  90e98f:	233c20        	addi	a3, a3, 32
  90e992:	6944aa        	bnei	a4, 4, 90e940 <owl_tgt_tx_tasklet+0x14>
	ath_tx_status_send(sc);
  90e995:	da20      	mov.n	a10, a2
  90e997:	5bfbd0        	call8	90d8d8 <ath_tx_status_send>
  90e99a:	d10f      	retw.n

0090e99c <ath_aggr_resume_tid>:
{
  90e99c:	6c1004        	entry	a1, 32
	txq = TID_TO_ACTXQ(tid->tidno);
  90e99f:	8930      	l32i.n	a9, a3, 0
{
  90e9a1:	db30      	mov.n	a11, a3
	txq = TID_TO_ACTXQ(tid->tidno);
  90e9a3:	c997      	beqz.n	a9, 90e9be <ath_aggr_resume_tid+0x22>
  90e9a5:	689315        	beqi	a9, 3, 90e9be <ath_aggr_resume_tid+0x22>
  90e9a8:	b09a      	addi.n	a10, a9, -1
  90e9aa:	c081      	movi.n	a8, 1
  90e9ac:	6ea210        	bltui	a10, 2, 90e9c0 <ath_aggr_resume_tid+0x24>
  90e9af:	299cfc        	addi	a9, a9, -4
  90e9b2:	c082      	movi.n	a8, 2
  90e9b4:	789308        	bltu	a9, a8, 90e9c0 <ath_aggr_resume_tid+0x24>
  90e9b7:	c083      	movi.n	a8, 3
  90e9b9:	600003        	j	90e9c0 <ath_aggr_resume_tid+0x24>
  90e9bc:	0000c0        	excw
  90e9bf:	800e      	l32i.n	a0, a0, 56
  90e9c1:	8811      	l32i.n	a8, a1, 4
  90e9c3:	288d05        	addmi	a8, a8, 0x500
  90e9c6:	a828      	add.n	a8, a2, a8
  90e9c8:	8383      	l32i.n	a3, a8, 12
	tid->paused = 0;
  90e9ca:	c080      	movi.n	a8, 0
  90e9cc:	28b434        	s8i	a8, a11, 52
	if (asf_tailq_empty(&tid->buf_q))
  90e9cf:	88bb      	l32i.n	a8, a11, 44
  90e9d1:	c88b      	beqz.n	a8, 90e9e0 <ath_aggr_resume_tid+0x44>
	ath_tgt_tx_enqueue(txq, tid);
  90e9d3:	2a3c1c        	addi	a10, a3, 28
  90e9d6:	5bf980        	call8	90cfd8 <ath_tgt_tx_enqueue$isra$3>
	ath_tgt_txq_schedule(sc, txq);
  90e9d9:	db30      	mov.n	a11, a3
  90e9db:	da20      	mov.n	a10, a2
  90e9dd:	5bff27        	call8	90e67c <ath_tgt_txq_schedule>
  90e9e0:	d10f      	retw.n
	...

0090e9e4 <owl_tgt_tid_cleanup>:
{
  90e9e4:	6c1004        	entry	a1, 32
	tid->incomp--;
  90e9e7:	283037        	l8ui	a8, a3, 55
{
  90e9ea:	da20      	mov.n	a10, a2
	tid->incomp--;
  90e9ec:	b088      	addi.n	a8, a8, -1
  90e9ee:	080847        	extui	a8, a8, 0, 8
  90e9f1:	283437        	s8i	a8, a3, 55
	if (tid->incomp) {
  90e9f4:	cf85      	bnez.n	a8, 90ea2d <owl_tgt_tid_cleanup+0x49>
	tid->flag &= ~TID_CLEANUP_INPROGRES;
  90e9f6:	293036        	l8ui	a9, a3, 54
  90e9f9:	28fafe        	movi	a8, -2
  90e9fc:	089801        	and	a8, a9, a8
  90e9ff:	283436        	s8i	a8, a3, 54
	if (tid->flag & TID_REINITIALIZE) {
  90ea02:	7d9722        	bbci	a9, 29, 90ea28 <owl_tgt_tid_cleanup+0x44>
		adf_os_print("TID REINIT DONE for tid %p\n", tid);
  90ea05:	1868b5        	l32r	a8, 8e8cdc <memset+0x1e94>
  90ea08:	1a6aaf        	l32r	a10, 8e94c4 <memset+0x267c>
  90ea0b:	288212        	l32i	a8, a8, 72
  90ea0e:	033b02        	or	a11, a3, a3
  90ea11:	0b8000        	callx8	a8
		tid->flag  &= ~TID_REINITIALIZE;
  90ea14:	283036        	l8ui	a8, a3, 54
  90ea17:	c79b      	movi.n	a9, -5
  90ea19:	098801        	and	a8, a8, a9
  90ea1c:	283436        	s8i	a8, a3, 54
		owl_tgt_tid_init(tid);
  90ea1f:	da30      	mov.n	a10, a3
  90ea21:	5bf907        	call8	90ce40 <owl_tgt_tid_init>
  90ea24:	d10f      	retw.n
  90ea26:	0000db        	excw
		ath_aggr_resume_tid(sc, tid);
  90ea29:	305bff        	excw
  90ea2c:	dcd1      	excw
  90ea2e:	0f          	.byte 0xf
	...

0090ea30 <ath_tgt_tx_comp_normal>:
{
  90ea30:	6c1004        	entry	a1, 32
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ea33:	2a304d        	l8ui	a10, a3, 77
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90ea36:	8b34      	l32i.n	a11, a3, 16
	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90ea38:	0ca911        	slli	a9, a10, 4
  90ea3b:	0a990c        	sub	a9, a9, a10
  90ea3e:	0e9911        	slli	a9, a9, 2
  90ea41:	a9b9      	add.n	a9, a11, a9
  90ea43:	28905a        	l8ui	a8, a9, 90
  90ea46:	7f8713        	bbci	a8, 31, 90ea5d <ath_tgt_tx_comp_normal+0x2d>
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ea49:	0ca811        	slli	a8, a10, 4
  90ea4c:	0a880c        	sub	a8, a8, a10
  90ea4f:	0e8811        	slli	a8, a8, 2
  90ea52:	288c24        	addi	a8, a8, 36
		owl_tgt_tid_cleanup(sc, tid);
  90ea55:	a8bb      	add.n	a11, a11, a8
  90ea57:	022a02        	or	a10, a2, a2
  90ea5a:	5bffe2        	call8	90e9e4 <owl_tgt_tid_cleanup>
	if (bf->bf_node) {
  90ea5d:	8834      	l32i.n	a8, a3, 16
  90ea5f:	c98e      	beqz.n	a8, 90ea81 <ath_tgt_tx_comp_normal+0x51>
	ath_tx_status_update(sc, bf);
  90ea61:	db30      	mov.n	a11, a3
  90ea63:	022a02        	or	a10, a2, a2
  90ea66:	5bfb43        	call8	90d774 <ath_tx_status_update>
	ath_update_stats(sc, bf);
  90ea69:	8b3c      	l32i.n	a11, a3, 48
  90ea6b:	da20      	mov.n	a10, a2
  90ea6d:	5bf942        	call8	90cf78 <ath_update_stats$isra$1>
	ath_rate_tx_complete(sc, ATH_NODE_TARGET(bf->bf_node),
  90ea70:	8c3e      	l32i.n	a12, a3, 56
  90ea72:	8b34      	l32i.n	a11, a3, 16
  90ea74:	c0f0      	movi.n	a15, 0
  90ea76:	c0e1      	movi.n	a14, 1
  90ea78:	2d3c50        	addi	a13, a3, 80
  90ea7b:	022a02        	or	a10, a2, a2
  90ea7e:	5bf8b7        	call8	90cd5c <ath_rate_tx_complete>
	ath_tx_freebuf(sc, bf);
  90ea81:	db30      	mov.n	a11, a3
  90ea83:	da20      	mov.n	a10, a2
  90ea85:	5bfaaa        	call8	90d530 <ath_tx_freebuf>
  90ea88:	d10f      	retw.n
	...

0090ea8c <ath_tgt_tx_comp_aggr>:
{
  90ea8c:	6c1024        	entry	a1, 0x120
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ea8f:	27304d        	l8ui	a7, a3, 77
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90ea92:	8434      	l32i.n	a4, a3, 16
  90ea94:	0c7511        	slli	a5, a7, 4
  90ea97:	07550c        	sub	a5, a5, a7
  90ea9a:	0e5511        	slli	a5, a5, 2
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ea9d:	265c24        	addi	a6, a5, 36
  90eaa0:	251635        	s32i	a5, a1, 212
	int nframes = bf->bf_nframes;
  90eaa3:	25304c        	l8ui	a5, a3, 76
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90eaa6:	a646      	add.n	a6, a4, a6
	int nframes = bf->bf_nframes;
  90eaa8:	251634        	s32i	a5, a1, 208
	struct ath_tx_buf *bar = NULL;
  90eaab:	c050      	movi.n	a5, 0
  90eaad:	251630        	s32i	a5, a1, 192
	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90eab0:	0c7511        	slli	a5, a7, 4
  90eab3:	075d0c        	sub	a13, a5, a7
  90eab6:	0ed911        	slli	a9, a13, 2
  90eab9:	a949      	add.n	a9, a4, a9
  90eabb:	28905a        	l8ui	a8, a9, 90
  90eabe:	253c50        	addi	a5, a3, 80
  90eac1:	080840        	extui	a8, a8, 0, 1
  90eac4:	6480ed        	beqz	a8, 90ebb5 <ath_tgt_tx_comp_aggr+0x129>
  90eac7:	2b320e        	l32i	a11, a3, 56
  90eaca:	2c0a88        	movi	a12, 136
  90eacd:	011a02        	or	a10, a1, a1
  90ead0:	29163d        	s32i	a9, a1, 244
  90ead3:	2d163b        	s32i	a13, a1, 236
  90ead6:	5bf8c1        	call8	90cddc <__adf_os_mem_copy>
  90ead9:	280a88        	movi	a8, 136
  90eadc:	a817      	add.n	a7, a1, a8
  90eade:	db50      	mov.n	a11, a5
  90eae0:	c3c0      	movi.n	a12, 48
  90eae2:	077a02        	or	a10, a7, a7
  90eae5:	5bf8bd        	call8	90cddc <__adf_os_mem_copy>
	if (!bf->bf_isaggr) {
  90eae8:	253221        	l32i	a5, a3, 132
  90eaeb:	29123d        	l32i	a9, a1, 244
  90eaee:	2d123b        	l32i	a13, a1, 236
  90eaf1:	7a5f35        	bbsi	a5, 26, 90eb2a <ath_tgt_tx_comp_aggr+0x9e>
		ath_update_stats(sc, bf);
  90eaf4:	8b3c      	l32i.n	a11, a3, 48
  90eaf6:	022a02        	or	a10, a2, a2
  90eaf9:	5bf91f        	call8	90cf78 <ath_update_stats$isra$1>
		__stats(sc, tx_compunaggr);
  90eafc:	24225e        	l32i	a4, a2, 0x178
		ath_tx_status_update(sc, bf);
  90eaff:	db30      	mov.n	a11, a3
		__stats(sc, tx_compunaggr);
  90eb01:	244c01        	addi	a4, a4, 1
		ath_tx_status_update(sc, bf);
  90eb04:	022a02        	or	a10, a2, a2
		__stats(sc, tx_compunaggr);
  90eb07:	24265e        	s32i	a4, a2, 0x178
		ath_tx_status_update(sc, bf);
  90eb0a:	5bfb1a        	call8	90d774 <ath_tx_status_update>
		ath_tx_freebuf(sc, bf);
  90eb0d:	db30      	mov.n	a11, a3
  90eb0f:	022a02        	or	a10, a2, a2
  90eb12:	5bfa87        	call8	90d530 <ath_tx_freebuf>
		if (tid->flag & TID_CLEANUP_INPROGRES) {
  90eb15:	29123d        	l32i	a9, a1, 244
  90eb18:	23905a        	l8ui	a3, a9, 90
  90eb1b:	7f3f02        	bbsi	a3, 31, 90eb21 <ath_tgt_tx_comp_aggr+0x95>
  90eb1e:	600370        	j	90ee92 <ath_tgt_tx_comp_aggr+0x406>
			owl_tgt_tid_cleanup(sc, tid);
  90eb21:	db60      	mov.n	a11, a6
  90eb23:	da20      	mov.n	a10, a2
  90eb25:	5bffaf        	call8	90e9e4 <owl_tgt_tid_cleanup>
  90eb28:	d10f      	retw.n
		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90eb2a:	d870      	mov.n	a8, a7
		tid->incomp--;
  90eb2c:	d5d0      	mov.n	a5, a13
  90eb2e:	099702        	or	a7, a9, a9
  90eb31:	299c5b        	addi	a9, a9, 91
		bf_next  = bf->bf_next;
  90eb34:	8f3b      	l32i.n	a15, a3, 44
		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90eb36:	dd80      	mov.n	a13, a8
  90eb38:	db30      	mov.n	a11, a3
  90eb3a:	c0e0      	movi.n	a14, 0
  90eb3c:	dc10      	mov.n	a12, a1
  90eb3e:	022a02        	or	a10, a2, a2
  90eb41:	28163c        	s32i	a8, a1, 240
  90eb44:	29163d        	s32i	a9, a1, 244
  90eb47:	2f163b        	s32i	a15, a1, 236
  90eb4a:	5bfb3b        	call8	90d838 <ath_tx_status_update_aggr>
		ath_tx_freebuf(sc, bf);
  90eb4d:	db30      	mov.n	a11, a3
  90eb4f:	da20      	mov.n	a10, a2
  90eb51:	5bfa77        	call8	90d530 <ath_tx_freebuf>
		tid->incomp--;
  90eb54:	29123d        	l32i	a9, a1, 244
		if (!tid->incomp) {
  90eb57:	28123c        	l32i	a8, a1, 240
		tid->incomp--;
  90eb5a:	239000        	l8ui	a3, a9, 0
		if (!tid->incomp) {
  90eb5d:	2f123b        	l32i	a15, a1, 236
		tid->incomp--;
  90eb60:	b033      	addi.n	a3, a3, -1
  90eb62:	030347        	extui	a3, a3, 0, 8
  90eb65:	239400        	s8i	a3, a9, 0
		if (!tid->incomp) {
  90eb68:	cd3a      	bnez.n	a3, 90eb86 <ath_tgt_tx_comp_aggr+0xfa>
			tid->flag  &= ~TID_CLEANUP_INPROGRES;
  90eb6a:	0e5511        	slli	a5, a5, 2
  90eb6d:	a545      	add.n	a5, a4, a5
  90eb6f:	23505a        	l8ui	a3, a5, 90
  90eb72:	c75e      	movi.n	a5, -2
  90eb74:	053301        	and	a3, a3, a5
  90eb77:	23745a        	s8i	a3, a7, 90
			ath_aggr_resume_tid(sc, tid);
  90eb7a:	db60      	mov.n	a11, a6
  90eb7c:	da20      	mov.n	a10, a2
  90eb7e:	5bff87        	call8	90e99c <ath_aggr_resume_tid>
  90eb81:	600006        	j	90eb8b <ath_tgt_tx_comp_aggr+0xff>
  90eb84:	0000d3        	excw
  90eb87:	f0          	.byte 0xf0
	while (bf) {
  90eb88:	65ffa8        	bnez	a15, 90eb34 <ath_tgt_tx_comp_aggr+0xa8>
	ath_update_aggr_stats(sc, ds, nframes, nbad);
  90eb8b:	2e1071        	l8ui	a14, a1, 113
  90eb8e:	2d1070        	l8ui	a13, a1, 112
  90eb91:	2c1067        	l8ui	a12, a1, 103
  90eb94:	2b1066        	l8ui	a11, a1, 102
  90eb97:	022a02        	or	a10, a2, a2
  90eb9a:	5bf918        	call8	90cffc <ath_update_aggr_stats$isra$5>
	ath_rate_tx_complete(sc, an, ds, rcs, nframes, nbad);
  90eb9d:	2e1234        	l32i	a14, a1, 208
  90eba0:	2d0a88        	movi	a13, 136
  90eba3:	c0f0      	movi.n	a15, 0
  90eba5:	ad1d      	add.n	a13, a1, a13
  90eba7:	dc10      	mov.n	a12, a1
  90eba9:	db40      	mov.n	a11, a4
  90ebab:	da20      	mov.n	a10, a2
  90ebad:	5bf86b        	call8	90cd5c <ath_rate_tx_complete>
  90ebb0:	d10f      	retw.n
  90ebb2:	000000        	ill
	txq = bf->bf_txq;
  90ebb5:	293220        	l32i	a9, a3, 128
  90ebb8:	8b3e      	l32i.n	a11, a3, 56
  90ebba:	2c0a88        	movi	a12, 136
  90ebbd:	da10      	mov.n	a10, a1
  90ebbf:	291636        	s32i	a9, a1, 216
  90ebc2:	28163c        	s32i	a8, a1, 240
  90ebc5:	5bf885        	call8	90cddc <__adf_os_mem_copy>
  90ebc8:	2a0a88        	movi	a10, 136
  90ebcb:	c3c0      	movi.n	a12, 48
  90ebcd:	db50      	mov.n	a11, a5
  90ebcf:	aa1a      	add.n	a10, a1, a10
  90ebd1:	5bf882        	call8	90cddc <__adf_os_mem_copy>
	if (ds->ds_txstat.ts_flags == HAL_TX_SW_FILTERED) {
  90ebd4:	291067        	l8ui	a9, a1, 103
  90ebd7:	28123c        	l32i	a8, a1, 240
  90ebda:	699e18        	bnei	a9, 128, 90ebf6 <ath_tgt_tx_comp_aggr+0x16a>
		adf_os_assert(0);
  90ebdd:	1268b5        	l32r	a2, 8e8eb4 <memset+0x206c>
  90ebe0:	1b6ab0        	l32r	a11, 8e96a0 <memset+0x2858>
  90ebe3:	222212        	l32i	a2, a2, 72
  90ebe6:	1a6a98        	l32r	a10, 8e9648 <memset+0x2800>
  90ebe9:	0b2000        	callx8	a2
  90ebec:	126919        	l32r	a2, 8e9050 <memset+0x2208>
  90ebef:	0c0200        	memw
  90ebf2:	8220      	l32i.n	a2, a2, 0
		return;
  90ebf4:	d10f      	retw.n
	if (!bf->bf_isaggr) {
  90ebf6:	2a3221        	l32i	a10, a3, 132
  90ebf9:	c2f0      	movi.n	a15, 32
  90ebfb:	0aff01        	and	a15, a15, a10
  90ebfe:	65f132        	bnez	a15, 90ed34 <ath_tgt_tx_comp_aggr+0x2a8>
	ath_update_stats(sc, bf);
  90ec01:	8b3c      	l32i.n	a11, a3, 48
  90ec03:	da20      	mov.n	a10, a2
	struct ath_tx_desc *ds  = bf->bf_lastds;
  90ec05:	26320e        	l32i	a6, a3, 56
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90ec08:	243204        	l32i	a4, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ec0b:	27304d        	l8ui	a7, a3, 77
	ath_update_stats(sc, bf);
  90ec0e:	2f163b        	s32i	a15, a1, 236
  90ec11:	5bf8d9        	call8	90cf78 <ath_update_stats$isra$1>
	ath_rate_tx_complete(sc, an, ds, bf->bf_rcs, 1, 0);
  90ec14:	2f123b        	l32i	a15, a1, 236
  90ec17:	dd50      	mov.n	a13, a5
  90ec19:	c0e1      	movi.n	a14, 1
  90ec1b:	dc60      	mov.n	a12, a6
  90ec1d:	db40      	mov.n	a11, a4
  90ec1f:	022a02        	or	a10, a2, a2
  90ec22:	5bf84e        	call8	90cd5c <ath_rate_tx_complete>
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ec25:	256066        	l8ui	a5, a6, 102
  90ec28:	7f5f02        	bbsi	a5, 31, 90ec2e <ath_tgt_tx_comp_aggr+0x1a2>
  90ec2b:	6000d2        	j	90ed01 <ath_tgt_tx_comp_aggr+0x275>
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ec2e:	29304d        	l8ui	a9, a3, 77
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90ec31:	8734      	l32i.n	a7, a3, 16
  90ec33:	0c9411        	slli	a4, a9, 4
  90ec36:	09440c        	sub	a4, a4, a9
  90ec39:	0e4411        	slli	a4, a4, 2
	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90ec3c:	263086        	l8ui	a6, a3, 134
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ec3f:	254c24        	addi	a5, a4, 36
	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90ec42:	c089      	movi.n	a8, 9
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ec44:	a575      	add.n	a5, a7, a5
	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90ec46:	768b26        	bgeu	a8, a6, 90ec70 <ath_tgt_tx_comp_aggr+0x1e4>
		__stats(sc, txunaggr_xretry);
  90ec49:	242273        	l32i	a4, a2, 0x1cc
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ec4c:	2b3123        	l16ui	a11, a3, 70
		__stats(sc, txunaggr_xretry);
  90ec4f:	b144      	addi.n	a4, a4, 1
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ec51:	055a02        	or	a10, a5, a5
		__stats(sc, txunaggr_xretry);
  90ec54:	242673        	s32i	a4, a2, 0x1cc
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ec57:	0b4b14        	srli	a11, a11, 4
  90ec5a:	5bf8af        	call8	90cf18 <ath_tx_update_baw>
		ath_tx_status_update(sc, bf);
  90ec5d:	db30      	mov.n	a11, a3
  90ec5f:	da20      	mov.n	a10, a2
  90ec61:	5bfac4        	call8	90d774 <ath_tx_status_update>
		ath_bar_tx(sc, tid, bf);
  90ec64:	dc30      	mov.n	a12, a3
  90ec66:	db50      	mov.n	a11, a5
  90ec68:	da20      	mov.n	a10, a2
  90ec6a:	5bfa52        	call8	90d5b4 <ath_bar_tx>
  90ec6d:	d10f      	retw.n
  90ec6f:	002822        	excw
	__stats(sc, txunaggr_compretries);
  90ec72:	6d8b3e        	excw
  90ec75:	b188      	addi.n	a8, a8, 1
	txq = bf->bf_txq;
  90ec77:	263220        	l32i	a6, a3, 128
	if (!bf->bf_lastds->ds_link) {
  90ec7a:	2ab000        	l8ui	a10, a11, 0
	__stats(sc, txunaggr_compretries);
  90ec7d:	28266d        	s32i	a8, a2, 0x1b4
	if (!bf->bf_lastds->ds_link) {
  90ec80:	28b001        	l8ui	a8, a11, 1
  90ec83:	08aa10        	slli	a10, a10, 24
  90ec86:	008811        	slli	a8, a8, 16
  90ec89:	0a8a02        	or	a10, a8, a10
  90ec8c:	28b002        	l8ui	a8, a11, 2
  90ec8f:	088811        	slli	a8, a8, 8
  90ec92:	0a8802        	or	a8, a8, a10
  90ec95:	2ab003        	l8ui	a10, a11, 3
  90ec98:	08a802        	or	a8, a10, a8
  90ec9b:	cd87      	bnez.n	a8, 90ecb6 <ath_tgt_tx_comp_aggr+0x22a>
		__stats(sc, txunaggr_errlast);
  90ec9d:	282272        	l32i	a8, a2, 0x1c8
		bf = ath_buf_toggle(sc, bf, 1);
  90eca0:	db30      	mov.n	a11, a3
		__stats(sc, txunaggr_errlast);
  90eca2:	b188      	addi.n	a8, a8, 1
  90eca4:	282672        	s32i	a8, a2, 0x1c8
		bf = ath_buf_toggle(sc, bf, 1);
  90eca7:	c0c1      	movi.n	a12, 1
  90eca9:	da20      	mov.n	a10, a2
  90ecab:	29163d        	s32i	a9, a1, 244
  90ecae:	5bf9cc        	call8	90d3e0 <ath_buf_toggle>
  90ecb1:	29123d        	l32i	a9, a1, 244
  90ecb4:	d3a0      	mov.n	a3, a10
	ath_tx_set_retry(sc, bf);
  90ecb6:	2a1a80        	movi	a10, 0x180
  90ecb9:	aa2a      	add.n	a10, a2, a10
  90ecbb:	033b02        	or	a11, a3, a3
  90ecbe:	29163d        	s32i	a9, a1, 244
  90ecc1:	5bfb1b        	call8	90d930 <ath_tx_set_retry$isra$12>
	asf_tailq_insert_head(&tid->buf_q, bf, bf_list);
  90ecc4:	29123d        	l32i	a9, a1, 244
  90ecc7:	2b3c24        	addi	a11, a3, 36
  90ecca:	0c9211        	slli	a2, a9, 4
  90eccd:	09280c        	sub	a8, a2, a9
  90ecd0:	0e8811        	slli	a8, a8, 2
  90ecd3:	a878      	add.n	a8, a7, a8
  90ecd5:	2a8214        	l32i	a10, a8, 80
  90ecd8:	9a39      	s32i.n	a10, a3, 36
  90ecda:	c8a3      	beqz.n	a10, 90ece1 <ath_tgt_tx_comp_aggr+0x255>
  90ecdc:	9baa      	s32i.n	a11, a10, 40
  90ecde:	600002        	j	90ece4 <ath_tgt_tx_comp_aggr+0x258>
  90ece1:	2b8615        	s32i	a11, a8, 84
  90ece4:	09220c        	sub	a2, a2, a9
  90ece7:	0e2211        	slli	a2, a2, 2
  90ecea:	a272      	add.n	a2, a7, a2
  90ecec:	244c50        	addi	a4, a4, 80
  90ecef:	232614        	s32i	a3, a2, 80
  90ecf2:	a477      	add.n	a7, a7, a4
  90ecf4:	973a      	s32i.n	a7, a3, 40
	ath_tgt_tx_enqueue(txq, tid);
  90ecf6:	db50      	mov.n	a11, a5
  90ecf8:	2a6c1c        	addi	a10, a6, 28
  90ecfb:	600190        	j	90ee8f <ath_tgt_tx_comp_aggr+0x403>
  90ecfe:	000000        	ill
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ed01:	0c7a11        	slli	a10, a7, 4
	__stats(sc, tx_compunaggr);
  90ed04:	25225e        	l32i	a5, a2, 0x178
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ed07:	07aa0c        	sub	a10, a10, a7
	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ed0a:	2b3123        	l16ui	a11, a3, 70
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ed0d:	0eaa11        	slli	a10, a10, 2
	__stats(sc, tx_compunaggr);
  90ed10:	b155      	addi.n	a5, a5, 1
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ed12:	2aac24        	addi	a10, a10, 36
	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ed15:	0a4a08        	add	a10, a4, a10
	__stats(sc, tx_compunaggr);
  90ed18:	25265e        	s32i	a5, a2, 0x178
	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ed1b:	0b4b14        	srli	a11, a11, 4
  90ed1e:	5bf87e        	call8	90cf18 <ath_tx_update_baw>
	ath_tx_status_update(sc, bf);
  90ed21:	db30      	mov.n	a11, a3
  90ed23:	022a02        	or	a10, a2, a2
  90ed26:	5bfa93        	call8	90d774 <ath_tx_status_update>
	ath_tx_freebuf(sc, bf);
  90ed29:	db30      	mov.n	a11, a3
  90ed2b:	da20      	mov.n	a10, a2
  90ed2d:	5bfa00        	call8	90d530 <ath_tx_freebuf>
  90ed30:	d10f      	retw.n
  90ed32:	000025        	excw
	__stats(sc, tx_compaggr);
  90ed35:	225f28        	s32ri	a2, a5, 160
	asf_tailq_init(&bf_q);
  90ed38:	162eb1        	l32r	a6, 8da7fc <_bss_end+0x3c78ec>
	__stats(sc, tx_compaggr);
  90ed3b:	552526        	call4	9581d4 <_etext+0x48fc3>
  90ed3e:	5f2810        	call12	8d8d80 <_bss_end+0x3c5e70>
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);
  90ed41:	66250a        	bltz	a2, 90f24f <_etext+0x3e>
	asf_tailq_init(&bf_q);
  90ed44:	b8a5      	addi.n	a5, a10, 8
  90ed46:	152516        	l32r	a5, 8d81a0 <_bss_end+0x3c5290>
  90ed49:	2f080f        	excw
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ed4c:	40c8f3        	excw
  90ed4f:	600022        	j	90ed75 <ath_tgt_tx_comp_aggr+0x2e9>
  90ed52:	000025        	excw
	seq_st =  ATH_DS_BA_SEQ(ds);
  90ed55:	113225        	l32r	a1, 8db5ec <_bss_end+0x3c86dc>
  90ed58:	1637ce        	l32r	a6, 8dcc90 <_bss_end+0x3c9d80>
	if (tx_ok && !ATH_DS_TX_BA(ds)) {
  90ed5b:	82d5      	l32i.n	a2, a13, 20
  90ed5d:	807f      	l32i.n	a0, a7, 60
  90ed5f:	9f20      	s32i.n	a15, a2, 0
		__stats(sc, txaggr_babug);
  90ed61:	242269        	l32i	a4, a2, 0x1a4
		adf_os_print("BA Bug?\n");
  90ed64:	1a6ab1        	l32r	a10, 8e9828 <memset+0x29e0>
		__stats(sc, txaggr_babug);
  90ed67:	b144      	addi.n	a4, a4, 1
  90ed69:	242669        	s32i	a4, a2, 0x1a4
		adf_os_print("BA Bug?\n");
  90ed6c:	1468b5        	l32r	a4, 8e9040 <memset+0x21f8>
  90ed6f:	244212        	l32i	a4, a4, 72
  90ed72:	0b4000        	callx8	a4
		ath_tx_comp_aggr_error(sc, bf, tid);
  90ed75:	dc60      	mov.n	a12, a6
  90ed77:	db30      	mov.n	a11, a3
  90ed79:	da20      	mov.n	a10, a2
  90ed7b:	5bfb33        	call8	90da48 <ath_tx_comp_aggr_error>
		return;
  90ed7e:	d10f      	retw.n
  90ed80:	d5f0      	mov.n	a5, a15
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);
  90ed82:	c090      	movi.n	a9, 0
  90ed84:	c0a1      	movi.n	a10, 1
  90ed86:	089a39        	movnez	a10, a9, a8
		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90ed89:	0a0847        	extui	a8, a10, 0, 8
  90ed8c:	281639        	s32i	a8, a1, 228
			ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90ed8f:	280abc        	movi	a8, 188
  90ed92:	081808        	add	a8, a1, a8
  90ed95:	28163a        	s32i	a8, a1, 232
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ed98:	2b3123        	l16ui	a11, a3, 70
  90ed9b:	281237        	l32i	a8, a1, 220
		bf_next  = bf->bf_next;
  90ed9e:	8a3b      	l32i.n	a10, a3, 44
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90eda0:	0b4b14        	srli	a11, a11, 4
  90eda3:	08b90c        	sub	a9, a11, a8
		bf_next  = bf->bf_next;
  90eda6:	2a1638        	s32i	a10, a1, 224
		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90eda9:	2a1239        	l32i	a10, a1, 228
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90edac:	09094f        	extui	a9, a9, 0, 16
  90edaf:	09084b        	extui	a8, a9, 0, 12
		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90edb2:	64a043        	beqz	a10, 90edf9 <ath_tgt_tx_comp_aggr+0x36d>
  90edb5:	c3af      	movi.n	a10, 63
  90edb7:	78a23e        	blt	a10, a8, 90edf9 <ath_tgt_tx_comp_aggr+0x36d>
  90edba:	085812        	srai	a8, a8, 5
  90edbd:	0e8811        	slli	a8, a8, 2
  90edc0:	a818      	add.n	a8, a1, a8
  90edc2:	c0a1      	movi.n	a10, 1
  90edc4:	28821d        	l32i	a8, a8, 116
  90edc7:	009104        	ssl	a9
  90edca:	00a91a        	sll	a9, a10
  90edcd:	789028        	bnone	a9, a8, 90edf9 <ath_tgt_tx_comp_aggr+0x36d>
			__stats(sc, txaggr_compgood);
  90edd0:	282262        	l32i	a8, a2, 0x188
  90edd3:	aa88      	add.n	a8, a8, a10
  90edd5:	282662        	s32i	a8, a2, 0x188
			ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90edd8:	da60      	mov.n	a10, a6
  90edda:	5bf84f        	call8	90cf18 <ath_tx_update_baw>
			ath_tx_status_update_aggr(sc, bf, ds, rcs, 1);
  90eddd:	2d0a88        	movi	a13, 136
  90ede0:	db30      	mov.n	a11, a3
  90ede2:	da20      	mov.n	a10, a2
  90ede4:	c0e1      	movi.n	a14, 1
  90ede6:	ad1d      	add.n	a13, a1, a13
  90ede8:	dc10      	mov.n	a12, a1
  90edea:	5bfa93        	call8	90d838 <ath_tx_status_update_aggr>
			ath_tx_freebuf(sc, bf);
  90eded:	db30      	mov.n	a11, a3
  90edef:	da20      	mov.n	a10, a2
  90edf1:	5bf9cf        	call8	90d530 <ath_tx_freebuf>
  90edf4:	600012        	j	90ee0a <ath_tgt_tx_comp_aggr+0x37e>
  90edf7:	00002d        	excw
			ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90edfa:	0ac02c        	excw
  90edfd:	123aad        	l32r	a2, 8dd8b4 <_bss_end+0x3ca9a4>
  90ee00:	1ddb30        	l32r	a13, 905ac0 <memset+0x1ec78>
  90ee03:	da20      	mov.n	a10, a2
  90ee05:	5bfad6        	call8	90d960 <ath_tx_retry_subframe$isra$14>
			nbad ++;
  90ee08:	b155      	addi.n	a5, a5, 1
  90ee0a:	231238        	l32i	a3, a1, 224
	while (bf) {
  90ee0d:	653f87        	bnez	a3, 90ed98 <ath_tgt_tx_comp_aggr+0x30c>
	ath_update_aggr_stats(sc, ds, nframes, nbad);
  90ee10:	2e1071        	l8ui	a14, a1, 113
  90ee13:	2d1070        	l8ui	a13, a1, 112
  90ee16:	2c1067        	l8ui	a12, a1, 103
  90ee19:	2b1066        	l8ui	a11, a1, 102
  90ee1c:	da20      	mov.n	a10, a2
  90ee1e:	5bf877        	call8	90cffc <ath_update_aggr_stats$isra$5>
	ath_rate_tx_complete(sc, an, ds, rcs, nframes, nbad);
  90ee21:	2e1234        	l32i	a14, a1, 208
  90ee24:	2d0a88        	movi	a13, 136
  90ee27:	dc10      	mov.n	a12, a1
  90ee29:	df50      	mov.n	a15, a5
  90ee2b:	ad1d      	add.n	a13, a1, a13
  90ee2d:	db40      	mov.n	a11, a4
  90ee2f:	da20      	mov.n	a10, a2
  90ee31:	5bf7ca        	call8	90cd5c <ath_rate_tx_complete>
	if (bar) {
  90ee34:	2c1230        	l32i	a12, a1, 192
  90ee37:	c8c5      	beqz.n	a12, 90ee40 <ath_tgt_tx_comp_aggr+0x3b4>
		ath_bar_tx(sc, tid, bar);
  90ee39:	db60      	mov.n	a11, a6
  90ee3b:	da20      	mov.n	a10, a2
  90ee3d:	5bf9dd        	call8	90d5b4 <ath_bar_tx>
	if (!asf_tailq_empty(&bf_q)) {
  90ee40:	23122e        	l32i	a3, a1, 184
  90ee43:	64304b        	beqz	a3, 90ee92 <ath_tgt_tx_comp_aggr+0x406>
		__stats(sc, txaggr_prepends);
  90ee46:	232264        	l32i	a3, a2, 0x190
  90ee49:	25122f        	l32i	a5, a1, 188
  90ee4c:	b133      	addi.n	a3, a3, 1
  90ee4e:	232664        	s32i	a3, a2, 0x190
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90ee51:	0c7211        	slli	a2, a7, 4
  90ee54:	07230c        	sub	a3, a2, a7
  90ee57:	0e3311        	slli	a3, a3, 2
  90ee5a:	a343      	add.n	a3, a4, a3
  90ee5c:	283214        	l32i	a8, a3, 80
  90ee5f:	c889      	beqz.n	a8, 90ee6c <ath_tgt_tx_comp_aggr+0x3e0>
  90ee61:	9850      	s32i.n	a8, a5, 0
  90ee63:	233214        	l32i	a3, a3, 80
  90ee66:	953a      	s32i.n	a5, a3, 40
  90ee68:	600003        	j	90ee6f <ath_tgt_tx_comp_aggr+0x3e3>
  90ee6b:	002536        	minu	a5, a2, a0
  90ee6e:	150727        	l32r	a5, 8d0b0c <_bss_end+0x3bdbfc>
  90ee71:	0c2512        	srai	a5, a12, 2
  90ee74:	352312        	excw
  90ee77:	2e0e77        	s32c1i	a14, a0, 0x1dc
  90ee7a:	11a747        	l32r	a1, 8f8b98 <memset+0x11d50>
  90ee7d:	225c50        	addi	a2, a5, 80
		ath_tgt_tx_enqueue(txq, tid);
  90ee80:	281236        	l32i	a8, a1, 216
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90ee83:	237614        	s32i	a3, a7, 80
  90ee86:	a244      	add.n	a4, a4, a2
  90ee88:	943a      	s32i.n	a4, a3, 40
		ath_tgt_tx_enqueue(txq, tid);
  90ee8a:	db60      	mov.n	a11, a6
  90ee8c:	2a8c1c        	addi	a10, a8, 28
  90ee8f:	5bf852        	call8	90cfd8 <ath_tgt_tx_enqueue$isra$3>
  90ee92:	d10f      	retw.n

0090ee94 <ath_tgt_tx_cleanup>:
{
  90ee94:	6c1004        	entry	a1, 32
  90ee97:	050547        	extui	a5, a5, 0, 8
	bf = asf_tailq_first(&tid->buf_q);
  90ee9a:	864b      	l32i.n	a6, a4, 44
			if (bf->bf_isretried)
  90ee9c:	c170      	movi.n	a7, 16
	while (bf) {
  90ee9e:	600045        	j	90eee7 <ath_tgt_tx_cleanup+0x53>
  90eea1:	008369        	excw
		if (discard_all || bf->bf_isretried) {
  90eea4:	cc54      	bnez.n	a5, 90eeac <ath_tgt_tx_cleanup+0x18>
  90eea6:	286221        	l32i	a8, a6, 132
  90eea9:	787033        	bnone	a7, a8, 90eee0 <ath_tgt_tx_cleanup+0x4c>
			bf_next = asf_tailq_next(bf, bf_list);
  90eeac:	d630      	mov.n	a6, a3
			TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90eeae:	834b      	l32i.n	a3, a4, 44
  90eeb0:	c930      	beqz.n	a3, 90eec4 <ath_tgt_tx_cleanup+0x30>
  90eeb2:	8839      	l32i.n	a8, a3, 36
  90eeb4:	893a      	l32i.n	a9, a3, 40
  90eeb6:	c883      	beqz.n	a8, 90eebd <ath_tgt_tx_cleanup+0x29>
  90eeb8:	998a      	s32i.n	a9, a8, 40
  90eeba:	600001        	j	90eebf <ath_tgt_tx_cleanup+0x2b>
  90eebd:	994c      	s32i.n	a9, a4, 48
  90eebf:	893a      	l32i.n	a9, a3, 40
  90eec1:	289600        	s32i	a8, a9, 0
			if (bf->bf_isretried)
  90eec4:	283221        	l32i	a8, a3, 132
  90eec7:	78700a        	bnone	a7, a8, 90eed5 <ath_tgt_tx_cleanup+0x41>
				ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90eeca:	2b3123        	l16ui	a11, a3, 70
  90eecd:	da40      	mov.n	a10, a4
  90eecf:	0b4b14        	srli	a11, a11, 4
  90eed2:	5bf811        	call8	90cf18 <ath_tx_update_baw>
			ath_tx_freebuf(sc, bf);
  90eed5:	db30      	mov.n	a11, a3
  90eed7:	da20      	mov.n	a10, a2
  90eed9:	5bf995        	call8	90d530 <ath_tx_freebuf>
			continue;
  90eedc:	600007        	j	90eee7 <ath_tgt_tx_cleanup+0x53>
  90eedf:	00186a        	excw
		bf->bf_comp = ath_tgt_tx_comp_normal;
  90eee2:	aa98      	add.n	a8, a9, a10
  90eee4:	6fd630        	bgeui	a13, 6, 90ef18 <ath_tgt_tx_cleanup+0x84>
	while (bf) {
  90eee7:	656fb7        	bnez	a6, 90eea2 <ath_tgt_tx_cleanup+0xe>
	tid->paused =1;
  90eeea:	c031      	movi.n	a3, 1
  90eeec:	234434        	s8i	a3, a4, 52
	while (tid->baw_head != tid->baw_tail) {
  90eeef:	8a44      	l32i.n	a10, a4, 16
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
  90eef1:	c061      	movi.n	a6, 1
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90eef3:	c7bf      	movi.n	a11, -1
  90eef5:	60003d        	j	90ef36 <ath_tgt_tx_cleanup+0xa2>
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
  90eef8:	085312        	srai	a3, a8, 5
  90eefb:	0e3311        	slli	a3, a3, 2
  90eefe:	a343      	add.n	a3, a4, a3
  90ef00:	8535      	l32i.n	a5, a3, 20
  90ef02:	008104        	ssl	a8
  90ef05:	00691a        	sll	a9, a6
  90ef08:	795018        	bnone	a5, a9, 90ef24 <ath_tgt_tx_cleanup+0x90>
			tid->incomp++;
  90ef0b:	2c4037        	l8ui	a12, a4, 55
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ef0e:	09b903        	xor	a9, a11, a9
			tid->incomp++;
  90ef11:	b1cc      	addi.n	a12, a12, 1
  90ef13:	2c4437        	s8i	a12, a4, 55
			tid->flag |= TID_CLEANUP_INPROGRES;
  90ef16:	2c4036        	l8ui	a12, a4, 54
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ef19:	059901        	and	a9, a9, a5
			tid->flag |= TID_CLEANUP_INPROGRES;
  90ef1c:	0c6c02        	or	a12, a6, a12
  90ef1f:	2c4436        	s8i	a12, a4, 54
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ef22:	9935      	s32i.n	a9, a3, 20
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90ef24:	234102        	l16ui	a3, a4, 4
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90ef27:	b188      	addi.n	a8, a8, 1
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90ef29:	b133      	addi.n	a3, a3, 1
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90ef2b:	080846        	extui	a8, a8, 0, 7
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90ef2e:	03034b        	extui	a3, a3, 0, 12
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90ef31:	9843      	s32i.n	a8, a4, 12
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90ef33:	234502        	s16i	a3, a4, 4
	while (tid->baw_head != tid->baw_tail) {
  90ef36:	8843      	l32i.n	a8, a4, 12
  90ef38:	7a89bc        	bne	a8, a10, 90eef8 <ath_tgt_tx_cleanup+0x64>
	if (!(tid->flag & TID_CLEANUP_INPROGRES)) {
  90ef3b:	234036        	l8ui	a3, a4, 54
  90ef3e:	7f3f06        	bbsi	a3, 31, 90ef48 <ath_tgt_tx_cleanup+0xb4>
		ath_aggr_resume_tid(sc, tid);
  90ef41:	db40      	mov.n	a11, a4
  90ef43:	da20      	mov.n	a10, a2
  90ef45:	5bfe95        	call8	90e99c <ath_aggr_resume_tid>
  90ef48:	d10f      	retw.n
	...

0090ef4c <ath_bar_tx_comp>:
{
  90ef4c:	6c1006        	entry	a1, 48
	tid = &an->tid[bf->bf_tidno];
  90ef4f:	2a304d        	l8ui	a10, a3, 77
	struct ath_tx_desc *ds = bf->bf_lastds;
  90ef52:	893e      	l32i.n	a9, a3, 56
	tid = &an->tid[bf->bf_tidno];
  90ef54:	0ca411        	slli	a4, a10, 4
  90ef57:	0a440c        	sub	a4, a4, a10
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ef5a:	269066        	l8ui	a6, a9, 102
	an = (struct ath_node_target *)bf->bf_node;
  90ef5d:	8534      	l32i.n	a5, a3, 16
	tid = &an->tid[bf->bf_tidno];
  90ef5f:	0e4411        	slli	a4, a4, 2
  90ef62:	244c24        	addi	a4, a4, 36
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ef65:	060640        	extui	a6, a6, 0, 1
	tid = &an->tid[bf->bf_tidno];
  90ef68:	a454      	add.n	a4, a5, a4
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ef6a:	6460d3        	beqz	a6, 90f041 <ath_bar_tx_comp+0xf5>
	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
  90ef6d:	263086        	l8ui	a6, a3, 134
  90ef70:	c089      	movi.n	a8, 9
  90ef72:	768b6a        	bgeu	a8, a6, 90efe0 <ath_bar_tx_comp+0x94>
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
  90ef75:	0ca811        	slli	a8, a10, 4
  90ef78:	0a880c        	sub	a8, a8, a10
  90ef7b:	0e8811        	slli	a8, a8, 2
  90ef7e:	a858      	add.n	a8, a5, a8
  90ef80:	268027        	l8ui	a6, a8, 39
	tid->flag &= ~TID_AGGR_ENABLED;
  90ef83:	c79d      	movi.n	a9, -3
  90ef85:	0c6c11        	slli	a12, a6, 4
  90ef88:	06cc0c        	sub	a12, a12, a6
  90ef8b:	0ecc11        	slli	a12, a12, 2
  90ef8e:	ac56      	add.n	a6, a5, a12
  90ef90:	28605a        	l8ui	a8, a6, 90
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
  90ef93:	2ccc24        	addi	a12, a12, 36
	tid->flag &= ~TID_AGGR_ENABLED;
  90ef96:	098801        	and	a8, a8, a9
  90ef99:	28645a        	s8i	a8, a6, 90
	ath_tgt_tx_cleanup(sc, an, tid, 1);
  90ef9c:	ac5c      	add.n	a12, a5, a12
  90ef9e:	db50      	mov.n	a11, a5
  90efa0:	c0d1      	movi.n	a13, 1
  90efa2:	022a02        	or	a10, a2, a2
  90efa5:	5bffbb        	call8	90ee94 <ath_tgt_tx_cleanup>
	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
  90efa8:	25500c        	l8ui	a5, a5, 12
	wmi_event(sc->tgt_wmi_handle,
  90efab:	1b6ab2        	l32r	a11, 8e9a74 <memset+0x2c2c>
	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
  90efae:	251400        	s8i	a5, a1, 0
	wmi_delba.tidno = tid->tidno;
  90efb1:	8569      	l32i.n	a5, a6, 36
	wmi_event(sc->tgt_wmi_handle,
  90efb3:	8a23      	l32i.n	a10, a2, 12
	wmi_delba.tidno = tid->tidno;
  90efb5:	251401        	s8i	a5, a1, 1
	wmi_delba.initiator = 1;
  90efb8:	c051      	movi.n	a5, 1
  90efba:	251402        	s8i	a5, a1, 2
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;
  90efbd:	251403        	s8i	a5, a1, 3
	__stats(sc, txbar_xretry);
  90efc0:	252279        	l32i	a5, a2, 0x1e4
	wmi_event(sc->tgt_wmi_handle,
  90efc3:	c0d4      	movi.n	a13, 4
	__stats(sc, txbar_xretry);
  90efc5:	b155      	addi.n	a5, a5, 1
	wmi_event(sc->tgt_wmi_handle,
  90efc7:	011c02        	or	a12, a1, a1
	__stats(sc, txbar_xretry);
  90efca:	252679        	s32i	a5, a2, 0x1e4
	wmi_event(sc->tgt_wmi_handle,
  90efcd:	5be4b0        	call8	908290 <wmi_event>
		ath_tgt_tid_drain(sc, tid);
  90efd0:	db40      	mov.n	a11, a4
  90efd2:	da20      	mov.n	a10, a2
		bf->bf_comp = NULL;
  90efd4:	c040      	movi.n	a4, 0
		ath_tgt_tid_drain(sc, tid);
  90efd6:	5bfaca        	call8	90db00 <ath_tgt_tid_drain>
		bf->bf_comp = NULL;
  90efd9:	943f      	s32i.n	a4, a3, 60
  90efdb:	60006b        	j	90f04a <ath_bar_tx_comp+0xfe>
  90efde:	000024        	excw
	__stats(sc, txbar_compretries);
  90efe1:	227a25        	movi	a2, 0x725
	if (!bf->bf_lastds->ds_link) {
  90efe4:	9000      	s32i.n	a0, a0, 0
	__stats(sc, txbar_compretries);
  90efe6:	b144      	addi.n	a4, a4, 1
  90efe8:	24267a        	s32i	a4, a2, 0x1e8
	if (!bf->bf_lastds->ds_link) {
  90efeb:	249001        	l8ui	a4, a9, 1
  90efee:	085510        	slli	a5, a5, 24
  90eff1:	004411        	slli	a4, a4, 16
  90eff4:	054502        	or	a5, a4, a5
  90eff7:	249002        	l8ui	a4, a9, 2
  90effa:	084411        	slli	a4, a4, 8
  90effd:	054402        	or	a4, a4, a5
  90f000:	259003        	l8ui	a5, a9, 3
  90f003:	045402        	or	a4, a5, a4
  90f006:	cd42      	bnez.n	a4, 90f01c <ath_bar_tx_comp+0xd0>
		__stats(sc, txbar_errlast);
  90f008:	24227b        	l32i	a4, a2, 0x1ec
		bf = ath_buf_toggle(sc, bf, 1);
  90f00b:	db30      	mov.n	a11, a3
		__stats(sc, txbar_errlast);
  90f00d:	b144      	addi.n	a4, a4, 1
  90f00f:	24267b        	s32i	a4, a2, 0x1ec
		bf = ath_buf_toggle(sc, bf, 1);
  90f012:	c0c1      	movi.n	a12, 1
  90f014:	022a02        	or	a10, a2, a2
  90f017:	5bf8f2        	call8	90d3e0 <ath_buf_toggle>
  90f01a:	d3a0      	mov.n	a3, a10
	bf->bf_lastds->ds_link = 0;
  90f01c:	843e      	l32i.n	a4, a3, 56
  90f01e:	c050      	movi.n	a5, 0
	ath_tx_set_retry(sc, bf);
  90f020:	2a1a80        	movi	a10, 0x180
  90f023:	db30      	mov.n	a11, a3
  90f025:	aa2a      	add.n	a10, a2, a10
	bf->bf_lastds->ds_link = 0;
  90f027:	254400        	s8i	a5, a4, 0
  90f02a:	254401        	s8i	a5, a4, 1
  90f02d:	254402        	s8i	a5, a4, 2
  90f030:	254403        	s8i	a5, a4, 3
	ath_tx_set_retry(sc, bf);
  90f033:	5bfa3f        	call8	90d930 <ath_tx_set_retry$isra$12>
	ath_tgt_txq_add_ucast(sc, bf);
  90f036:	db30      	mov.n	a11, a3
  90f038:	da20      	mov.n	a10, a2
  90f03a:	5bf794        	call8	90ce8c <ath_tgt_txq_add_ucast>
  90f03d:	d10f      	retw.n
  90f03f:	0000db        	excw
	ath_aggr_resume_tid(sc, tid);
  90f042:	40da20        	excw
  90f045:	5bfe55        	call8	90e99c <ath_aggr_resume_tid>
	bf->bf_comp = NULL;
  90f048:	963f      	s32i.n	a6, a3, 60
	ath_buf_comp(sc, bf);
  90f04a:	db30      	mov.n	a11, a3
  90f04c:	da20      	mov.n	a10, a2
  90f04e:	5bf929        	call8	90d4f4 <ath_buf_comp>
  90f051:	d10f      	retw.n
	...

0090f054 <ath_pci_suspend>:
	adf_os_free_intr(sc->sc_dev);
}

static void
ath_pci_suspend(adf_drv_handle_t hdl, adf_os_pm_t pm)
{
  90f054:	6c1004        	entry	a1, 32
  90f057:	d10f      	retw.n
  90f059:	000000        	ill

0090f05c <ath_pci_resume>:
}

static void
ath_pci_resume(adf_drv_handle_t hdl)
{
  90f05c:	6c1004        	entry	a1, 32
  90f05f:	d10f      	retw.n
  90f061:	000000        	ill

0090f064 <ath_pci_remove>:
{
  90f064:	6c1004        	entry	a1, 32
	ath_detach((struct ath_softc_tgt *)hdl);
  90f067:	da20      	mov.n	a10, a2
  90f069:	5bea6b        	call8	909a18 <ath_detach>
}

static inline void
adf_os_free_intr(adf_os_device_t osdev)
{
    __adf_os_free_intr(osdev);
  90f06c:	2a2246        	l32i	a10, a2, 0x118
  90f06f:	5beefc        	call8	90ac60 <__adf_os_free_intr>
  90f072:	d10f      	retw.n

0090f074 <init_ath_pci>:

static adf_drv_info_t ath_drv_info = adf_os_pci_set_drv_info(ath_pci_tgt,&ath_pci_id_table[0], ath_pci_probe, ath_pci_remove, ath_pci_suspend, ath_pci_resume);

a_int32_t
init_ath_pci(void)
{
  90f074:	6c1004        	entry	a1, 32
 * @return status of operation
 */
static inline a_status_t
adf_net_register_drv(adf_drv_info_t *drv)
{
    return(__adf_net_register_drv(drv));
  90f077:	1a6ab3        	l32r	a10, 8e9b44 <memset+0x2cfc>
  90f07a:	580061        	call8	90f200 <__adf_net_register_drv>
	return adf_net_register_drv( &ath_drv_info );
}
  90f07d:	d2a0      	mov.n	a2, a10
  90f07f:	d10f      	retw.n
  90f081:	000000        	ill

0090f084 <ath_pci_probe>:
{
  90f084:	6c1004        	entry	a1, 32
}

static inline int
__adf_os_pci_config_write8(adf_os_device_t osdev, int offset, a_uint8_t val)
{
    wlan_pci_config_write(offset, val, 1);
  90f087:	c0c1      	movi.n	a12, 1
  90f089:	2b0a20        	movi	a11, 32
  90f08c:	2a0a0c        	movi	a10, 12
  90f08f:	5bea73        	call8	909a5c <wlan_pci_config_write>
  90f092:	c0c1      	movi.n	a12, 1
  90f094:	2b0aa8        	movi	a11, 168
  90f097:	c0ad      	movi.n	a10, 13
  90f099:	5bea70        	call8	909a5c <wlan_pci_config_write>
    return A_ALLOCRAM(size);
  90f09c:	1668b5        	l32r	a6, 8e9370 <memset+0x2528>
  90f09f:	136ab4        	l32r	a3, 8e9b70 <memset+0x2d28>
  90f0a2:	226252        	l32i	a2, a6, 0x148
  90f0a5:	db30      	mov.n	a11, a3
  90f0a7:	c0a0      	movi.n	a10, 0
  90f0a9:	0b2000        	callx8	a2
  90f0ac:	d2a0      	mov.n	a2, a10
	if (sc == NULL) {
  90f0ae:	ccaa      	bnez.n	a10, 90f0bc <ath_pci_probe+0x38>
		adf_os_print("ath_pci: no memory for device state\n");
  90f0b0:	236212        	l32i	a3, a6, 72
  90f0b3:	1a6ab5        	l32r	a10, 8e9b88 <memset+0x2d40>
  90f0b6:	0b3000        	callx8	a3
		goto bad2;
  90f0b9:	d10f      	retw.n
  90f0bb:	008864        	excw
	A_MEMSET(buf, b, size);
  90f0be:	dc30      	mov.n	a12, a3
  90f0c0:	c0b0      	movi.n	a11, 0
  90f0c2:	0b8000        	callx8	a8
	sc->aps_sc.sc_invalid = 1;
  90f0c5:	232d01        	addmi	a3, a2, 0x100
  90f0c8:	283024        	l8ui	a8, a3, 36
  90f0cb:	29fa80        	movi	a9, -128
  90f0ce:	098802        	or	a8, a8, a9
  90f0d1:	283424        	s8i	a8, a3, 36
	adf_os_print("ath_pci_probe %x\n",id->device);
  90f0d4:	2b4201        	l32i	a11, a4, 4
  90f0d7:	266212        	l32i	a6, a6, 72
  90f0da:	1a6ab6        	l32r	a10, 8e9bb4 <memset+0x2d6c>
  90f0dd:	0b6000        	callx8	a6
	if (ath_tgt_attach(id->device, &sc->aps_sc, osdev) != 0)
  90f0e0:	8a41      	l32i.n	a10, a4, 4
  90f0e2:	dc50      	mov.n	a12, a5
  90f0e4:	db20      	mov.n	a11, a2
  90f0e6:	5be935        	call8	9095bc <ath_tgt_attach>
  90f0e9:	cda1      	bnez.n	a10, 90f0fe <ath_pci_probe+0x7a>
	sc->aps_sc.sc_invalid = 0;
  90f0eb:	263024        	l8ui	a6, a3, 36
    return __adf_os_setup_intr(osdev, fn);
  90f0ee:	1b69bf        	l32r	a11, 8e97ec <memset+0x29a4>
  90f0f1:	060646        	extui	a6, a6, 0, 7
  90f0f4:	263424        	s8i	a6, a3, 36
  90f0f7:	da50      	mov.n	a10, a5
  90f0f9:	5beed6        	call8	90ac54 <__adf_os_setup_intr>
  90f0fc:	d10f      	retw.n
	return NULL;
  90f0fe:	c020      	movi.n	a2, 0
}
  90f100:	d10f      	retw.n
	...

0090f104 <exit_ath_pci>:

void
exit_ath_pci(void)
{
  90f104:	6c1004        	entry	a1, 32
 * @see adf_net_register_drv()
 */
static inline void
adf_net_unregister_drv(a_uint8_t *drv_name)
{
    __adf_net_unregister_drv(drv_name);
  90f107:	1a6ab7        	l32r	a10, 8e9be4 <memset+0x2d9c>
  90f10a:	580040        	call8	90f20c <__adf_net_unregister_drv>
  90f10d:	d10f      	retw.n
	...

0090f110 <ar5416AttachRateTables>:

#endif //#ifdef MAGPIE_MERLIN // MAGPIE_MERLIN

void
ar5416AttachRateTables(struct atheros_softc *sc)
{
  90f110:	6c1004        	entry	a1, 32
    sc->hwRateTable[WIRELESS_MODE_11NG]  = &ar5416_11ngRateTable;
  90f113:	186ab8        	l32r	a8, 8e9bf4 <memset+0x2dac>
  90f116:	9822      	s32i.n	a8, a2, 8
#ifdef ATH_SUPPORT_A_MODE
    sc->hwRateTable[WIRELESS_MODE_11NA]  = &ar5416_11naRateTable;
  90f118:	186ab9        	l32r	a8, 8e9bfc <memset+0x2db4>
  90f11b:	9821      	s32i.n	a8, a2, 4
  90f11d:	d10f      	retw.n
	...

0090f120 <io32_rmw>:
{
  90f120:	6c1006        	entry	a1, 48
  90f123:	0c0200        	memw
  90f126:	9210      	s32i.n	a2, a1, 0
	val = ioread32(addr);
  90f128:	0c0200        	memw
  90f12b:	8810      	l32i.n	a8, a1, 0
	return *(const volatile uint32_t *) addr;
  90f12d:	0c0200        	memw
  90f130:	8980      	l32i.n	a9, a8, 0
	val &= ~clr;
  90f132:	c78f      	movi.n	a8, -1
  90f134:	048403        	xor	a4, a8, a4
  90f137:	094401        	and	a4, a4, a9
	iowrite32(addr, val);
  90f13a:	0c0200        	memw
  90f13d:	8810      	l32i.n	a8, a1, 0
	val |= set;
  90f13f:	034402        	or	a4, a4, a3
	*(volatile uint32_t *) addr = b;
  90f142:	0c0200        	memw
  90f145:	9480      	s32i.n	a4, a8, 0
  90f147:	d10f      	retw.n
  90f149:	000000        	ill

0090f14c <ieee80211_tgt_crypto_encap>:

a_status_t
ieee80211_tgt_crypto_encap(struct ieee80211_frame *wh,
			   struct ieee80211_node_target *ni,
			   a_uint8_t keytype)
{
  90f14c:	6c1004        	entry	a1, 32
	a_uint16_t tmp;
	a_uint16_t offset = IEEE80211_WLAN_HDR_LEN;
	a_uint8_t b1, b2;
	struct ieee80211_qosframe_addr4 *wh_mesh;

	if (IEEE80211_QOS_HAS_SEQ(wh))
  90f14f:	282000        	l8ui	a8, a2, 0
  90f152:	290a8c        	movi	a9, 140
  90f155:	098801        	and	a8, a8, a9
  90f158:	290a88        	movi	a9, 136
		offset += 4;  // pad for 4 byte alignment
  90f15b:	09880c        	sub	a8, a8, a9
  90f15e:	c1a8      	movi.n	a10, 24
  90f160:	c19c      	movi.n	a9, 28
  90f162:	08a939        	movnez	a9, a10, a8
  90f165:	d890      	mov.n	a8, a9

	/* set the offset to 32 if the mesh control field is present */
	wh_mesh = (struct ieee80211_qosframe_addr4 *)wh;
	if (wh_mesh->i_qos[1] & 0x01)
  90f167:	29201f        	l8ui	a9, a2, 31
		offset = 32;
  90f16a:	c2a0      	movi.n	a10, 32
	if (wh_mesh->i_qos[1] & 0x01)
  90f16c:	090940        	extui	a9, a9, 0, 1
		offset = 32;
  90f16f:	09a839        	movnez	a8, a10, a9
{
  90f172:	040447        	extui	a4, a4, 0, 8

	iv = (a_uint8_t *) wh;
	iv = iv + offset;
  90f175:	a822      	add.n	a2, a2, a8

	switch (keytype) {
  90f177:	684206        	beqi	a4, 2, 90f181 <ieee80211_tgt_crypto_encap+0x35>
  90f17a:	684333        	beqi	a4, 3, 90f1b1 <ieee80211_tgt_crypto_encap+0x65>
  90f17d:	60007a        	j	90f1fb <ieee80211_tgt_crypto_encap+0xaf>
  90f180:	002831        	excw
	case CRYPTO_KEY_TYPE_AES:
		ni->ni_iv16++;
  90f183:	0db188        	excw
  90f186:	08084f        	extui	a8, a8, 0, 16
  90f189:	28350d        	s16i	a8, a3, 26
		if (ni->ni_iv16 == 0)
  90f18c:	cc84      	bnez.n	a8, 90f194 <ieee80211_tgt_crypto_encap+0x48>
		{
			ni->ni_iv32++;
  90f18e:	8937      	l32i.n	a9, a3, 28
  90f190:	b199      	addi.n	a9, a9, 1
  90f192:	9937      	s32i.n	a9, a3, 28
		}

		*iv++ = (a_uint8_t) ni->ni_iv16;
  90f194:	282400        	s8i	a8, a2, 0
		*iv++ = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f197:	28310d        	l16ui	a8, a3, 26
		*iv++ = 0x00;
  90f19a:	c040      	movi.n	a4, 0
		*iv++ = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f19c:	088814        	srli	a8, a8, 8
  90f19f:	282401        	s8i	a8, a2, 1
		*iv++ |= 0x20;
  90f1a2:	282003        	l8ui	a8, a2, 3
		*iv++ = 0x00;
  90f1a5:	242402        	s8i	a4, a2, 2
		*iv++ |= 0x20;
  90f1a8:	c240      	movi.n	a4, 32
  90f1aa:	048802        	or	a8, a8, a4
  90f1ad:	600030        	j	90f1e1 <ieee80211_tgt_crypto_encap+0x95>
  90f1b0:	002831        	excw
		tmp = (a_uint16_t) (ni->ni_iv32 >> 16);
		*iv++ = (a_uint8_t) tmp;
		*iv = (a_uint8_t) (tmp >> 8);
		break;
	case CRYPTO_KEY_TYPE_TKIP:
		ni->ni_iv16++;
  90f1b3:	0db188        	excw
  90f1b6:	08084f        	extui	a8, a8, 0, 16
  90f1b9:	28350d        	s16i	a8, a3, 26
		if (ni->ni_iv16 == 0)
  90f1bc:	cc84      	bnez.n	a8, 90f1c4 <ieee80211_tgt_crypto_encap+0x78>
		{
			ni->ni_iv32++;
  90f1be:	8937      	l32i.n	a9, a3, 28
  90f1c0:	b199      	addi.n	a9, a9, 1
  90f1c2:	9937      	s32i.n	a9, a3, 28
		}

		b1 = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f1c4:	088814        	srli	a8, a8, 8
		b2 = (b1 | 0x20) & 0x7f;

		*iv++ = b1;
  90f1c7:	282400        	s8i	a8, a2, 0
		b2 = (b1 | 0x20) & 0x7f;
  90f1ca:	c290      	movi.n	a9, 32
  90f1cc:	080846        	extui	a8, a8, 0, 7
  90f1cf:	098802        	or	a8, a8, a9
		*iv++ = b2;
  90f1d2:	282401        	s8i	a8, a2, 1

		*iv++ = (a_uint8_t) ni->ni_iv16;
  90f1d5:	24310d        	l16ui	a4, a3, 26
		*iv++ |= 0x20;
  90f1d8:	282003        	l8ui	a8, a2, 3
		*iv++ = (a_uint8_t) ni->ni_iv16;
  90f1db:	242402        	s8i	a4, a2, 2
		*iv++ |= 0x20;
  90f1de:	098802        	or	a8, a8, a9
  90f1e1:	282403        	s8i	a8, a2, 3

		tmp = (a_uint16_t) ni->ni_iv32;
  90f1e4:	8837      	l32i.n	a8, a3, 28
		*iv++ = (a_uint8_t) tmp;
  90f1e6:	282404        	s8i	a8, a2, 4
		*iv++ = (a_uint8_t) (tmp >> 8);
  90f1e9:	088847        	extui	a8, a8, 8, 8
  90f1ec:	282405        	s8i	a8, a2, 5

		tmp = (a_uint16_t) (ni->ni_iv32 >> 16);
  90f1ef:	23310e        	l16ui	a3, a3, 28
		*iv++ = (a_uint8_t) tmp;
  90f1f2:	232406        	s8i	a3, a2, 6
		*iv = (a_uint8_t) (tmp >> 8);
  90f1f5:	038314        	srli	a3, a3, 8
  90f1f8:	232407        	s8i	a3, a2, 7

#undef CRYPTO_KEY_TYPE_TKIP
#undef CRYPTO_KEY_TYPE_AES
#undef CRYPTO_KEY_TYPE_WAPI
#undef IEEE80211_WLAN_HDR_LEN
}
  90f1fb:	c021      	movi.n	a2, 1
  90f1fd:	d10f      	retw.n
	...

0090f200 <__adf_net_register_drv>:
 *
 * @return a_status_t
 */
a_status_t
__adf_net_register_drv(adf_drv_info_t *drv)
{
  90f200:	6c1004        	entry	a1, 32
    wlan_pci_register_drv(drv);
  90f203:	da20      	mov.n	a10, a2
  90f205:	5bea12        	call8	909a50 <wlan_pci_register_drv>
    return A_STATUS_OK;
}
  90f208:	c020      	movi.n	a2, 0
  90f20a:	d10f      	retw.n

0090f20c <__adf_net_unregister_drv>:
 * @brief unregister the driver from the shim
 * @param[in] name
 */
void
__adf_net_unregister_drv(a_uint8_t *name)
{
  90f20c:	6c1004        	entry	a1, 32
  90f20f:	d10f      	retw.n
