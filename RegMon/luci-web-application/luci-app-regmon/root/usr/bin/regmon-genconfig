#!/usr/bin/lua

require("nixio")
require("luci.model.uci")

function print_metric ( name, index, phy )
    return "\t<Metric \"" .. name .. phy .. "\">\n"
--           .. "\t\tType \"gauge\"\n"
           .. "\t\tType \"derive\"\n"
           .. "\t\tInstance \"" .. name .. phy .. "\"\n"
           .. "\t\tValueFrom " .. index .. "\n"
           .. "\t</Metric>\n"
end


local uci = luci.model.uci.cursor()

-- regmon options
local startindex = uci.get("regmon", "regmon", "startindex") or 3
local metrics = uci.get("regmon", "regmon", "metrics") or {}
local regmon_paths = uci.get("regmon", "regmon", "regmonpath")
            or { "/sys/kernel/debug/ieee80211/phy0/regmon" }
-- local regmon_path = { "/tmp" }
local use_sys_time = uci.get("regmon", "regmon", "usesystime") or false
local time_from = 0
if ( use_sys_time == '0' ) then
    time_from = uci.get("remgon", "regmon", "timefrom") or 0
end
local abs_count_metric = "abs_count"
local abs_count_field = uci.get ( "regmon", "regmon", "absolutecounter" ) or 2

-- collectd options
local interval = uci.get("regmon", "collectd", "interval") or 5
local enable_collectd_log = uci.get("regmon", "collectd", "enablelog") or false

if (enable_collectd_log == '1') then
    nixio.stdout:write("LoadPlugin logfile\n")
    nixio.stdout:write("<Plugin logfile>\n")
    nixio.stdout:write("\tLogLevel debug\n")
    nixio.stdout:write("\tFile \"/tmp/collectd.log\"\n")
    nixio.stdout:write("\tTimestamp true\n")
    nixio.stdout:write("\tPrintSeverity false\n")
    nixio.stdout:write("</Plugin>\n")
    nixio.stdout:write("\n")
end

nixio.stdout:write("LoadPlugin tail_csv\n")

nixio.stdout:write("\n")

nixio.stdout:write("<Plugin \"tail_csv\">\n")

nixio.stdout:write("\n")

for index,regmon_path in ipairs ( regmon_paths ) do

    nixio.stdout:write( print_metric ( abs_count_metric, abs_count_field, index - 1) )
    for i,m in ipairs(metrics) do
        local metric = print_metric(m, i + startindex - 1, index - 1)
        nixio.stdout:write(metric)
    end

    nixio.stdout:write("\n")
end

for index,regmon_path in ipairs ( regmon_paths ) do

    nixio.stdout:write("\t<File \"" .. regmon_path .. "/register_log" .. "\">\n")

    nixio.stdout:write("\t\tInstance \"regmon" .. (index-1) .. "\"\n")
    nixio.stdout:write("\t\tInterval " .. interval .. "\n")

    nixio.stdout:write("\t\tCollect ")
    nixio.stdout:write( "\"" .. abs_count_metric .. ( index - 1 ) .. "\"")
    for _,m in ipairs(metrics) do
        nixio.stdout:write(" \"" .. m .. ( index - 1 ) .. "\"")
    end
    nixio.stdout:write("\n")

    -- use cvs field number 0 as timestamp in rrd
    if ( not use_system_time ) then
        nixio.stdout:write("\t\tTimeFrom " .. time_from .. "\n")
    end

    nixio.stdout:write("\t</File>\n")

    nixio.stdout:write("\n")
end

nixio.stdout:write("</Plugin>\n")
