--- a/drivers/net/wireless/ath/ath5k/base.c
+++ b/drivers/net/wireless/ath/ath5k/base.c
@@ -246,6 +246,155 @@ static const struct ath_ops ath5k_common
 	.write = ath5k_iowrite32,
 };
 
+#ifdef CPTCFG_ATH5K_DEBUG
+/* RegMon reads from userspace */
+static ssize_t
+reg_log_read(struct file *file, char __user *userbuf, size_t count, loff_t *ppos)
+{
+	struct ath5k_hw *ah = file->private_data;
+	char buf[256];
+	size_t len, n, ret;
+	size_t sum = 0;
+	loff_t pos;
+	u8 i;
+
+	spin_lock_bh(&ah->reg_lock);
+
+	while (ah->reg_last != ah->reg_current && count > 0) {
+		spin_unlock_bh(&ah->reg_lock);
+
+		/* first entry host time, second wifi cards mac time */
+		len = scnprintf(buf, sizeof(buf), "%.19lld %.8x%.8x",
+				ah->reg_hosttime[ah->reg_last],
+				(unsigned int) ah->reg_log[0][ah->reg_last],
+				(unsigned int) ah->reg_log[1][ah->reg_last]);
+
+		/* print register values */
+		for (i = 2; i < MAX_REG_COUNT; i++) {
+			len += scnprintf(buf + len, sizeof(buf) - len,
+					 " %.8x", (unsigned int)
+					 ah->reg_log[i][ah->reg_last]);
+		}
+
+		/* add line wrap */
+		len += scnprintf(buf + len, sizeof(buf) - len, "\n");
+
+		n = 0;
+		if (*ppos < len && count > 0) {
+			n = count;
+			pos = *ppos;
+
+			if (pos < 0)
+				return -EINVAL;
+
+			if (n > len - pos)
+				n = len - pos;
+
+			ret = copy_to_user(userbuf, buf + pos, n);
+			if (ret == n)
+				return -EFAULT;
+
+			n -= ret;
+			*ppos = pos + n;
+		}
+
+		spin_lock_bh(&ah->reg_lock);
+
+		sum += n;
+		count -= n;
+		if (count <= 0)
+			break;
+
+		userbuf += n;
+		*ppos = 0;
+
+		if (++ah->reg_last >= REG_LOG_ROWS - 1)
+			ah->reg_last = 0;
+	}
+
+	spin_unlock_bh(&ah->reg_lock);
+
+	return sum;
+}
+
+/* RegMon file handles */
+static const struct file_operations reg_log_ops = {
+	.read = reg_log_read,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
+/* Register RegMons periodic readings via htimer */
+static enum hrtimer_restart read_registers(struct hrtimer *hrtimer)
+{
+	struct hrtimer_mod  *hrtm = container_of(hrtimer, struct hrtimer_mod, timer);
+	struct ath5k_hw *ah = container_of(hrtm, struct ath5k_hw, hrtm);
+	static struct timespec ts;
+	int i;
+
+	if (ah->shutdown)
+		return HRTIMER_NORESTART;
+
+	/* get current kernel time per row */
+	getnstimeofday(&ts);
+	ah->reg_hosttime[ah->reg_current] = timespec_to_ns(&ts);
+
+	/* get upper 32-bit tsf timestamp from card */
+	ah->reg_log[0][ah->reg_current] = ath5k_hw_reg_read(ah, 0x8050);
+	/* get lower 32-bit tsf timestamp from card */
+	ah->reg_log[1][ah->reg_current] = ath5k_hw_reg_read(ah, 0x804c);
+
+	/* freeze all MIB registers */
+	ath5k_hw_reg_write(ah, AR_MIBC, AR_MIBC_FMC);
+
+	/* read current MAC states from hardware registers
+	 * 0x80f8 -> MAC cycles (number of clock cycles at a given clock speed)
+	 *                      5GHz @20MHz -> tick freq. = 40MHz
+	 *                      5GHz @40MHz -> tick freq. = 80MHz
+	 *                      2.4GHz @20MHz -> tick freq. = 44MHz
+	 *                      2.4GHz @40MHz -> tick freq. = 88MHz
+	 * 0x80ec -> TX busy (number of cycles the transmitter unit is active)
+	 * 0x80f0 -> RX busy (number of cycles the receiver unit is active)
+	 * 0x80f4 -> MAC busy (sum of TX, RX and energy detection busy cycles) */
+	ah->reg_log[2][ah->reg_current] = ath5k_hw_reg_read(ah, 0x80f8); //MAC counter
+	ah->reg_log[3][ah->reg_current] = ath5k_hw_reg_read(ah, 0x80ec); //TX busy
+	ah->reg_log[4][ah->reg_current] = ath5k_hw_reg_read(ah, 0x80f0); //RX busy
+	ah->reg_log[5][ah->reg_current] = ath5k_hw_reg_read(ah, 0x80f4); //ED busy
+
+	/* un-freeze MIB registers */
+	ath5k_hw_reg_write(ah, AR_MIBC, 0);
+
+	/* read lower 32-bit tsf again to calc duration of MAC state readings */
+	ah->reg_log[6][ah->reg_current] = ath5k_hw_reg_read(ah, 0x804c);
+
+	/* if set, than read additional register values [7...MAX_REG_COUNT] */
+	for (i = 7; i < MAX_REG_COUNT; i++) {
+		if (ah->reg[7] != 0)
+			ah->reg_log[i][ah->reg_current] = ath5k_hw_reg_read(ah, ah->reg[i]);
+		else
+			ah->reg_log[i][ah->reg_current] = 0;
+	}
+
+	/* handle ring buffer writings */
+	spin_lock(&ah->reg_lock);
+	if (++ah->reg_current > REG_LOG_ROWS - 1)
+		ah->reg_current = 0;
+	if ((ah->reg_last == ah->reg_current) &&
+	    (++ah->reg_last > REG_LOG_ROWS - 1))
+		ah->reg_last = 0;
+	spin_unlock(&ah->reg_lock);
+
+	/* set sampling interval if changed */
+	if (ah->reg_interval > 0)
+		hrtimer_forward(hrtimer, ktime_get(), ns_to_ktime(ah->reg_interval));
+	else
+		hrtimer_forward(hrtimer, ktime_get(), ns_to_ktime(10000000));
+
+	return HRTIMER_RESTART;
+}
+#endif
+
 /***********************\
 * Driver Initialization *
 \***********************/
@@ -2536,8 +2685,13 @@ ath5k_init_ah(struct ath5k_hw *ah, const
 {
 	struct ieee80211_hw *hw = ah->hw;
 	struct ath_common *common;
-	int ret;
-	int csz;
+	int ret, csz;
+#ifdef CPTCFG_ATH5K_DEBUG
+	/* RegMon varaibles*/
+	int i;
+	char *name;
+	char text[32];
+#endif
 
 	/* Initialize driver private data */
 	SET_IEEE80211_DEV(hw, ah->dev);
@@ -2675,6 +2829,46 @@ ath5k_init_ah(struct ath5k_hw *ah, const
 
 	ath5k_debug_init_device(ah);
 
+#ifdef CPTCFG_ATH5K_DEBUG
+	/* RegMon debugfs entries */
+	ah->reg_hosttime = kmalloc(REG_LOG_ROWS * sizeof(s64), GFP_KERNEL);
+
+	for (i = 0; i < MAX_REG_COUNT; i++)
+		    ah->reg_log[i] = kmalloc(REG_LOG_ROWS * sizeof(u32), GFP_KERNEL);
+
+	ah->reg_lock = __SPIN_LOCK_UNLOCKED(regmon);
+	ah->reg_hz = HZ;
+
+	ah->debugfs_dir = debugfs_create_dir("regmon", ah->hw->wiphy->debugfsdir);
+	if (ah->debugfs_dir) {
+		debugfs_create_u32("sampling_interval", S_IWUSR | S_IRUSR,
+				   ah->debugfs_dir, &ah->reg_interval);
+		debugfs_create_u32("kernel_hz", S_IRUSR, ah->debugfs_dir,
+				   &ah->reg_hz);
+		debugfs_create_file("register_log", S_IRUSR, ah->debugfs_dir,
+				    ah, &reg_log_ops);
+
+		/* debugfs hocks to specify register adresses from user space */
+		for (i = 7; i < MAX_REG_COUNT; i++) {
+			sprintf(text, "register_%d", i);
+			name = text;
+			debugfs_create_x32(name, S_IWUSR | S_IRUSR,
+					   ah->debugfs_dir, &ah->reg[i]);
+		}
+
+		/* start hrtimers with default interval of 10.000.000 nsec */
+		ah->reg_interval = 10000000;
+		hrtimer_init(&ah->hrtm.timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+		ah->hrtm.timer.function = read_registers;
+
+		/* a certain delay seems to be needed for proper start */
+		usleep_range(10000000,20000000);
+		hrtimer_start(&ah->hrtm.timer, ah->hrtm.interval,
+			      HRTIMER_MODE_REL);
+		printk(KERN_ERR "ath9k debug: regmon started successfuly.\n");
+	}
+#endif
+
 	/* ready to process interrupts */
 	__clear_bit(ATH_STAT_INVALID, ah->status);
 
@@ -2778,8 +2972,8 @@ int ath5k_start(struct ieee80211_hw *hw)
 
 	for (i = 0; i < ARRAY_SIZE(ah->bslot); i++)
 		ah->bslot[i] = NULL;
-
 	ret = 0;
+
 done:
 	mmiowb();
 	mutex_unlock(&ah->lock);
@@ -3130,6 +3324,9 @@ ath5k_deinit_ah(struct ath5k_hw *ah)
 {
 	struct ieee80211_hw *hw = ah->hw;
 
+#ifdef CPTCFG_ATH5K_DEBUG
+	int i, res;
+#endif
 	/*
 	 * NB: the order of these is important:
 	 * o call the 802.11 layer before detaching ath5k_hw to
@@ -3157,6 +3354,22 @@ ath5k_deinit_ah(struct ath5k_hw *ah)
 	 */
 	ath5k_hw_deinit(ah);
 	free_irq(ah->irq, ah);
+
+#ifdef CPTCFG_ATH5K_DEBUG
+	/* RegMon stop */
+	printk(KERN_ERR "ath9k debug: RegMon stoped hrtimer \n");
+	ah->shutdown = 1;
+	//res = hrtimer_cancel(&ah->hrtm.timer);
+	res = hrtimer_try_to_cancel(&ah->hrtm.timer);
+	debugfs_remove_recursive(ah->debugfs_dir);
+
+	kfree(ah->reg_hosttime);
+
+	for (i = 0; i < 12; i++) {
+		    kfree(ah->reg_log[i]);
+	}
+	/* RegMon end */
+#endif
 }
 
 bool
--- a/drivers/net/wireless/ath/ath5k/ath5k.h
+++ b/drivers/net/wireless/ath/ath5k/ath5k.h
@@ -31,6 +31,17 @@
 #include <net/mac80211.h>
 #include <net/cfg80211.h>
 
+#ifdef CPTCFG_ATH5K_DEBUG
+	/* RegMon */
+	#include <linux/debugfs.h>
+	#include <linux/time.h>
+	#include <linux/hrtimer.h>
+	/* maximum number of 32-bit registers RegMon monitors */
+	#define MAX_REG_COUNT 12
+	/* maximum size RegMons ringbuffer in number of rows */
+	#define REG_LOG_ROWS 30000
+#endif
+
 /* RX/TX descriptor hw structs
  * TODO: Driver part should only see sw structs */
 #include "desc.h"
@@ -1254,6 +1265,14 @@ struct ath5k_statistics {
 
 DECLARE_EWMA(beacon_rssi, 1024, 8)
 
+#ifdef CPTCFG_ATH5K_DEBUG
+	/* RegMon hrtimer */
+	struct hrtimer_mod {
+		struct hrtimer timer;		/* the hrtime */
+		ktime_t interval;		/* interval in hrtimer_forward */
+	};
+#endif
+
 /* Driver state associated with an instance of a device */
 struct ath5k_hw {
 	struct ath_common       common;
@@ -1347,6 +1366,23 @@ struct ath5k_hw {
 
 	struct survey_info	survey;		/* collected survey info */
 
+#ifdef CPTCFG_ATH5K_DEBUG
+	/* RegMon */
+	s64			*reg_hosttime;
+	u32			reg_interval;
+	u32			reg_hz;
+	u32			reg[MAX_REG_COUNT];
+	u32			*reg_log[MAX_REG_COUNT];
+	int			reg_last;
+	int			reg_current;
+	int			reg_count;
+	int			shutdown;
+	spinlock_t		reg_lock;
+	struct dentry		*debugfs_dir;
+	struct timer_list	reg_timer;
+	struct hrtimer_mod	hrtm;
+#endif
+
 	enum ath5k_int		ah_imr;
 
 	struct ieee80211_channel *ah_current_channel;
